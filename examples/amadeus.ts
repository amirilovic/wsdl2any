import * as soap from "soap";

export class AmadeusWebServices {
    private wsdlUrl: string

    constructor(wsdlUrl: string) {
        this.wsdlUrl = wsdlUrl;
    }
    
    public Air_MultiAvailability(request: Air_MultiAvailabilityOperationRequest): Promise<Air_MultiAvailabilityOperationResponse> {
        return new Promise<Air_MultiAvailabilityOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Air_MultiAvailability"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Air_MultiAvailabilityOperationResponse);
                });
            });
        });
    }
    public Air_RetrieveSeatMap(request: Air_RetrieveSeatMapOperationRequest): Promise<Air_RetrieveSeatMapOperationResponse> {
        return new Promise<Air_RetrieveSeatMapOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Air_RetrieveSeatMap"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Air_RetrieveSeatMapOperationResponse);
                });
            });
        });
    }
    public Air_SellFromRecommendation(request: Air_SellFromRecommendationOperationRequest): Promise<Air_SellFromRecommendationOperationResponse> {
        return new Promise<Air_SellFromRecommendationOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Air_SellFromRecommendation"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Air_SellFromRecommendationOperationResponse);
                });
            });
        });
    }
    public Command_Cryptic(request: Command_CrypticOperationRequest): Promise<Command_CrypticOperationResponse> {
        return new Promise<Command_CrypticOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Command_Cryptic"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Command_CrypticOperationResponse);
                });
            });
        });
    }
    public FOP_CreateFormOfPayment(request: FOP_CreateFormOfPaymentOperationRequest): Promise<FOP_CreateFormOfPaymentOperationResponse> {
        return new Promise<FOP_CreateFormOfPaymentOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["FOP_CreateFormOfPayment"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as FOP_CreateFormOfPaymentOperationResponse);
                });
            });
        });
    }
    public Fare_CheckRules(request: Fare_CheckRulesOperationRequest): Promise<Fare_CheckRulesOperationResponse> {
        return new Promise<Fare_CheckRulesOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Fare_CheckRules"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Fare_CheckRulesOperationResponse);
                });
            });
        });
    }
    public Fare_GetFareFamilyDescription(request: Fare_GetFareFamilyDescriptionOperationRequest): Promise<Fare_GetFareFamilyDescriptionOperationResponse> {
        return new Promise<Fare_GetFareFamilyDescriptionOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Fare_GetFareFamilyDescription"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Fare_GetFareFamilyDescriptionOperationResponse);
                });
            });
        });
    }
    public Fare_InformativeBestPricingWithoutPNR(request: Fare_InformativeBestPricingWithoutPNROperationRequest): Promise<Fare_InformativeBestPricingWithoutPNROperationResponse> {
        return new Promise<Fare_InformativeBestPricingWithoutPNROperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Fare_InformativeBestPricingWithoutPNR"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Fare_InformativeBestPricingWithoutPNROperationResponse);
                });
            });
        });
    }
    public Fare_InformativePricingWithoutPNR(request: Fare_InformativePricingWithoutPNROperationRequest): Promise<Fare_InformativePricingWithoutPNROperationResponse> {
        return new Promise<Fare_InformativePricingWithoutPNROperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Fare_InformativePricingWithoutPNR"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Fare_InformativePricingWithoutPNROperationResponse);
                });
            });
        });
    }
    public Fare_MasterPricerCalendar(request: Fare_MasterPricerCalendarOperationRequest): Promise<Fare_MasterPricerCalendarOperationResponse> {
        return new Promise<Fare_MasterPricerCalendarOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Fare_MasterPricerCalendar"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Fare_MasterPricerCalendarOperationResponse);
                });
            });
        });
    }
    public Fare_MasterPricerTravelBoardSearch(request: Fare_MasterPricerTravelBoardSearchOperationRequest): Promise<Fare_MasterPricerTravelBoardSearchOperationResponse> {
        return new Promise<Fare_MasterPricerTravelBoardSearchOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Fare_MasterPricerTravelBoardSearch"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Fare_MasterPricerTravelBoardSearchOperationResponse);
                });
            });
        });
    }
    public Fare_PricePNRWithBookingClass(request: Fare_PricePNRWithBookingClassOperationRequest): Promise<Fare_PricePNRWithBookingClassOperationResponse> {
        return new Promise<Fare_PricePNRWithBookingClassOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Fare_PricePNRWithBookingClass"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Fare_PricePNRWithBookingClassOperationResponse);
                });
            });
        });
    }
    public Fare_PricePNRWithLowerFares(request: Fare_PricePNRWithLowerFaresOperationRequest): Promise<Fare_PricePNRWithLowerFaresOperationResponse> {
        return new Promise<Fare_PricePNRWithLowerFaresOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Fare_PricePNRWithLowerFares"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Fare_PricePNRWithLowerFaresOperationResponse);
                });
            });
        });
    }
    public Fare_PricePNRWithLowestFare(request: Fare_PricePNRWithLowestFareOperationRequest): Promise<Fare_PricePNRWithLowestFareOperationResponse> {
        return new Promise<Fare_PricePNRWithLowestFareOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Fare_PricePNRWithLowestFare"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Fare_PricePNRWithLowestFareOperationResponse);
                });
            });
        });
    }
    public Hotel_CompleteReservationDetails(request: Hotel_CompleteReservationDetailsOperationRequest): Promise<Hotel_CompleteReservationDetailsOperationResponse> {
        return new Promise<Hotel_CompleteReservationDetailsOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Hotel_CompleteReservationDetails"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Hotel_CompleteReservationDetailsOperationResponse);
                });
            });
        });
    }
    public Hotel_Sell(request: Hotel_SellOperationRequest): Promise<Hotel_SellOperationResponse> {
        return new Promise<Hotel_SellOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Hotel_Sell"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Hotel_SellOperationResponse);
                });
            });
        });
    }
    public PNR_AddMultiElements(request: PNR_AddMultiElementsOperationRequest): Promise<PNR_AddMultiElementsOperationResponse> {
        return new Promise<PNR_AddMultiElementsOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["PNR_AddMultiElements"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as PNR_AddMultiElementsOperationResponse);
                });
            });
        });
    }
    public PNR_Cancel(request: PNR_CancelOperationRequest): Promise<PNR_CancelOperationResponse> {
        return new Promise<PNR_CancelOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["PNR_Cancel"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as PNR_CancelOperationResponse);
                });
            });
        });
    }
    public PNR_Retrieve(request: PNR_RetrieveOperationRequest): Promise<PNR_RetrieveOperationResponse> {
        return new Promise<PNR_RetrieveOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["PNR_Retrieve"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as PNR_RetrieveOperationResponse);
                });
            });
        });
    }
    public PNR_Retrieve2(request: PNR_Retrieve2OperationRequest): Promise<PNR_Retrieve2OperationResponse> {
        return new Promise<PNR_Retrieve2OperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["PNR_Retrieve2"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as PNR_Retrieve2OperationResponse);
                });
            });
        });
    }
    public PNR_TransferOwnership(request: PNR_TransferOwnershipOperationRequest): Promise<PNR_TransferOwnershipOperationResponse> {
        return new Promise<PNR_TransferOwnershipOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["PNR_TransferOwnership"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as PNR_TransferOwnershipOperationResponse);
                });
            });
        });
    }
    public Queue_PlacePNR(request: Queue_PlacePNROperationRequest): Promise<Queue_PlacePNROperationResponse> {
        return new Promise<Queue_PlacePNROperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Queue_PlacePNR"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Queue_PlacePNROperationResponse);
                });
            });
        });
    }
    public Security_Authenticate(request: Security_AuthenticateOperationRequest): Promise<Security_AuthenticateOperationResponse> {
        return new Promise<Security_AuthenticateOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Security_Authenticate"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Security_AuthenticateOperationResponse);
                });
            });
        });
    }
    public Security_SignOut(request: Security_SignOutOperationRequest): Promise<Security_SignOutOperationResponse> {
        return new Promise<Security_SignOutOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Security_SignOut"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Security_SignOutOperationResponse);
                });
            });
        });
    }
    public Service_IntegratedCatalogue(request: Service_IntegratedCatalogueOperationRequest): Promise<Service_IntegratedCatalogueOperationResponse> {
        return new Promise<Service_IntegratedCatalogueOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Service_IntegratedCatalogue"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Service_IntegratedCatalogueOperationResponse);
                });
            });
        });
    }
    public Service_IntegratedPricing(request: Service_IntegratedPricingOperationRequest): Promise<Service_IntegratedPricingOperationResponse> {
        return new Promise<Service_IntegratedPricingOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Service_IntegratedPricing"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Service_IntegratedPricingOperationResponse);
                });
            });
        });
    }
    public Service_StandaloneCatalogue(request: Service_StandaloneCatalogueOperationRequest): Promise<Service_StandaloneCatalogueOperationResponse> {
        return new Promise<Service_StandaloneCatalogueOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Service_StandaloneCatalogue"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Service_StandaloneCatalogueOperationResponse);
                });
            });
        });
    }
    public Service_StandalonePricing(request: Service_StandalonePricingOperationRequest): Promise<Service_StandalonePricingOperationResponse> {
        return new Promise<Service_StandalonePricingOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Service_StandalonePricing"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Service_StandalonePricingOperationResponse);
                });
            });
        });
    }
    public Ticket_CreateTSMFromPricing(request: Ticket_CreateTSMFromPricingOperationRequest): Promise<Ticket_CreateTSMFromPricingOperationResponse> {
        return new Promise<Ticket_CreateTSMFromPricingOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Ticket_CreateTSMFromPricing"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Ticket_CreateTSMFromPricingOperationResponse);
                });
            });
        });
    }
    public Ticket_CreateTSTFromPricing(request: Ticket_CreateTSTFromPricingOperationRequest): Promise<Ticket_CreateTSTFromPricingOperationResponse> {
        return new Promise<Ticket_CreateTSTFromPricingOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Ticket_CreateTSTFromPricing"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Ticket_CreateTSTFromPricingOperationResponse);
                });
            });
        });
    }
    public Ticket_DisplayTSMP(request: Ticket_DisplayTSMPOperationRequest): Promise<Ticket_DisplayTSMPOperationResponse> {
        return new Promise<Ticket_DisplayTSMPOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Ticket_DisplayTSMP"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Ticket_DisplayTSMPOperationResponse);
                });
            });
        });
    }
    public Ticket_DisplayTST(request: Ticket_DisplayTSTOperationRequest): Promise<Ticket_DisplayTSTOperationResponse> {
        return new Promise<Ticket_DisplayTSTOperationResponse>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {attributesKey: '$attributes'}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["Ticket_DisplayTST"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as Ticket_DisplayTSTOperationResponse);
                });
            });
        });
    }
}


export interface SessionType {
    
    $attributes: SessionTypeAttributes
    
    // This element defines the unique identifier of the session.
    SessionId: string
    
    // This element defines the sequence number of the message in the session.
    SequenceNumber: string
    
    // This element defines a token to secure the session id.
    SecurityToken: string
    
}

export interface SessionTypeAttributes {
    
    // This attributes defines the status code of the session in a stateful flow.
    TransactionStatusCode: string
    
}

// A link to uniquely identify an end-user flow
export interface TransactionFlowLinkType {
    
    $attributes: TransactionFlowLinkTypeAttributes
    
    // Description of the client
    Consumer: Array<ConsumerType>
    
    // Description of the server
    Receiver: Array<ReceiverType>
    
}

export interface TransactionFlowLinkTypeAttributes {
    
}

// Description of an end-user
export interface ConsumerType {
    
    $attributes: ConsumerTypeAttributes
    
    // A unique id generated by the consumer to uniquely identify a client
    UniqueID: string
    
}

export interface ConsumerTypeAttributes {
    
}

// Description of the server
export interface ReceiverType {
    
    $attributes: ReceiverTypeAttributes
    
    // A unique id generated by the server to uniquely identify a link
    ServerID: string
    
}

export interface ReceiverTypeAttributes {
    
}


export interface AMA_SecurityHostedUserType {
    
    $attributes: AMA_SecurityHostedUserTypeAttributes
    
    // Specifies a user identifier
    UserID: UserIDType
    
    // Full Location of the workstation
    FullLocation: Array<LocationType>
    
    // Contains a workstation Identifier. It is used to retrieve the physical origin of the request (mainly for printing purposes).
    WorkstationID: Array<string>
    
    
    Application: Array<ApplicationType>
    
}

export interface AMA_SecurityHostedUserTypeAttributes {
    
}


export interface UserIDType extends PointOfSaleType {
    
    $attributes: UserIDTypeAttributes
    
}

export interface UserIDTypeAttributes extends PointOfSaleTypeAttributes {
    
    // Identifies the type of requestor. It can be &#39;U&#39; for &#39;UserId&#39; or &#39;Z&#39; for &#39;SignId&#39;.
    RequestorType: string
    
}

// Contains all data of a Point of Sale.
export interface PointOfSaleType {
    
    $attributes: PointOfSaleTypeAttributes
    
    // Standard identification of the requestor.
    RequestorID: Array<UniqueID_Type>
    
    
    BookingChannel: Array<BookingChannelType>
    
}

export interface PointOfSaleTypeAttributes {
    
    // Specifies a code for the type of the POS (i.e. last updator, owner...). Refer to the Amadeus POS type (POS) codeset list.
    POS_Type: string
    
    // An identification code assigned to an office/agency by a reservation system.
    PseudoCityCode: string
    
    // Agent sign of the user.
    AgentSign: string
    
    // Duty code of the user.
    AgentDutyCode: string
    
    // Electronic Reservation Service Provider (ERSP) assigned identifier used to identify the individual using the ERSP system.
    ERSP_UserID: string
    
    // The point of first departure in a trip.
    FirstDepartPoint: string
    
    // The true city code of the requesting party.
    TrueCityCode: string
    
    // The country code of the requesting party.
    ISO_Country: string
    
    // The currency code of the requesting party.
    ISO_Currency: string
    
    // Language preference.
    Language: string
    
    // The date corresponding to this point of sale action.
    Date: string
    
    // The time corresponding to this point of sale action.
    Time: string
    
    // To precise the time zone of the point of sale. LOC for local time or UTC.
    TimeZone: string
    
}

// An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).
export interface UniqueID_Type {
    
    $attributes: UniqueID_TypeAttributes
    
    // Identifies the company that is associated with the UniqueID.
    CompanyName: Array<CompanyNameType>
    
}

export interface UniqueID_TypeAttributes {
    
    // URL that identifies the location associated with the record identified by the UniqueID.
    URL: string
    
    // A reference to the type of object defined by the UniqueID element. Refer to IATA PADIS Code List for data elemet 9972.
    Type: string
    
    // The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
    Instance: string
    
    // Used to identify the source of the identifier (e.g., IATA, ABTA).
    ID_Context: string
    
}

// Identifies a company by name.
export interface CompanyNameType {
    
    $attributes: CompanyNameTypeAttributes
    
    
    _content: any
    
}

export interface CompanyNameTypeAttributes {
    
}


export interface BookingChannelType {
    
    $attributes: BookingChannelTypeAttributes
    
    
    CompanyName: Array<CompanyNameType1>
    
}

export interface BookingChannelTypeAttributes {
    
    // Channel type used by the POS.
    Type: string
    
}

// Identifies a company by name.
export interface CompanyNameType1 {
    
    $attributes: CompanyNameType1Attributes
    
    
    _content: any
    
}

export interface CompanyNameType1Attributes {
    
}

// Location of a device
export interface LocationType {
    
    $attributes: LocationTypeAttributes
    
    // Global location of the device (airport, city, etc.)
    Location: LocationType
    
    // Detailed description of the location
    LocationCategory: Array<CategoryType>
    
}

export interface LocationTypeAttributes {
    
}


export interface CategoryType {
    
    $attributes: CategoryTypeAttributes
    
}

export interface CategoryTypeAttributes {
    
    // The code value - Sample: 21
    Code: string
    
    // Which owner defined this code, may be one of OTA, IATA or AMA
    Owner: string
    
    // The name of the code list this code refers too - sample: Transportation Code
    ListName: string
    
    // The code of the code list this code refers too - sample: TRP
    ListCode: string
    
    // The textual value that describes the code - Sample: Train
    Desc: string
    
    
    IndexNumber: string
    
}

// Application identification
export interface ApplicationType {
    
    $attributes: ApplicationTypeAttributes
    
}

export interface ApplicationTypeAttributes {
    
    
    ApplicationLabel: string
    
    
    IndexNumber: string
    
}

// Used to convey any code. It may contain merely codes or integer codes associated to a value in AMA_CodeTable.xls
export interface CodeType {
    
    $attributes: CodeTypeAttributes
    
}

export interface CodeTypeAttributes {
    
    // The code value - Sample: 21
    Code: string
    
    // Which owner defined this code, may be one of OTA, IATA or AMA
    Owner: string
    
    // The name of the code list this code refers too - sample: Transportation Code
    ListName: string
    
    // The code of the code list this code refers too - sample: TRP
    ListCode: string
    
    // The textual value that describes the code - Sample: Train
    Desc: string
    
}

// Standard way to indicate successful processing of an Amadeus message, but one in which warnings are generated.
export interface WarningType {
    
    $attributes: WarningTypeAttributes
    
    
    _content: any
    
}

export interface WarningTypeAttributes {
    
}

// Standard way to indicate that an error occurred during the processing of an Amadeus message. If the message successfully processes, but there are business errors, those errors should be passed in the warning element.
export interface ErrorType {
    
    $attributes: ErrorTypeAttributes
    
    
    _content: any
    
}

export interface ErrorTypeAttributes {
    
}

// A collection of errors that occurred during the processing of a message.
export interface GenericWarningsType {
    
    $attributes: GenericWarningsTypeAttributes
    
    
    Warnings: Array<WarningsType>
    
    
    WarningsType11: Array<WarningsType1>
    
    
    WarningsType22: Array<WarningsType2>
    
}

export interface GenericWarningsTypeAttributes {
    
}

// A collection of Amadeus errors that occurred during the processing of a message.
export interface WarningsType {
    
    $attributes: WarningsTypeAttributes
    
    
    Warning: Array<ErrorType>
    
}

export interface WarningsTypeAttributes {
    
}

// Collection of warnings.
export interface WarningsType1 {
    
    $attributes: WarningsType1Attributes
    
    // Used in conjunction with the Success element to define a business error.
    Warning: Array<WarningType1>
    
}

export interface WarningsType1Attributes {
    
}

// Used when a message has been successfully processed to report any warnings or business errors that occurred.
export interface WarningType1 {
    
    $attributes: WarningType1Attributes
    
    
    _content: any
    
}

export interface WarningType1Attributes {
    
}

// A collection of warning information.
export interface WarningsType2 {
    
    $attributes: WarningsType2Attributes
    
    // Used in conjunction with the Success element to define a business error.
    Warning: Array<WarningType2>
    
}

export interface WarningsType2Attributes {
    
}

// Standard way to indicate successful processing of an IATA message, but one in which warnings are generated
export interface WarningType2 {
    
    $attributes: WarningType2Attributes
    
    
    _content: any
    
}

export interface WarningType2Attributes {
    
}

// A collection of errors that occurred during the processing of a message.
export interface GenericErrorsType {
    
    $attributes: GenericErrorsTypeAttributes
    
    
    Errors: Array<ErrorsType>
    
    
    ErrorsType11: Array<ErrorsType1>
    
    
    ErrorsType22: Array<ErrorsType2>
    
}

export interface GenericErrorsTypeAttributes {
    
}

// A collection of Amadeus errors that occurred during the processing of a message.
export interface ErrorsType {
    
    $attributes: ErrorsTypeAttributes
    
    
    Error: Array<ErrorType>
    
}

export interface ErrorsTypeAttributes {
    
}

// A collection of errors that occurred during the processing of a message.
export interface ErrorsType1 {
    
    $attributes: ErrorsType1Attributes
    
    // An error that occurred during the processing of a message.
    Error: Array<ErrorType1>
    
}

export interface ErrorsType1Attributes {
    
}

// Standard way to indicate that an error occurred during the processing of an OpenTravel message. If the message successfully processes, but there are business errors, those errors should be passed in the warning element.
export interface ErrorType1 {
    
    $attributes: ErrorType1Attributes
    
    
    _content: any
    
}

export interface ErrorType1Attributes {
    
}

// A collection of errors that occurred during the processing of a message.
export interface ErrorsType2 {
    
    $attributes: ErrorsType2Attributes
    
    
    Error: Array<ErrorType2>
    
}

export interface ErrorsType2Attributes {
    
}

// Standard way to indicate that an error occurred during the processing of an IATA message
export interface ErrorType2 {
    
    $attributes: ErrorType2Attributes
    
    
    _content: any
    
}

export interface ErrorType2Attributes {
    
}

// Basic structure of any webservice reply. Extend this type to implement a reply.
export interface ReplyType {
    
    $attributes: ReplyTypeAttributes
    
}

export interface ReplyTypeAttributes {
    
    // A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.
    EchoToken: string
    
    // Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).
    TimeStamp: string
    
    
    Target: string
    
    // Used to indicate the name of the Test or Production system.
    TargetName: string
    
    // For all OpenTravel versioned messages, the version of the message is indicated by a decimal value.
    Version: number
    
    // A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).
    TransactionIdentifier: string
    
    // Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.
    SequenceNmbr: number
    
    
    TransactionStatusCode: string
    
    // When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to TRUE) only when a message is retransmitted.
    RetransmissionIndicator: boolean
    
    // Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.
    CorrelationID: string
    
}

// Contains several Points of Sale.
export interface PointsOfSaleType {
    
    $attributes: PointsOfSaleTypeAttributes
    
    
    PointOfSale: Array<PointOfSaleType>
    
}

export interface PointsOfSaleTypeAttributes {
    
}

// Criteria Set (key/value map)
export interface CriteriaSetType {
    
    $attributes: CriteriaSetTypeAttributes
    
    
    Criteria: Array<CriteriaType>
    
}

export interface CriteriaSetTypeAttributes {
    
}


export interface CriteriaType {
    
    $attributes: CriteriaTypeAttributes
    
}

export interface CriteriaTypeAttributes {
    
    
    Key: string
    
    
    Value: string
    
}


export interface RawDataType {
    
    $attributes: RawDataTypeAttributes
    
    
    _content: any
    
}

export interface RawDataTypeAttributes {
    
}

// This complex type identifies payment cards that are acceptable for a specific form of payment, along with the ability to provide free text information regarding payment cards.
export interface AcceptablePaymentCardsInfoType {
    
    $attributes: AcceptablePaymentCardsInfoTypeAttributes
    
    // A collection of payment cards that are acceptable as a form of payment.
    AcceptablePaymentCards: Array<AcceptablePaymentCardsType>
    
    // General information regarding the use of payment cards.
    Info: Array<FormattedTextType>
    
}

export interface AcceptablePaymentCardsInfoTypeAttributes {
    
}


export interface AcceptablePaymentCardsType {
    
    $attributes: AcceptablePaymentCardsTypeAttributes
    
    // Specific information of one payment card that is acceptable as a form of payment.
    AcceptablePaymentCard: Array<AcceptablePaymentCardType>
    
}

export interface AcceptablePaymentCardsTypeAttributes {
    
}


export interface AcceptablePaymentCardType {
    
    $attributes: AcceptablePaymentCardTypeAttributes
    
}

export interface AcceptablePaymentCardTypeAttributes {
    
    // A code used to identify this payment card. Refer to OpenTravel Code List Card Type (CDT).
    CardType: string
    
    // The name used to describe this type of payment card, for example, American Express.
    CardName: string
    
    // If applicable, defines the percentage of the total amount that is incurred as a usage fee.
    UsagePercentage: number
    
    // If applicable, defines the additonal amount that is incurred as a usage fee.
    UsageAmount: number
    
}

// Collection of formatted text sub sections.
export interface FormattedTextType {
    
    $attributes: FormattedTextTypeAttributes
    
    // Subsection formatted text information.
    SubSection: Array<FormattedTextSubSectionType>
    
}

export interface FormattedTextTypeAttributes {
    
    // This attribute may be used to provide a title for the formatted free text, for example, Driving Directions. Each of the sub sections that are defined to be a part of the formatted text would provide detailed information about the subject identified by the title.
    Title: string
    
    // The language in which the content is provided.
    Language: string
    
}

// Used to provide subsection formatted text information.
export interface FormattedTextSubSectionType {
    
    $attributes: FormattedTextSubSectionTypeAttributes
    
    // Details and content of a paragraph for a formatted text message.
    Paragraph: Array<ParagraphType>
    
}

export interface FormattedTextSubSectionTypeAttributes {
    
    // This attribute may be used to provide a title for a sub-section of the formatted free text. A sub-section may have multiple related paragraphs of information. For example, if used to provide driving directions there may be multiple paragraphs, and these paragraphs may be grouped into a sub-section called &#34;Driving from the North&#34;. A second subsection may be titled &#34;Driving from the South&#34;, and may contain several paragraphs to describe the driving directions when driving from the south.
    SubTitle: string
    
    // An optional code that may be assigned to this sub-section of formatted free text.
    SubCode: string
    
    // This attribute may be used when there is a need to number all of the sub-sections of information that is to be presented.
    SubSectionNumber: number
    
}

// An indication of a new paragraph for a sub-section of a formatted text message.
export interface ParagraphType {
    
    $attributes: ParagraphTypeAttributes
    
}

export interface ParagraphTypeAttributes {
    
    // In many cases the description repeats, this will allow you to define the information that is being sent, typically used when multiple occurrences of ParagraphType are being sent.
    Name: string
    
    // The sequence number for the paragraph.
    ParagraphNumber: number
    
    // Time stamp of the creation.
    CreateDateTime: string
    
    // ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
    CreatorID: string
    
    // Time stamp of last modification.
    LastModifyDateTime: string
    
    // Identifies the last software system or person to modify a record.
    LastModifierID: string
    
    // Date an item will be purged from a database (e.g., from a live database to an archive).
    PurgeDate: string
    
    // The language ID for the associated content.
    Language: string
    
}

// Used to define the types of payments accepted.
export interface AcceptedPaymentsType {
    
    $attributes: AcceptedPaymentsTypeAttributes
    
    // An acceptable form of payment.
    AcceptedPayment: PaymentFormType
    
}

export interface AcceptedPaymentsTypeAttributes {
    
}

// Ways of providing funds and guarantees for travel by the individual.
export interface PaymentFormType {
    
    $attributes: PaymentFormTypeAttributes
    
}

export interface PaymentFormTypeAttributes {
    
    
    ShareSynchInd: string
    
    
    ShareMarketInd: string
    
    // A reference to identify the billing department for allocating cost of travel to company account.
    CostCenterID: string
    
    // Provides a reference to a specific form of payment.
    RPH: string
    
    
    PaymentTransactionTypeCode: string
    
    // When true, indicates this represents a guarantee rather than a payment form.
    GuaranteeIndicator: boolean
    
    // Used to specify the method of guarantee. Refer to OpenTravel Code List Payment Type (PMT).
    GuaranteeTypeCode: string
    
    // Provides the identifier as specified by the GuaranteeTypeCode (e.g., Corporate ID or IATA number).
    GuaranteeID: string
    
    // A remark associated with the payment form.
    Remark: string
    
}

// Information about an address that identifies a location for a specific purposes.
export interface AddressInfoType extends AddressType {
    
    $attributes: AddressInfoTypeAttributes
    
}

export interface AddressInfoTypeAttributes extends AddressTypeAttributes {
    
    // Describes the use of the address (e.g. mailing, delivery, billing, etc.). Refer to OpenTravel Code List Address Use Type (AUT).
    UseType: string
    
    // Used elsewhere in the message to reference this specific address.
    RPH: string
    
}

// Provides address information.
export interface AddressType {
    
    $attributes: AddressTypeAttributes
    
    // May contain the street number and optionally the street name.
    StreetNmbr: Array<StreetNmbrType>
    
    // Building name, room, apartment, or suite number.
    BldgRoom: Array<BldgRoomType>
    
    // When the address is unformatted (FormattedInd=&#34;false&#34;) these lines will contain free form address details. When the address is formatted and street number and street name must be sent independently, the street number will be sent using StreetNmbr, and the street name will be sent in the first AddressLine occurrence.
    AddressLine: Array<string>
    
    // City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
    CityName: Array<string>
    
    // Post Office Code number.
    PostalCode: Array<string>
    
    // County or Region Name (e.g., Fairfax).
    County: Array<string>
    
    // State or Province name (e.g., Texas).
    StateProv: Array<StateProvType>
    
    // Country name (e.g., Ireland).
    CountryName: Array<CountryNameType>
    
}

export interface AddressTypeAttributes {
    
    // Specifies if the associated data is formatted or not. When true, then it is formatted; when false, then not formatted.
    FormattedInd: boolean
    
    
    ShareSynchInd: string
    
    
    ShareMarketInd: string
    
    // Defines the type of address (e.g. home, business, other). Refer to OpenTravel Code List Communication Location Type (CLT).
    Type: string
    
    // A remark associated with this address.
    Remark: string
    
}


export interface StreetNmbrType {
    
    $attributes: StreetNmbrTypeAttributes
    
    
    _content: any
    
}

export interface StreetNmbrTypeAttributes {
    
}


export interface BldgRoomType {
    
    $attributes: BldgRoomTypeAttributes
    
    
    _content: any
    
}

export interface BldgRoomTypeAttributes {
    
}

// State, province, or region name or code needed to identify location.
export interface StateProvType {
    
    $attributes: StateProvTypeAttributes
    
    
    _content: any
    
}

export interface StateProvTypeAttributes {
    
}

// The name or code of a country (e.g. as used in an address or to specify citizenship of a traveller).
export interface CountryNameType {
    
    $attributes: CountryNameTypeAttributes
    
    
    _content: any
    
}

export interface CountryNameTypeAttributes {
    
}

// Customer bank accounts for payments, either for paper checks or electronic funds transfer.
export interface BankAcctType {
    
    $attributes: BankAcctTypeAttributes
    
    // The name the account is held under.
    BankAcctName: Array<string>
    
}

export interface BankAcctTypeAttributes {
    
    
    ShareSynchInd: string
    
    
    ShareMarketInd: string
    
    // Code assigned by authorities to financial institutions; sometimes called bank routing number.
    BankID: string
    
    // Describes the bank account used for financing travel (e.g., checking, savings, investment).
    AcctType: string
    
    // Identifier for the account assigned by the bank.
    BankAcctNumber: string
    
    // If true, checks are accepted. If false, checks are not accepted.
    ChecksAcceptedInd: boolean
    
    // The number of the check used for payment.
    CheckNumber: string
    
}

// Provides blackout date information.
export interface BlackoutDateType {
    
    $attributes: BlackoutDateTypeAttributes
    
    // Indicates black-out dates for the travel product/service.
    BlackoutDate: DateTimeSpanType
    
}

export interface BlackoutDateTypeAttributes {
    
}

// Used to specify a time window range by either specifying an earliest and latest date for the start date and end date or by giving a date with a time period that can be applied before and/or after the start date.
export interface DateTimeSpanType {
    
    $attributes: DateTimeSpanTypeAttributes
    
}

export interface DateTimeSpanTypeAttributes {
    
    // The starting value of the time span.
    Start: string
    
    // The duration datatype represents a combination of year, month, day and time values representing a single duration of time, encoded as a single string.
    Duration: string
    
    // The ending value of the time span.
    End: string
    
}

// Identifies the common, or core, information associated with the request for cancellation of a reservation or other type of record.
export interface CancelInfoRQType {
    
    $attributes: CancelInfoRQTypeAttributes
    
    // Sending own UniqueID and partner UniqueID - the receiving system needs to know which one - UniqueID acts as a reference for each system.
    UniqueID: Array<UniqueID_Type1>
    
    // The person&#39;s name in a reservation.
    PersonName: Array<PersonNameType>
    
}

export interface CancelInfoRQTypeAttributes {
    
    // Used to specify if this is to initiate a cancellation or to commit the cancellation.
    CancelType: string
    
}

// An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).
export interface UniqueID_Type1 {
    
    $attributes: UniqueID_Type1Attributes
    
    // Identifies the company that is associated with the UniqueID.
    CompanyName: Array<CompanyNameType1>
    
}

export interface UniqueID_Type1Attributes {
    
    // URL that identifies the location associated with the record identified by the UniqueID.
    URL: string
    
    // A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
    Type: string
    
    // The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
    Instance: string
    
    // Used to identify the source of the identifier (e.g., IATA, ABTA).
    ID_Context: string
    
}

// This provides name information for a person.
export interface PersonNameType {
    
    $attributes: PersonNameTypeAttributes
    
    // Salutation of honorific (e.g. Mr., Mrs., Ms., Miss, Dr.)
    NamePrefix: Array<string>
    
    // Given name, first name or names.
    GivenName: Array<string>
    
    // The middle name of the person name.
    MiddleName: Array<string>
    
    // The surname prefix, e.g &#34;van der&#34;, &#34;von&#34;, &#34;de&#34;.
    SurnamePrefix: Array<string>
    
    // Family name, last name. May also be used for full name if the sending system does not have the ability to separate a full name into its parts, e.g. the surname element may be used to pass the full name.
    Surname: string
    
    // Hold various name suffixes and letters (e.g. Jr., Sr., III, Ret., Esq.)
    NameSuffix: Array<string>
    
    // Degree or honors (e.g., Ph.D., M.D.)
    NameTitle: Array<string>
    
    // Document information for verification purposes and also used for additional filtering for common names.
    Document: Array<DocumentType>
    
}

export interface PersonNameTypeAttributes {
    
    
    ShareSynchInd: string
    
    
    ShareMarketInd: string
    
    // Type of name of the individual, such as former, nickname, alternate or alias name. Refer to OpenTravel Code List Name Type (NAM).
    NameType: string
    
}


export interface DocumentType {
    
    $attributes: DocumentTypeAttributes
    
}

export interface DocumentTypeAttributes {
    
    // Unique number assigned by authorities to document.
    DocID: string
    
    // Indicates the type of document (e.g. Passport, Military ID, Drivers License, national ID, Vaccination Certificate). Refer to OpenTravel Code List Document Type (DOC).
    DocType: string
    
}

// May contain rules associated with canceling a reservation as well as the supplier&#39;s cancellation number.
export interface CancelInfoRSType {
    
    $attributes: CancelInfoRSTypeAttributes
    
    // A collection of cancellation rules.
    CancelRules: Array<CancelRulesType>
    
    // Contains the supplier&#39;s cancellation number.
    UniqueID: Array<UniqueID_Type1>
    
}

export interface CancelInfoRSTypeAttributes {
    
}


export interface CancelRulesType {
    
    $attributes: CancelRulesTypeAttributes
    
    // Details of a cancellation rule.
    CancelRule: CancelRuleType
    
}

export interface CancelRulesTypeAttributes {
    
}

// Provides the cancellation amount due according to the time before the booking date that the cancellation occurs. The amount may be either an amount or a percentage (e.g. 50% within 30 days or $100 outside 30 days).
export interface CancelRuleType {
    
    $attributes: CancelRuleTypeAttributes
    
    // The card to be charged with the cancellation fee.
    PaymentCard: Array<PaymentCardType>
    
}

export interface CancelRuleTypeAttributes {
    
    // The date by which a cancellation must be made in order to avoid this cancellation penalty.
    CancelByDate: string
    
    // A monetary amount.
    Amount: number
    
    // The percentage to be applied for a cancellation.
    Percent: number
    
    
    Type: string
    
}

// Identification about a specific credit card.
export interface PaymentCardType {
    
    $attributes: PaymentCardTypeAttributes
    
    // Name of the card holder.
    CardHolderName: Array<string>
    
    // Issuer of the card.
    CardIssuerName: Array<CardIssuerNameType>
    
    // Card holder&#39;s address used for additional authorization checks.
    Address: Array<AddressType>
    
    // Card holder&#39;s telephone number used for additional authorization checks.
    Telephone: Array<TelephoneType>
    
    // Card holder&#39;s email address(es) used for additional authorization checks.
    Email: Array<EmailType>
    
    // Customer loyalty information used for additional authorization checks.
    CustLoyalty: Array<CustLoyaltyType>
    
    // Indicates if the signature is authorized as a form of guarantee. In some countries, the customer can sign the payment card slip as a form of guarantee.
    SignatureOnFile: Array<SignatureOnFileType>
    
    // Card Magnetic Stripe Data as defined by ISO 7813 for banking cards.
    MagneticStripe: Array<MagneticStripeType>
    
}

export interface PaymentCardTypeAttributes {
    
    
    ShareSynchInd: string
    
    
    ShareMarketInd: string
    
    // Indicates the type of magnetic striped card. Refer to OpenTravel Code List Card Type (CDT).
    CardType: string
    
    // The 2 character code of the credit card issuer.
    CardCode: string
    
    // Credit card number embossed on the card.
    CardNumber: string
    
    // Verification digits printed on the card following the embossed number. This may also accommodate the customer identification/batch number (CID), card verification value (CVV2 ), card validation code number (CVC2) on credit card.
    SeriesCode: string
    
    // Indicates the starting date.
    EffectiveDate: string
    
    // Indicates the ending date.
    ExpireDate: string
    
    // May be used to send a concealed credit card number (e.g., xxxxxxxxxxxx9922).
    MaskedCardNumber: string
    
    // Provides a reference pointer that links the payment card to the payment card holder.
    CardHolderRPH: string
    
    // When true, the credit card company is requested to delay the date on which the amount of this transaction is applied to the customer&#39;s account.
    ExtendPaymentIndicator: boolean
    
    // Code for the country where the credit card was issued.
    CountryOfIssue: string
    
    // A code used to specifiy the installment payment plan or number of payment installments.
    ExtendedPaymentQuantity: number
    
    // When true, the cardholder signature is on file.
    SignatureOnFileIndicator: boolean
    
    // Reference to the company sponsor for this particular card (e.g. a Universal Airline Travel Plan (UATP) card or any loyalty scheme sponsored card).
    CompanyCardReference: string
    
    // A remark associated with this payment card.
    Remark: string
    
    // Database key necessary to retrieve the full credit card (compliant with PCI DSS standards).
    EncryptionKey: string
    
}


export interface CardIssuerNameType {
    
    $attributes: CardIssuerNameTypeAttributes
    
}

export interface CardIssuerNameTypeAttributes {
    
    // Code of bank issuing the card.
    BankID: string
    
}


export interface TelephoneType {
    
    $attributes: TelephoneTypeAttributes
    
}

export interface TelephoneTypeAttributes {
    
    // Used elsewhere in the message to reference a specific telephone number (including faxes).
    RPH: string
    
}

// Electronic email addresses, in IETF specified format.
export interface EmailType {
    
    $attributes: EmailTypeAttributes
    
    
    _content: any
    
}

export interface EmailTypeAttributes {
    
}


export interface CustLoyaltyType {
    
    $attributes: CustLoyaltyTypeAttributes
    
}

export interface CustLoyaltyTypeAttributes {
    
    // Identifier to indicate the company owner of the loyalty program.
    ProgramID: string
    
    // Unique identifier of the member in the program (membership number, account number, etc.).
    MembershipID: string
    
    // Identifies the travel sector. Refer to OpenTravel Code List Travel Sector (TVS).
    TravelSector: string
    
    // A reference placeholder for this loyalty membership.
    RPH: string
    
    // Indicate the partner(s)/vendor(s) for which the customer loyalty number is valid.
    VendorCode: string
    
    // When true, indicates this is the primary customer loyalty program and when false, indicates this is not the primary customer loyalty program.
    PrimaryLoyaltyIndicator: boolean
    
    // Name of the alliance loyalty level (e.g.,OneWorld uses Emerald, Ruby, etc and SkyTeam uses Elite, etc.)
    AllianceLoyaltyLevelName: string
    
    // Original assessment of the customer by the travel agent.
    CustomerType: string
    
    // The supplier&#39;s ranking of the customer (e.g., VIP, numerical ranking).
    CustomerValue: string
    
    // The password for the member in the program.
    Password: string
    
}


export interface SignatureOnFileType {
    
    $attributes: SignatureOnFileTypeAttributes
    
}

export interface SignatureOnFileTypeAttributes {
    
    // When true, indicates a signature has been obtained.
    SignatureOnFileIndicator: boolean
    
    // Indicates the starting date.
    EffectiveDate: string
    
    // Indicates the ending date.
    ExpireDate: string
    
    // When true, indicates that the ExpireDate is the first day after the applicable period (e.g. when expire date is Oct 15 the last date of the period is Oct 14).
    ExpireDateExclusiveIndicator: boolean
    
}


export interface MagneticStripeType {
    
    $attributes: MagneticStripeTypeAttributes
    
}

export interface MagneticStripeTypeAttributes {
    
    
    Track1: string
    
    
    Track2: string
    
    
    Track3: string
    
}

// A collection of comments.
export interface CommentType {
    
    $attributes: CommentTypeAttributes
    
    // Comment details.
    Comment: CommentType
    
}

export interface CommentTypeAttributes {
    
}

// Contains details pertaining to commissions.
export interface CommissionType {
    
    $attributes: CommissionTypeAttributes
    
    // Identifies the recipient of the commission.
    UniqueID: Array<UniqueID_Type1>
    
    // The amount on which commission is calculated.
    CommissionableAmount: Array<CommissionableAmountType>
    
    // The amount of commission paid to the agency prior to the service being rendered.
    PrepaidAmount: Array<PrepaidAmountType>
    
    // A fixed commission amount.
    FlatCommission: Array<FlatCommissionType>
    
    // The amount of commission to be paid.
    CommissionPayableAmount: Array<CommissionPayableAmountType>
    
    // Text related to the commission.
    Comment: Array<ParagraphType>
    
}

export interface CommissionTypeAttributes {
    
    
    StatusType: string
    
    // The percent applied to the commissionable amount to determine the commission payable amount.
    Percent: number
    
    // The code specifying a monetary unit. Use ISO 4217, three alpha code.
    CurrencyCode: string
    
    // Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard &#34;minor unit&#34;. Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces=&#34;2&#34; to represent $85).
    DecimalPlaces: number
    
    // Identifies the reason why a commission is not paid or not paid in full.
    ReasonCode: string
    
    // Identifies who should be billed for the commission amount.
    BillToID: string
    
    // This is the frequency at which the commission is applied (e.g. per stay, daily). Refer to OpenTravel Code List Charge Type (CHG).
    Frequency: string
    
    // Maximum number of units for which the commission will be applied. This may be used in conjunction with the frequency attribute.
    MaxCommissionUnitApplies: number
    
    // The highest monetary value that may be paid for the commission.
    CapAmount: number
    
}


export interface CommissionableAmountType {
    
    $attributes: CommissionableAmountTypeAttributes
    
}

export interface CommissionableAmountTypeAttributes {
    
    // A monetary amount.
    Amount: number
    
    // When true, indicates that the commission is calculated using the rate including tax. When false, indicates that the commission is calculated using the net rate.
    TaxInclusiveIndicator: boolean
    
}


export interface PrepaidAmountType {
    
    $attributes: PrepaidAmountTypeAttributes
    
}

export interface PrepaidAmountTypeAttributes {
    
    // A monetary amount.
    Amount: number
    
}


export interface FlatCommissionType {
    
    $attributes: FlatCommissionTypeAttributes
    
}

export interface FlatCommissionTypeAttributes {
    
    // A monetary amount.
    Amount: number
    
}


export interface CommissionPayableAmountType {
    
    $attributes: CommissionPayableAmountTypeAttributes
    
}

export interface CommissionPayableAmountTypeAttributes {
    
    // A monetary amount.
    Amount: number
    
}

// To specify connection locations, preference level for each, min connection time, and whether location is specified for stopping or changing.
export interface ConnectionType {
    
    $attributes: ConnectionTypeAttributes
    
    // Specifies a connection location, preference level, min connection time, and whether the location is allowed for stopping or changing.
    ConnectionLocation: Array<ConnectionLocationType>
    
}

export interface ConnectionTypeAttributes {
    
}


export interface ConnectionLocationType {
    
    $attributes: ConnectionLocationTypeAttributes
    
    
    _content: any
    
}

export interface ConnectionLocationTypeAttributes {
    
}

// Name of an individual and appropriate contact information. May be contact information for the customer or someone affiliated with the customer.
export interface ContactPersonType {
    
    $attributes: ContactPersonTypeAttributes
    
    // This provides name information for a person.
    PersonName: Array<PersonNameType>
    
    // Information about a telephone number, including the actual number and its usage.
    Telephone: Array<TelephoneType>
    
    // Information about an address that identifies a location for a specific purposes.
    Address: Array<AddressInfoType>
    
    // Electronic email addresses, in IETF specified format.
    Email: Array<EmailType>
    
    // Web site address, in IETF specified format.
    URL: Array<URL_Type>
    
    // Identifies a company by name.
    CompanyName: Array<CompanyNameType1>
    
    // Employment identification; using an employee ID number, title, level within the company, and an indication of their status, i.e.: active, retired, on leave, or terminated from employment. Additional information about an employee can be entered into the element, including the name of the employee, if it differs from the person name identified as a customer or contact.
    EmployeeInfo: Array<EmployeeInfoType>
    
}

export interface ContactPersonTypeAttributes {
    
    
    ShareSynchInd: string
    
    
    ShareMarketInd: string
    
    // When true, indicates a default value should be used.
    DefaultInd: boolean
    
    // Type of contact in the context of use for the travel experience; such as permanent, temporary, affiliation, travel arranger, etc.
    ContactType: string
    
    // Indicates the type of relationship with the person or company in the profile, such as Spouse, Child, Family, Business Associate, Interest Group, Medical, Security,Other, etc.
    Relation: string
    
    // Indicates if this contact should be used in the case of an emergency.
    EmergencyFlag: boolean
    
    // Provides a unique reference to this contact person.
    RPH: string
    
    // Provides the preferred method of communication. Refer to OpenTravel Code list Distribution Type (DTB).
    CommunicationMethodCode: string
    
    // Indicates the method of distribution for the booking documentation. Refer to OpenTravel Code list Distribution Type (DTB).
    DocumentDistribMethodCode: string
    
}

// Web site address, in IETF specified format.
export interface URL_Type {
    
    $attributes: URL_TypeAttributes
    
    
    _content: any
    
}

export interface URL_TypeAttributes {
    
}

// Employment identification; using an employee ID number, title, level within the company, and an indication of their status (e.g., active, retired, on leave, or terminated from employment). Additional information about an employee can be entered into the element, including the name of the employee, if it differs from the person name identified as a customer or contact.
export interface EmployeeInfoType {
    
    $attributes: EmployeeInfoTypeAttributes
    
    
    _content: any
    
}

export interface EmployeeInfoTypeAttributes {
    
}

// Contains basic data on the customer&#39;s identity, location, relationships, finances, memberships, etc.
export interface CustomerType {
    
    $attributes: CustomerTypeAttributes
    
    // Detailed name information for the customer.
    PersonName: Array<PersonNameType>
    
    // Information on a telephone number for the customer.
    Telephone: Array<TelephoneType>
    
    // Information on an email address for the customer.
    Email: Array<EmailType>
    
    // Detailed information on an address for the customer.
    Address: Array<AddressType>
    
    // Information on a URL for the customer.
    URL: Array<URLType>
    
    // Name of the (self-professed) country that is claimed for citizenship.
    CitizenCountryName: Array<CitizenCountryNameType>
    
    // Describes the customer&#39;s physical challenge.
    PhysChallName: Array<PhysChallNameType>
    
    // Describes the customer&#39;s pet.
    PetInfo: Array<string>
    
    // Methods of providing funds and guarantees for travel by the customer.
    PaymentForm: Array<PaymentFormType>
    
    // Identifies a traveler associated with the customer.
    RelatedTraveler: Array<RelatedTravelerType>
    
    // Information on a contact person for the customer.
    ContactPerson: Array<ContactPersonType>
    
    // Detailed document information for the customer (e.g., driver license, passport, visa).
    Document: Array<DocumentType>
    
    // Loyalty program information for the customer.
    CustLoyalty: Array<CustLoyaltyType>
    
    // Employment information for the customer.
    EmployeeInfo: Array<EmployeeInfoType>
    
    // Identifies the customer&#39;s employer.
    EmployerInfo: Array<CompanyNameType1>
    
    // Additional languages spoken by the traveler.
    AdditionalLanguage: Array<AdditionalLanguageType>
    
    
    TPA_ExtensionsType16: Array<TPA_ExtensionsType>
    
}

export interface CustomerTypeAttributes {
    
    
    Gender: string
    
    // When true the customer is deceased.
    Deceased: boolean
    
    // Indicates reason for locking out record, such as Emergency, Incident, etc.
    LockoutType: string
    
    // Indicates the date of birth as indicated in the document, in ISO 8601 prescribed format.
    BirthDate: string
    
    // The code specifying a monetary unit. Use ISO 4217, three alpha code.
    CurrencyCode: string
    
    // Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard &#34;minor unit&#34;. Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces=&#34;2&#34; to represent $85).
    DecimalPlaces: number
    
    // If true, indicates a very important person.
    VIP_Indicator: boolean
    
    // Used to specify textual information about the customer.
    Text: string
    
    // The language ID for the associated content.
    Language: string
    
    // The supplier&#39;s ranking of the customer (e.g., VIP, numerical ranking).
    CustomerValue: string
    
    
    MaritalStatus: string
    
    // When true, indicates the customer was previously married. When false, indicates the customer was not previously married.
    PreviouslyMarriedIndicator: boolean
    
    // The number of children of the customer.
    ChildQuantity: number
    
}


export interface URLType extends URL_Type {
    
    $attributes: URLTypeAttributes
    
}

export interface URLTypeAttributes extends URL_TypeAttributes {
    
    // Indicates under what conditions this element will be transfered to the booking.
    TransferAction: string
    
}


export interface CitizenCountryNameType {
    
    $attributes: CitizenCountryNameTypeAttributes
    
}

export interface CitizenCountryNameTypeAttributes {
    
    // A 2 character country code as defined in ISO3166.
    Code: string
    
}


export interface PhysChallNameType {
    
    $attributes: PhysChallNameTypeAttributes
    
    
    _content: any
    
}

export interface PhysChallNameTypeAttributes {
    
}

// Other traveler profiles associated with an specific individual.
export interface RelatedTravelerType {
    
    $attributes: RelatedTravelerTypeAttributes
    
    // Identifies the profile of the related traveler.
    UniqueID: Array<UniqueID_Type1>
    
    // Person associated with the traveler.
    PersonName: Array<PersonNameType>
    
}

export interface RelatedTravelerTypeAttributes {
    
    
    ShareSynchInd: string
    
    
    ShareMarketInd: string
    
    // Indicates the type of relationship with the person in the profile, such as Spouse, Child, Family, Business Associate, Interest Group, Medical, Security, Other, etc.
    Relation: string
    
    // Indicates the date of birth as indicated in the document, in ISO 8601 prescribed format.
    BirthDate: string
    
}


export interface AdditionalLanguageType {
    
    $attributes: AdditionalLanguageTypeAttributes
    
}

export interface AdditionalLanguageTypeAttributes {
    
    // Code for the language spoken by the customer.
    Code: string
    
}

// Allows extensions to be added to the OpenTravel specification per trading partner agreement.
export interface TPA_ExtensionsType {
    
    $attributes: TPA_ExtensionsTypeAttributes
    
}

export interface TPA_ExtensionsTypeAttributes {
    
}

// Company name and location for sending invoice for remittances for travel services.
export interface DirectBillType {
    
    $attributes: DirectBillTypeAttributes
    
    // Company name to whom remittance should be directed.
    CompanyName: Array<CompanyNameType1>
    
    // Address where remittance should be directed.
    Address: Array<AddressInfoType>
    
    // Email address to which remittance should be directed.
    Email: Array<EmailType>
    
    // Telephone number associated with company to whom remittance is being directed.
    Telephone: Array<TelephoneType>
    
}

export interface DirectBillTypeAttributes {
    
    
    ShareSynchInd: string
    
    
    ShareMarketInd: string
    
    // Identifier for the organization to be billed directly for travel services.
    DirectBill_ID: string
    
    // The number assigned by the subscriber for billing reconciliation of a corporate account.
    BillingNumber: string
    
}

// Provides information about donations made during a booking.
export interface DonationType {
    
    $attributes: DonationTypeAttributes
    
    // The identifying fields for the front office for a Massive Good donation: Product Name, Product version, Office ID and Corporate ID.
    FrontOfficeInfo: Array<FrontOfficeInfoType>
    
    // Donation credit card information.
    CreditCardInfo: CreditCardInfoType
    
    // Donor information, including Email Address, First Name, Last Name, Street Address, City and Zip Code.
    DonorInfo: Array<DonorInfoType>
    
}

export interface DonationTypeAttributes {
    
    // The localized error response language.
    Language: string
    
    
    GDS_ID: string
    
    // If true, the donor wants a donation receipt.
    AskForReceiptInd: boolean
    
    // The 2 character ISO3166 country code of the donor.
    CountryCode: string
    
    // The origin state of the donor.
    StateCode: string
    
}


export interface FrontOfficeInfoType {
    
    $attributes: FrontOfficeInfoTypeAttributes
    
}

export interface FrontOfficeInfoTypeAttributes {
    
    // The Massive Good/ Amadeus Donation Service product name.
    ProductName: string
    
    // The Massive Good/ Amadeus Donation Service product version.
    ProductVersion: string
    
    // The Massive Good/ Amadeus Donation Service office ID.
    OfficeID: string
    
    // The Massive Good/ Amadeus Donation Service corporate ID.
    CorporateID: string
    
}


export interface CreditCardInfoType extends PaymentCardType {
    
    $attributes: CreditCardInfoTypeAttributes
    
}

export interface CreditCardInfoTypeAttributes extends PaymentCardTypeAttributes {
    
    // The donation currency code (ISO 4217.)
    Currency: string
    
    // The donation amount.
    DonationAmount: number
    
}


export interface DonorInfoType {
    
    $attributes: DonorInfoTypeAttributes
    
    // The donor name.
    Name: Array<NameType>
    
    // Donor address and email address information.
    ContactInfo: Array<ContactInfoType>
    
}

export interface DonorInfoTypeAttributes {
    
}


export interface NameType extends PersonNameType {
    
    $attributes: NameTypeAttributes
    
}

export interface NameTypeAttributes extends PersonNameTypeAttributes {
    
}


export interface ContactInfoType extends AddressType {
    
    $attributes: ContactInfoTypeAttributes
    
}

export interface ContactInfoTypeAttributes extends AddressTypeAttributes {
    
    // The donor email address.
    EmailAddress: string
    
}

// Specifies the aircraft equipment type.
export interface EquipmentType {
    
    $attributes: EquipmentTypeAttributes
    
    
    _content: any
    
}

export interface EquipmentTypeAttributes {
    
}

// Used for non-tax fees and charges (e.g. service charges) .
export interface FeeType {
    
    $attributes: FeeTypeAttributes
    
    // Used for taxes on the associated fee.
    Taxes: Array<TaxesType>
    
    // Text description of the fees in a given language.
    Description: Array<ParagraphType>
    
}

export interface FeeTypeAttributes {
    
    // Indicates whether taxes are included when figuring the fees.
    TaxInclusive: boolean
    
    // Used to indicate if the amount is inclusive or exclusive of other charges, such as taxes, or is cumulative (amounts have been added to each other).
    Type: string
    
    // Code identifying the fee (e.g.,agency fee, municipality fee). Refer to OpenTravel Code List Fee Tax Type (FTT).
    Code: string
    
    // Fee percentage; if zero, assume use of the Amount attribute (Amount or Percent must be a zero value).
    Percent: number
    
    // Indicates the starting date.
    EffectiveDate: string
    
    // Indicates the ending date.
    ExpireDate: string
    
    // When true, indicates that the ExpireDate is the first day after the applicable period (e.g. when expire date is Oct 15 the last date of the period is Oct 14).
    ExpireDateExclusiveIndicator: boolean
    
    // When true, indicates the fee is mandatory. When false, the fee is not mandatory.
    MandatoryIndicator: boolean
    
    // An index code to identify an instance in a collection of like items.
    RPH: string
    
    // This is the unit for which the charge applies (e.g. room, person, seat). Refer to OpenTravel Code List Charge Type (CHG).
    ChargeUnit: string
    
    // This is the timeframe used to apply the charge during the course of the reservation (e.g. Daily, Weekly, Stay). Refer to OpenTravel Code List Charge Type (CHG).
    ChargeFrequency: string
    
    // Number of units permitted before charges are applied (e.g., more than 4 persons).
    ChargeUnitExempt: number
    
    // ChargeFrequency exemptions before charges are applied (e.g. after 2 nights).
    ChargeFrequencyExempt: number
    
    // Maximum number of Units for which the charge will be applied (e.g., waive charges above 10 rooms).
    MaxChargeUnitApplies: number
    
    // Maximum number of times the charge will be applied (e.g. waive charges above 30 nights).
    MaxChargeFrequencyApplies: number
    
    // When true, indicates that the fee is subject to tax.
    TaxableIndicator: boolean
    
}

// A collection of taxes.
export interface TaxesType {
    
    $attributes: TaxesTypeAttributes
    
    // An individual tax.
    Tax: Array<TaxType>
    
}

export interface TaxesTypeAttributes {
    
    // A monetary amount.
    Amount: number
    
}

// Applicable tax element. This element allows for both percentages and flat amounts. If one field is used, the other should be zero since logically, taxes should be calculated in only one of the two ways.
export interface TaxType {
    
    $attributes: TaxTypeAttributes
    
    // Text description of the taxes in a given language.
    TaxDescription: Array<ParagraphType>
    
}

export interface TaxTypeAttributes {
    
    // Used to indicate if the amount is inclusive or exclusive of other charges, such as taxes, or is cumulative (amounts have been added to each other).
    Type: string
    
    // Code identifying the fee (e.g.,agency fee, municipality fee). Refer to OpenTravel Code List Fee Tax Type (FTT).
    Code: string
    
    // Fee percentage; if zero, assume use of the Amount attribute (Amount or Percent must be a zero value).
    Percent: number
    
    // Indicates the starting date.
    EffectiveDate: string
    
    // Indicates the ending date.
    ExpireDate: string
    
    // When true, indicates that the ExpireDate is the first day after the applicable period (e.g. when expire date is Oct 15 the last date of the period is Oct 14).
    ExpireDateExclusiveIndicator: boolean
    
    // This is the unit for which the charge applies (e.g. room, person, seat). Refer to OpenTravel Code List Charge Type (CHG).
    ChargeUnit: string
    
    // This is the timeframe used to apply the charge during the course of the reservation (e.g. Daily, Weekly, Stay). Refer to OpenTravel Code List Charge Type (CHG).
    ChargeFrequency: string
    
    // Number of units permitted before charges are applied (e.g., more than 4 persons).
    ChargeUnitExempt: number
    
    // ChargeFrequency exemptions before charges are applied (e.g. after 2 nights).
    ChargeFrequencyExempt: number
    
    // Maximum number of Units for which the charge will be applied (e.g., waive charges above 10 rooms).
    MaxChargeUnitApplies: number
    
    // Maximum number of times the charge will be applied (e.g. waive charges above 30 nights).
    MaxChargeFrequencyApplies: number
    
}

// A collection of fees.
export interface FeesType {
    
    $attributes: FeesTypeAttributes
    
    // Fee Amount that is applied to the rate. Fees are used for non tax amounts like service charges.
    Fee: FeeType
    
}

export interface FeesTypeAttributes {
    
}

// Construct for holding a flight segment availability object.
export interface FlightSegmentBaseType {
    
    $attributes: FlightSegmentBaseTypeAttributes
    
    // Departure point of flight segment.
    DepartureAirport: Array<DepartureAirportType>
    
    // Arrival point of flight segment.
    ArrivalAirport: Array<ArrivalAirportType>
    
    // The operating airline of the flight if it is a codeshare flight.
    OperatingAirline: Array<OperatingAirlineType>
    
    // The type of equipment used for the flight.
    Equipment: Array<EquipmentType>
    
}

export interface FlightSegmentBaseTypeAttributes {
    
    // The date and time of the flight segment departure.
    DepartureDateTime: string
    
    // Specifies the arrival date and time of a flight.
    ArrivalDateTime: string
    
    // The number of stops the flight makes.
    StopQuantity: number
    
    // Reference place holder for this flight segment.
    RPH: string
    
    // Used to specify the source of the data being exchanged as determined by trading partners.
    InfoSource: string
    
}


export interface DepartureAirportType {
    
    $attributes: DepartureAirportTypeAttributes
    
}

export interface DepartureAirportTypeAttributes {
    
    // Location code used to identify a specific airport.
    LocationCode: string
    
    // Identifies the context of the identifying code, such as IATA, ARC, or internal code, etc.
    CodeContext: string
    
    // Arrival or departure terminal (e.g., Concourse A)
    Terminal: string
    
    // Arrival or departure gate (e.g., B12)
    Gate: string
    
}


export interface ArrivalAirportType {
    
    $attributes: ArrivalAirportTypeAttributes
    
}

export interface ArrivalAirportTypeAttributes {
    
    // Location code used to identify a specific airport.
    LocationCode: string
    
    // Identifies the context of the identifying code, such as IATA, ARC, or internal code, etc.
    CodeContext: string
    
    // Arrival or departure terminal (e.g., Concourse A)
    Terminal: string
    
    // Arrival or departure gate (e.g., B12)
    Gate: string
    
}

// Identifies the operating carrier and flight number.
export interface OperatingAirlineType {
    
    $attributes: OperatingAirlineTypeAttributes
    
    
    _content: any
    
}

export interface OperatingAirlineTypeAttributes {
    
}

// Provides text and indicates whether it is formatted or not.
export interface FormattedTextTextType {
    
    $attributes: FormattedTextTextTypeAttributes
    
    
    _content: any
    
}

export interface FormattedTextTextTypeAttributes {
    
}

// Textual information to provide descriptions and/or additional information.
export interface FreeTextType {
    
    $attributes: FreeTextTypeAttributes
    
    
    _content: any
    
}

export interface FreeTextTypeAttributes {
    
}

// Describes an image item.
export interface ImageDescriptionType {
    
    $attributes: ImageDescriptionTypeAttributes
    
    // A set of images for a given category which may be provided in multiple formats.
    ImageFormat: Array<ImageFormatType>
    
    // The description associated with the image in a specific language.
    Description: Array<DescriptionType>
    
}

export interface ImageDescriptionTypeAttributes {
    
    // Specifies the image category. Refer to OpenTravel Code list Picture Category Code (PIC).
    Category: string
    
}


export interface ImageFormatType extends ImageItemType {
    
    $attributes: ImageFormatTypeAttributes
    
}

export interface ImageFormatTypeAttributes extends ImageItemTypeAttributes {
    
    // The language in which the image text is provided.
    Language: string
    
    // Identifies the format of an image. Refer to OpenTravel Code List Content Format Code (CFC).
    Format: string
    
    // The name of the image file.
    FileName: string
    
    // The size of the image file.
    FileSize: number
    
    // Associates the image size to a given category (e.g., 70x70, 100x100, 480x480, thumbnail). For example, if an image with a dimension of 72x73 is sent, it may be categorized as a 70x70 image.
    DimensionCategory: string
    
    // When true, the image is the original file and format. When false, the image is not the original file and format.
    IsOriginalIndicator: boolean
    
}

// Details for an image of a given category.
export interface ImageItemType {
    
    $attributes: ImageItemTypeAttributes
    
    // URL of the multimedia item for a specific format.
    URL: Array<string>
    
}

export interface ImageItemTypeAttributes {
    
    // The unit of measure for the image item. Refer to OpenTravel Code list Unit of Measure (UOM).
    UnitOfMeasureCode: string
    
    // The width of the image item (unit specified by unit of measure).
    Width: number
    
    // The height of the image item (unit specified by unit of measure).
    Height: number
    
}


export interface DescriptionType {
    
    $attributes: DescriptionTypeAttributes
    
    
    _content: any
    
}

export interface DescriptionTypeAttributes {
    
}

// Collection of image items.
export interface ImageItemsType {
    
    $attributes: ImageItemsTypeAttributes
    
    // Image of a given category.
    ImageItem: ImageItemType
    
}

export interface ImageItemsTypeAttributes {
    
}

// Identifies the criterion for a search.
export interface ItemSearchCriterionType {
    
    $attributes: ItemSearchCriterionTypeAttributes
    
    // The Position element contains three attributes, Latitude, Longitude, and Altitude, used to indicate the geographic location(s) requested by the search, expressed in notation specified by ISO standard 6709. It is likely that only the first two attributes, Latitude and Longitude, would be needed to define a geographic area.
    Position: Array<PositionType>
    
    // Uses any part of address information, such as street name, postal code, or country code.
    Address: Array<AddressType>
    
    // Telephone number(s) used in the search.
    Telephone: Array<TelephoneType>
    
    // The Reference Point element allows for a search by proximity to a designated reference point by name.
    RefPoint: Array<RefPointType>
    
    // Indicates the location of points of interest.
    CodeRef: Array<CodeRefType>
    
    // Indicates the detail of hotel reference information.
    HotelRef: Array<HotelRefType>
    
    // Used to specify the extent of a search area. The extent is relative to an element (position, address, hotel reference, etc.) present in this ItemSearchCriterionType that specifies a location.
    Radius: Array<RadiusType>
    
    // Provides coordinates used to define the area of a map.
    MapArea: Array<MapAreaType>
    
}

export interface ItemSearchCriterionTypeAttributes {
    
    // Values of &#34;true&#34; or &#34;false&#34;, indicating whether the string of the search value must be an exact match.
    ExactMatch: boolean
    
    
    ImportanceType: string
    
    // Defines a ranking scale expressed as integers; meaning and scale are based on individual implementations.
    Ranking: number
    
}


export interface PositionType {
    
    $attributes: PositionTypeAttributes
    
}

export interface PositionTypeAttributes {
    
    // The measure of the angular distance on a meridian north or south of the equator.
    Latitude: string
    
    // The measure of the angular distance on a meridian east or west of the prime meridian.
    Longitude: string
    
    // The height of an item, typically above sea level.
    Altitude: string
    
    // Provides the unit of measure for the altitude (e.g., feet, meters, miles, kilometers). Refer to OpenTravel Code List Unit of Measure Code (UOM).
    AltitudeUnitOfMeasureCode: string
    
    // Indicates the accuracy of the property’s geo-coding, since the property’s longitude and latitude may not always be exact. Refer to OpenTravel Code List Position Accuracy Code (PAC).
    PositionAccuracy: string
    
}


export interface RefPointType {
    
    $attributes: RefPointTypeAttributes
    
    
    _content: any
    
}

export interface RefPointTypeAttributes {
    
}


export interface CodeRefType {
    
    $attributes: CodeRefTypeAttributes
    
    
    _content: any
    
}

export interface CodeRefTypeAttributes {
    
}


export interface HotelRefType {
    
    $attributes: HotelRefTypeAttributes
    
}

export interface HotelRefTypeAttributes {
    
    // The code that identifies a hotel chain or management group. The hotel chain code is decided between vendors. This attribute is optional if the hotel is an independent property that can be identified by the HotelCode attribute.
    ChainCode: string
    
    // A code that identifies the brand or flag of a hotel, often used for independently-owned or franchised properties who are known by a specific brand.
    BrandCode: string
    
    // The code that uniquely identifies a single hotel property. The hotel code is decided between vendors.
    HotelCode: string
    
    // The IATA city code; for example DCA, ORD.
    HotelCityCode: string
    
    // A text field used to communicate the proper name of the hotel.
    HotelName: string
    
    // A text field used to communicate the context (or source of - ex Sabre, Galileo, Worldspan, Amadeus) the HotelReferenceGroup codes.
    HotelCodeContext: string
    
    // The name of the hotel chain (e.g., Hilton, Marriott, Hyatt, Starwood).
    ChainName: string
    
    // The name of a brand of hotels (e.g., Courtyard, Hampton Inn).
    BrandName: string
    
    // Used to search for hotels within a particular market segment. Refer to OpenTravel Code Segment Category Code Type (SEG).
    SegmentCategoryCode: string
    
    // Refer to OpenTravel Code list OpenTravel Code List Property Class Type (PCT).
    PropertyClassCode: string
    
    // Refer to OpenTravel Code List Architectural Style Code (ARC).
    ArchitecturalStyleCode: string
    
    // The level of integration of a property to provide automated transaction information. The lower the number, the higher the integration (e.g., a 1 means the supplier has the highest level of integration automation).
    SupplierIntegrationLevel: number
    
    // Used to search for hotels in a specific location category (e.g. downtown, airport or suburban, etc.). Refer to OpenTravel Code List Location Category Codes (LOC).
    LocationCategoryCode: string
    
    // When true indicates the search should be performed beyond the hotel city code, typically this could include neighboring cities to the specified hotel city code.
    ExtendedCitySearchIndicator: boolean
    
}


export interface RadiusType {
    
    $attributes: RadiusTypeAttributes
    
}

export interface RadiusTypeAttributes {
    
    // An optional attribute indicating the distance to/from a reference point. When used in conjunction with DistanceMax, this represents the minimum distance.
    Distance: string
    
    // When the Distance attribute contains a value, (presumably a numerical value), the unit of measure is a string value that indicate what units are used for the value.
    DistanceMeasure: string
    
    // An optional string value used to indicate the compass point(s) direction, e.g.: S, SE (South, Southeast), FROM the Reference Point TO the hotel location if the search is not a full circumference from the reference point.
    Direction: string
    
    // An optional attribute indicating the maximum distance to/from a reference point.
    DistanceMax: string
    
    // The unit of measure in a code format. Refer to OpenTravel Code List Unit of Measure Code (UOM).
    UnitOfMeasureCode: string
    
}


export interface MapAreaType {
    
    $attributes: MapAreaTypeAttributes
    
}

export interface MapAreaTypeAttributes {
    
    // The latitude of the northern boundary of the map.
    NorthLatitude: string
    
    // The latitude of the southern boundary of the map.
    SouthLatitude: string
    
    // The longitude of the eastern boundary of the map.
    EastLongitude: string
    
    // The longitude of the western boundary of the map.
    WestLongitude: string
    
}

// Provides high-level information regarding a location.
export interface LocationGeneralType {
    
    $attributes: LocationGeneralTypeAttributes
    
    // City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
    CityName: Array<string>
    
    // State or Province name (e.g., Texas).
    StateProv: Array<StateProvType>
    
    // Country name (e.g., Ireland).
    CountryName: Array<CountryNameType>
    
}

export interface LocationGeneralTypeAttributes {
    
}

// Code and optional string to describe a location point.
export interface LocationType1 {
    
    $attributes: LocationType1Attributes
    
    
    _content: any
    
}

export interface LocationType1Attributes {
    
}

// Information to acknowledge the receipt of a message.
export interface MessageAcknowledgementType {
    
    $attributes: MessageAcknowledgementTypeAttributes
    
    // May be used to return the unique id from the request message.
    UniqueID: Array<UniqueID_Type1>
    
    
    TPA_ExtensionsType1: Array<TPA_ExtensionsType>
    
}

export interface MessageAcknowledgementTypeAttributes {
    
    // A reference for additional message identification, assigned by the requesting host system. When a request message includes an echo token the corresponding response message MUST include an echo token with an identical value.
    EchoToken: string
    
    // Indicates the creation date and time of the message in UTC using the following format specified by ISO 8601; YYYY-MM-DDThh:mm:ssZ with time values using the 24 hour clock (e.g. 20 November 2003, 1:59:38 pm UTC becomes 2003-11-20T13:59:38Z).
    TimeStamp: string
    
    
    Target: string
    
    // Used to indicate the name of the Test or Production system.
    TargetName: string
    
    // For all OpenTravel versioned messages, the version of the message is indicated by a decimal value.
    Version: number
    
    // A unique identifier to relate all messages within a transaction (e.g. this would be sent in all request and response messages that are part of an on-going transaction).
    TransactionIdentifier: string
    
    // Used to identify the sequence number of the transaction as assigned by the sending system; allows for an application to process messages in a certain order or to request a resynchronization of messages in the event that a system has been off-line and needs to retrieve messages that were missed.
    SequenceNmbr: number
    
    
    TransactionStatusCode: string
    
    // When true, indicates the message is being re-sent after a failure. It is recommended that this attribute is used (i.e., set to TRUE) only when a message is retransmitted.
    RetransmissionIndicator: boolean
    
    // Allow end-to-end correlation of log messages with the corresponding Web service message throughout the processing of the Web service message.
    CorrelationID: string
    
}

// This defines the information pertaining to rules and amounts associated with these rules.
export interface MonetaryRuleType {
    
    $attributes: MonetaryRuleTypeAttributes
    
    
    _content: any
    
}

export interface MonetaryRuleTypeAttributes {
    
}

// Contains multimedia item(s).
export interface MultimediaDescriptionsType {
    
    $attributes: MultimediaDescriptionsTypeAttributes
    
    // A multimedia item.
    MultimediaDescription: MultimediaDescriptionType
    
}

export interface MultimediaDescriptionsTypeAttributes {
    
    // The date and time when the collection of multimedia information was last updated.
    LastUpdated: string
    
}

// Describes multimedia item(s).
export interface MultimediaDescriptionType {
    
    $attributes: MultimediaDescriptionTypeAttributes
    
}

export interface MultimediaDescriptionTypeAttributes {
    
    // Used to designate a particular type of description such as marketing. Refer to OpenTravel Code List Information Type (INF).
    InfoCode: string
    
    // Used to designate a particular type of additional information. Refer to OpenTravel Code List Additional Detail Type (ADT).
    AdditionalDetailCode: string
    
    // A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
    ID: string
    
    // The date and time when the multimedia information was last updated.
    LastUpdated: string
    
    // The version of the content, typically in the form of &#34;1&#34; or &#34;2.3.&#34;
    Version: string
    
}

// Details of an operating schedule (e.g. a golf tee time may be more expensive during peak hours v. off peak hours).
export interface OperationScheduleType {
    
    $attributes: OperationScheduleTypeAttributes
    
    // A collection of OperationTimes.
    OperationTimes: Array<OperationTimesType>
    
}

export interface OperationScheduleTypeAttributes {
    
    // The starting value of the time span.
    Start: string
    
    // The duration datatype represents a combination of year, month, day and time values representing a single duration of time, encoded as a single string.
    Duration: string
    
    // The ending value of the time span.
    End: string
    
}


export interface OperationTimesType {
    
    $attributes: OperationTimesTypeAttributes
    
    // Provides operating times of a facility.
    OperationTime: Array<OperationTimeType>
    
}

export interface OperationTimesTypeAttributes {
    
}


export interface OperationTimeType {
    
    $attributes: OperationTimeTypeAttributes
    
}

export interface OperationTimeTypeAttributes {
    
    // When true, apply to Monday.
    Mon: boolean
    
    // When true, apply to Tuesday.
    Tue: boolean
    
    // When true, apply to Wednesday.
    Weds: boolean
    
    // When true, apply to Thursday.
    Thur: boolean
    
    // When true, apply to Friday.
    Fri: boolean
    
    // When true, apply to Saturday.
    Sat: boolean
    
    // When true, apply to Sunday.
    Sun: boolean
    
    // The starting value of the time span.
    Start: string
    
    // The duration datatype represents a combination of year, month, day and time values representing a single duration of time, encoded as a single string.
    Duration: string
    
    // The ending value of the time span.
    End: string
    
    // Used to provide additional information regarding operation times (e.g., after hours operations, restricted times). Refer to OpenTravel Code List Additional Operation Info (OPR).
    AdditionalOperationInfoCode: string
    
    // The frequency with which this operation occurs (e.g., &#39;on the hour&#39;, &#39;on the half hour&#39;).
    Frequency: string
    
    // Textual information for this period of operation.
    Text: string
    
}

// Collection of operation schedules.
export interface OperationSchedulesType {
    
    $attributes: OperationSchedulesTypeAttributes
    
    // The OperationSchedule class defines the dates and hours of operation.
    OperationSchedule: Array<OperationScheduleType>
    
}

export interface OperationSchedulesTypeAttributes {
    
    // The starting value of the time span.
    Start: string
    
    // The duration datatype represents a combination of year, month, day and time values representing a single duration of time, encoded as a single string.
    Duration: string
    
    // The ending value of the time span.
    End: string
    
}

// This allows a charge to be associated with operating times (e.g. a golf tee time may be more expensive during peak hours v. off peak hours).
export interface OperationSchedulePlusChargeType extends OperationScheduleType {
    
    $attributes: OperationSchedulePlusChargeTypeAttributes
    
    // Cost associated with an amenity.
    Charge: Array<FeeType>
    
}

export interface OperationSchedulePlusChargeTypeAttributes extends OperationScheduleTypeAttributes {
    
}

// The OperationSchedule class defines the dates and hours of operation in addition the charges that may apply.
export interface OperationSchedulesPlusChargeType {
    
    $attributes: OperationSchedulesPlusChargeTypeAttributes
    
    // The OperationSchedule class defines details the dates and hours of operation.
    OperationSchedule: Array<OperationScheduleType>
    
}

export interface OperationSchedulesPlusChargeTypeAttributes {
    
}

// Provides the details of one or more orders.
export interface OrdersType {
    
    $attributes: OrdersTypeAttributes
    
    // Information pertaining to a specific order.
    Order: Array<OrderType>
    
}

export interface OrdersTypeAttributes {
    
    // Identifies the type of orders.
    OrderType: string
    
    // A discount code that applies to the orders.
    DiscountCode: string
    
    // The purchase order number of a sales intermediary.
    VendorPurchaseOrderID: string
    
    // The identification number associated to the orders.
    OrderID: string
    
}


export interface OrderType {
    
    $attributes: OrderTypeAttributes
    
    // A collection of products.
    Products: Array<ProductsType>
    
}

export interface OrderTypeAttributes {
    
    // Identifies the type of order.
    OrderType: string
    
    // The identification number associated to the orders.
    OrderID: string
    
    // The recipient(s) to whom the order pertains.
    ListOfRecipientRPH: string
    
}


export interface ProductsType {
    
    $attributes: ProductsTypeAttributes
    
    // The details associated to a specific product.
    Product: Array<ProductType>
    
}

export interface ProductsTypeAttributes {
    
}


export interface ProductType {
    
    $attributes: ProductTypeAttributes
    
}

export interface ProductTypeAttributes {
    
    // The date or date and time that the product was issued.
    ProductIssueDate: string
    
    // An identification number associated to the specific product.
    ProductID: string
    
    // Identifies the type of product being purchased.
    ProductType: string
    
    // The number of the specific product being purchased.
    ProductQuantity: number
    
    // The serial number of the specific product.
    ProductSerialNumber: string
    
    // The discount code that applies to the specific product.
    DiscountCode: string
    
    // A monetary amount.
    Amount: number
    
    
    Status: string
    
    // The recipient(s) to whom the product pertains.
    ListOfRecipientRPH: string
    
}

// Origin and Destination location, and time information for the request. Also includes the ability to specify a connection location for the search.
export interface OriginDestinationInformationType extends TravelDateTimeType {
    
    $attributes: OriginDestinationInformationTypeAttributes
    
    // Travel Origin Location - for example, air uses the IATA 3 letter code.
    OriginLocation: OriginLocationType
    
    // Travel Destination Location - for example, air uses the IATA 3 letter code.
    DestinationLocation: DestinationLocationType
    
    // Travel Connection Location - for example, air uses the IATA 3 letter code.
    ConnectionLocations: Array<ConnectionType>
    
}

export interface OriginDestinationInformationTypeAttributes extends TravelDateTimeTypeAttributes {
    
}

// Date and time of trip that allows specifying a time window before and after the given date.
export interface TravelDateTimeType {
    
    $attributes: TravelDateTimeTypeAttributes
    
}

export interface TravelDateTimeTypeAttributes {
    
}


export interface OriginLocationType {
    
    $attributes: OriginLocationTypeAttributes
    
    
    _content: any
    
}

export interface OriginLocationTypeAttributes {
    
}


export interface DestinationLocationType {
    
    $attributes: DestinationLocationTypeAttributes
    
    
    _content: any
    
}

export interface DestinationLocationTypeAttributes {
    
}

// Point of Sale (POS) identifies the party or connection channel making the request.
export interface POS_Type {
    
    $attributes: POS_TypeAttributes
    
    // This holds the details about the requestor. It may be repeated to also accommodate the delivery systems.
    Source: Array<SourceType>
    
}

export interface POS_TypeAttributes {
    
}

// Provides information on the source of a request.
export interface SourceType {
    
    $attributes: SourceTypeAttributes
    
    // An identifier of the entity making the request (e.g. ATA/IATA/ID number, Electronic Reservation Service Provider (ERSP), Association of British Travel Agents.(ABTA)).
    RequestorID: Array<RequestorIDType>
    
    // Specifies the latitude and longitude of a source.
    Position: Array<PositionType>
    
    // Specifies the booking channel type and whether it is the primary means of connectivity of the source.
    BookingChannel: Array<BookingChannelType1>
    
}

export interface SourceTypeAttributes {
    
    // Identifies the party within the requesting entity.
    AgentSine: string
    
    // An identification code assigned to an office/agency by a reservation system.
    PseudoCityCode: string
    
    // The country code of the requesting party.
    ISOCountry: string
    
    // The currency code in which the reservation will be ticketed.
    ISOCurrency: string
    
    // An authority code assigned to a requestor.
    AgentDutyCode: string
    
    // The IATA assigned airline code.
    AirlineVendorID: string
    
    // The IATA assigned airport code.
    AirportCode: string
    
    // The point of first departure in a trip.
    FirstDepartPoint: string
    
    // Electronic Reservation Service Provider (ERSP) assigned identifier used to identify the individual using the ERSP system.
    ERSP_UserID: string
    
    // This is the electronic address of the device from which information is entered.
    TerminalID: string
    
}


export interface RequestorIDType extends UniqueID_Type1 {
    
    $attributes: RequestorIDTypeAttributes
    
}

export interface RequestorIDTypeAttributes extends UniqueID_Type1Attributes {
    
    // This password provides an additional level of security that the recipient can use to validate the sending party&#39;s authority to use the message.
    MessagePassword: string
    
}


export interface BookingChannelType1 {
    
    $attributes: BookingChannelType1Attributes
    
    // Identifies the company that is associated with the booking channel.
    CompanyName: Array<CompanyNameType1>
    
}

export interface BookingChannelType1Attributes {
    
    // The type of booking channel (e.g. Global Distribution System (GDS), Alternative Distribution System (ADS), Sales and Catering System (SCS), Property Management System (PMS), Central Reservation System (CRS), Tour Operator System (TOS), Internet and ALL). Refer to OpenTravel Code List Booking Channel Type (BCT).
    Type: string
    
    // Indicates whether the enumerated booking channel is the primary means of connectivity used by the source.
    Primary: boolean
    
}

// Details of payment.
export interface PaymentDetailType extends PaymentFormType {
    
    $attributes: PaymentDetailTypeAttributes
    
    // Provides the monetary amount due for payment as quoted. A second instance could show the actual paid amount in a different currency.
    PaymentAmount: Array<PaymentAmountType>
    
    // Used to specify the commission details when paid to a third or internal party.
    Commission: Array<CommissionType>
    
}

export interface PaymentDetailTypeAttributes extends PaymentFormTypeAttributes {
    
    // Used to specify the form of payment. Refer to OpenTravel Code List Payment Type (PMT).
    PaymentType: string
    
    // When true, indicates that more than one form of payment will be used.
    SplitPaymentInd: boolean
    
    // Number of days being charged to this payment method.
    AuthorizedDays: number
    
    // When true, indicates this is the primary method of payment.
    PrimaryPaymentInd: boolean
    
}


export interface PaymentAmountType {
    
    $attributes: PaymentAmountTypeAttributes
    
}

export interface PaymentAmountTypeAttributes {
    
    // A monetary amount.
    Amount: number
    
    // The approval code returned as part of an authorization process.
    ApprovalCode: string
    
}

// Collection of payment rules.
export interface PaymentRulesType {
    
    $attributes: PaymentRulesTypeAttributes
    
    // One specific payment rule associated with this reservation. For example, a date by which a deposit must be received.
    PaymentRule: Array<MonetaryRuleType>
    
}

export interface PaymentRulesTypeAttributes {
    
}

// The RateQualifierType complex type describes fully rate information associated with a specific rate quotation, including the description of any promotions that may apply.
export interface RateQualifierType {
    
    $attributes: RateQualifierTypeAttributes
    
    // This may be used to provide additional information about the promotion code.
    PromoDesc: Array<string>
    
    // Collection of rate comments.
    RateComments: Array<RateCommentsType>
    
}

export interface RateQualifierTypeAttributes {
    
    // Used to indicate the purpose, whether for business, personal or other. Refer to OpenTravel Code List Travel Purpose (TVP).
    TravelPurpose: string
    
    // The RateCategory attribute defines a set of valid values for the category of a rate. Typically rates are offered as either Leisure rates or Business (Corporate) rates, with a business rate usually including additional costs such as the cost of insurance, etc. This set of values defines the rate categories. Refer to OpenTravel Code List Rate Category (RTC).
    RateCategory: string
    
    // This is the vendor specific code used to identify a special rate associated with a specific organization.
    CorpDiscountNmbr: string
    
    // This is the vendor specific code for rate codes (e.g. WES, 2A, DLY00).
    RateQualifier: string
    
    
    RatePeriod: string
    
    // When true, only guaranteed rates should be returned. When false, all rates should be returned.
    GuaranteedInd: boolean
    
    // Indicates if this rate is only available to those customers who are flying to the vehicle rental location.
    ArriveByFlight: boolean
    
    // The rate authorization code for this rate.
    RateAuthorizationCode: string
    
    // The identifier assigned to this rate by the vendor.
    VendorRateID: string
    
}


export interface RateCommentsType {
    
    $attributes: RateCommentsTypeAttributes
    
    // This may be used to provide any additional information about rates (e.g., must return by Monday at 8 AM).
    RateComment: Array<RateCommentType>
    
}

export interface RateCommentsTypeAttributes {
    
}


export interface RateCommentType {
    
    $attributes: RateCommentTypeAttributes
    
    
    _content: any
    
}

export interface RateCommentTypeAttributes {
    
}

// Information about one or more recipients.
export interface RecipientInfosType {
    
    $attributes: RecipientInfosTypeAttributes
    
    // Contact and/or reservation information pertaining to the recipient.
    RecipientInfo: Array<RecipientInfoType>
    
}

export interface RecipientInfosTypeAttributes {
    
}


export interface RecipientInfoType extends ContactPersonType {
    
    $attributes: RecipientInfoTypeAttributes
    
    // Provides the reservation number of the recipient for delivery of the product.
    ReservationID: Array<UniqueID_Type1>
    
    // Informtion pertaining to the shipment of a product to the recipient.
    ShippingInfo: Array<ShippingInfoType>
    
    // A collection of comments.
    Comments: Array<CommentsType>
    
}

export interface RecipientInfoTypeAttributes extends ContactPersonTypeAttributes {
    
}


export interface ShippingInfoType {
    
    $attributes: ShippingInfoTypeAttributes
    
}

export interface ShippingInfoTypeAttributes {
    
    // The method of shipment (e.g., air, ground, pickup).
    ShippingType: string
    
    // The shipping carrier (e.g., USPS, UPS, FedEx).
    ShippingCarrier: string
    
    // A monetary amount.
    Amount: number
    
}


export interface CommentsType {
    
    $attributes: CommentsTypeAttributes
    
    // Comment information pertaining to the purchase. This may be used to pass a message to be printed on a note card.
    Comment: Array<ParagraphType>
    
}

export interface CommentsTypeAttributes {
    
}

// Used to provide a reference to an object that is stored elsewhere in a collection of the same objects.
export interface ReferencePlaceHolderType {
    
    $attributes: ReferencePlaceHolderTypeAttributes
    
}

export interface ReferencePlaceHolderTypeAttributes {
    
    // The unique reference for an object within this message.
    RPH: string
    
}

// The RelativePosition object contains information about the direction, distance and travel time to/from a facility (hotel, car rental location, or airport) or to/from a designated location.
export interface RelativePositionType extends TransportationsType {
    
    $attributes: RelativePositionTypeAttributes
    
}

export interface RelativePositionTypeAttributes extends TransportationsTypeAttributes {
    
    // The indicator for whether this location is nearest.
    Nearest: boolean
    
    // This is the object referred to by the relative position (e.g. cross street, airport). Refer to OpenTravel Code List Index Point Code (IPC).
    IndexPointCode: string
    
    // This is used to accommodate a city name, rail station name etc. when using the indexPoint attribute.
    Name: string
    
    // Indicates whether the reference point is considered the main reference point for the specific type of IndexPointCode (e.g., in Dallas, where IndexPointCode=airport Dallas/Fort Worth airport would be the primary airport even if another airport such as Love Field is closer).
    PrimaryIndicator: boolean
    
    
    ToFrom: string
    
    // When true, the distance information is approximate.
    ApproximateDistanceInd: boolean
    
}

// Used to define the types of transportation offered.
export interface TransportationsType {
    
    $attributes: TransportationsTypeAttributes
    
    // Collection of directions to/from a specific location via various modes of transportation.
    Transportations: Array<TransportationType>
    
}

export interface TransportationsTypeAttributes {
    
}

// Defines the type of transportation offered.
export interface TransportationType {
    
    $attributes: TransportationTypeAttributes
    
    // Detailed transportation information.
    Transportation: TransportationType
    
}

export interface TransportationTypeAttributes {
    
}

// Information associated with a specific restaurant.
export interface RestaurantType {
    
    $attributes: RestaurantTypeAttributes
    
    // Multimedia information about the restaurant.
    MultimediaDescriptions: Array<MultimediaDescriptionsType>
    
    // Indicates the directions to a specific restaurant.
    RelativePosition: Array<RelativePositionType>
    
    // Collection of operating times for the restaurant including detail such as season, day of week, or a combination.
    OperationSchedules: Array<OperationSchedulesPlusChargeType>
    
    // Collection of types of restaurant.
    InfoCodes: Array<InfoCodesType>
    
    // Collection of cuisine types of restaurant.
    CuisineCodes: Array<CuisineCodesType>
    
    // Descriptive text that describes the restaurant.
    DescriptiveText: Array<string>
    
}

export interface RestaurantTypeAttributes {
    
    // The name of the restaurant at the facility.
    RestaurantName: string
    
    // The total seating capacity for this restaurant.
    MaxSeatingCapacity: number
    
    // The maximum number of people that can be seated as a single party in this restaurant.
    MaxSingleParty: number
    
    // Identification code of the restaurant service or facility for inventory and booking purposes if the service is an inventoriable item.
    InvCode: string
    
    
    OfferBreakfast: boolean
    
    
    OfferLunch: boolean
    
    
    OfferDinner: boolean
    
    
    OfferBrunch: boolean
    
    // Denotes whether a service is onsite, offsite or information is not available. Refer to OpenTravel Code Table Proximity (PRX).
    ProximityCode: string
    
    // A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
    ID: string
    
    // Used to define the display order.
    Sort: number
    
}


export interface InfoCodesType {
    
    $attributes: InfoCodesTypeAttributes
    
    // Indicates the generic type of restaurant such as fast food, cafe, fine dining, etc.
    InfoCode: InfoCodeType
    
}

export interface InfoCodesTypeAttributes {
    
}


export interface InfoCodeType {
    
    $attributes: InfoCodeTypeAttributes
    
}

export interface InfoCodeTypeAttributes {
    
    
    Name: string
    
    // Refer to OpenTravel Code List Restaurant Category (RES).
    Code: string
    
    // May be used to give further detail on the code.
    CodeDetail: string
    
}


export interface CuisineCodesType {
    
    $attributes: CuisineCodesTypeAttributes
    
    // The code for the type of cuisine served at the restaurant.
    CuisineCode: CuisineCodeType
    
}

export interface CuisineCodesTypeAttributes {
    
}


export interface CuisineCodeType {
    
    $attributes: CuisineCodeTypeAttributes
    
}

export interface CuisineCodeTypeAttributes {
    
    // Refer to OpenTravel Code List Main Cuisine Code (CUI).
    Code: string
    
    // May be used to give further detail on the code.
    CodeDetail: string
    
    // Indicates whether this cuisine code is the main cuisine offered by restaurant.
    IsMain: boolean
    
    // This attribute is used to explicitly define whether the Code applies. Refer to OpenTravel Code list Option Type Code (OTC). This is used in conjunction with Code.
    ExistsCode: string
    
}

// A collection of SpecialRequest objects. The collection of all special requests associated with any part of the reservation (the reservation in its entirety, one or more guests, or one or more room stays). Which special requests belong to which part is determined by each object&#39;s SpecialRequestRPHs collection.
export interface SpecialRequestType {
    
    $attributes: SpecialRequestTypeAttributes
    
    // The SpecialRequest object indicates special requests for a particular guest, service or reservation. Each of these may be independent of any that are tied to the profile (see Profile Synchronization standard).
    SpecialRequest: SpecialRequestType
    
}

export interface SpecialRequestTypeAttributes {
    
}

// Returning an empty element of this type indicates the successful processing of an OpenTravel message. This is used in conjunction with the Warning Type to report any warnings or business errors.
export interface SuccessType {
    
    $attributes: SuccessTypeAttributes
    
}

export interface SuccessTypeAttributes {
    
}

// Describes a text item.
export interface TextDescriptionType {
    
    $attributes: TextDescriptionTypeAttributes
    
}

export interface TextDescriptionTypeAttributes {
    
    // Specifies the text category. Refer to OpenTravel Code list Picture Category Code (PIC).
    Category: string
    
    // The content ID of a file attachment with the prefix &#39;cid:&#39;. The value of this can be used to retrieve the corresponding attachment by the receiving system.
    ContentID: string
    
    // The title of the multimedia object.
    Title: string
    
    // The author of the multimedia object.
    Author: string
    
    // A copyright notice for the multimedia object.
    CopyrightNotice: string
    
    // Owner of the copyright for the multimedia content.
    CopyrightOwner: string
    
    // The start date for which the multimedia content rights are claimed.
    CopyrightStart: string
    
    // The end date for which the multimedia content rights are claimed.
    CopyrightEnd: string
    
    // The start date for which the content is considered valid.
    EffectiveStart: string
    
    // The end date for which the content is considered valid.
    EffectiveEnd: string
    
    // Start month and day or date for which the multimedia content is relevent (e.g. the start of a season or the start of an event). When a year is not used (i.e. only the month and day) it signifies a recurring event.
    ApplicableStart: string
    
    // End month and day or date for which the multimedia content is relevent (e.g. the end of a season or the start of an event). When a year is not used (i.e. only the month and day) it signifies a recurring event.
    ApplicableEnd: string
    
    // Uniquely identifies this file in the message.
    RecordID: string
    
    // Unique identifier for the source of the multimedia object (e.g., the original image file).
    SourceID: string
    
    // The language of the text item.
    Language: string
    
}

// Collection of text items.
export interface TextItemsType {
    
    $attributes: TextItemsTypeAttributes
    
    // Text description of a given category.
    TextItem: TextItemType
    
}

export interface TextItemsTypeAttributes {
    
}


export interface TextItemType extends TextDescriptionType {
    
    $attributes: TextItemTypeAttributes
    
}

export interface TextItemTypeAttributes extends TextDescriptionTypeAttributes {
    
    // The version of the text item.
    Version: string
    
}

// Used to specify a time period, which may additionally include a minimum and/or maximum duration.
export interface TimeDurationType {
    
    $attributes: TimeDurationTypeAttributes
    
    
    _content: any
    
}

export interface TimeDurationTypeAttributes {
    
}

// Specifies a time window.
export interface TimeInstantType {
    
    $attributes: TimeInstantTypeAttributes
    
    
    _content: any
    
}

export interface TimeInstantTypeAttributes {
    
}

// The total amount charged for the service including additional amounts and fees.
export interface TotalType {
    
    $attributes: TotalTypeAttributes
    
    // A collection of taxes.
    Taxes: Array<TaxesType>
    
}

export interface TotalTypeAttributes {
    
    // The total amount not including any associated tax (e.g., sales tax, VAT, GST or any associated tax).
    AmountBeforeTax: number
    
    // The total amount including all associated taxes (e.g., sales tax, VAT, GST or any associated tax).
    AmountAfterTax: number
    
    // The code specifying a monetary unit. Use ISO 4217, three alpha code.
    CurrencyCode: string
    
    // Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard &#34;minor unit&#34;. Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces=&#34;2&#34; to represent $85).
    DecimalPlaces: number
    
    // When true, amounts do not contain additional fees or charges.
    AdditionalFeesExcludedIndicator: boolean
    
    // Type of charge. Refer to OpenTravel Code List Charge Type (CHG).
    Type: string
    
    // When true indicates that the service amount has been overridden.
    ServiceOverrideIndicator: boolean
    
    // When true indicates that the rate amount has been overridden.
    RateOverrideIndicator: boolean
    
    // This amount includes markup and taxes.
    AmountIncludingMarkup: number
    
}

// A container to relate individual travelers to an inventory or chargeable item.
export interface TravelerRPHs {
    
    $attributes: TravelerRPHsAttributes
    
    // Provides a pointer to a traveler defined elsewhere in this message.
    TravelerRPH: Array<TravelerRPHType>
    
}

export interface TravelerRPHsAttributes {
    
}


export interface TravelerRPHType {
    
    $attributes: TravelerRPHTypeAttributes
    
}

export interface TravelerRPHTypeAttributes {
    
    // A pointer to identify a traveler defined elsewhere in this message.
    RPH: string
    
}

// Provides formatted textual information that a vendor wishes to make known. The type of information is indicated.
export interface VendorMessageType extends FormattedTextType {
    
    $attributes: VendorMessageTypeAttributes
    
}

export interface VendorMessageTypeAttributes extends FormattedTextTypeAttributes {
    
    // To define the type of information such as Description, Policy, Marketing, etc. Refer to OpenTravel Code List Information Type (INF).
    InfoType: string
    
}

// Collection of vendor messages.
export interface VendorMessagesType {
    
    $attributes: VendorMessagesTypeAttributes
    
    // A specific message associated with this vendor.
    VendorMessage: Array<VendorMessageType>
    
}

export interface VendorMessagesTypeAttributes {
    
}

// Collection of data used to ensure the correct reservation is canceled or modified (e.g. in the case of a hotel reservation modification, a CustLoyalty/ MembershipID would be verified as part of the reservation that you plan to modify to ensure the correct reservation is being modified).
export interface VerificationType {
    
    $attributes: VerificationTypeAttributes
    
    // Detailed name information.
    PersonName: Array<PersonNameType>
    
    // Information on an email address.
    Email: Array<EmailType>
    
    // Information on a telephone number.
    TelephoneInfo: Array<TelephoneInfoType>
    
    // Payment Card information.
    PaymentCard: Array<PaymentCardType>
    
    // Detailed information on an address.
    AddressInfo: Array<AddressInfoType>
    
    // Loyalty program information.
    CustLoyalty: Array<CustLoyaltyType>
    
    // Vendor or vendors associated with the reservation.
    Vendor: Array<CompanyNameType1>
    
    // The start and end date of the reservation.
    ReservationTimeSpan: Array<ReservationTimeSpanType>
    
    // Quantity or quantities that are associated with the reservation (e.g., number of seats, number of rooms, number of people).
    AssociatedQuantity: Array<AssociatedQuantityType>
    
    // Start location associated with the reservation.
    StartLocation: Array<StartLocationType>
    
    // End location associated with the reservation.
    EndLocation: Array<EndLocationType>
    
    
    TPA_ExtensionsType11: Array<TPA_ExtensionsType>
    
}

export interface VerificationTypeAttributes {
    
}


export interface TelephoneInfoType {
    
    $attributes: TelephoneInfoTypeAttributes
    
}

export interface TelephoneInfoTypeAttributes {
    
    // Used elsewhere in the message to reference a specific telephone number (including faxes).
    RPH: string
    
}


export interface ReservationTimeSpanType {
    
    $attributes: ReservationTimeSpanTypeAttributes
    
}

export interface ReservationTimeSpanTypeAttributes {
    
    // The starting value of the time span.
    Start: string
    
    // The duration datatype represents a combination of year, month, day and time values representing a single duration of time, encoded as a single string.
    Duration: string
    
    // The ending value of the time span.
    End: string
    
}


export interface AssociatedQuantityType {
    
    $attributes: AssociatedQuantityTypeAttributes
    
}

export interface AssociatedQuantityTypeAttributes {
    
    // Identifies the location of the code table.
    URI: string
    
}


export interface StartLocationType {
    
    $attributes: StartLocationTypeAttributes
    
    
    _content: any
    
}

export interface StartLocationTypeAttributes {
    
}


export interface EndLocationType {
    
    $attributes: EndLocationTypeAttributes
    
    
    _content: any
    
}

export interface EndLocationTypeAttributes {
    
}

// Describes a video item.
export interface VideoDescriptionType {
    
    $attributes: VideoDescriptionTypeAttributes
    
    // A set of video of a given category can be provided in different Format, each format will be described in this element.
    VideoFormat: Array<VideoFormatType>
    
}

export interface VideoDescriptionTypeAttributes {
    
    // Specifies the video category. Refer to OpenTravel Code list Picture Category Code (PIC).
    Category: string
    
}


export interface VideoFormatType extends VideoItemType {
    
    $attributes: VideoFormatTypeAttributes
    
}

export interface VideoFormatTypeAttributes extends VideoItemTypeAttributes {
    
}

// Details for a video of a given category.
export interface VideoItemType {
    
    $attributes: VideoItemTypeAttributes
    
    // URL of the multimedia item for a specific format.
    URL: Array<string>
    
}

export interface VideoItemTypeAttributes {
    
    // The unit of measure associated with all the dimensions of the multimedia item. Refer to OpenTravel Code list Unit of Measure (UOM).
    UnitOfMeasureCode: string
    
    // The width of the video item (unit specified by unit of measure).
    Width: number
    
    // The height of the video item (unit specified by unit of measure).
    Height: number
    
    // The bit rate of the video item.
    BitRate: number
    
    // The length of the video item (unit specified by unit of measure).
    Length: number
    
    // Identifies the language of the multimedia item.
    Language: string
    
    // The code associated with the format of the multimedia item. Refer to OpenTravel Code list Content Format Code (CFC).
    Format: string
    
    // The size of the multimedia file in bytes.
    FileSize: number
    
    // The name of the multimedia file.
    FileName: string
    
}

// Collection of video items.
export interface VideoItemsType {
    
    $attributes: VideoItemsTypeAttributes
    
    // Each video item represents a specific category.
    VideoItem: VideoItemType
    
}

export interface VideoItemsTypeAttributes {
    
}

// Method by which confirmations should be delivered.
export interface WrittenConfInstType {
    
    $attributes: WrittenConfInstTypeAttributes
    
    // Additional data that will be sent with the confirmation. This could be used to include a map, pictures, or any other information that the reservation source wishes to include with the confirmation.
    SupplementalData: Array<ParagraphType>
    
    // An email address to which the confirmation should be sent.
    Email: Array<EmailType>
    
}

export interface WrittenConfInstTypeAttributes {
    
    // The language in which the confirmation should be provided.
    LanguageID: string
    
    // The name to which the confirmation should be addressed.
    AddresseeName: string
    
    // The mailing address to which the confirmation should be delivered.
    Address: string
    
    // The telephone number associated with the delivery address.
    Telephone: string
    
    // When true a written confirmation was requested and will be sent.
    ConfirmInd: boolean
    
}

// Provides address information
export interface AddressType1 {
    
    $attributes: AddressType1Attributes
    
    // May contain suffixes to the street name.
    StreetNmbr: Array<StreetNmbrType1>
    
    // Building name, room, apartment, or suite number.
    BldgRoom: Array<string>
    
    // When the address is unformatted (FormattedInd=&#34;false&#34;) these lines will contain free form address details. When the address is formatted and street number and street name must be sent independently, the street number and other suffixes will be sent using StreetNmbr, and the street name will be sent in the first AddressLine occurrence.
    AddressLine: Array<string>
    
    // City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
    CityName: Array<string>
    
    // Post Office Code number.
    PostalCode: Array<string>
    
    // County or Region Name (e.g., Fairfax).
    County: Array<string>
    
    // State or Province name (e.g., Texas) or code.
    StateProv: Array<StateProvType1>
    
    // Country name (e.g., Ireland).
    CountryName: Array<CountryNameType1>
    
}

export interface AddressType1Attributes {
    
    // Specifies if the associated data is formatted or not. When true, then it is formatted; when false, then not formatted.
    FormattedInd: boolean
    
    // When true, the receiving system should assume the default value if the user specifies no overriding value or action.
    DefaultInd: boolean
    
    // Describes the use of the address (e.g. mailing, delivery, billing.etc.) Not applicable - no code list exists.
    UseType: string
    
    // Used elsewhere in the message to reference this specific address.
    RPH: string
    
    // Defines the type of address (e.g. home, business, other). Refer to IATA PADIS Code List data element 3299.
    Type: string
    
}


export interface StreetNmbrType1 {
    
    $attributes: StreetNmbrType1Attributes
    
}

export interface StreetNmbrType1Attributes {
    
    // Defines a Post Office Box number.
    POBox: string
    
    // Usually a letter right after the street number (A in 66-A, B in 123-B etc).
    StreetNmbrSuffix: string
    
    // Street direction of an address (e.g., N, E, S, NW, SW).
    StreetDirection: string
    
    // Numerical equivalent of a rural township as defined within a given area (e.g., 12, 99).
    RuralRouteNmbr: string
    
}

// State, province, or region name or code needed to identify location.
export interface StateProvType1 {
    
    $attributes: StateProvType1Attributes
    
    
    _content: any
    
}

export interface StateProvType1Attributes {
    
}

// The name or code of a country (e.g. as used in an address or to specify citizenship of a traveller).
export interface CountryNameType1 {
    
    $attributes: CountryNameType1Attributes
    
    
    _content: any
    
}

export interface CountryNameType1Attributes {
    
}

// Customer bank accounts for payments, either for paper checks or electronic funds transfer.
export interface BankAcctType1 {
    
    $attributes: BankAcctType1Attributes
    
    // The name the account is held under.
    BankAcctName: Array<string>
    
}

export interface BankAcctType1Attributes {
    
    
    ShareSynchInd: string
    
    
    ShareMarketInd: string
    
    // Code assigned by authorities to financial institutions; sometimes called bank routing number.
    BankID: string
    
    // Describes the bank account used for financing travel (e.g., checking, savings, investment).
    AcctType: string
    
    // Identifier for the account assigned by the bank.
    BankAcctNumber: string
    
    // If true, checks are accepted. If false, checks are not accepted.
    ChecksAcceptedInd: boolean
    
}

// Company name and location for sending invoice for remittances for travel services.
export interface DirectBillType1 {
    
    $attributes: DirectBillType1Attributes
    
    // Company name to whom remittance should be directed.
    CompanyName: Array<CompanyNameType>
    
    // Address where remittance should be directed.
    Address: Array<AddressType1>
    
}

export interface DirectBillType1Attributes {
    
    
    ShareSynchInd: string
    
    
    ShareMarketInd: string
    
    // Identifier for the organization to be billed directly for travel services.
    DirectBill_ID: string
    
}

// Specifies the aircraft equipment type.
export interface EquipmentType1 {
    
    $attributes: EquipmentType1Attributes
    
    
    _content: any
    
}

export interface EquipmentType1Attributes {
    
}

// Construct for holding a flight segment availability object.
export interface FlightSegmentBaseType1 {
    
    $attributes: FlightSegmentBaseType1Attributes
    
    // Departure point of flight segment.
    DepartureAirport: DepartureAirportType1
    
    // Arrival point of flight segment.
    ArrivalAirport: ArrivalAirportType1
    
    // The operating airline of the flight if it is a codeshare flight.
    OperatingAirline: Array<OperatingAirlineType1>
    
    // The type of equipment used for the flight..
    Equipment: Array<EquipmentType1>
    
}

export interface FlightSegmentBaseType1Attributes {
    
    // The departure date and/or time of the flight segment.
    DepartureDateTime: string
    
    // The arrival date and/or time of the flight segment.
    ArrivalDateTime: string
    
    // The number of stops the flight makes
    StopQuantity: number
    
    // Used to provide a reference to this flight segment.
    RPH: string
    
    // Used to specify the source of the data being exchanged as determined by trading partners.
    InfoSource: string
    
}


export interface DepartureAirportType1 {
    
    $attributes: DepartureAirportType1Attributes
    
}

export interface DepartureAirportType1Attributes {
    
    // Location code used to identify a specific airport.
    LocationCode: string
    
    // Identifies the context of the identifying code, such as IATA, ARC, or internal code, etc.
    CodeContext: string
    
    // Arrival or departure terminal (e.g., Concourse A)
    Terminal: string
    
    // Arrival or departure gate (e.g., B12)
    Gate: string
    
}


export interface ArrivalAirportType1 {
    
    $attributes: ArrivalAirportType1Attributes
    
}

export interface ArrivalAirportType1Attributes {
    
    // Location code used to identify a specific airport.
    LocationCode: string
    
    // Identifies the context of the identifying code, such as IATA, ARC, or internal code, etc.
    CodeContext: string
    
    // Arrival or departure terminal (e.g., Concourse A)
    Terminal: string
    
    // Arrival or departure gate (e.g., B12)
    Gate: string
    
}


export interface OperatingAirlineType1 {
    
    $attributes: OperatingAirlineType1Attributes
    
    
    _content: any
    
}

export interface OperatingAirlineType1Attributes {
    
}

// FlightSegmentType extends FlightSegmentBaseType to provide additional functionality.
export interface FlightSegmentType extends FlightSegmentBaseType1 {
    
    $attributes: FlightSegmentTypeAttributes
    
    // The marketing airline. This is required for use with scheduled airline messages but may be omitted for requests by tour operators.
    MarketingAirline: Array<MarketingAirlineType>
    
}

export interface FlightSegmentTypeAttributes extends FlightSegmentBaseType1Attributes {
    
    // The marketing flight number.
    FlightNumber: string
    
    // ID of a flight in the Tour Operator&#39;s inventory. This flight is not necessarily in the inventory of an airline. Rather, it is a code created by tour operators.
    TourOperatorFlightID: string
    
    // The operational flight prefix/suffix for the coupon.
    OperationalSuffix: string
    
}


export interface MarketingAirlineType {
    
    $attributes: MarketingAirlineTypeAttributes
    
    
    _content: any
    
}

export interface MarketingAirlineTypeAttributes {
    
}

// Textual information to provide descriptions and/or additional information.
export interface FreeTextType1 {
    
    $attributes: FreeTextType1Attributes
    
    
    _content: any
    
}

export interface FreeTextType1Attributes {
    
}

// Details of payment.
export interface PaymentDetailType1 extends PaymentFormType1 {
    
    $attributes: PaymentDetailType1Attributes
    
    
    PaymentAmount: Array<PaymentAmountType1>
    
}

export interface PaymentDetailType1Attributes extends PaymentFormType1Attributes {
    
}

// Ways of providing funds for travel by the individual.
export interface PaymentFormType1 {
    
    $attributes: PaymentFormType1Attributes
    
}

export interface PaymentFormType1Attributes {
    
    
    ShareSynchInd: string
    
    
    ShareMarketInd: string
    
    // A reference to identify the billing department for allocating cost of travel to company account.
    CostCenterID: string
    
    // Provides a reference to a specific form of payment.
    RPH: string
    
    
    PaymentTransactionTypeCode: string
    
}


export interface PaymentAmountType1 {
    
    $attributes: PaymentAmountType1Attributes
    
}

export interface PaymentAmountType1Attributes {
    
    // The monetary value.
    Amount: number
    
    // The approval code returned as part of an authorization process.
    ApprovalCode: string
    
}

// Identification about a specific credit card
export interface PaymentCardType1 {
    
    $attributes: PaymentCardType1Attributes
    
    // Name of credit card holder.
    CardHolderName: Array<string>
    
    // Credit card issuing company.
    CardIssuerName: Array<CardIssuerNameType1>
    
    // The address of the card holder.
    Address: Array<AddressType1>
    
    // A reference number to a commercial account used to further identify the holder of the credit card.
    CustomerFileRef: Array<CustomerFileRefType>
    
}

export interface PaymentCardType1Attributes {
    
    
    ShareSynchInd: string
    
    
    ShareMarketInd: string
    
    // Indicates the type of magnetic striped card.
    CardType: string
    
    // The 2 character code of the credit card issuer.
    CardCode: string
    
    // Credit card number embossed on the card.
    CardNumber: string
    
    // Verification digits printed on the card following the embossed number. This may also accommodate the customer identification/batch number (CID), card verification value (CVV2 ), card validation code number (CVC2) on credit card.
    SeriesCode: string
    
    // Indicates the starting date.
    EffectiveDate: string
    
    // Indicates the ending date.
    ExpireDate: string
    
    // May be used to send a concealed credit card number (e.g., xxxxxxxxxxxx9922).
    MaskedCardNumber: string
    
    // Provides a reference pointer that links the payment card to the payment card holder.
    CardHolderRPH: string
    
    // The address verification response code (AVS) when the ticketing agency performs address verification.
    AddressValidation: string
    
    // A series of characters assigned by the applicable credit card company&#39;s authorization system to confirm the approval of a credit sale transaction.
    ApprovalCode: string
    
    // Used to indicate whether the purchase is on behalf of a corporate client that has a contract ith the ticketing agency for the purchase of transportation and related services.
    CorporateContractCode: string
    
    // May contain unique transaction information supplied to the airline/system provider by the credit card company.
    Text: string
    
    // A code to indicate the number of months over which the customer wishes to pay where the credit card issuer permits.
    ExtendedPaymentCode: string
    
    // Used to specify how the approval code for a credit card sale was obtained. Refer to IATA PADIS Code List for data element 9890.
    ApprovalType: string
    
    // The monetary value.
    Amount: number
    
}


export interface CardIssuerNameType1 {
    
    $attributes: CardIssuerNameType1Attributes
    
}

export interface CardIssuerNameType1Attributes {
    
    // Code of bank issuing the card.
    BankID: string
    
}


export interface CustomerFileRefType {
    
    $attributes: CustomerFileRefTypeAttributes
    
}

export interface CustomerFileRefTypeAttributes {
    
    // URL that identifies the location associated with the record identified by the UniqueID.
    URL: string
    
    // A reference to the type of object defined by the UniqueID element. Refer to IATA PADIS Code List for data elemet 9972.
    Type: string
    
    // The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
    Instance: string
    
    // Used to identify the source of the identifier (e.g., IATA, ABTA).
    ID_Context: string
    
}

// This provides name information for a person.
export interface PersonNameType1 {
    
    $attributes: PersonNameType1Attributes
    
    // Salutation of honorific. (e.g., Mr. Mrs., Ms., Miss, Dr.)
    NamePrefix: Array<string>
    
    // Given name, first name or names
    GivenName: Array<string>
    
    // The middle name of the person name
    MiddleName: Array<string>
    
    // e.g &#34;van der&#34;, &#34;von&#34;, &#34;de&#34;
    SurnamePrefix: Array<string>
    
    // Family name, last name.
    Surname: string
    
    // Hold various name suffixes and letters (e.g. Jr., Sr., III, Ret., Esq.).
    NameSuffix: Array<string>
    
    // Degree or honors (e.g., Ph.D., M.D.)
    NameTitle: Array<string>
    
}

export interface PersonNameType1Attributes {
    
    
    ShareSynchInd: string
    
    
    ShareMarketInd: string
    
    // Type of name of the individual, such as former, nickname, alternate or alias name. Not applicable, no code list exists.
    NameType: string
    
}

// Point of Sale (POS) is the details identifying the party or connection channel making the request.
export interface POS_Type1 {
    
    $attributes: POS_Type1Attributes
    
    // This holds details regarding the requestor. It may be repeated to also accommodate the delivery systems.
    Source: Array<SourceType1>
    
}

export interface POS_Type1Attributes {
    
}

// Provides information on the source of a request.
export interface SourceType1 {
    
    $attributes: SourceType1Attributes
    
    // An identifier of the entity making the request (e.g. ATA/IATA/ID number, Electronic Reservation Service Provider (ERSP), Association of British Travel Agents (ABTA)). Refer to IATA PADIS Code List for data element 9972 for the code value for Type.
    RequestorID: Array<RequestorIDType1>
    
    
    Position: Array<PositionType1>
    
    // Specifies the booking channel type and whether it is the primary means of connectivity of the source.
    BookingChannel: Array<BookingChannelType2>
    
}

export interface SourceType1Attributes {
    
    // Identifies the party within the requesting entity.
    AgentSine: string
    
    // An identification code assigned to an office/agency by a reservation system.
    PseudoCityCode: string
    
    // The country code of the requesting party.
    ISOCountry: string
    
    // The currency code in which the reservation will be ticketed.
    ISOCurrency: string
    
    // An authority code assigned to a requestor.
    AgentDutyCode: string
    
    // The IATA assigned airline code.
    AirlineVendorID: string
    
    // The IATA assigned airport code.
    AirportCode: string
    
    // The point of first departure in a trip.
    FirstDepartPoint: string
    
    // Electronic Reservation Service Provider (ERSP) assigned identifier used to identify the individual using the ERSP system.
    ERSP_UserID: string
    
    // This is the electronic address of the device from which information is entered.
    TerminalID: string
    
}


export interface RequestorIDType1 extends UniqueID_Type {
    
    $attributes: RequestorIDType1Attributes
    
}

export interface RequestorIDType1Attributes extends UniqueID_TypeAttributes {
    
    // This password provides an additional level of security that the recipient can use to validate the sending party&#39;s authority to use the message.
    MessagePassword: string
    
}


export interface PositionType1 {
    
    $attributes: PositionType1Attributes
    
}

export interface PositionType1Attributes {
    
    // The measure of the angular distance on a meridian north or south of the equator.
    Latitude: string
    
    // The measure of the angular distance on a meridian east or west of the prime meridian.
    Longitude: string
    
    // The height of an item, typically above sea level.
    Altitude: string
    
    // Provides the unit of measure for the altitude (e.g., feet, meters, miles, kilometers). Not applicable - no code list exists.
    AltitudeUnitOfMeasureCode: string
    
}


export interface BookingChannelType2 {
    
    $attributes: BookingChannelType2Attributes
    
    // Identifies the company that is associated with the booking channel.
    CompanyName: Array<CompanyNameType>
    
}

export interface BookingChannelType2Attributes {
    
    // The type of booking channel (e.g. Global Distribution System (GDS), Alternative Distribution System (ADS), Sales and Catering System (SCS), Property Management System (PMS), Central Reservation System (CRS), Tour Operator System (TOS), Internet and ALL). Not applicable, no code list exists.
    Type: string
    
    // Indicates whether the enumerated booking channel is the primary means of connectivity used by the source.
    Primary: boolean
    
}

// Standard way to indicate successful processing of an IATA message. Returning an empty element of this type indicates success.
export interface SuccessType1 {
    
    $attributes: SuccessType1Attributes
    
}

export interface SuccessType1Attributes {
    
}

// Address is a generic type to convey a phone number, an email address... 
export interface AddressType2 {
    
    $attributes: AddressType2Attributes
    
}

export interface AddressType2Attributes {
    
    // format of the recipient address 
    Format: string
    
    
    Value: string
    
}


export interface AddressWithModeType extends AddressType2 {
    
    $attributes: AddressWithModeTypeAttributes
    
}

export interface AddressWithModeTypeAttributes extends AddressType2Attributes {
    
    // CRT or PNT when a TID is used. TO, CC, or BCC when an EML address is used. 
    Mode: string
    
}

// Owner of the Query, containing: organization (mandatory), application (mandatory) 
export interface OwnershipType {
    
    $attributes: OwnershipTypeAttributes
    
}

export interface OwnershipTypeAttributes {
    
    
    OrganizationCode: string
    
    
    ApplicationLabel: string
    
    
    CompanyCode: string
    
}


export interface TextType {
    
    $attributes: TextTypeAttributes
    
}

export interface TextTypeAttributes {
    
    
    Encoding: string
    
    
    Value: string
    
}


export interface FTP_Type {
    
    $attributes: FTP_TypeAttributes
    
}

export interface FTP_TypeAttributes {
    
    
    Filename: string
    
    
    Path: string
    
    
    FileHash: string
    
    
    FTPID: string
    
}


export interface FTP_TypeWithLayoutType extends FTP_Type {
    
    $attributes: FTP_TypeWithLayoutTypeAttributes
    
}

export interface FTP_TypeWithLayoutTypeAttributes extends FTP_TypeAttributes {
    
    
    LayoutType: string
    
}


export interface Fare_CheckRulesType {
    
    $attributes: Fare_CheckRulesTypeAttributes
    
    
    msgType: msgTypeType
    
    
    availcabinStatus: Array<availcabinStatusType>
    
    
    conversionRate: Array<conversionRateType>
    
    
    pricingTickInfo: Array<pricingTickInfoType>
    
    
    multiCorporate: Array<multiCorporateType>
    
    
    itemNumber: Array<itemNumberType>
    
    
    dateOfFlight: Array<dateOfFlightType>
    
    
    flightQualification: Array<flightQualificationType>
    
    
    transportInformation: Array<transportInformationType>
    
    
    tripDescription: Array<tripDescriptionType>
    
    
    pricingInfo: Array<pricingInfoType>
    
    
    fareRule: Array<fareRuleType>
    
}

export interface Fare_CheckRulesTypeAttributes {
    
}


export interface msgTypeType {
    
    $attributes: msgTypeTypeAttributes
    
    
    messageFunctionDetails: Array<messageFunctionDetailsType>
    
}

export interface msgTypeTypeAttributes {
    
}


export interface messageFunctionDetailsType {
    
    $attributes: messageFunctionDetailsTypeAttributes
    
    
    messageFunction: Array<string>
    
}

export interface messageFunctionDetailsTypeAttributes {
    
}


export interface availcabinStatusType {
    
    $attributes: availcabinStatusTypeAttributes
    
    
    productDetailsQualifier: Array<string>
    
    
    bookingClassDetails: Array<bookingClassDetailsType>
    
}

export interface availcabinStatusTypeAttributes {
    
}


export interface bookingClassDetailsType {
    
    $attributes: bookingClassDetailsTypeAttributes
    
    
    designator: string
    
    
    option: Array<string>
    
}

export interface bookingClassDetailsTypeAttributes {
    
}


export interface conversionRateType {
    
    $attributes: conversionRateTypeAttributes
    
    
    conversionRateDetails: conversionRateDetailsType
    
    
    otherConvRateDetails: Array<otherConvRateDetailsType>
    
}

export interface conversionRateTypeAttributes {
    
}


export interface conversionRateDetailsType {
    
    $attributes: conversionRateDetailsTypeAttributes
    
    
    conversionType: Array<string>
    
    
    currency: Array<string>
    
    
    rateType: Array<string>
    
    
    pricingAmount: Array<number>
    
    
    convertedValueAmount: Array<number>
    
    
    dutyTaxFeeType: Array<string>
    
    
    measurementValue: Array<number>
    
    
    measurementSignificance: Array<string>
    
}

export interface conversionRateDetailsTypeAttributes {
    
}


export interface otherConvRateDetailsType {
    
    $attributes: otherConvRateDetailsTypeAttributes
    
    
    conversionType: Array<string>
    
    
    currency: Array<string>
    
    
    rateType: Array<string>
    
    
    pricingAmount: Array<number>
    
    
    convertedValueAmount: Array<number>
    
    
    dutyTaxFeeType: Array<string>
    
    
    measurementValue: Array<number>
    
    
    measurementSignificance: Array<string>
    
}

export interface otherConvRateDetailsTypeAttributes {
    
}


export interface pricingTickInfoType {
    
    $attributes: pricingTickInfoTypeAttributes
    
    
    productDateTimeDetails: Array<productDateTimeDetailsType>
    
    
    locationDetails: Array<locationDetailsType>
    
    
    otherLocationDetails: Array<otherLocationDetailsType>
    
    
    idNumber: Array<string>
    
}

export interface pricingTickInfoTypeAttributes {
    
}


export interface productDateTimeDetailsType {
    
    $attributes: productDateTimeDetailsTypeAttributes
    
    
    departureDate: Array<string>
    
    
    arrivalDate: Array<string>
    
}

export interface productDateTimeDetailsTypeAttributes {
    
}


export interface locationDetailsType {
    
    $attributes: locationDetailsTypeAttributes
    
    
    city: Array<string>
    
    
    country: Array<string>
    
}

export interface locationDetailsTypeAttributes {
    
}


export interface otherLocationDetailsType {
    
    $attributes: otherLocationDetailsTypeAttributes
    
    
    city: Array<string>
    
    
    country: Array<string>
    
}

export interface otherLocationDetailsTypeAttributes {
    
}


export interface multiCorporateType {
    
    $attributes: multiCorporateTypeAttributes
    
    
    corporateId: Array<corporateIdType>
    
}

export interface multiCorporateTypeAttributes {
    
}


export interface corporateIdType {
    
    $attributes: corporateIdTypeAttributes
    
    
    corporateQualifier: string
    
    
    identity: Array<string>
    
}

export interface corporateIdTypeAttributes {
    
}


export interface itemNumberType {
    
    $attributes: itemNumberTypeAttributes
    
    
    itemNumberDetails: Array<itemNumberDetailsType>
    
}

export interface itemNumberTypeAttributes {
    
}


export interface itemNumberDetailsType {
    
    $attributes: itemNumberDetailsTypeAttributes
    
    
    number: Array<string>
    
    
    type: Array<string>
    
}

export interface itemNumberDetailsTypeAttributes {
    
}


export interface dateOfFlightType {
    
    $attributes: dateOfFlightTypeAttributes
    
    
    dateAndTimeDetails: Array<dateAndTimeDetailsType>
    
}

export interface dateOfFlightTypeAttributes {
    
}


export interface dateAndTimeDetailsType {
    
    $attributes: dateAndTimeDetailsTypeAttributes
    
    
    qualifier: Array<string>
    
    
    date: Array<number>
    
}

export interface dateAndTimeDetailsTypeAttributes {
    
}


export interface flightQualificationType {
    
    $attributes: flightQualificationTypeAttributes
    
    
    movementType: Array<string>
    
    
    fareCategories: Array<fareCategoriesType>
    
    
    fareDetails: Array<fareDetailsType>
    
    
    additionalFareDetails: Array<additionalFareDetailsType>
    
    
    discountDetails: Array<discountDetailsType>
    
}

export interface flightQualificationTypeAttributes {
    
}


export interface fareCategoriesType {
    
    $attributes: fareCategoriesTypeAttributes
    
    
    fareType: string
    
    
    otherFareType: Array<string>
    
}

export interface fareCategoriesTypeAttributes {
    
}


export interface fareDetailsType {
    
    $attributes: fareDetailsTypeAttributes
    
    
    qualifier: Array<string>
    
    
    rate: Array<number>
    
    
    country: Array<string>
    
    
    fareCategory: Array<string>
    
}

export interface fareDetailsTypeAttributes {
    
}


export interface additionalFareDetailsType {
    
    $attributes: additionalFareDetailsTypeAttributes
    
    
    rateClass: Array<string>
    
    
    commodityCategory: Array<string>
    
    
    pricingGroup: Array<string>
    
    
    secondRateClass: Array<string>
    
}

export interface additionalFareDetailsTypeAttributes {
    
}


export interface discountDetailsType {
    
    $attributes: discountDetailsTypeAttributes
    
    
    fareQualifier: string
    
    
    rateCategory: Array<string>
    
    
    amount: Array<number>
    
    
    percentage: Array<number>
    
}

export interface discountDetailsTypeAttributes {
    
}


export interface transportInformationType {
    
    $attributes: transportInformationTypeAttributes
    
    
    transportService: transportServiceType
    
    
    availCabinConf: Array<availCabinConfType>
    
    
    routingInfo: Array<routingInfoType>
    
    
    selectionDetail: Array<selectionDetailType>
    
}

export interface transportInformationTypeAttributes {
    
}


export interface transportServiceType {
    
    $attributes: transportServiceTypeAttributes
    
    
    companyIdentification: companyIdentificationType
    
    
    productIdentificationDetails: Array<productIdentificationDetailsType>
    
}

export interface transportServiceTypeAttributes {
    
}


export interface companyIdentificationType {
    
    $attributes: companyIdentificationTypeAttributes
    
    
    marketingCompany: Array<string>
    
    
    operatingcompany: Array<string>
    
    
    otherCompany: Array<string>
    
}

export interface companyIdentificationTypeAttributes {
    
}


export interface productIdentificationDetailsType {
    
    $attributes: productIdentificationDetailsTypeAttributes
    
    
    flightNumber: string
    
    
    operationalSuffix: Array<string>
    
}

export interface productIdentificationDetailsTypeAttributes {
    
}


export interface availCabinConfType {
    
    $attributes: availCabinConfTypeAttributes
    
    
    productDetailsQualifier: Array<string>
    
    
    bookingClassDetails: Array<bookingClassDetailsType>
    
}

export interface availCabinConfTypeAttributes {
    
}


export interface routingInfoType {
    
    $attributes: routingInfoTypeAttributes
    
    
    routingDetails: Array<routingDetailsType>
    
}

export interface routingInfoTypeAttributes {
    
}


export interface routingDetailsType {
    
    $attributes: routingDetailsTypeAttributes
    
    
    station: Array<string>
    
    
    otherStation: Array<string>
    
    
    qualifier: Array<string>
    
}

export interface routingDetailsTypeAttributes {
    
}


export interface selectionDetailType {
    
    $attributes: selectionDetailTypeAttributes
    
    
    selectionDetails: selectionDetailsType
    
    
    selectionDetailsTwo: Array<selectionDetailsTwoType>
    
}

export interface selectionDetailTypeAttributes {
    
}


export interface selectionDetailsType {
    
    $attributes: selectionDetailsTypeAttributes
    
    
    option: string
    
    
    optionInformation: Array<string>
    
}

export interface selectionDetailsTypeAttributes {
    
}


export interface selectionDetailsTwoType {
    
    $attributes: selectionDetailsTwoTypeAttributes
    
    
    option: string
    
    
    optionInformation: Array<string>
    
}

export interface selectionDetailsTwoTypeAttributes {
    
}


export interface tripDescriptionType {
    
    $attributes: tripDescriptionTypeAttributes
    
    
    origDest: origDestType
    
    
    dateFlightMovement: Array<dateFlightMovementType>
    
    
    routing: Array<routingType>
    
}

export interface tripDescriptionTypeAttributes {
    
}


export interface origDestType {
    
    $attributes: origDestTypeAttributes
    
    
    origin: Array<string>
    
    
    destination: Array<string>
    
}

export interface origDestTypeAttributes {
    
}


export interface dateFlightMovementType {
    
    $attributes: dateFlightMovementTypeAttributes
    
    
    dateAndTimeDetails: Array<dateAndTimeDetailsType>
    
}

export interface dateFlightMovementTypeAttributes {
    
}


export interface routingType {
    
    $attributes: routingTypeAttributes
    
    
    routingInfo: routingInfoType
    
    
    transportService: Array<transportServiceType>
    
    
    segFareDetails: Array<segFareDetailsType>
    
    
    pertinentQuantity: Array<pertinentQuantityType>
    
    
    selectionMakingDetails: Array<selectionMakingDetailsType>
    
}

export interface routingTypeAttributes {
    
}


export interface segFareDetailsType {
    
    $attributes: segFareDetailsTypeAttributes
    
    
    movementType: Array<string>
    
    
    fareCategories: Array<fareCategoriesType>
    
    
    fareDetails: Array<fareDetailsType>
    
    
    additionalFareDetails: Array<additionalFareDetailsType>
    
    
    discountDetails: Array<discountDetailsType>
    
}

export interface segFareDetailsTypeAttributes {
    
}


export interface pertinentQuantityType {
    
    $attributes: pertinentQuantityTypeAttributes
    
    
    quantityDetails: quantityDetailsType
    
    
    otherQuantityDetails: Array<otherQuantityDetailsType>
    
}

export interface pertinentQuantityTypeAttributes {
    
}


export interface quantityDetailsType {
    
    $attributes: quantityDetailsTypeAttributes
    
    
    qualifier: string
    
    
    value: number
    
    
    unit: Array<string>
    
}

export interface quantityDetailsTypeAttributes {
    
}


export interface otherQuantityDetailsType {
    
    $attributes: otherQuantityDetailsTypeAttributes
    
    
    qualifier: string
    
    
    value: number
    
    
    unit: Array<string>
    
}

export interface otherQuantityDetailsTypeAttributes {
    
}


export interface selectionMakingDetailsType {
    
    $attributes: selectionMakingDetailsTypeAttributes
    
    
    selectionDetails: selectionDetailsType
    
    
    selectionDetailsTwo: Array<selectionDetailsTwoType>
    
}

export interface selectionMakingDetailsTypeAttributes {
    
}


export interface pricingInfoType {
    
    $attributes: pricingInfoTypeAttributes
    
    
    numberOfUnits: numberOfUnitsType
    
    
    ticketPricingDate: Array<ticketPricingDateType>
    
    
    fare: Array<fareType>
    
}

export interface pricingInfoTypeAttributes {
    
}


export interface numberOfUnitsType {
    
    $attributes: numberOfUnitsTypeAttributes
    
    
    quantityDetails: quantityDetailsType
    
    
    otherQuantityDetails: Array<otherQuantityDetailsType>
    
}

export interface numberOfUnitsTypeAttributes {
    
}


export interface ticketPricingDateType {
    
    $attributes: ticketPricingDateTypeAttributes
    
    
    productDateTimeDetails: Array<productDateTimeDetailsType>
    
    
    locationDetails: Array<locationDetailsType>
    
    
    otherLocationDetails: Array<otherLocationDetailsType>
    
    
    idNumber: Array<string>
    
}

export interface ticketPricingDateTypeAttributes {
    
}


export interface fareType {
    
    $attributes: fareTypeAttributes
    
    
    detailsOfFare: detailsOfFareType
    
    
    fareQualificationDetails: Array<fareQualificationDetailsType>
    
}

export interface fareTypeAttributes {
    
}


export interface detailsOfFareType {
    
    $attributes: detailsOfFareTypeAttributes
    
    
    fareTypeGrouping: Array<fareTypeGroupingType>
    
}

export interface detailsOfFareTypeAttributes {
    
}


export interface fareTypeGroupingType {
    
    $attributes: fareTypeGroupingTypeAttributes
    
    
    pricingGroup: Array<string>
    
}

export interface fareTypeGroupingTypeAttributes {
    
}


export interface fareQualificationDetailsType {
    
    $attributes: fareQualificationDetailsTypeAttributes
    
    
    movementType: Array<string>
    
    
    fareCategories: Array<fareCategoriesType>
    
    
    fareDetails: Array<fareDetailsType>
    
    
    additionalFareDetails: Array<additionalFareDetailsType>
    
    
    discountDetails: Array<discountDetailsType>
    
}

export interface fareQualificationDetailsTypeAttributes {
    
}


export interface fareRuleType {
    
    $attributes: fareRuleTypeAttributes
    
    
    tarifFareRule: tarifFareRuleType
    
    
    travellerIdentification: Array<travellerIdentificationType>
    
    
    travellerDate: Array<travellerDateType>
    
}

export interface fareRuleTypeAttributes {
    
}


export interface tarifFareRuleType {
    
    $attributes: tarifFareRuleTypeAttributes
    
    
    tariffClassId: Array<string>
    
    
    companyDetails: Array<companyDetailsType>
    
    
    ruleSectionId: Array<string>
    
}

export interface tarifFareRuleTypeAttributes {
    
}


export interface companyDetailsType {
    
    $attributes: companyDetailsTypeAttributes
    
    
    marketingCompany: Array<string>
    
    
    operatingcompany: Array<string>
    
    
    otherCompany: Array<string>
    
}

export interface companyDetailsTypeAttributes {
    
}


export interface travellerIdentificationType {
    
    $attributes: travellerIdentificationTypeAttributes
    
    
    referenceDetails: Array<referenceDetailsType>
    
}

export interface travellerIdentificationTypeAttributes {
    
}


export interface referenceDetailsType {
    
    $attributes: referenceDetailsTypeAttributes
    
    
    type: Array<string>
    
    
    value: Array<number>
    
}

export interface referenceDetailsTypeAttributes {
    
}


export interface travellerDateType {
    
    $attributes: travellerDateTypeAttributes
    
    
    dateAndTimeDetails: Array<dateAndTimeDetailsType>
    
}

export interface travellerDateTypeAttributes {
    
}


export interface Fare_CheckRulesReplyType {
    
    $attributes: Fare_CheckRulesReplyTypeAttributes
    
    
    transactionType: transactionTypeType
    
    
    statusInfo: Array<statusInfoType>
    
    
    fareRouteInfo: Array<fareRouteInfoType>
    
    
    infoText: Array<infoTextType>
    
    
    errorInfo: Array<errorInfoType>
    
    
    tariffInfo: Array<tariffInfoType>
    
    
    flightDetails: Array<flightDetailsType>
    
}

export interface Fare_CheckRulesReplyTypeAttributes {
    
}


export interface transactionTypeType {
    
    $attributes: transactionTypeTypeAttributes
    
    
    messageFunctionDetails: Array<messageFunctionDetailsType1>
    
}

export interface transactionTypeTypeAttributes {
    
}


export interface messageFunctionDetailsType1 {
    
    $attributes: messageFunctionDetailsType1Attributes
    
    
    messageFunction: Array<string>
    
}

export interface messageFunctionDetailsType1Attributes {
    
}


export interface statusInfoType {
    
    $attributes: statusInfoTypeAttributes
    
    
    statusDetails: statusDetailsType
    
    
    otherDetails: Array<otherDetailsType>
    
}

export interface statusInfoTypeAttributes {
    
}


export interface statusDetailsType {
    
    $attributes: statusDetailsTypeAttributes
    
    
    indicator: Array<string>
    
}

export interface statusDetailsTypeAttributes {
    
}


export interface otherDetailsType {
    
    $attributes: otherDetailsTypeAttributes
    
}

export interface otherDetailsTypeAttributes {
    
}


export interface fareRouteInfoType {
    
    $attributes: fareRouteInfoTypeAttributes
    
    
    dayOfWeek: Array<string>
    
    
    fareQualifierDetails: Array<fareQualifierDetailsType>
    
    
    identificationNumber: Array<string>
    
    
    validityPeriod: Array<validityPeriodType>
    
}

export interface fareRouteInfoTypeAttributes {
    
}


export interface fareQualifierDetailsType {
    
    $attributes: fareQualifierDetailsTypeAttributes
    
    
    fareQualifier: Array<string>
    
}

export interface fareQualifierDetailsTypeAttributes {
    
}


export interface validityPeriodType {
    
    $attributes: validityPeriodTypeAttributes
    
    
    firstDate: Array<number>
    
    
    secondDate: Array<number>
    
}

export interface validityPeriodTypeAttributes {
    
}


export interface infoTextType {
    
    $attributes: infoTextTypeAttributes
    
    
    freeTextQualification: Array<freeTextQualificationType>
    
    
    freeText: Array<string>
    
}

export interface infoTextTypeAttributes {
    
}


export interface freeTextQualificationType {
    
    $attributes: freeTextQualificationTypeAttributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
}

export interface freeTextQualificationTypeAttributes {
    
}


export interface errorInfoType {
    
    $attributes: errorInfoTypeAttributes
    
    
    rejectErrorCode: rejectErrorCodeType
    
    
    errorFreeText: Array<errorFreeTextType>
    
}

export interface errorInfoTypeAttributes {
    
}


export interface rejectErrorCodeType {
    
    $attributes: rejectErrorCodeTypeAttributes
    
    
    errorDetails: errorDetailsType
    
}

export interface rejectErrorCodeTypeAttributes {
    
}


export interface errorDetailsType {
    
    $attributes: errorDetailsTypeAttributes
    
    
    errorCode: string
    
}

export interface errorDetailsTypeAttributes {
    
}


export interface errorFreeTextType {
    
    $attributes: errorFreeTextTypeAttributes
    
    
    freeTextQualification: Array<freeTextQualificationType>
    
    
    freeText: Array<string>
    
}

export interface errorFreeTextTypeAttributes {
    
}


export interface tariffInfoType {
    
    $attributes: tariffInfoTypeAttributes
    
    
    fareRuleInfo: fareRuleInfoType
    
    
    fareRuleText: Array<fareRuleTextType>
    
}

export interface tariffInfoTypeAttributes {
    
}


export interface fareRuleInfoType {
    
    $attributes: fareRuleInfoTypeAttributes
    
    
    ruleSectionLocalId: Array<string>
    
    
    companyDetails: Array<companyDetailsType1>
    
    
    ruleCategoryCode: Array<string>
    
}

export interface fareRuleInfoTypeAttributes {
    
}


export interface companyDetailsType1 {
    
    $attributes: companyDetailsType1Attributes
    
    
    marketingCompany: Array<string>
    
    
    operatingcompany: Array<string>
    
    
    otherCompany: Array<string>
    
}

export interface companyDetailsType1Attributes {
    
}


export interface fareRuleTextType {
    
    $attributes: fareRuleTextTypeAttributes
    
    
    freeTextQualification: Array<freeTextQualificationType>
    
    
    freeText: Array<string>
    
}

export interface fareRuleTextTypeAttributes {
    
}


export interface flightDetailsType {
    
    $attributes: flightDetailsTypeAttributes
    
    
    nbOfSegments: nbOfSegmentsType
    
    
    amountConversion: Array<amountConversionType>
    
    
    quantityValue: Array<quantityValueType>
    
    
    pricingAndDateInfo: Array<pricingAndDateInfoType>
    
    
    qualificationFareDetails: Array<qualificationFareDetailsType>
    
    
    transportService: Array<transportServiceType1>
    
    
    flightErrorCode: Array<flightErrorCodeType>
    
    
    productInfo: Array<productInfoType>
    
    
    priceInfo: Array<priceInfoType>
    
    
    fareDetailInfo: Array<fareDetailInfoType>
    
    
    odiGrp: Array<odiGrpType>
    
    
    travellerGrp: Array<travellerGrpType>
    
    
    fareRouteGrp: Array<fareRouteGrpType>
    
    
    itemGrp: Array<itemGrpType>
    
}

export interface flightDetailsTypeAttributes {
    
}


export interface nbOfSegmentsType {
    
    $attributes: nbOfSegmentsTypeAttributes
    
    
    segmentControlDetails: Array<segmentControlDetailsType>
    
}

export interface nbOfSegmentsTypeAttributes {
    
}


export interface segmentControlDetailsType {
    
    $attributes: segmentControlDetailsTypeAttributes
    
    
    quantity: Array<number>
    
    
    numberOfUnits: Array<number>
    
    
    totalNumberOfItems: Array<number>
    
}

export interface segmentControlDetailsTypeAttributes {
    
}


export interface amountConversionType {
    
    $attributes: amountConversionTypeAttributes
    
    
    conversionRateDetails: conversionRateDetailsType1
    
    
    otherConversionRateDetails: Array<otherConversionRateDetailsType>
    
}

export interface amountConversionTypeAttributes {
    
}


export interface conversionRateDetailsType1 {
    
    $attributes: conversionRateDetailsType1Attributes
    
    
    conversionType: Array<string>
    
    
    currency: Array<string>
    
    
    rateType: Array<string>
    
    
    pricingAmount: Array<number>
    
    
    measurementValue: Array<number>
    
    
    measurementSignificance: Array<string>
    
}

export interface conversionRateDetailsType1Attributes {
    
}


export interface otherConversionRateDetailsType {
    
    $attributes: otherConversionRateDetailsTypeAttributes
    
    
    conversionType: Array<string>
    
    
    currency: Array<string>
    
    
    rateType: Array<string>
    
    
    pricingAmount: Array<number>
    
    
    measurementValue: Array<number>
    
    
    measurementSignificance: Array<string>
    
}

export interface otherConversionRateDetailsTypeAttributes {
    
}


export interface quantityValueType {
    
    $attributes: quantityValueTypeAttributes
    
    
    quantityDetails: Array<quantityDetailsType1>
    
}

export interface quantityValueTypeAttributes {
    
}


export interface quantityDetailsType1 {
    
    $attributes: quantityDetailsType1Attributes
    
    
    qualifier: string
    
    
    value: number
    
    
    unit: Array<string>
    
}

export interface quantityDetailsType1Attributes {
    
}


export interface pricingAndDateInfoType {
    
    $attributes: pricingAndDateInfoTypeAttributes
    
    
    productDateTimeDetails: Array<productDateTimeDetailsType1>
    
    
    locationDetails: Array<locationDetailsType1>
    
    
    otherLocationDetails: Array<otherLocationDetailsType1>
    
    
    idNumber: Array<string>
    
}

export interface pricingAndDateInfoTypeAttributes {
    
}


export interface productDateTimeDetailsType1 {
    
    $attributes: productDateTimeDetailsType1Attributes
    
    
    departureDate: Array<string>
    
    
    arrivalDate: Array<string>
    
}

export interface productDateTimeDetailsType1Attributes {
    
}


export interface locationDetailsType1 {
    
    $attributes: locationDetailsType1Attributes
    
    
    city: Array<string>
    
    
    country: Array<string>
    
}

export interface locationDetailsType1Attributes {
    
}


export interface otherLocationDetailsType1 {
    
    $attributes: otherLocationDetailsType1Attributes
    
    
    city: Array<string>
    
    
    country: Array<string>
    
}

export interface otherLocationDetailsType1Attributes {
    
}


export interface qualificationFareDetailsType {
    
    $attributes: qualificationFareDetailsTypeAttributes
    
    
    movementType: Array<string>
    
    
    fareCategories: Array<fareCategoriesType1>
    
    
    fareDetails: Array<fareDetailsType1>
    
    
    additionalFareDetails: Array<additionalFareDetailsType1>
    
    
    discountDetails: Array<discountDetailsType1>
    
}

export interface qualificationFareDetailsTypeAttributes {
    
}


export interface fareCategoriesType1 {
    
    $attributes: fareCategoriesType1Attributes
    
    
    fareType: Array<string>
    
}

export interface fareCategoriesType1Attributes {
    
}


export interface fareDetailsType1 {
    
    $attributes: fareDetailsType1Attributes
    
    
    qualifier: Array<string>
    
    
    rate: Array<number>
    
    
    country: Array<string>
    
    
    fareCategory: Array<string>
    
}

export interface fareDetailsType1Attributes {
    
}


export interface additionalFareDetailsType1 {
    
    $attributes: additionalFareDetailsType1Attributes
    
    
    rateClass: Array<string>
    
    
    commodityCategory: Array<string>
    
    
    fareClass: Array<string>
    
}

export interface additionalFareDetailsType1Attributes {
    
}


export interface discountDetailsType1 {
    
    $attributes: discountDetailsType1Attributes
    
    
    fareQualifier: string
    
    
    rateCategory: Array<string>
    
    
    amount: Array<number>
    
    
    percentage: Array<number>
    
}

export interface discountDetailsType1Attributes {
    
}


export interface transportServiceType1 {
    
    $attributes: transportServiceType1Attributes
    
    
    companyIdentification: companyIdentificationType1
    
    
    productIdentificationDetails: Array<productIdentificationDetailsType1>
    
}

export interface transportServiceType1Attributes {
    
}


export interface companyIdentificationType1 {
    
    $attributes: companyIdentificationType1Attributes
    
    
    marketingCompany: Array<string>
    
    
    operatingcompany: Array<string>
    
    
    otherCompany: Array<string>
    
}

export interface companyIdentificationType1Attributes {
    
}


export interface productIdentificationDetailsType1 {
    
    $attributes: productIdentificationDetailsType1Attributes
    
    
    flightNumber: string
    
    
    operationalSuffix: Array<string>
    
}

export interface productIdentificationDetailsType1Attributes {
    
}


export interface flightErrorCodeType {
    
    $attributes: flightErrorCodeTypeAttributes
    
    
    freeTextQualification: Array<freeTextQualificationType>
    
    
    freeText: Array<string>
    
}

export interface flightErrorCodeTypeAttributes {
    
}


export interface productInfoType {
    
    $attributes: productInfoTypeAttributes
    
    
    productDetails: productDetailsType
    
    
    productErrorCode: Array<productErrorCodeType>
    
}

export interface productInfoTypeAttributes {
    
}


export interface productDetailsType {
    
    $attributes: productDetailsTypeAttributes
    
    
    productDetailsQualifier: Array<string>
    
    
    bookingClassDetails: Array<bookingClassDetailsType1>
    
}

export interface productDetailsTypeAttributes {
    
}


export interface bookingClassDetailsType1 {
    
    $attributes: bookingClassDetailsType1Attributes
    
    
    designator: string
    
    
    option: Array<string>
    
}

export interface bookingClassDetailsType1Attributes {
    
}


export interface productErrorCodeType {
    
    $attributes: productErrorCodeTypeAttributes
    
    
    freeTextQualification: Array<freeTextQualificationType>
    
    
    freeText: Array<string>
    
}

export interface productErrorCodeTypeAttributes {
    
}


export interface priceInfoType {
    
    $attributes: priceInfoTypeAttributes
    
    
    monetaryRates: monetaryRatesType
    
    
    taxAmount: Array<taxAmountType>
    
    
    fareTypeInfo: Array<fareTypeInfoType>
    
}

export interface priceInfoTypeAttributes {
    
}


export interface monetaryRatesType {
    
    $attributes: monetaryRatesTypeAttributes
    
    
    monetaryDetails: monetaryDetailsType
    
    
    amountTwo: Array<amountTwoType>
    
}

export interface monetaryRatesTypeAttributes {
    
}


export interface monetaryDetailsType {
    
    $attributes: monetaryDetailsTypeAttributes
    
    
    typeQualifier: string
    
    
    amount: number
    
    
    currency: Array<string>
    
}

export interface monetaryDetailsTypeAttributes {
    
}


export interface amountTwoType {
    
    $attributes: amountTwoTypeAttributes
    
    
    typeQualifier: string
    
    
    amount: number
    
    
    currency: Array<string>
    
}

export interface amountTwoTypeAttributes {
    
}


export interface taxAmountType {
    
    $attributes: taxAmountTypeAttributes
    
    
    taxDetails: Array<taxDetailsType>
    
}

export interface taxAmountTypeAttributes {
    
}


export interface taxDetailsType {
    
    $attributes: taxDetailsTypeAttributes
    
    
    rate: Array<number>
    
    
    countryCode: Array<string>
    
    
    currencyCode: Array<string>
    
    
    type: Array<string>
    
}

export interface taxDetailsTypeAttributes {
    
}


export interface fareTypeInfoType {
    
    $attributes: fareTypeInfoTypeAttributes
    
    
    fareDetailQualif: fareDetailQualifType
    
    
    flightMovementDate: Array<flightMovementDateType>
    
    
    faraRulesInfo: Array<faraRulesInfoType>
    
    
    selectionMakingDetails: Array<selectionMakingDetailsType1>
    
    
    amountConvDetails: Array<amountConvDetailsType>
    
}

export interface fareTypeInfoTypeAttributes {
    
}


export interface fareDetailQualifType {
    
    $attributes: fareDetailQualifTypeAttributes
    
    
    movementType: Array<string>
    
    
    fareCategories: Array<fareCategoriesType1>
    
    
    fareDetails: Array<fareDetailsType1>
    
    
    additionalFareDetails: Array<additionalFareDetailsType1>
    
    
    discountDetails: Array<discountDetailsType1>
    
}

export interface fareDetailQualifTypeAttributes {
    
}


export interface flightMovementDateType {
    
    $attributes: flightMovementDateTypeAttributes
    
    
    dateAndTimeDetails: Array<dateAndTimeDetailsType1>
    
}

export interface flightMovementDateTypeAttributes {
    
}


export interface dateAndTimeDetailsType1 {
    
    $attributes: dateAndTimeDetailsType1Attributes
    
    
    qualifier: Array<string>
    
    
    date: Array<string>
    
}

export interface dateAndTimeDetailsType1Attributes {
    
}


export interface faraRulesInfoType {
    
    $attributes: faraRulesInfoTypeAttributes
    
    
    ruleSectionLocalId: Array<string>
    
    
    companyDetails: Array<companyDetailsType1>
    
    
    ruleCategoryCode: Array<string>
    
}

export interface faraRulesInfoTypeAttributes {
    
}


export interface selectionMakingDetailsType1 {
    
    $attributes: selectionMakingDetailsType1Attributes
    
    
    selectionDetails: selectionDetailsType1
    
    
    selectionDetailsTwo: Array<selectionDetailsTwoType1>
    
}

export interface selectionMakingDetailsType1Attributes {
    
}


export interface selectionDetailsType1 {
    
    $attributes: selectionDetailsType1Attributes
    
    
    option: string
    
    
    optionInformation: Array<string>
    
}

export interface selectionDetailsType1Attributes {
    
}


export interface selectionDetailsTwoType1 {
    
    $attributes: selectionDetailsTwoType1Attributes
    
    
    option: string
    
    
    optionInformation: Array<string>
    
}

export interface selectionDetailsTwoType1Attributes {
    
}


export interface amountConvDetailsType {
    
    $attributes: amountConvDetailsTypeAttributes
    
    
    conversionRateDetails: conversionRateDetailsType1
    
    
    otherConversionRateDetails: Array<otherConversionRateDetailsType>
    
}

export interface amountConvDetailsTypeAttributes {
    
}


export interface fareDetailInfoType {
    
    $attributes: fareDetailInfoTypeAttributes
    
    
    nbOfUnits: nbOfUnitsType
    
    
    pricingPlusDateInfo: Array<pricingPlusDateInfoType>
    
    
    fareDeatilInfo: Array<fareDeatilInfoType>
    
}

export interface fareDetailInfoTypeAttributes {
    
}


export interface nbOfUnitsType {
    
    $attributes: nbOfUnitsTypeAttributes
    
    
    quantityDetails: Array<quantityDetailsType1>
    
}

export interface nbOfUnitsTypeAttributes {
    
}


export interface pricingPlusDateInfoType {
    
    $attributes: pricingPlusDateInfoTypeAttributes
    
    
    productDateTimeDetails: Array<productDateTimeDetailsType1>
    
    
    locationDetails: Array<locationDetailsType1>
    
    
    otherLocationDetails: Array<otherLocationDetailsType1>
    
    
    idNumber: Array<string>
    
}

export interface pricingPlusDateInfoTypeAttributes {
    
}


export interface fareDeatilInfoType {
    
    $attributes: fareDeatilInfoTypeAttributes
    
    
    fareTypeGrouping: Array<fareTypeGroupingType1>
    
}

export interface fareDeatilInfoTypeAttributes {
    
}


export interface fareTypeGroupingType1 {
    
    $attributes: fareTypeGroupingType1Attributes
    
    
    pricingGroup: Array<string>
    
}

export interface fareTypeGroupingType1Attributes {
    
}


export interface odiGrpType {
    
    $attributes: odiGrpTypeAttributes
    
    
    originDestination: originDestinationType
    
    
    flightDateAndTime: Array<flightDateAndTimeType>
    
    
    flightErrorText: Array<flightErrorTextType>
    
    
    monGrp: Array<monGrpType>
    
    
    routingGrp: Array<routingGrpType>
    
    
    travelProductGrp: Array<travelProductGrpType>
    
}

export interface odiGrpTypeAttributes {
    
}


export interface originDestinationType {
    
    $attributes: originDestinationTypeAttributes
    
    
    origin: Array<string>
    
    
    destination: Array<string>
    
}

export interface originDestinationTypeAttributes {
    
}


export interface flightDateAndTimeType {
    
    $attributes: flightDateAndTimeTypeAttributes
    
}

export interface flightDateAndTimeTypeAttributes {
    
}


export interface flightErrorTextType {
    
    $attributes: flightErrorTextTypeAttributes
    
    
    freeTextQualification: Array<freeTextQualificationType>
    
    
    freeText: Array<string>
    
}

export interface flightErrorTextTypeAttributes {
    
}


export interface monGrpType {
    
    $attributes: monGrpTypeAttributes
    
    
    monetaryValues: monetaryValuesType
    
    
    fareDetailGrp: Array<fareDetailGrpType>
    
}

export interface monGrpTypeAttributes {
    
}


export interface monetaryValuesType {
    
    $attributes: monetaryValuesTypeAttributes
    
    
    monetaryDetails: monetaryDetailsType
    
    
    amountTwo: Array<amountTwoType>
    
}

export interface monetaryValuesTypeAttributes {
    
}


export interface fareDetailGrpType {
    
    $attributes: fareDetailGrpTypeAttributes
    
    
    fareQualif: fareQualifType
    
    
    amountCvtRate: Array<amountCvtRateType>
    
}

export interface fareDetailGrpTypeAttributes {
    
}


export interface fareQualifType {
    
    $attributes: fareQualifTypeAttributes
    
    
    movementType: Array<string>
    
    
    fareCategories: Array<fareCategoriesType1>
    
    
    fareDetails: Array<fareDetailsType1>
    
    
    additionalFareDetails: Array<additionalFareDetailsType1>
    
    
    discountDetails: Array<discountDetailsType1>
    
}

export interface fareQualifTypeAttributes {
    
}


export interface amountCvtRateType {
    
    $attributes: amountCvtRateTypeAttributes
    
    
    conversionRateDetails: conversionRateDetailsType1
    
    
    otherConversionRateDetails: Array<otherConversionRateDetailsType>
    
}

export interface amountCvtRateTypeAttributes {
    
}


export interface routingGrpType {
    
    $attributes: routingGrpTypeAttributes
    
    
    routingInfo: routingInfoType1
    
    
    serviceTransport: Array<serviceTransportType>
    
    
    qualificationOfFare: Array<qualificationOfFareType>
    
    
    pertinentQuantity: Array<pertinentQuantityType1>
    
}

export interface routingGrpTypeAttributes {
    
}


export interface routingInfoType1 {
    
    $attributes: routingInfoType1Attributes
    
    
    routingDetails: Array<routingDetailsType1>
    
}

export interface routingInfoType1Attributes {
    
}


export interface routingDetailsType1 {
    
    $attributes: routingDetailsType1Attributes
    
    
    station: Array<string>
    
    
    otherStation: Array<string>
    
    
    qualifier: Array<string>
    
}

export interface routingDetailsType1Attributes {
    
}


export interface serviceTransportType {
    
    $attributes: serviceTransportTypeAttributes
    
    
    companyIdentification: companyIdentificationType1
    
    
    productIdentificationDetails: Array<productIdentificationDetailsType1>
    
}

export interface serviceTransportTypeAttributes {
    
}


export interface qualificationOfFareType {
    
    $attributes: qualificationOfFareTypeAttributes
    
    
    movementType: Array<string>
    
    
    fareCategories: Array<fareCategoriesType1>
    
    
    fareDetails: Array<fareDetailsType1>
    
    
    additionalFareDetails: Array<additionalFareDetailsType1>
    
    
    discountDetails: Array<discountDetailsType1>
    
}

export interface qualificationOfFareTypeAttributes {
    
}


export interface pertinentQuantityType1 {
    
    $attributes: pertinentQuantityType1Attributes
    
    
    quantityDetails: Array<quantityDetailsType1>
    
}

export interface pertinentQuantityType1Attributes {
    
}


export interface travelProductGrpType {
    
    $attributes: travelProductGrpTypeAttributes
    
    
    travelProductInfo: travelProductInfoType
    
    
    routingGrp: Array<routingGrpType>
    
}

export interface travelProductGrpTypeAttributes {
    
}


export interface travelProductInfoType {
    
    $attributes: travelProductInfoTypeAttributes
    
    
    flightDate: Array<flightDateType>
    
    
    boardPointDetails: Array<boardPointDetailsType>
    
    
    offpointDetails: Array<offpointDetailsType>
    
    
    companyDetails: Array<companyDetailsType1>
    
    
    flightIdentification: Array<flightIdentificationType>
    
    
    flightTypeDetails: Array<flightTypeDetailsType>
    
    
    itemNumber: Array<number>
    
    
    specialSegment: Array<string>
    
    
    marriageDetails: Array<marriageDetailsType>
    
}

export interface travelProductInfoTypeAttributes {
    
}


export interface flightDateType {
    
    $attributes: flightDateTypeAttributes
    
    
    departureDate: Array<string>
    
    
    arrivalDate: Array<string>
    
}

export interface flightDateTypeAttributes {
    
}


export interface boardPointDetailsType {
    
    $attributes: boardPointDetailsTypeAttributes
    
    
    trueLocationId: Array<string>
    
    
    trueLocation: Array<string>
    
}

export interface boardPointDetailsTypeAttributes {
    
}


export interface offpointDetailsType {
    
    $attributes: offpointDetailsTypeAttributes
    
    
    trueLocationId: Array<string>
    
    
    trueLocation: Array<string>
    
}

export interface offpointDetailsTypeAttributes {
    
}


export interface flightIdentificationType {
    
    $attributes: flightIdentificationTypeAttributes
    
    
    flightNumber: string
    
    
    operationalSuffix: Array<string>
    
}

export interface flightIdentificationTypeAttributes {
    
}


export interface flightTypeDetailsType {
    
    $attributes: flightTypeDetailsTypeAttributes
    
    
    flightIndicator: string
    
    
    secondSequenceNb: Array<string>
    
}

export interface flightTypeDetailsTypeAttributes {
    
}


export interface marriageDetailsType {
    
    $attributes: marriageDetailsTypeAttributes
    
    
    relation: Array<string>
    
    
    marriageIdentifier: Array<number>
    
    
    lineNumber: Array<number>
    
    
    otherRelation: Array<string>
    
    
    carrierCode: Array<string>
    
}

export interface marriageDetailsTypeAttributes {
    
}


export interface travellerGrpType {
    
    $attributes: travellerGrpTypeAttributes
    
    
    travellerIdentRef: travellerIdentRefType
    
    
    fareRulesDetails: Array<fareRulesDetailsType>
    
    
    flightMovementDateInfo: Array<flightMovementDateInfoType>
    
}

export interface travellerGrpTypeAttributes {
    
}


export interface travellerIdentRefType {
    
    $attributes: travellerIdentRefTypeAttributes
    
    
    referenceDetails: Array<referenceDetailsType1>
    
}

export interface travellerIdentRefTypeAttributes {
    
}


export interface referenceDetailsType1 {
    
    $attributes: referenceDetailsType1Attributes
    
    
    type: Array<string>
    
    
    value: Array<number>
    
}

export interface referenceDetailsType1Attributes {
    
}


export interface fareRulesDetailsType {
    
    $attributes: fareRulesDetailsTypeAttributes
    
    
    tariffClassId: Array<string>
    
    
    companyDetails: Array<companyDetailsType1>
    
    
    ruleSectionId: Array<string>
    
}

export interface fareRulesDetailsTypeAttributes {
    
}


export interface flightMovementDateInfoType {
    
    $attributes: flightMovementDateInfoTypeAttributes
    
    
    dateAndTimeDetails: Array<dateAndTimeDetailsType1>
    
}

export interface flightMovementDateInfoTypeAttributes {
    
}


export interface fareRouteGrpType {
    
    $attributes: fareRouteGrpTypeAttributes
    
    
    fareRouteInfo: fareRouteInfoType
    
    
    journeyGrp: Array<journeyGrpType>
    
}

export interface fareRouteGrpTypeAttributes {
    
}


export interface journeyGrpType {
    
    $attributes: journeyGrpTypeAttributes
    
    
    journeyOriginAndDestination: journeyOriginAndDestinationType
    
    
    journeyProductGrp: Array<journeyProductGrpType>
    
}

export interface journeyGrpTypeAttributes {
    
}


export interface journeyOriginAndDestinationType {
    
    $attributes: journeyOriginAndDestinationTypeAttributes
    
    
    origin: Array<string>
    
    
    destination: Array<string>
    
}

export interface journeyOriginAndDestinationTypeAttributes {
    
}


export interface journeyProductGrpType {
    
    $attributes: journeyProductGrpTypeAttributes
    
    
    journeyProductInfo: journeyProductInfoType
    
    
    journeyRoutingGrp: Array<journeyRoutingGrpType>
    
}

export interface journeyProductGrpTypeAttributes {
    
}


export interface journeyProductInfoType {
    
    $attributes: journeyProductInfoTypeAttributes
    
    
    flightDate: Array<flightDateType>
    
    
    boardPointDetails: Array<boardPointDetailsType>
    
    
    offpointDetails: Array<offpointDetailsType>
    
    
    companyDetails: Array<companyDetailsType1>
    
    
    flightIdentification: Array<flightIdentificationType>
    
    
    flightTypeDetails: Array<flightTypeDetailsType>
    
    
    itemNumber: Array<number>
    
    
    specialSegment: Array<string>
    
    
    marriageDetails: Array<marriageDetailsType>
    
}

export interface journeyProductInfoTypeAttributes {
    
}


export interface journeyRoutingGrpType {
    
    $attributes: journeyRoutingGrpTypeAttributes
    
    
    journeyRoutingInfo: journeyRoutingInfoType
    
    
    journeyTransportService: Array<journeyTransportServiceType>
    
}

export interface journeyRoutingGrpTypeAttributes {
    
}


export interface journeyRoutingInfoType {
    
    $attributes: journeyRoutingInfoTypeAttributes
    
    
    routingDetails: Array<routingDetailsType1>
    
}

export interface journeyRoutingInfoTypeAttributes {
    
}


export interface journeyTransportServiceType {
    
    $attributes: journeyTransportServiceTypeAttributes
    
    
    companyIdentification: companyIdentificationType1
    
    
    productIdentificationDetails: Array<productIdentificationDetailsType1>
    
}

export interface journeyTransportServiceTypeAttributes {
    
}


export interface itemGrpType {
    
    $attributes: itemGrpTypeAttributes
    
    
    itemNb: itemNbType
    
    
    productAvailabilityStatus: Array<productAvailabilityStatusType>
    
    
    quantityItem: Array<quantityItemType>
    
    
    transportServiceItem: Array<transportServiceItemType>
    
    
    freeTextItem: Array<freeTextItemType>
    
    
    fareQualifItem: Array<fareQualifItemType>
    
    
    originDestinationGrp: Array<originDestinationGrpType>
    
    
    unitGrp: Array<unitGrpType>
    
    
    monetaryGrp: Array<monetaryGrpType>
    
    
    farerouteGrp: Array<farerouteGrpType>
    
}

export interface itemGrpTypeAttributes {
    
}


export interface itemNbType {
    
    $attributes: itemNbTypeAttributes
    
    
    itemNumberDetails: Array<itemNumberDetailsType1>
    
}

export interface itemNbTypeAttributes {
    
}


export interface itemNumberDetailsType1 {
    
    $attributes: itemNumberDetailsType1Attributes
    
    
    number: Array<string>
    
    
    type: Array<string>
    
}

export interface itemNumberDetailsType1Attributes {
    
}


export interface productAvailabilityStatusType {
    
    $attributes: productAvailabilityStatusTypeAttributes
    
    
    productDetailsQualifier: Array<string>
    
    
    bookingClassDetails: Array<bookingClassDetailsType1>
    
}

export interface productAvailabilityStatusTypeAttributes {
    
}


export interface quantityItemType {
    
    $attributes: quantityItemTypeAttributes
    
    
    quantityDetails: Array<quantityDetailsType1>
    
}

export interface quantityItemTypeAttributes {
    
}


export interface transportServiceItemType {
    
    $attributes: transportServiceItemTypeAttributes
    
    
    companyIdentification: companyIdentificationType1
    
    
    productIdentificationDetails: Array<productIdentificationDetailsType1>
    
}

export interface transportServiceItemTypeAttributes {
    
}


export interface freeTextItemType {
    
    $attributes: freeTextItemTypeAttributes
    
    
    freeTextQualification: Array<freeTextQualificationType>
    
    
    freeText: Array<string>
    
}

export interface freeTextItemTypeAttributes {
    
}


export interface fareQualifItemType {
    
    $attributes: fareQualifItemTypeAttributes
    
    
    movementType: Array<string>
    
    
    fareCategories: Array<fareCategoriesType1>
    
    
    fareDetails: Array<fareDetailsType1>
    
    
    additionalFareDetails: Array<additionalFareDetailsType1>
    
    
    discountDetails: Array<discountDetailsType1>
    
}

export interface fareQualifItemTypeAttributes {
    
}


export interface originDestinationGrpType {
    
    $attributes: originDestinationGrpTypeAttributes
    
    
    originDestOfJourney: originDestOfJourneyType
    
    
    dateForMovements: Array<dateForMovementsType>
    
    
    routingForJourney: Array<routingForJourneyType>
    
}

export interface originDestinationGrpTypeAttributes {
    
}


export interface originDestOfJourneyType {
    
    $attributes: originDestOfJourneyTypeAttributes
    
    
    origin: Array<string>
    
    
    destination: Array<string>
    
}

export interface originDestOfJourneyTypeAttributes {
    
}


export interface dateForMovementsType {
    
    $attributes: dateForMovementsTypeAttributes
    
    
    dateAndTimeDetails: Array<dateAndTimeDetailsType1>
    
}

export interface dateForMovementsTypeAttributes {
    
}


export interface routingForJourneyType {
    
    $attributes: routingForJourneyTypeAttributes
    
    
    routingDetails: Array<routingDetailsType1>
    
}

export interface routingForJourneyTypeAttributes {
    
}


export interface unitGrpType {
    
    $attributes: unitGrpTypeAttributes
    
    
    nbOfUnits: nbOfUnitsType
    
    
    unitPricingAndDateInfo: Array<unitPricingAndDateInfoType>
    
    
    unitFareDetails: Array<unitFareDetailsType>
    
}

export interface unitGrpTypeAttributes {
    
}


export interface unitPricingAndDateInfoType {
    
    $attributes: unitPricingAndDateInfoTypeAttributes
    
    
    productDateTimeDetails: Array<productDateTimeDetailsType1>
    
    
    locationDetails: Array<locationDetailsType1>
    
    
    otherLocationDetails: Array<otherLocationDetailsType1>
    
    
    idNumber: Array<string>
    
}

export interface unitPricingAndDateInfoTypeAttributes {
    
}


export interface unitFareDetailsType {
    
    $attributes: unitFareDetailsTypeAttributes
    
    
    fareTypeGrouping: Array<fareTypeGroupingType1>
    
}

export interface unitFareDetailsTypeAttributes {
    
}


export interface monetaryGrpType {
    
    $attributes: monetaryGrpTypeAttributes
    
    
    monetaryValues: monetaryValuesType
    
    
    monetFareRuleValues: Array<monetFareRuleValuesType>
    
    
    monetTravellerRef: Array<monetTravellerRefType>
    
    
    monetTicketPriceAndDate: Array<monetTicketPriceAndDateType>
    
    
    monetTaxValues: Array<monetTaxValuesType>
    
    
    qualifGrp: Array<qualifGrpType>
    
}

export interface monetaryGrpTypeAttributes {
    
}


export interface monetFareRuleValuesType {
    
    $attributes: monetFareRuleValuesTypeAttributes
    
    
    ruleSectionLocalId: Array<string>
    
    
    companyDetails: Array<companyDetailsType1>
    
    
    ruleCategoryCode: Array<string>
    
}

export interface monetFareRuleValuesTypeAttributes {
    
}


export interface monetTravellerRefType {
    
    $attributes: monetTravellerRefTypeAttributes
    
    
    referenceDetails: Array<referenceDetailsType1>
    
}

export interface monetTravellerRefTypeAttributes {
    
}


export interface monetTicketPriceAndDateType {
    
    $attributes: monetTicketPriceAndDateTypeAttributes
    
    
    productDateTimeDetails: Array<productDateTimeDetailsType1>
    
    
    locationDetails: Array<locationDetailsType1>
    
    
    otherLocationDetails: Array<otherLocationDetailsType1>
    
    
    idNumber: Array<string>
    
}

export interface monetTicketPriceAndDateTypeAttributes {
    
}


export interface monetTaxValuesType {
    
    $attributes: monetTaxValuesTypeAttributes
    
    
    taxDetails: Array<taxDetailsType>
    
}

export interface monetTaxValuesTypeAttributes {
    
}


export interface qualifGrpType {
    
    $attributes: qualifGrpTypeAttributes
    
    
    qualificationFare: qualificationFareType
    
    
    qualifSelection: Array<qualifSelectionType>
    
    
    qualifDateFlightMovement: Array<qualifDateFlightMovementType>
    
    
    qualifConversionRate: Array<qualifConversionRateType>
    
}

export interface qualifGrpTypeAttributes {
    
}


export interface qualificationFareType {
    
    $attributes: qualificationFareTypeAttributes
    
    
    movementType: Array<string>
    
    
    fareCategories: Array<fareCategoriesType1>
    
    
    fareDetails: Array<fareDetailsType1>
    
    
    additionalFareDetails: Array<additionalFareDetailsType1>
    
    
    discountDetails: Array<discountDetailsType1>
    
}

export interface qualificationFareTypeAttributes {
    
}


export interface qualifSelectionType {
    
    $attributes: qualifSelectionTypeAttributes
    
    
    selectionDetails: selectionDetailsType1
    
    
    selectionDetailsTwo: Array<selectionDetailsTwoType1>
    
}

export interface qualifSelectionTypeAttributes {
    
}


export interface qualifDateFlightMovementType {
    
    $attributes: qualifDateFlightMovementTypeAttributes
    
    
    dateAndTimeDetails: Array<dateAndTimeDetailsType1>
    
}

export interface qualifDateFlightMovementTypeAttributes {
    
}


export interface qualifConversionRateType {
    
    $attributes: qualifConversionRateTypeAttributes
    
    
    conversionRateDetails: conversionRateDetailsType1
    
    
    otherConversionRateDetails: Array<otherConversionRateDetailsType>
    
}

export interface qualifConversionRateTypeAttributes {
    
}


export interface farerouteGrpType {
    
    $attributes: farerouteGrpTypeAttributes
    
    
    infoForFareRoute: infoForFareRouteType
    
    
    farerouteTransportService: Array<farerouteTransportServiceType>
    
    
    finalOdiGrp: Array<finalOdiGrpType>
    
}

export interface farerouteGrpTypeAttributes {
    
}


export interface infoForFareRouteType {
    
    $attributes: infoForFareRouteTypeAttributes
    
    
    dayOfWeek: Array<string>
    
    
    fareQualifierDetails: Array<fareQualifierDetailsType>
    
    
    identificationNumber: Array<string>
    
    
    validityPeriod: Array<validityPeriodType>
    
}

export interface infoForFareRouteTypeAttributes {
    
}


export interface farerouteTransportServiceType {
    
    $attributes: farerouteTransportServiceTypeAttributes
    
    
    companyIdentification: companyIdentificationType1
    
    
    productIdentificationDetails: Array<productIdentificationDetailsType1>
    
}

export interface farerouteTransportServiceTypeAttributes {
    
}


export interface finalOdiGrpType {
    
    $attributes: finalOdiGrpTypeAttributes
    
    
    finalOriginDestination: finalOriginDestinationType
    
    
    lastOdiRoutingInfo: Array<lastOdiRoutingInfoType>
    
    
    lastOdiDateFlightMovement: Array<lastOdiDateFlightMovementType>
    
}

export interface finalOdiGrpTypeAttributes {
    
}


export interface finalOriginDestinationType {
    
    $attributes: finalOriginDestinationTypeAttributes
    
    
    origin: Array<string>
    
    
    destination: Array<string>
    
}

export interface finalOriginDestinationTypeAttributes {
    
}


export interface lastOdiRoutingInfoType {
    
    $attributes: lastOdiRoutingInfoTypeAttributes
    
    
    routingDetails: Array<routingDetailsType1>
    
}

export interface lastOdiRoutingInfoTypeAttributes {
    
}


export interface lastOdiDateFlightMovementType {
    
    $attributes: lastOdiDateFlightMovementTypeAttributes
    
    
    dateAndTimeDetails: Array<dateAndTimeDetailsType1>
    
}

export interface lastOdiDateFlightMovementTypeAttributes {
    
}


export interface Fare_MasterPricerCalendarType {
    
    $attributes: Fare_MasterPricerCalendarTypeAttributes
    
    // Number of seats , recommendations.
    numberOfUnit: Array<NumberOfUnitsType>
    
    // Global options
    globalOptions: Array<AttributeType>
    
    // Traveler Details
    paxReference: Array<TravellerReferenceInformationType>
    
    // Customer references
    customerRef: Array<ConsumerReferenceInformationType>
    
    // Search options
    searchOptions: Array<AttributeList>
    
    // Fee with different payment forms by passenger.
    formOfPaymentByPassenger: Array<FOPRepresentationType>
    
    // Solution Family
    solutionFamily: Array<FareInformationType>
    
    // Passenger info group (9 ADT + 9 IN)
    passengerInfoGrp: Array<GroupPassengerDetailsType>
    
    // Fare families.
    fareFamilies: Array<fareFamiliesType>
    
    // Fare options
    fareOptions: Array<fareOptionsType>
    
    // Indicates Price to beat
    priceToBeat: Array<MonetaryInformationType>
    
    // Tax Details
    taxInfo: Array<TaxType1>
    
    // Details of a Flight : Direct, Non stop...
    travelFlightInfo: Array<TravelFlightInformationType_199258S>
    
    
    valueSearch: Array<ValueSearchCriteriaType>
    
    // Buckets
    buckets: Array<bucketsType>
    
    // Itinerary
    itinerary: Array<itineraryType>
    
    // Changed ticket information.
    ticketChangeInfo: Array<ticketChangeInfoType>
    
    // Specify fare family combinations
    combinationFareFamilies: Array<combinationFareFamiliesType>
    
    // Fee option group.
    feeOption: Array<feeOptionType>
    
    // List of Office Id Details
    officeIdDetails: Array<officeIdDetailsType>
    
}

export interface Fare_MasterPricerCalendarTypeAttributes {
    
}

// To specify the number of Units required
export interface NumberOfUnitsType {
    
    $attributes: NumberOfUnitsTypeAttributes
    
    // NUMBER OF UNIT DETAILS
    unitNumberDetail: Array<NumberOfUnitDetailsType_270113C>
    
}

export interface NumberOfUnitsTypeAttributes {
    
}


export interface NumberOfUnitDetailsType_270113C {
    
    $attributes: NumberOfUnitDetailsType_270113CAttributes
    
    // Number of Units
    numberOfUnits: number
    
    // Number of unit qualifier
    typeOfUnit: string
    
}

export interface NumberOfUnitDetailsType_270113CAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType {
    
    $attributes: AttributeTypeAttributes
    
    // Option parameters
    selectionDetails: Array<AttributeInformationType>
    
}

export interface AttributeTypeAttributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationType {
    
    $attributes: AttributeInformationTypeAttributes
    
    // Code of options
    option: string
    
    // Mandatory when alternate date option is used (ALT), must be set to plus (P) or minus (M) a number of days around the original PNR segment dates. E.g.: M1 (for minus 1 day) or P100 (for plus 100 days)
    optionInformation: Array<string>
    
}

export interface AttributeInformationTypeAttributes {
    
}

// To specify traveller/personal details
export interface TravellerReferenceInformationType {
    
    $attributes: TravellerReferenceInformationTypeAttributes
    
    // Requested passenger type
    ptc: Array<string>
    
    // Traveller details
    traveller: Array<TravellerDetailsType>
    
}

export interface TravellerReferenceInformationTypeAttributes {
    
}


export interface TravellerDetailsType {
    
    $attributes: TravellerDetailsTypeAttributes
    
    // Direct reference of passenger assigned by requesting system.
    ref: number
    
    // Traveller is an infant
    infantIndicator: Array<number>
    
}

export interface TravellerDetailsTypeAttributes {
    
}

// To specify consumer reference information.
export interface ConsumerReferenceInformationType {
    
    $attributes: ConsumerReferenceInformationTypeAttributes
    
    // Customer references
    customerReferences: Array<ConsumerReferenceIdentificationTypeI>
    
}

export interface ConsumerReferenceInformationTypeAttributes {
    
}

// Identification of consumer references by type, company, number and reference to a traveller.
export interface ConsumerReferenceIdentificationTypeI {
    
    $attributes: ConsumerReferenceIdentificationTypeIAttributes
    
    
    referenceQualifier: string
    
    
    referenceNumber: Array<string>
    
    
    referencePartyName: Array<string>
    
    
    travellerReferenceNbr: Array<string>
    
}

export interface ConsumerReferenceIdentificationTypeIAttributes {
    
}


export interface AttributeList {
    
    $attributes: AttributeListAttributes
    
    // Qualifier
    qualifier: Array<string>
    
    // Attribute details
    attributeDetails: Array<AttributeDetails>
    
}

export interface AttributeListAttributes {
    
}


export interface AttributeDetails {
    
    $attributes: AttributeDetailsAttributes
    
    // Qualifier
    qualifier: Array<string>
    
    // Value
    value: Array<string>
    
}

export interface AttributeDetailsAttributes {
    
}


export interface FOPRepresentationType {
    
    $attributes: FOPRepresentationTypeAttributes
    
    // Form of payment information.
    formOfPaymentDetails: FormOfPaymentTypeI
    
    // Fee/Reduction Passenger reference.
    passengerFeeReference: Array<ItemReferencesAndVersionsType>
    
}

export interface FOPRepresentationTypeAttributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentTypeI {
    
    $attributes: FormOfPaymentTypeIAttributes
    
    // FORM OF PAYMENT DETAILS
    formOfPaymentDetails: Array<FormOfPaymentDetailsTypeI>
    
}

export interface FormOfPaymentTypeIAttributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsTypeI {
    
    $attributes: FormOfPaymentDetailsTypeIAttributes
    
    // Form of payment identification
    type: string
    
    // amount to be charged on this form
    chargedAmount: Array<number>
    
    // Reference number
    creditCardNumber: Array<string>
    
}

export interface FormOfPaymentDetailsTypeIAttributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType {
    
    $attributes: ItemReferencesAndVersionsTypeAttributes
    
    // Reference Qualifier.
    passengerFeeRefType: Array<string>
    
    // Reference number.
    passengerFeeRefNumber: Array<number>
    
    // Unique id description.
    otherCharacteristics: Array<UniqueIdDescriptionType>
    
}

export interface ItemReferencesAndVersionsTypeAttributes {
    
}


export interface UniqueIdDescriptionType {
    
    $attributes: UniqueIdDescriptionTypeAttributes
    
    // Reference qualifier.
    passengerFeeRefQualif: Array<string>
    
}

export interface UniqueIdDescriptionTypeAttributes {
    
}


export interface FareInformationType {
    
    $attributes: FareInformationTypeAttributes
    
    // Value Qualifier
    valueQualifier: Array<string>
    
    // Value
    value: Array<number>
    
    // Fare Details
    fareDetails: Array<FareDetailsType>
    
    // Identity Number
    identityNumber: Array<string>
    
    // Fare Type Grouping
    fareTypeGrouping: Array<FareTypeGroupingInformationType>
    
    // Rate Category
    rateCategory: Array<string>
    
}

export interface FareInformationTypeAttributes {
    
}


export interface FareDetailsType {
    
    $attributes: FareDetailsTypeAttributes
    
    // Qualifier
    qualifier: Array<string>
    
    // Rate
    rate: Array<number>
    
    // Country
    country: Array<string>
    
    // Fare Category
    fareCategory: Array<string>
    
}

export interface FareDetailsTypeAttributes {
    
}


export interface FareTypeGroupingInformationType {
    
    $attributes: FareTypeGroupingInformationTypeAttributes
    
    // Pricing Group
    pricingGroup: Array<string>
    
}

export interface FareTypeGroupingInformationTypeAttributes {
    
}

// Contain passenger information
export interface GroupPassengerDetailsType {
    
    $attributes: GroupPassengerDetailsTypeAttributes
    
    // Trigger
    passengerReference: SegmentRepetitionControlTypeI
    
    // pricing option at passenger level
    psgDetailsInfo: Array<psgDetailsInfoType>
    
}

export interface GroupPassengerDetailsTypeAttributes {
    
}

// To indicate the number of segment group repetitions.
export interface SegmentRepetitionControlTypeI {
    
    $attributes: SegmentRepetitionControlTypeIAttributes
    
    // Segment control details
    segmentControlDetails: Array<SegmentRepetitionControlDetailsTypeI>
    
}

export interface SegmentRepetitionControlTypeIAttributes {
    
}

// Information about the number of selection segments to be processed.
export interface SegmentRepetitionControlDetailsTypeI {
    
    $attributes: SegmentRepetitionControlDetailsTypeIAttributes
    
    // traveller number
    quantity: Array<number>
    
}

export interface SegmentRepetitionControlDetailsTypeIAttributes {
    
}


export interface psgDetailsInfoType {
    
    $attributes: psgDetailsInfoTypeAttributes
    
    // PTC/Discount Code age
    discountPtc: FareInformationTypeI
    
    // Tier level information
    flequentFlyerDetails: Array<FrequentTravellerIdentificationCodeType>
    
}

export interface psgDetailsInfoTypeAttributes {
    
}

// To specify fare details.
export interface FareInformationTypeI {
    
    $attributes: FareInformationTypeIAttributes
    
    // PTC (Full Codeset List described in ATPCo Documentation B11109 Appendix A)
    valueQualifier: Array<string>
    
    // age
    value: Array<number>
    
}

export interface FareInformationTypeIAttributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType {
    
    $attributes: FrequentTravellerIdentificationCodeTypeAttributes
    
    // Frequent Traveller Info
    frequentTravellerDetails: Array<FrequentTravellerIdentificationType>
    
}

export interface FrequentTravellerIdentificationCodeTypeAttributes {
    
}


export interface FrequentTravellerIdentificationType {
    
    $attributes: FrequentTravellerIdentificationTypeAttributes
    
    // Carrier where the FQTV is registered.
    carrier: Array<string>
    
    
    number: Array<string>
    
    // Specifies which traveller in the TIF segment the frequent traveller number applies (same as 9944 in TIF).
    customerReference: Array<string>
    
    // status code: &#39;OK&#39; if the frequent flyer card has been validated
    status: Array<string>
    
    // To specify a Tier linked to the FQTV
    tierLevel: Array<string>
    
    // For example : priority code
    priorityCode: Array<string>
    
    // For example : Level description
    tierDescription: Array<string>
    
    // For example : Company code of alliance
    companyCode: Array<string>
    
    
    customerValue: Array<number>
    
    // To specify the product/account number qualifier. (e.g. 2=Corporate Frequent Flyer).
    type: Array<string>
    
}

export interface FrequentTravellerIdentificationTypeAttributes {
    
}


export interface fareFamiliesType {
    
    $attributes: fareFamiliesTypeAttributes
    
    // Segment used to target Commercial Fare Family.
    familyInformation: FareFamilyType_80157S
    
    // Description of Fare Family Criteria.
    familyCriteria: Array<FareFamilyCriteriaType>
    
    // Fare family requested segment details.
    fareFamilySegment: Array<fareFamilySegmentType>
    
    // Description of other possible fare family criteria.
    otherPossibleCriteria: Array<otherPossibleCriteriaType>
    
}

export interface fareFamiliesTypeAttributes {
    
}

// NEW FARE SEACH
export interface FareFamilyType_80157S {
    
    $attributes: FareFamilyType_80157SAttributes
    
    // Fare Family Reference Number
    refNumber: Array<number>
    
    // Fare Family Short Name
    fareFamilyname: Array<string>
    
    // HIERARCHICAL ORDER WITHIN FARE FAMILY
    hierarchy: Array<number>
    
    // Indicates Commercial Fare Family Short names
    commercialFamilyDetails: Array<FareFamilyDetailsType>
    
}

export interface FareFamilyType_80157SAttributes {
    
}

// NEW FARE SEARCH
export interface FareFamilyDetailsType {
    
    $attributes: FareFamilyDetailsTypeAttributes
    
    // Commercial fare Family Short name
    commercialFamily: string
    
}

export interface FareFamilyDetailsTypeAttributes {
    
}

// Fare family criteria
export interface FareFamilyCriteriaType {
    
    $attributes: FareFamilyCriteriaTypeAttributes
    
    // Fare publishing carrier.
    carrierId: Array<string>
    
    // Reservation booking designator.
    rdb: Array<string>
    
    // Fare family info.
    fareFamilyInfo: Array<FareQualifierInformationType>
    
    // Fare product detail.
    fareProductDetail: Array<FareProductDetailsType>
    
    // Corporate information.
    corporateInfo: Array<MultipleIdentificationNumbersTypeI>
    
    // Indicates flight cabin details.
    cabinProduct: Array<CabinClassDesignationType>
    
    // Cabin processing option.
    cabinProcessingIdentifier: Array<string>
    
    // Product date or time.
    dateTimeDetails: Array<ProductDateTimeTypeI_194583C>
    
    // Other criteria.
    otherCriteria: Array<CodedAttributeInformationType_120742C>
    
}

export interface FareFamilyCriteriaTypeAttributes {
    
}

// To specify multiple qualifier for fare selections.
export interface FareQualifierInformationType {
    
    $attributes: FareQualifierInformationTypeAttributes
    
    // Fare family combinability.
    fareFamilyQual: Array<string>
    
}

export interface FareQualifierInformationTypeAttributes {
    
}


export interface FareProductDetailsType {
    
    $attributes: FareProductDetailsTypeAttributes
    
    // Fare basis code
    fareBasis: Array<string>
    
    // Type of fare
    fareType: Array<string>
    
}

export interface FareProductDetailsTypeAttributes {
    
}

// To specify more than one identification number.
export interface MultipleIdentificationNumbersTypeI {
    
    $attributes: MultipleIdentificationNumbersTypeIAttributes
    
    // Corporate number or ALL.
    corporateNumberIdentifier: Array<string>
    
    // Corporate name.
    corporateName: Array<string>
    
}

export interface MultipleIdentificationNumbersTypeIAttributes {
    
}

// Cabin class designation
export interface CabinClassDesignationType {
    
    $attributes: CabinClassDesignationTypeAttributes
    
    // Cabin designator.
    cabinDesignator: string
    
}

export interface CabinClassDesignationTypeAttributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI_194583C {
    
    $attributes: ProductDateTimeTypeI_194583CAttributes
    
    // Ticketing Purchase Date
    date: string
    
    // Ticketing purchase date
    otherDate: Array<string>
    
}

export interface ProductDateTimeTypeI_194583CAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_120742C {
    
    $attributes: CodedAttributeInformationType_120742CAttributes
    
    // Name.
    name: string
    
    // Value.
    value: Array<string>
    
}

export interface CodedAttributeInformationType_120742CAttributes {
    
}


export interface fareFamilySegmentType {
    
    $attributes: fareFamilySegmentTypeAttributes
    
    // Requested segment reference
    referenceInfo: ReferenceInfoType
    
    // Description of fare family criteria.
    familyCriteria: Array<FareFamilyCriteriaType>
    
}

export interface fareFamilySegmentTypeAttributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInfoType {
    
    $attributes: ReferenceInfoTypeAttributes
    
    // Referencing details
    referencingDetail: Array<ReferencingDetailsType>
    
    
    DummyNET: string
    
}

export interface ReferenceInfoTypeAttributes {
    
}

// Referencing details
export interface ReferencingDetailsType {
    
    $attributes: ReferencingDetailsTypeAttributes
    
    // Segment reference qualifier
    refQualifier: Array<string>
    
    // Flight or flight group reference
    refNumber: number
    
}

export interface ReferencingDetailsTypeAttributes {
    
}


export interface otherPossibleCriteriaType {
    
    $attributes: otherPossibleCriteriaTypeAttributes
    
    // Logical link with other criteria.
    logicalLink: BooleanExpressionRuleType
    
    // Description of fare family criteria.
    familyCriteria: Array<FareFamilyCriteriaType>
    
    // Fare family requested segment details.
    fareFamilySegment: Array<fareFamilySegmentType>
    
}

export interface otherPossibleCriteriaTypeAttributes {
    
}

// To perform boolean operations
export interface BooleanExpressionRuleType {
    
    $attributes: BooleanExpressionRuleTypeAttributes
    
    // Boolean expression associated to the decision rule.
    booleanExpression: ArithmeticEvaluationType
    
}

export interface BooleanExpressionRuleTypeAttributes {
    
}


export interface ArithmeticEvaluationType {
    
    $attributes: ArithmeticEvaluationTypeAttributes
    
    // Boolean operator
    codeOperator: Array<string>
    
}

export interface ArithmeticEvaluationTypeAttributes {
    
}


export interface fareOptionsType {
    
    $attributes: fareOptionsTypeAttributes
    
    // Pricing and ticketing details.
    pricingTickInfo: PricingTicketingDetailsType
    
    // Corporate name/number used to target fares
    corporate: Array<CorporateIdentificationType>
    
    // Ticketing price scheme.
    ticketingPriceScheme: Array<TicketingPriceSchemeType>
    
    // PSR number
    feeIdDescription: Array<CodedAttributeType_199259S>
    
    // Used to force the currency of pricing
    conversionRate: Array<ConversionRateType>
    
    // Form of payment information.
    formOfPayment: Array<FormOfPaymentTypeI>
    
    // Frequent traveller information
    frequentTravellerInfo: Array<FrequentTravellerIdentificationCodeType_177150S>
    
    // Monetary and cabin information.
    monetaryCabinInfo: Array<MonetaryAndCabinInformationType>
    
}

export interface fareOptionsTypeAttributes {
    
}

// To specify pricing/ticketing details
export interface PricingTicketingDetailsType {
    
    $attributes: PricingTicketingDetailsTypeAttributes
    
    // Pricing ticketing Details.
    pricingTicketing: Array<PricingTicketingInformationType>
    
    // PRODUCT DATE OR TIME
    ticketingDate: Array<ProductDateTimeTypeI_194598C>
    
    // COMPANY IDENTIFICATION
    companyId: Array<CompanyIdentificationType>
    
    // LOCATION DETAILS
    sellingPoint: Array<LocationDetailsTypeI>
    
    // LOCATION DETAILS
    ticketingPoint: Array<LocationDetailsTypeI>
    
    // Used to Target Transborder Fares
    journeyOriginPoint: Array<LocationDetailsTypeI>
    
    // Contains the ARC,IATA and ERSP numbers
    corporateId: Array<AgentIdentificationType>
    
}

export interface PricingTicketingDetailsTypeAttributes {
    
}

// To specify indicators related to pricing and ticketing.
export interface PricingTicketingInformationType {
    
    $attributes: PricingTicketingInformationTypeAttributes
    
    // Price type qualifier
    priceType: Array<string>
    
}

export interface PricingTicketingInformationTypeAttributes {
    
}


export interface ProductDateTimeTypeI_194598C {
    
    $attributes: ProductDateTimeTypeI_194598CAttributes
    
    // First date
    date: string
    
    // Half round trip combination.
    rtcDate: Array<string>
    
}

export interface ProductDateTimeTypeI_194598CAttributes {
    
}


export interface CompanyIdentificationType {
    
    $attributes: CompanyIdentificationTypeAttributes
    
}

export interface CompanyIdentificationTypeAttributes {
    
}


export interface LocationDetailsTypeI {
    
    $attributes: LocationDetailsTypeIAttributes
    
    // Place or Location identification
    locationId: string
    
    // Country, coded
    country: Array<string>
    
}

export interface LocationDetailsTypeIAttributes {
    
}


export interface AgentIdentificationType {
    
    $attributes: AgentIdentificationTypeAttributes
    
    // Contains ARC number
    arcNumber: Array<string>
    
    // ERSP number of the Office or Customer
    erspNumber: Array<string>
    
    // IATA Number
    iataNumber: Array<string>
    
}

export interface AgentIdentificationTypeAttributes {
    
}

// To specify corporate number(s) or name(s)
export interface CorporateIdentificationType {
    
    $attributes: CorporateIdentificationTypeAttributes
    
    // Corporate identity
    corporateId: Array<CorporateIdentityType>
    
}

export interface CorporateIdentificationTypeAttributes {
    
}

// Corporate fare types indicated in PTK are detailed
export interface CorporateIdentityType {
    
    $attributes: CorporateIdentityTypeAttributes
    
    // Indicates if 1A corporate (RC) or Unifare corporate (RW) requested.
    corporateQualifier: string
    
    // Corporate contract number or name
    identity: Array<string>
    
}

export interface CorporateIdentityTypeAttributes {
    
}

// Price Scheme Information
export interface TicketingPriceSchemeType {
    
    $attributes: TicketingPriceSchemeTypeAttributes
    
    // PSR (Price Scheme Reference): unique reference of the price scheme as a 8 digit number.
    referenceNumber: string
    
    // Price Scheme Name
    name: Array<string>
    
    // Price Scheme Status. Is the price scheme valid for service fee calculation ?
    status: Array<string>
    
    // free flow description of the price scheme
    description: Array<string>
    
}

export interface TicketingPriceSchemeTypeAttributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_199259S {
    
    $attributes: CodedAttributeType_199259SAttributes
    
    // Fee/reduction Id
    feeId: Array<CodedAttributeInformationType_277155C>
    
}

export interface CodedAttributeType_199259SAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_277155C {
    
    $attributes: CodedAttributeInformationType_277155CAttributes
    
    // Type of fee/reduction
    feeType: string
    
    // Fee Id Number
    feeIdNumber: string
    
}

export interface CodedAttributeInformationType_277155CAttributes {
    
}

// To specify conversion rate details
export interface ConversionRateType {
    
    $attributes: ConversionRateTypeAttributes
    
    // Detail of conversion rate of First Monetary Unit
    conversionRateDetail: Array<ConversionRateDetailsType>
    
}

export interface ConversionRateTypeAttributes {
    
}


export interface ConversionRateDetailsType {
    
    $attributes: ConversionRateDetailsTypeAttributes
    
    // Conversion type
    conversionType: Array<string>
    
    // Currency
    currency: string
    
}

export interface ConversionRateDetailsTypeAttributes {
    
}

// To specify frequent traveler information.
export interface FrequentTravellerIdentificationCodeType_177150S {
    
    $attributes: FrequentTravellerIdentificationCodeType_177150SAttributes
    
    // Frequent traveller details
    frequentTravellerDetails: Array<FrequentTravellerIdentificationType_249074C>
    
}

export interface FrequentTravellerIdentificationCodeType_177150SAttributes {
    
}

// Identification of the frequent traveller number by company code with the capability to reference a specific traveller.
export interface FrequentTravellerIdentificationType_249074C {
    
    $attributes: FrequentTravellerIdentificationType_249074CAttributes
    
    // carrier
    carrier: string
    
    // Frequent traveller number
    number: Array<string>
    
    // Customer reference
    customerReference: Array<string>
    
    // Tier level
    tierLevel: Array<string>
    
    // Priority code
    priorityCode: Array<string>
    
    // Tier description
    tierDescription: Array<string>
    
    // To specify the product/account number qualifier. (e.g. 2=Corporate Frequent Flyer).
    type: Array<string>
    
}

export interface FrequentTravellerIdentificationType_249074CAttributes {
    
}


export interface MonetaryAndCabinInformationType {
    
    $attributes: MonetaryAndCabinInformationTypeAttributes
    
    // Monetary and cabin information.
    moneyAndCabinInfo: Array<MonetaryAndCabinInformationDetailsType>
    
}

export interface MonetaryAndCabinInformationTypeAttributes {
    
}


export interface MonetaryAndCabinInformationDetailsType {
    
    $attributes: MonetaryAndCabinInformationDetailsTypeAttributes
    
    // Amount qualifier.
    amountType: Array<string>
    
    // Amount
    amount: number
    
    // ISO currency code
    currency: Array<string>
    
    // Airport/city code
    locationId: Array<string>
    
    // Cabin class designator
    cabinClassDesignator: Array<string>
    
}

export interface MonetaryAndCabinInformationDetailsTypeAttributes {
    
}

// To specify monetary information details
export interface MonetaryInformationType {
    
    $attributes: MonetaryInformationTypeAttributes
    
    // MONEY INFORMATION
    moneyInfo: MonetaryInformationDetailsTypeI
    
    // MONEY INFORMATION
    additionalMoneyInfo: Array<MonetaryInformationDetailsTypeI_194597C>
    
}

export interface MonetaryInformationTypeAttributes {
    
}


export interface MonetaryInformationDetailsTypeI {
    
    $attributes: MonetaryInformationDetailsTypeIAttributes
    
    // Monetary amount type qualifier, coded
    qualifier: Array<string>
    
    // Allowance or charge number
    amount: number
    
    // Currency, coded
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsTypeIAttributes {
    
}


export interface MonetaryInformationDetailsTypeI_194597C {
    
    $attributes: MonetaryInformationDetailsTypeI_194597CAttributes
    
    // Monetary amount type qualifier, coded
    qualifier: Array<string>
    
    // Allowance or charge number
    amount: number
    
    // Currency, coded
    currency: Array<string>
    
    // Place or Location identification
    locationId: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI_194597CAttributes {
    
}

// To specify details realting to tax(es)
export interface TaxType1 {
    
    $attributes: TaxType1Attributes
    
    // Duty tax fee category, coded
    withholdTaxSurcharge: Array<string>
    
    // TAX DETAILS
    taxDetail: Array<TaxDetailsTypeI>
    
}

export interface TaxType1Attributes {
    
}


export interface TaxDetailsTypeI {
    
    $attributes: TaxDetailsTypeIAttributes
    
    // Duty/tax/fee rate
    rate: Array<string>
    
    // Country, coded
    country: Array<string>
    
    // Currency, coded
    currency: Array<string>
    
    // Duty/Tax fee type, coded
    type: Array<string>
    
    // Amount type qualifier, coded
    amountQualifier: Array<string>
    
}

export interface TaxDetailsTypeIAttributes {
    
}

// Information about flight options
export interface TravelFlightInformationType_199258S {
    
    $attributes: TravelFlightInformationType_199258SAttributes
    
    // Cabin identification
    cabinId: Array<CabinIdentificationType_233500C>
    
    // Company Identification
    companyIdentity: Array<CompanyIdentificationType_275415C>
    
    // Type of flight details
    flightDetail: Array<ProductTypeDetailsType_120801C>
    
    // Details of included connect point
    inclusionDetail: Array<ConnectPointDetailsType_195492C>
    
    // Further connection details
    exclusionDetail: Array<ConnectPointDetailsType>
    
    // Added departed flights flag
    unitNumberDetail: Array<NumberOfUnitDetailsTypeI>
    
}

export interface TravelFlightInformationType_199258SAttributes {
    
}


export interface CabinIdentificationType_233500C {
    
    $attributes: CabinIdentificationType_233500CAttributes
    
    // Cabin qualifier. For Star Pricer,MD stands for Mandatory Cabin qualifier. For other products no qualifier stands for Mandatory Cabin.
    cabinQualifier: Array<string>
    
    // Cabin
    cabin: Array<string>
    
}

export interface CabinIdentificationType_233500CAttributes {
    
}


export interface CompanyIdentificationType_275415C {
    
    $attributes: CompanyIdentificationType_275415CAttributes
    
    // Item description identification.
    carrierQualifier: string
    
    // carrier id
    carrierId: Array<string>
    
}

export interface CompanyIdentificationType_275415CAttributes {
    
}


export interface ProductTypeDetailsType_120801C {
    
    $attributes: ProductTypeDetailsType_120801CAttributes
    
    // Type of flight
    flightType: Array<string>
    
}

export interface ProductTypeDetailsType_120801CAttributes {
    
}


export interface ConnectPointDetailsType_195492C {
    
    $attributes: ConnectPointDetailsType_195492CAttributes
    
    // Inclusion identification
    inclusionIdentifier: string
    
    // Place or Location identification
    locationId: string
    
    // Airport/city qualifier
    airportCityQualifier: Array<string>
    
}

export interface ConnectPointDetailsType_195492CAttributes {
    
}


export interface ConnectPointDetailsType {
    
    $attributes: ConnectPointDetailsTypeAttributes
    
    // Exclusion identification
    exclusionIdentifier: string
    
    // Place or Location identification
    locationId: string
    
    // Airport/city qualifier
    airportCityQualifier: Array<string>
    
}

export interface ConnectPointDetailsTypeAttributes {
    
}


export interface NumberOfUnitDetailsTypeI {
    
    $attributes: NumberOfUnitDetailsTypeIAttributes
    
    // Number of Units
    numberOfUnits: number
    
    // Number of unit qualifier
    typeOfUnit: string
    
}

export interface NumberOfUnitDetailsTypeIAttributes {
    
}

// To specify Criteria with list of parameters
export interface ValueSearchCriteriaType {
    
    $attributes: ValueSearchCriteriaTypeAttributes
    
    // Value search reference
    ref: Array<string>
    
    
    criteriaName: Array<string>
    
    
    criteriaCode: Array<string>
    
    
    value: Array<string>
    
    
    criteriaDetails: Array<CriteriaiDetaislType>
    
}

export interface ValueSearchCriteriaTypeAttributes {
    
}

// Criteria details : weights/parameters list
export interface CriteriaiDetaislType {
    
    $attributes: CriteriaiDetaislTypeAttributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
    
    attribute: Array<string>
    
}

export interface CriteriaiDetaislTypeAttributes {
    
}


export interface bucketsType {
    
    $attributes: bucketsTypeAttributes
    
    // Bucket information: name, priority, weight
    bucketInfo: BucketInformationType
    
    // Bucket details
    bucketDetails: Array<BucketDetailsType>
    
}

export interface bucketsTypeAttributes {
    
}


export interface BucketInformationType {
    
    $attributes: BucketInformationTypeAttributes
    
    // Number
    number: Array<string>
    
    // Name
    name: Array<string>
    
    // Completion
    completion: Array<string>
    
    // Mode
    mode: Array<string>
    
    // Value reference
    valueRef: Array<string>
    
    // Weight
    weight: Array<number>
    
    // Number of solutions in the bucket
    count: Array<number>
    
    // Number of solutions per attribute
    attributeCount: Array<number>
    
}

export interface BucketInformationTypeAttributes {
    
}


export interface BucketDetailsType {
    
    $attributes: BucketDetailsTypeAttributes
    
    // Code
    code: Array<string>
    
    // Option or distribution
    type: Array<string>
    
    // Attribute
    attribute: Array<AttributeDetailsType>
    
}

export interface BucketDetailsTypeAttributes {
    
}


export interface AttributeDetailsType {
    
    $attributes: AttributeDetailsTypeAttributes
    
    // Reference of the requested segment
    requestedSgt: Array<string>
    
    // List of airlines, cabins, time window, number of connections.
    value: Array<string>
    
}

export interface AttributeDetailsTypeAttributes {
    
}


export interface itineraryType {
    
    $attributes: itineraryTypeAttributes
    
    // Indicates reference of the requested segment
    requestedSegmentRef: OriginAndDestinationRequestType
    
    // Specification of the requested departure point
    departureLocalization: Array<DepartureLocationType>
    
    // Specification of the requested arrival point
    arrivalLocalization: Array<ArrivalLocalizationType>
    
    // Details on requested date and time plus range of date trip duration
    timeDetails: Array<DateAndTimeInformationType_181295S>
    
    // Specify Flight options.
    flightInfo: Array<TravelFlightInformationType_199585S>
    
    // Segment used to target Commercial Fare Family at requested segment level
    familyInformation: Array<FareFamilyType>
    
    
    valueSearch: Array<ValueSearchCriteriaType>
    
    // list of proposed segments per requested segment
    groupOfFlights: Array<groupOfFlightsType>
    
    // Info concerning the flights booked in the PNR
    flightInfoPNR: Array<flightInfoPNRType>
    
    // Action identification for the requested segment
    requestedSegmentAction: Array<ActionIdentificationType>
    
    // Coded attributes
    attributes: Array<CodedAttributeType>
    
}

export interface itineraryTypeAttributes {
    
}

// To convey information regarding Requested Segments
export interface OriginAndDestinationRequestType {
    
    $attributes: OriginAndDestinationRequestTypeAttributes
    
    // Requested segment number
    segRef: number
    
    // Forces arrival or departure, from/to the same airport/city
    locationForcing: Array<ItineraryDetailsType>
    
}

export interface OriginAndDestinationRequestTypeAttributes {
    
}

// Forces arrival or departure to/from the same city or airport option
export interface ItineraryDetailsType {
    
    $attributes: ItineraryDetailsTypeAttributes
    
    // Airport/City Qualifier: the passenger wants to depart/arrive from/to the same airport or city in the specified requested segment
    airportCityQualifier: string
    
    // Requested segment number
    segmentNumber: number
    
}

export interface ItineraryDetailsTypeAttributes {
    
}

// To convey information of requested departure
export interface DepartureLocationType {
    
    $attributes: DepartureLocationTypeAttributes
    
    // Details on localization of the departure point
    departurePoint: Array<ArrivalLocationDetailsType_120834C>
    
    // Departure multi city option
    depMultiCity: Array<MultiCityOptionType>
    
    // To specify a series or a range of PNR segments
    firstPnrSegmentRef: Array<PNRSegmentReferenceType>
    
    // Attribute details
    attributeDetails: Array<CodedAttributeInformationType_139508C>
    
}

export interface DepartureLocationTypeAttributes {
    
}


export interface ArrivalLocationDetailsType_120834C {
    
    $attributes: ArrivalLocationDetailsType_120834CAttributes
    
    // For Radius: This is the length of the requested radius around the location of origin.
    distance: Array<number>
    
    // Distance unit qualifier for radius
    distanceUnit: Array<string>
    
    // ATA/IATA airport/city code of arrival In case of SP request from a PNR, this field is empty.
    locationId: Array<string>
    
    // Request from no PNR A = consider the locationID specified as an airport (used only when ambiguous) C = consider the locationId as a city (used only when ambiguous) A and C are not used in case of a request from PNR Request from a PNR with Radius option: O = radius applies to the origin of the PNR segments D = radius applies to the destination of the PNR segments
    airportCityQualifier: Array<string>
    
    // Latitude in degrees (decimal format) with hemisphere N=north S=south
    latitude: Array<string>
    
    // Longitude in degrees (decimal format) with hemisphere E=east, W=west
    longitude: Array<string>
    
}

export interface ArrivalLocationDetailsType_120834CAttributes {
    
}

// List of requested arrival points
export interface MultiCityOptionType {
    
    $attributes: MultiCityOptionTypeAttributes
    
    // ATA/IATA airport/city code of arrival multi city option enable to define until 20 airports/cities
    locationId: string
    
    // Requested arrival point is an airport or a city (default is city and used only when ambiguity)
    airportCityQualifier: Array<string>
    
}

export interface MultiCityOptionTypeAttributes {
    
}

// Reference to PNR segment
export interface PNRSegmentReferenceType {
    
    $attributes: PNRSegmentReferenceTypeAttributes
    
    // For a request from PNR: this is the reference number of a PNR air segment. In case a range of PNR segments is specified (eg. segments 2-5), then it is the 1st of the range, the last being in ARR.
    pnrSegmentTattoo: Array<number>
    
    
    pnrSegmentQualifier: Array<string>
    
}

export interface PNRSegmentReferenceTypeAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_139508C {
    
    $attributes: CodedAttributeInformationType_139508CAttributes
    
    // Attribute type
    type: Array<string>
    
    // Value.
    value: Array<string>
    
}

export interface CodedAttributeInformationType_139508CAttributes {
    
}

// To convey information of the requested arrival location
export interface ArrivalLocalizationType {
    
    $attributes: ArrivalLocalizationTypeAttributes
    
    // Details on the location of the arrival point
    arrivalPointDetails: Array<ArrivalLocationDetailsType>
    
    // Arrival multi city option
    arrivalMultiCity: Array<MultiCityOptionType>
    
    // Attribute details
    attributeDetails: Array<CodedAttributeInformationType_139508C>
    
}

export interface ArrivalLocalizationTypeAttributes {
    
}


export interface ArrivalLocationDetailsType {
    
    $attributes: ArrivalLocationDetailsTypeAttributes
    
    // For Radius: This is the length of the requested radius around the location of destination.
    distance: Array<number>
    
    // Distance unit qualifier for radius
    distanceUnit: Array<string>
    
    // ATA/IATA airport/city code of arrival In case of SP request from a PNR, this field is empty.
    locationId: Array<string>
    
    // Request from no PNR A = consider the locationID specified as an airport (used only when ambiguous) C = consider the locationId as a city (used only when ambiguous) A and C are not used in case of a request from PNR Request from a PNR with Radius option: O = radius applies to the origin of the PNR segments D = radius applies to the destination of the PNR segments
    airportCityQualifier: Array<string>
    
    // Latitude in degrees (decimal format) with hemisphere N=north S=south
    latitude: Array<string>
    
    // Longitude in degrees (decimal format) with hemisphere E=east, W=west
    longitude: Array<string>
    
}

export interface ArrivalLocationDetailsTypeAttributes {
    
}

// Target estimated or actual dates and times
export interface DateAndTimeInformationType_181295S {
    
    $attributes: DateAndTimeInformationType_181295SAttributes
    
    // Details on date and Time
    firstDateTimeDetail: DateAndTimeDetailsTypeI
    
    // Details of the Requested Range of Dates
    rangeOfDate: Array<DateAndTimeDetailsType_254619C>
    
    // Details of the trip duration
    tripDetails: Array<DateAndTimeDetailsType>
    
}

export interface DateAndTimeInformationType_181295SAttributes {
    
}

// DATE AND TIME DETAILS
export interface DateAndTimeDetailsTypeI {
    
    $attributes: DateAndTimeDetailsTypeIAttributes
    
    // Toidentify type of time Arrival/Departure
    timeQualifier: Array<string>
    
    // Date
    date: Array<string>
    
    // Time
    time: Array<string>
    
    // Time window size in hours
    timeWindow: Array<string>
    
}

export interface DateAndTimeDetailsTypeIAttributes {
    
}

// DATE AND TIME DETAILS
export interface DateAndTimeDetailsType_254619C {
    
    $attributes: DateAndTimeDetailsType_254619CAttributes
    
    // To identify type of range (Plus,Minus or combined)
    rangeQualifier: Array<string>
    
    // Range of dates : Number of Days preceding or/and Following the request departure date
    dayInterval: Array<number>
    
    // Time at destination (local)
    timeAtdestination: Array<string>
    
}

export interface DateAndTimeDetailsType_254619CAttributes {
    
}

// DATE AND TIME DETAILS
export interface DateAndTimeDetailsType {
    
    $attributes: DateAndTimeDetailsTypeAttributes
    
    // Trip Duration type(Plus,Minus,Combined)
    flexibilityQualifier: Array<string>
    
    // Number of days added or/and retrieved to the trip duration
    tripInterval: Array<number>
    
    // Period between date of departure and date of arrival
    tripDuration: Array<number>
    
}

export interface DateAndTimeDetailsTypeAttributes {
    
}

// Information about flight options
export interface TravelFlightInformationType_199585S {
    
    $attributes: TravelFlightInformationType_199585SAttributes
    
    // Cabin identification
    cabinId: Array<CabinIdentificationType_233500C>
    
    // Company Identification
    companyIdentity: Array<CompanyIdentificationType_120719C>
    
    // Type of flight details
    flightDetail: Array<ProductTypeDetailsType_120801C>
    
    // Details of included connect point
    inclusionDetail: Array<ConnectPointDetailsType_195492C>
    
    // Further connection details
    exclusionDetail: Array<ConnectPointDetailsType>
    
    // Nb of connections allowed at requested segment level.
    unitNumberDetail: Array<NumberOfUnitDetailsTypeI>
    
}

export interface TravelFlightInformationType_199585SAttributes {
    
}


export interface CompanyIdentificationType_120719C {
    
    $attributes: CompanyIdentificationType_120719CAttributes
    
    // Item description identification.
    carrierQualifier: string
    
    // carrier id
    carrierId: Array<string>
    
}

export interface CompanyIdentificationType_120719CAttributes {
    
}

// NEW FARE SEACH
export interface FareFamilyType {
    
    $attributes: FareFamilyTypeAttributes
    
    // Indicates Commercial Fare Family Short names
    commercialFamilyDetails: Array<FareFamilyDetailsType>
    
}

export interface FareFamilyTypeAttributes {
    
}


export interface groupOfFlightsType {
    
    $attributes: groupOfFlightsTypeAttributes
    
    // To indicate parameters for proposed flight group.
    propFlightGrDetail: ProposedSegmentType
    
    // Indicates Price to beat
    priceToBeat: Array<MonetaryInformationType>
    
    // list of flight per proposed segment
    flightDetails: Array<flightDetailsType1>
    
}

export interface groupOfFlightsTypeAttributes {
    
}

// To specify the parameters used for product quality
export interface ProposedSegmentType {
    
    $attributes: ProposedSegmentTypeAttributes
    
    // Parameters for proposed flight group
    flightProposal: Array<ProposedSegmentDetailsType>
    
    // Flight characteristics.
    flightCharacteristic: Array<string>
    
    // Majority cabin
    majCabin: Array<string>
    
}

export interface ProposedSegmentTypeAttributes {
    
}


export interface ProposedSegmentDetailsType {
    
    $attributes: ProposedSegmentDetailsTypeAttributes
    
    // Flight proposal reference
    ref: Array<string>
    
    // Elapse Flying Time
    unitQualifier: Array<string>
    
}

export interface ProposedSegmentDetailsTypeAttributes {
    
}


export interface flightDetailsType1 {
    
    $attributes: flightDetailsType1Attributes
    
    // Specification of details on the flight and posting availability
    flightInformation: TravelProductType
    
    // returns booking class and availability context
    avlInfo: Array<FlightProductInformationType>
    
    // Details on Flight date, time and location of technical stop or change of gauge
    technicalStop: Array<DateAndTimeInformationType>
    
    // Code Share Agreement description for current flight.
    commercialAgreement: Array<CommercialAgreementsType_78540S>
    
    // Additional Info about flight, such as Reference number, and several options
    addInfo: Array<HeaderInformationTypeI>
    
    // Terminal, Equipment and EFT Details. If a Total EFT of the Travel Solution is requested then we will have 2 occurrences of the terminalEquipmentDetails attached to the first leg flightInformation: the 1st occurence will give the EFT of the leg, the 2nd occurrence will give the total EFT of the Travel Solution.
    terminalEquipmentDetails: Array<AdditionalProductDetailsTypeI>
    
    // PNR flight reservation info
    reservationInfo: Array<PassengerItineraryInformationType>
    
    // Indicates Price to beat
    priceToBeat: Array<MonetaryInformationType>
    
}

export interface flightDetailsType1Attributes {
    
}

// Contains flight travel (date, time, flight number,...) and posting avaibility information
export interface TravelProductType {
    
    $attributes: TravelProductTypeAttributes
    
    // Date and time of departure and arrival
    productDateTime: ProductDateTimeType_195546C
    
    // Location of departure and arrival
    location: Array<LocationIdentificationDetailsType>
    
    // Company identification
    companyId: Array<CompanyIdentificationType_195544C>
    
    // Flight number or trainNumber
    flightOrtrainNumber: Array<string>
    
    // Product details
    productDetail: Array<AdditionalProductDetailsType>
    
    // Additional product details
    addProductDetail: Array<ProductFacilitiesType>
    
    // Attribute details
    attributeDetails: Array<CodedAttributeInformationType_247828C>
    
}

export interface TravelProductTypeAttributes {
    
}


export interface ProductDateTimeType_195546C {
    
    $attributes: ProductDateTimeType_195546CAttributes
    
    // Departure date
    dateOfDeparture: string
    
    // Departure time
    timeOfDeparture: Array<string>
    
    // Arrival date
    dateOfArrival: Array<string>
    
    // Arrival time
    timeOfArrival: Array<string>
    
    // Arrival date compared to departure date, only if different from 0
    dateVariation: Array<number>
    
}

export interface ProductDateTimeType_195546CAttributes {
    
}


export interface LocationIdentificationDetailsType {
    
    $attributes: LocationIdentificationDetailsTypeAttributes
    
    // 3 characters ATA/IATA airport/city code
    locationId: string
    
    // Airport/city qualifier: the requested point is an airport when ambiguity exists (e.g. HOU)
    airportCityQualifier: Array<string>
    
    // Terminal information
    terminal: Array<string>
    
}

export interface LocationIdentificationDetailsTypeAttributes {
    
}


export interface CompanyIdentificationType_195544C {
    
    $attributes: CompanyIdentificationType_195544CAttributes
    
    // Marketing carrier
    marketingCarrier: string
    
    // Operating carrier
    operatingCarrier: Array<string>
    
}

export interface CompanyIdentificationType_195544CAttributes {
    
}


export interface AdditionalProductDetailsType {
    
    $attributes: AdditionalProductDetailsTypeAttributes
    
    // Type of aircraft
    equipmentType: Array<string>
    
    // Day number of the week
    operatingDay: Array<string>
    
    // Number of stops made in a journey if different from 0
    techStopNumber: Array<number>
    
    // Location places of the stops
    locationId: Array<string>
    
}

export interface AdditionalProductDetailsTypeAttributes {
    
}

// Level of access
export interface ProductFacilitiesType {
    
    $attributes: ProductFacilitiesTypeAttributes
    
    // Yes-No indicator whether Last Seat Available
    lastSeatAvailable: Array<string>
    
    // Level of access
    levelOfAccess: Array<string>
    
    // Yes-No indicator whether electronic ticketing
    electronicTicketing: Array<string>
    
    // Product identification suffix
    operationalSuffix: Array<string>
    
    // Define whether a flight has been polled or not
    productDetailQualifier: Array<string>
    
    // Add some flight restrictions (See code set list)
    flightCharacteristic: Array<string>
    
}

export interface ProductFacilitiesTypeAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_247828C {
    
    $attributes: CodedAttributeInformationType_247828CAttributes
    
    
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType_247828CAttributes {
    
}

// To specify flight product information details
export interface FlightProductInformationType {
    
    $attributes: FlightProductInformationTypeAttributes
    
    // Indicates flight cabin details
    cabinProduct: Array<CabinProductDetailsType>
    
    // To specify additional characteristics.
    contextDetails: Array<ProductTypeDetailsType_205137C>
    
}

export interface FlightProductInformationTypeAttributes {
    
}


export interface CabinProductDetailsType {
    
    $attributes: CabinProductDetailsTypeAttributes
    
    // Reservation booking designator - RBD
    rbd: string
    
    // Reservation Booking Modifier
    bookingModifier: Array<string>
    
    // Indicates the cabin related to the Booking code
    cabin: Array<string>
    
    // Availibility status : posting level
    avlStatus: Array<string>
    
}

export interface CabinProductDetailsTypeAttributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType_205137C {
    
    $attributes: ProductTypeDetailsType_205137CAttributes
    
    // indicates whether the flight is domestic or international
    avl: Array<string>
    
}

export interface ProductTypeDetailsType_205137CAttributes {
    
}

// not the standard only used in fare quote message
export interface DateAndTimeInformationType {
    
    $attributes: DateAndTimeInformationTypeAttributes
    
    // Details on date and time
    stopDetails: Array<DateAndTimeDetailsType_120762C>
    
    
    DummyNET: string
    
}

export interface DateAndTimeInformationTypeAttributes {
    
}


export interface DateAndTimeDetailsType_120762C {
    
    $attributes: DateAndTimeDetailsType_120762CAttributes
    
    // Date time period qualifier
    dateQualifier: Array<string>
    
    // First Date
    date: Array<string>
    
    // First Time
    firstTime: Array<string>
    
    // Movement type.
    equipementType: Array<string>
    
    // Place/location identification.
    locationId: Array<string>
    
}

export interface DateAndTimeDetailsType_120762CAttributes {
    
}

// To specify commercial agreements between two or more companies related to joint, shared, lease operations etc.
export interface CommercialAgreementsType_78540S {
    
    $attributes: CommercialAgreementsType_78540SAttributes
    
    // Codeshare Details
    codeshareDetails: Array<CompanyRoleIdentificationType_120761C>
    
    // Other codeshare details
    otherCodeshareDetails: Array<CompanyRoleIdentificationType_120761C>
    
}

export interface CommercialAgreementsType_78540SAttributes {
    
}

// To indicate commercial agreements related to the service being provided.
export interface CompanyRoleIdentificationType_120761C {
    
    $attributes: CompanyRoleIdentificationType_120761CAttributes
    
    // Type of code share agreement.
    codeShareType: Array<string>
    
    // company identification
    airlineDesignator: Array<string>
    
    // flight number
    flightNumber: Array<number>
    
}

export interface CompanyRoleIdentificationType_120761CAttributes {
    
}

// To specify header information applicable to the entire message.
export interface HeaderInformationTypeI {
    
    $attributes: HeaderInformationTypeIAttributes
    
    // Status
    status: Array<string>
    
    // Date and Time info
    dateTimePeriodDetails: Array<DateTimePeriodDetailsTypeI>
    
    // Reference number
    referenceNumber: Array<string>
    
    // Contains product identification such as UIC code...
    productIdentification: Array<string>
    
}

export interface HeaderInformationTypeIAttributes {
    
}

// To indicate period of applicability.
export interface DateTimePeriodDetailsTypeI {
    
    $attributes: DateTimePeriodDetailsTypeIAttributes
    
    // Qualifier
    qualifier: string
    
    // Value
    value: Array<string>
    
}

export interface DateTimePeriodDetailsTypeIAttributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsTypeI {
    
    $attributes: AdditionalProductDetailsTypeIAttributes
    
    // Flight details
    legDetails: Array<AdditionalProductTypeI>
    
    // Departure station
    departureStationInfo: Array<StationInformationTypeI>
    
    
    arrivalStationInfo: Array<StationInformationTypeI>
    
    // Ground Time Details when connection
    mileageTimeDetails: Array<MileageTimeDetailsTypeI>
    
}

export interface AdditionalProductDetailsTypeIAttributes {
    
}

// Additional details describing a specific means of transport.
export interface AdditionalProductTypeI {
    
    $attributes: AdditionalProductTypeIAttributes
    
    // Equipment type
    equipment: Array<string>
    
    // Elaps flying time of the leg
    duration: Array<number>
    
    // COG indicator
    complexingFlightIndicator: Array<string>
    
}

export interface AdditionalProductTypeIAttributes {
    
}

// To specify departure/arrival information concerning a means of transport.
export interface StationInformationTypeI {
    
    $attributes: StationInformationTypeIAttributes
    
    // Departure terminal
    terminal: Array<string>
    
}

export interface StationInformationTypeIAttributes {
    
}

// Information about the distance/duration of a trip.
export interface MileageTimeDetailsTypeI {
    
    $attributes: MileageTimeDetailsTypeIAttributes
    
    // Ground Time in minutes at Board point (connection with incoming flight)
    elapsedGroundTime: Array<number>
    
}

export interface MileageTimeDetailsTypeIAttributes {
    
}

// Contains PNR travel (Reservation Booking code, Booking status). Only present in case with-PNR.
export interface PassengerItineraryInformationType {
    
    $attributes: PassengerItineraryInformationTypeAttributes
    
    // .
    booking: Array<string>
    
    // .
    identifier: Array<string>
    
    // .
    status: Array<string>
    
    // .
    itemNumber: Array<number>
    
    // .
    dateTimeDetails: Array<ProductDateTimeType>
    
    // .
    designator: Array<string>
    
    // .
    movementType: Array<string>
    
    // .
    productTypeDetails: Array<ProductTypeDetailsType>
    
}

export interface PassengerItineraryInformationTypeAttributes {
    
}

// Product date or time
export interface ProductDateTimeType {
    
    $attributes: ProductDateTimeTypeAttributes
    
    // .
    date: string
    
    // .
    time: Array<string>
    
}

export interface ProductDateTimeTypeAttributes {
    
}

// Product type details
export interface ProductTypeDetailsType {
    
    $attributes: ProductTypeDetailsTypeAttributes
    
    // .
    sequenceNumber: Array<string>
    
    // PNR availability context
    availabilityContext: Array<string>
    
}

export interface ProductTypeDetailsTypeAttributes {
    
}


export interface flightInfoPNRType {
    
    $attributes: flightInfoPNRTypeAttributes
    
    // Travel Response Details: - Board/Off aiports - Flight number - Part of the journey - Day difference between Board and off - Departure/Arrival dates - Departure/Arrival times
    travelResponseDetails: TravelProductInformationTypeI
    
    // Time Table Effective/Discontinue dates and frequency of operating Travel Solution
    timeTableDate: Array<StructuredPeriodInformationType>
    
    // Terminal, Equipment and EFT Details. If a Total EFT of the Travel Solution is requested then we will have 2 occurrences of the terminalEquipmentDetails attached to the first leg travelResponseDetails: the 1st occurrence will give the EFT of the leg, the 2nd occurrence will give the total EFT of the Travel Solution.
    terminalEquipmentDetails: Array<AdditionalProductDetailsTypeI>
    
    // Codeshare data
    codeshareData: Array<CommercialAgreementsType>
    
    // Disclosure message from an operating carrier.
    disclosure: Array<FreeTextInformationType>
    
    // Stops Details
    stopDetails: Array<RoutingInformationTypeI>
    
    // Traffic restriction information
    trafficRestrictionData: Array<TrafficRestrictionTypeI>
    
    // PNR flight reservation info
    reservationInfo: Array<PassengerItineraryInformationType>
    
    // Incidental stop information.
    incidentalStopInfo: Array<incidentalStopInfoType>
    
}

export interface flightInfoPNRTypeAttributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI {
    
    $attributes: TravelProductInformationTypeIAttributes
    
    // Flight Date
    flightDate: Array<ProductDateTimeTypeI>
    
    // Board point
    boardPointDetails: LocationTypeI
    
    // Off point
    offpointDetails: LocationTypeI
    
    // Flight Carrier
    companyDetails: CompanyIdentificationTypeI
    
    // Flight identification
    flightIdentification: Array<ProductIdentificationDetailsTypeI>
    
    // Identify flight part of the journey
    flightTypeDetails: Array<ProductTypeDetailsTypeI>
    
}

export interface TravelProductInformationTypeIAttributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI {
    
    $attributes: ProductDateTimeTypeIAttributes
    
    // Departure date in YYYYMMDD format
    departureDate: Array<string>
    
    // Departure time
    departureTime: Array<string>
    
    // Arrival date
    arrivalDate: Array<string>
    
    // Arrival time
    arrivalTime: Array<string>
    
    // Day difference between Departure date of the leg and date of reference (Departure or Arrival date specified in the SDI)
    dateVariation: Array<number>
    
}

export interface ProductDateTimeTypeIAttributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI {
    
    $attributes: LocationTypeIAttributes
    
    // Departure or Arrival IATA airport code
    trueLocationId: string
    
}

export interface LocationTypeIAttributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI {
    
    $attributes: CompanyIdentificationTypeIAttributes
    
    // Carrier code
    marketingCompany: string
    
}

export interface CompanyIdentificationTypeIAttributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI {
    
    $attributes: ProductIdentificationDetailsTypeIAttributes
    
    // Flight number
    flightNumber: number
    
    // Flight suffix
    operationalSuffix: Array<string>
    
}

export interface ProductIdentificationDetailsTypeIAttributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsTypeI {
    
    $attributes: ProductTypeDetailsTypeIAttributes
    
    // Part of the journey (C,E,S), Codeshare service (A), Technical stop at off point in a Direct (TSD), Technical stop at off point in a COG (TSC), E-Ticket candidate (ET), Prohibited Countries (RPC, WPC)
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsTypeIAttributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType {
    
    $attributes: StructuredPeriodInformationTypeAttributes
    
    // Effective date of period of operation
    beginDateTime: Array<StructuredDateTimeType>
    
    // Discontinue date of period of operation
    endDateTime: Array<StructuredDateTimeType>
    
    // It is used with a period to give a restriction for days impacted. It permits for example to indicate on which days, a flight operates.
    frequency: Array<FrequencyType>
    
}

export interface StructuredPeriodInformationTypeAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType {
    
    $attributes: StructuredDateTimeTypeAttributes
    
    // Year number. The format is a little long for short term usage but it can be reduced by implementation if required.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: Array<number>
    
    // Day number in the month ( begins to 1 )
    day: Array<number>
    
}

export interface StructuredDateTimeTypeAttributes {
    
}

// Give the days of the week involved for a period
export interface FrequencyType {
    
    $attributes: FrequencyTypeAttributes
    
    // Indicate if the sequence number represents days of the week or days of the month.
    qualifier: string
    
    // Used to represent days of the week. 1 is monday and 7 is sunday.
    value: Array<number>
    
}

export interface FrequencyTypeAttributes {
    
}

// To specify commercial agreements between two or more companies related to joint, shared, lease operations etc.
export interface CommercialAgreementsType {
    
    $attributes: CommercialAgreementsTypeAttributes
    
    // Codeshare Details
    codeshareDetails: CompanyRoleIdentificationType
    
    // Other codeshare details
    otherCodeshareDetails: Array<CompanyRoleIdentificationType>
    
}

export interface CommercialAgreementsTypeAttributes {
    
}

// To indicate commercial agreements related to the service being provided.
export interface CompanyRoleIdentificationType {
    
    $attributes: CompanyRoleIdentificationTypeAttributes
    
    // Codeshare qualifier
    transportStageQualifier: string
    
    // company identification
    airlineDesignator: Array<string>
    
    // flight number
    flightNumber: Array<number>
    
    // suffix
    operationalSuffix: Array<string>
    
}

export interface CompanyRoleIdentificationTypeAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType {
    
    $attributes: FreeTextInformationTypeAttributes
    
    // Details for the free text message
    freeTextDetails: FreeTextDetailsType
    
    // Free text corresponding to the DEI 127 data.
    freeText: string
    
}

export interface FreeTextInformationTypeAttributes {
    
}


export interface FreeTextDetailsType {
    
    $attributes: FreeTextDetailsTypeAttributes
    
    // Qualifier of the free text. Always literal in our usage.
    textSubjectQualifier: string
    
    // Type of the free text. Always 7 for our usage.
    informationType: Array<string>
    
    // Source of the information.
    source: string
    
    // Encoding method used.
    encoding: string
    
}

export interface FreeTextDetailsTypeAttributes {
    
}

// To provide routing information.
export interface RoutingInformationTypeI {
    
    $attributes: RoutingInformationTypeIAttributes
    
    // Stops details
    routingDetails: Array<ProductLocationDetailsTypeI>
    
}

export interface RoutingInformationTypeIAttributes {
    
}

// To indicate a location and the type of location.
export interface ProductLocationDetailsTypeI {
    
    $attributes: ProductLocationDetailsTypeIAttributes
    
    // airport
    station: Array<string>
    
}

export interface ProductLocationDetailsTypeIAttributes {
    
}

// To convey certain restrictions that apply to a means of transport on all or part of a journey
export interface TrafficRestrictionTypeI {
    
    $attributes: TrafficRestrictionTypeIAttributes
    
    // Traffic Restriction Details
    trafficRestrictionDetails: Array<TrafficRestrictionDetailsTypeI>
    
}

export interface TrafficRestrictionTypeIAttributes {
    
}

// Coded or free text details which restrict a means of transport.
export interface TrafficRestrictionDetailsTypeI {
    
    $attributes: TrafficRestrictionDetailsTypeIAttributes
    
    // Traffic Restriction code
    code: Array<string>
    
}

export interface TrafficRestrictionDetailsTypeIAttributes {
    
}


export interface incidentalStopInfoType {
    
    $attributes: incidentalStopInfoTypeAttributes
    
    // Incidental stop date/time information
    dateTimeInfo: DateAndTimeInformationTypeI
    
}

export interface incidentalStopInfoTypeAttributes {
    
}

// To convey information regarding estimated or actual dates and times of operational events
export interface DateAndTimeInformationTypeI {
    
    $attributes: DateAndTimeInformationTypeIAttributes
    
    // DATE AND TIME DETAILS.
    dateTimeDetails: Array<DateAndTimeDetailsTypeI_120740C>
    
}

export interface DateAndTimeInformationTypeIAttributes {
    
}


export interface DateAndTimeDetailsTypeI_120740C {
    
    $attributes: DateAndTimeDetailsTypeI_120740CAttributes
    
    // Date time period qualifier
    qualifier: Array<string>
    
    // First Date
    date: Array<string>
    
    // First Time
    time: Array<string>
    
    // .
    qualifier2: Array<string>
    
    
    reserved1: Array<string>
    
    
    reserved2: Array<string>
    
}

export interface DateAndTimeDetailsTypeI_120740CAttributes {
    
}

// To provide details of action required or taken, the flights to which this action refers, and reasons for action taken.
export interface ActionIdentificationType {
    
    $attributes: ActionIdentificationTypeAttributes
    
    // Action request code
    actionRequestCode: string
    
    
    productDetails: Array<ProductIdentificationDetailsTypeI_50878C>
    
}

export interface ActionIdentificationTypeAttributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI_50878C {
    
    $attributes: ProductIdentificationDetailsTypeI_50878CAttributes
    
    
    flightNumber: string
    
    
    bookingClass: Array<string>
    
    
    operationalSuffix: Array<string>
    
    
    modifier: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI_50878CAttributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType {
    
    $attributes: CodedAttributeTypeAttributes
    
    // Attribute details
    attributeDetails: Array<CodedAttributeInformationType_254574C>
    
}

export interface CodedAttributeTypeAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_254574C {
    
    $attributes: CodedAttributeInformationType_254574CAttributes
    
    // Attribute type
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType_254574CAttributes {
    
}


export interface ticketChangeInfoType {
    
    $attributes: ticketChangeInfoTypeAttributes
    
    // Ticket nb details.
    ticketNumberDetails: TicketNumberTypeI
    
    // Changed ticket requested segments.
    ticketRequestedSegments: Array<ticketRequestedSegmentsType>
    
}

export interface ticketChangeInfoTypeAttributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberTypeI {
    
    $attributes: TicketNumberTypeIAttributes
    
    
    documentDetails: Array<TicketNumberDetailsTypeI>
    
}

export interface TicketNumberTypeIAttributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsTypeI {
    
    $attributes: TicketNumberDetailsTypeIAttributes
    
    
    number: Array<string>
    
}

export interface TicketNumberDetailsTypeIAttributes {
    
}


export interface ticketRequestedSegmentsType {
    
    $attributes: ticketRequestedSegmentsTypeAttributes
    
    // Action identification.
    actionIdentification: ActionIdentificationType
    
    // Connected cities in changed ticket requested segment.
    connectPointDetails: Array<ConnectionTypeI>
    
}

export interface ticketRequestedSegmentsTypeAttributes {
    
}

// To specify connection city and airline designator.
export interface ConnectionTypeI {
    
    $attributes: ConnectionTypeIAttributes
    
    // Connection details.
    connectionDetails: Array<ConnectionDetailsTypeI>
    
}

export interface ConnectionTypeIAttributes {
    
}

// To specify the location, product supplier and time for a connection with the next means of transport.
export interface ConnectionDetailsTypeI {
    
    $attributes: ConnectionDetailsTypeIAttributes
    
    // Location
    location: string
    
}

export interface ConnectionDetailsTypeIAttributes {
    
}


export interface combinationFareFamiliesType {
    
    $attributes: combinationFareFamiliesTypeAttributes
    
    // Specification of the item number
    itemFFCNumber: ItemNumberType
    
    // Number of units.
    nbOfUnits: Array<NumberOfUnitsType_80154S>
    
    // Requested segment reference
    referenceInfo: Array<ReferenceInfoType>
    
}

export interface combinationFareFamiliesTypeAttributes {
    
}

// To specify an item number
export interface ItemNumberType {
    
    $attributes: ItemNumberTypeAttributes
    
    // Indicates the fare family combination number
    itemNumberId: ItemNumberIdentificationType
    
}

export interface ItemNumberTypeAttributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType {
    
    $attributes: ItemNumberIdentificationTypeAttributes
    
    // Fare family combination number
    number: Array<string>
    
    // Type
    type: Array<string>
    
    // Qualifier
    qualifier: Array<string>
    
    // Responsible agency
    responsibleAgency: Array<string>
    
}

export interface ItemNumberIdentificationTypeAttributes {
    
}

// To specify the number of Units required
export interface NumberOfUnitsType_80154S {
    
    $attributes: NumberOfUnitsType_80154SAttributes
    
    // NUMBER OF UNIT DETAILS
    unitNumberDetail: Array<NumberOfUnitDetailsType>
    
}

export interface NumberOfUnitsType_80154SAttributes {
    
}


export interface NumberOfUnitDetailsType {
    
    $attributes: NumberOfUnitDetailsTypeAttributes
    
    // Number of Units
    numberOfUnits: Array<number>
    
    // Number of unit qualifier
    typeOfUnit: string
    
}

export interface NumberOfUnitDetailsTypeAttributes {
    
}


export interface feeOptionType {
    
    $attributes: feeOptionTypeAttributes
    
    // Nature of the fee (OB,OC,..)
    feeTypeInfo: SelectionDetailsType
    
    // Associated rate tax.
    rateTax: Array<MonetaryInformationType_80162S>
    
    // Details for each fee.
    feeDetails: Array<feeDetailsType>
    
}

export interface feeOptionTypeAttributes {
    
}

// To specify the details for making a selection.
export interface SelectionDetailsType {
    
    $attributes: SelectionDetailsTypeAttributes
    
    // Carrier fees options
    carrierFeeDetails: SelectionDetailsInformationType
    
    
    otherSelectionDetails: Array<SelectionDetailsInformationTypeI>
    
}

export interface SelectionDetailsTypeAttributes {
    
}

// To specify a selected option and associated information.
export interface SelectionDetailsInformationType {
    
    $attributes: SelectionDetailsInformationTypeAttributes
    
    // Carrier fee type
    type: string
    
    // Carrier fee status
    optionInformation: Array<string>
    
}

export interface SelectionDetailsInformationTypeAttributes {
    
}

// To specify a selected option and associated information.
export interface SelectionDetailsInformationTypeI {
    
    $attributes: SelectionDetailsInformationTypeIAttributes
    
    
    option: string
    
    
    optionInformation: Array<string>
    
}

export interface SelectionDetailsInformationTypeIAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_80162S {
    
    $attributes: MonetaryInformationType_80162SAttributes
    
    // Monetary info
    monetaryDetails: Array<MonetaryInformationDetailsTypeI_65140C>
    
}

export interface MonetaryInformationType_80162SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI_65140C {
    
    $attributes: MonetaryInformationDetailsTypeI_65140CAttributes
    
    // Qualifier
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI_65140CAttributes {
    
}


export interface feeDetailsType {
    
    $attributes: feeDetailsTypeAttributes
    
    // Fee information
    feeInfo: SpecificDataInformationType
    
    // Associated amounts : amounts to take into account to calculate fee.
    associatedAmounts: Array<MonetaryInformationTypeI>
    
    // Fee description
    feeDescriptionGrp: Array<feeDescriptionGrpType>
    
}

export interface feeDetailsTypeAttributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationType {
    
    $attributes: SpecificDataInformationTypeAttributes
    
    // Carrier fee description
    dataTypeInformation: DataTypeInformationType
    
    // Data information
    dataInformation: Array<DataInformationType>
    
}

export interface SpecificDataInformationTypeAttributes {
    
}

// To identify the type of data to be sent and to qualify the data when required.
export interface DataTypeInformationType {
    
    $attributes: DataTypeInformationTypeAttributes
    
    // Carrier fee code
    subType: string
    
    // Status (automated, manually added, exempted). Default is automated
    option: Array<string>
    
}

export interface DataTypeInformationTypeAttributes {
    
}

// To identify specific data and a quantity related to the data.
export interface DataInformationType {
    
    $attributes: DataInformationTypeAttributes
    
    // Ancillary services options
    indicator: Array<string>
    
}

export interface DataInformationTypeAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI {
    
    $attributes: MonetaryInformationTypeIAttributes
    
    // Monetary info
    monetaryDetails: Array<MonetaryInformationDetailsTypeI_65141C>
    
}

export interface MonetaryInformationTypeIAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI_65141C {
    
    $attributes: MonetaryInformationDetailsTypeI_65141CAttributes
    
    // Qualifier
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
    // Location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI_65141CAttributes {
    
}


export interface feeDescriptionGrpType {
    
    $attributes: feeDescriptionGrpTypeAttributes
    
    // Specification of the item number
    itemNumberInfo: ItemNumberType_80866S
    
    // Attributes (SSR code EMD, RFIC, SSIM)
    serviceAttributesInfo: Array<AttributeType_61377S>
    
    // Other service information (service description, ...)
    serviceDescriptionInfo: Array<SpecialRequirementsDetailsType>
    
}

export interface feeDescriptionGrpTypeAttributes {
    
}

// To specify an item number
export interface ItemNumberType_80866S {
    
    $attributes: ItemNumberType_80866SAttributes
    
    // Item number details
    itemNumberDetails: ItemNumberIdentificationType
    
}

export interface ItemNumberType_80866SAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_61377S {
    
    $attributes: AttributeType_61377SAttributes
    
    // Criteria Set Type
    attributeQualifier: Array<string>
    
    // Criteria details
    attributeDetails: Array<AttributeInformationType_97181C>
    
}

export interface AttributeType_61377SAttributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationType_97181C {
    
    $attributes: AttributeInformationType_97181CAttributes
    
    // Attribute type
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface AttributeInformationType_97181CAttributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsType {
    
    $attributes: SpecialRequirementsDetailsTypeAttributes
    
    // To specify the Service Requirement of the customer
    serviceRequirementsInfo: SpecialRequirementsTypeDetailsType
    
    // Seat details
    seatDetails: Array<SpecialRequirementsDataDetailsType>
    
}

export interface SpecialRequirementsDetailsTypeAttributes {
    
}


export interface SpecialRequirementsTypeDetailsType {
    
    $attributes: SpecialRequirementsTypeDetailsTypeAttributes
    
    // To specify the Service Classification of the Service Requirement.
    serviceClassification: string
    
    // Status
    serviceStatus: Array<string>
    
    // To specify the number of items involved
    serviceNumberOfInstances: Array<number>
    
    // To specify to which marketing carrier the service applies
    serviceMarketingCarrier: Array<string>
    
    // Specify the Service group
    serviceGroup: Array<string>
    
    // Specify the Service Sub-Group
    serviceSubGroup: Array<string>
    
    // Free Text attached to the Service.
    serviceFreeText: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsTypeAttributes {
    
}

// Special requirements data details
export interface SpecialRequirementsDataDetailsType {
    
    $attributes: SpecialRequirementsDataDetailsTypeAttributes
    
    // SSR seat characteristic
    seatCharacteristics: Array<string>
    
    
    DummyNET: string
    
}

export interface SpecialRequirementsDataDetailsTypeAttributes {
    
}


export interface officeIdDetailsType {
    
    $attributes: officeIdDetailsTypeAttributes
    
    // Office Id Information
    officeIdInformation: UserIdentificationType
    
    // Number of units.
    nbOfUnits: Array<NumberOfUnitsType_80154S>
    
    // UID option
    uidOption: Array<CodedAttributeType_78500S>
    
    // Pricing and ticketing details.
    pricingTickInfo: Array<PricingTicketingDetailsType>
    
    // Corporate fare information
    corporateFareInfo: Array<CorporateFareInformationType>
    
    // Details of a Flight : Direct, Non stop...
    travelFlightInfo: Array<TravelFlightInformationType>
    
    // Details of airline distribution at requested segment level
    airlineDistributionDetails: Array<airlineDistributionDetailsType>
    
}

export interface officeIdDetailsTypeAttributes {
    
}

// User Identification
export interface UserIdentificationType {
    
    $attributes: UserIdentificationTypeAttributes
    
    // Originator Identification Details
    officeIdentification: Array<OriginatorIdentificationDetailsTypeI>
    
    // Used to specify which kind of info is given in DE 9900.
    officeType: Array<string>
    
    // The code given to an agent by the originating reservation system.
    officeCode: Array<string>
    
}

export interface UserIdentificationTypeAttributes {
    
}

// To identify a user
export interface OriginatorIdentificationDetailsTypeI {
    
    $attributes: OriginatorIdentificationDetailsTypeIAttributes
    
    // Office Name.
    officeName: Array<number>
    
    // Agent Sign In .
    agentSignin: Array<string>
    
    // Confidential Office Name.
    confidentialOffice: Array<string>
    
    // Other Office Name
    otherOffice: Array<string>
    
}

export interface OriginatorIdentificationDetailsTypeIAttributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_78500S {
    
    $attributes: CodedAttributeType_78500SAttributes
    
    // Atrribute details.
    attributeDetails: Array<CodedAttributeInformationType>
    
}

export interface CodedAttributeType_78500SAttributes {
    
}

// Attribute information
export interface CodedAttributeInformationType {
    
    $attributes: CodedAttributeInformationTypeAttributes
    
    // Attribute type identification
    attributeType: string
    
    // Attribute Description
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationTypeAttributes {
    
}

// To specify corporate fare information
export interface CorporateFareInformationType {
    
    $attributes: CorporateFareInformationTypeAttributes
    
    // Corporate fare identifiers
    corporateFareIdentifiers: Array<CorporateFareIdentifiersType>
    
}

export interface CorporateFareInformationTypeAttributes {
    
}


export interface CorporateFareIdentifiersType {
    
    $attributes: CorporateFareIdentifiersTypeAttributes
    
    // Indicates the type of corporate fares requested
    fareQualifier: Array<string>
    
    // Corporate contract number or name
    identifyNumber: Array<string>
    
}

export interface CorporateFareIdentifiersTypeAttributes {
    
}

// Information about flight options
export interface TravelFlightInformationType {
    
    $attributes: TravelFlightInformationTypeAttributes
    
    // Cabin identification
    cabinId: Array<CabinIdentificationType>
    
    // Company Identification
    companyIdentity: Array<CompanyIdentificationType_120719C>
    
    // Type of flight details
    flightDetail: Array<ProductTypeDetailsType_120801C>
    
    // Details of included connecting points
    inclusionDetail: Array<ConnectPointDetailsType_195492C>
    
    // Further connection details
    exclusionDetail: Array<ConnectPointDetailsType>
    
    // Nb of connections for each requested segment of the journey.
    unitNumberDetail: Array<NumberOfUnitDetailsTypeI>
    
}

export interface TravelFlightInformationTypeAttributes {
    
}


export interface CabinIdentificationType {
    
    $attributes: CabinIdentificationTypeAttributes
    
    // Cabin qualifier. For Star Pricer,MD stands for Mandatory Cabin qualifier. For other products no qualifier stands for Mandatory Cabin.
    cabinQualifier: Array<string>
    
    // Cabin
    cabin: Array<string>
    
}

export interface CabinIdentificationTypeAttributes {
    
}


export interface airlineDistributionDetailsType {
    
    $attributes: airlineDistributionDetailsTypeAttributes
    
    // Indicates reference of the requested segment
    requestedSegmentRef: OriginAndDestinationRequestType
    
    // Specify Flight options.
    flightInfo: Array<TravelFlightInformationType>
    
}

export interface airlineDistributionDetailsTypeAttributes {
    
}


export interface Fare_MasterPricerCalendarReplyType {
    
    $attributes: Fare_MasterPricerCalendarReplyTypeAttributes
    
    // Gives status about reply : type of process, region , CPU etc..
    replyStatus: Array<StatusType>
    
    // Error message
    errorMessage: Array<errorMessageType>
    
    // Specifies the currency used for pricing.
    conversionRate: Array<ConversionRateTypeI>
    
    // Solution Family
    solutionFamily: Array<FareInformationType1>
    
    // Details of the fare families processed
    familyInformation: Array<FareFamilyType1>
    
    // Amount information for all passengers
    amountInfoForAllPax: Array<amountInfoForAllPaxType>
    
    // Amount information per passengers
    amountInfoPerPax: Array<amountInfoPerPaxType>
    
    // Fee/Reduction details.
    feeDetails: Array<feeDetailsType1>
    
    // Bucket information
    bucketInfo: Array<BucketInformationType1>
    
    // Theme identification text
    themeIdText: Array<ThemeText>
    
    // Additional information
    additionalInfo: Array<additionalInfoType>
    
    // Free text identifying an airline in a code share.
    companyIdText: Array<CompanyIdentificationTextType>
    
    // List of Office Id Details
    officeIdDetails: Array<officeIdDetailsType1>
    
    // List of flights
    flightIndex: Array<flightIndexType>
    
    // Recommendation details
    recommendation: Array<recommendationType>
    
    // Additional solutions, such as Rail solutions...
    otherSolutions: Array<otherSolutionsType>
    
    // Warning information
    warningInfo: Array<warningInfoType>
    
    // Global information
    globalInformation: Array<globalInformationType>
    
    
    serviceFeesGrp: Array<serviceFeesGrpType>
    
    // Multi dimension references
    multiDimensionRef: Array<MultiDimensionalValueType>
    
    
    value: Array<ValueSearchCriteriaType1>
    
    
    mnrGrp: Array<mnrGrpType>
    
    // Group of offers and offer items identifiers
    offersGroup: Array<offersGroupType>
    
}

export interface Fare_MasterPricerCalendarReplyTypeAttributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType {
    
    $attributes: StatusTypeAttributes
    
    // Status details
    status: Array<StatusDetailsType>
    
}

export interface StatusTypeAttributes {
    
}


export interface StatusDetailsType {
    
    $attributes: StatusDetailsTypeAttributes
    
    // Advisory type information, Fare Server
    advisoryTypeInfo: Array<string>
    
    // CPU time, user type
    notification: Array<string>
    
    // CPU time,user type
    notification2: Array<string>
    
    // Capture and trace information
    description: Array<string>
    
}

export interface StatusDetailsTypeAttributes {
    
}


export interface errorMessageType {
    
    $attributes: errorMessageTypeAttributes
    
    // Application error details.
    applicationError: ApplicationErrorInformationType_78543S
    
    // Type of error message and free text
    errorMessageText: Array<InteractiveFreeTextType_78544S>
    
}

export interface errorMessageTypeAttributes {
    
}

// To identify the type of application error within a message
export interface ApplicationErrorInformationType_78543S {
    
    $attributes: ApplicationErrorInformationType_78543SAttributes
    
    // Details on application error.
    applicationErrorDetail: ApplicationErrorInformationType
    
}

export interface ApplicationErrorInformationType_78543SAttributes {
    
}


export interface ApplicationErrorInformationType {
    
    $attributes: ApplicationErrorInformationTypeAttributes
    
    // The code assigned by the receiver of a message for identification of a data validation error condition.
    error: string
    
}

export interface ApplicationErrorInformationTypeAttributes {
    
}

// To provide free form or coded text information
export interface InteractiveFreeTextType_78544S {
    
    $attributes: InteractiveFreeTextType_78544SAttributes
    
    // Details on interactive free text
    freeTextQualification: Array<FreeTextQualificationType_120769C>
    
    // Free text
    description: Array<string>
    
}

export interface InteractiveFreeTextType_78544SAttributes {
    
}


export interface FreeTextQualificationType_120769C {
    
    $attributes: FreeTextQualificationType_120769CAttributes
    
    // Type of message
    textSubjectQualifier: string
    
    // Coded Text or type of information in 4440 (e.g. type of OSI or free text, canned message value)
    informationType: Array<string>
    
    // ISO code for language of free text (default is English)
    language: Array<string>
    
}

export interface FreeTextQualificationType_120769CAttributes {
    
}

// To specify conversion rate details
export interface ConversionRateTypeI {
    
    $attributes: ConversionRateTypeIAttributes
    
    // Detail of conversion rate of First Monetary Unit.
    conversionRateDetail: Array<ConversionRateDetailsTypeI_179848C>
    
}

export interface ConversionRateTypeIAttributes {
    
}


export interface ConversionRateDetailsTypeI_179848C {
    
    $attributes: ConversionRateDetailsTypeI_179848CAttributes
    
    // Conversion type
    conversionType: Array<string>
    
    // Currency
    currency: string
    
    // Conversion rate for pricing
    rate: Array<string>
    
    // Converted value amount
    convertedAmountLink: Array<string>
    
    // Applicable ISO country code or Tax designator code.
    taxQualifier: Array<string>
    
}

export interface ConversionRateDetailsTypeI_179848CAttributes {
    
}


export interface FareInformationType1 {
    
    $attributes: FareInformationType1Attributes
    
    // Value Qualifier
    valueQualifier: Array<string>
    
    // Value
    value: Array<number>
    
    // Fare Details
    fareDetails: Array<FareDetailsType_193037C>
    
    // Identity Number
    identityNumber: Array<string>
    
    // Fare Type Grouping
    fareTypeGrouping: Array<FareTypeGroupingInformationType1>
    
    // Rate Category
    rateCategory: Array<string>
    
}

export interface FareInformationType1Attributes {
    
}


export interface FareDetailsType_193037C {
    
    $attributes: FareDetailsType_193037CAttributes
    
    // Qualifier
    qualifier: Array<string>
    
    // Rate
    rate: Array<number>
    
    // Country
    country: Array<string>
    
    // Fare Category
    fareCategory: Array<string>
    
}

export interface FareDetailsType_193037CAttributes {
    
}


export interface FareTypeGroupingInformationType1 {
    
    $attributes: FareTypeGroupingInformationType1Attributes
    
    // Pricing Group
    pricingGroup: Array<string>
    
}

export interface FareTypeGroupingInformationType1Attributes {
    
}

// NEW FARE SEACH
export interface FareFamilyType1 {
    
    $attributes: FareFamilyType1Attributes
    
    // Fare Family Reference Number
    refNumber: number
    
    // Fare Family Short Name
    fareFamilyname: Array<string>
    
    // HIERARCHICAL ORDER WITHIN FARE FAMILY
    hierarchy: Array<number>
    
    // CABIN USED FOR FARE FAMILY
    cabin: Array<string>
    
    // Indicates Commercial Fare Family Short names
    commercialFamilyDetails: Array<FareFamilyDetailsType1>
    
    // Short description of the fare family
    description: Array<string>
    
    // Carrier code
    carrier: Array<string>
    
    // Reference to the services details
    services: Array<ServicesReferences>
    
    // Reservation booking designator
    bookingClass: Array<string>
    
}

export interface FareFamilyType1Attributes {
    
}

// NEW FARE SEARCH
export interface FareFamilyDetailsType1 {
    
    $attributes: FareFamilyDetailsType1Attributes
    
    // Commercial fare Family Short name
    commercialFamily: string
    
}

export interface FareFamilyDetailsType1Attributes {
    
}


export interface ServicesReferences {
    
    $attributes: ServicesReferencesAttributes
    
    // Reference of the service
    reference: Array<string>
    
    // Status of the service
    status: Array<string>
    
    // Service lowest price
    fromPrice: Array<string>
    
}

export interface ServicesReferencesAttributes {
    
}


export interface amountInfoForAllPaxType {
    
    $attributes: amountInfoForAllPaxTypeAttributes
    
    // Itinerary amounts for all passengers
    itineraryAmounts: MonetaryInformationType1
    
    // Amounts information per segment
    amountsPerSgt: Array<amountsPerSgtType>
    
}

export interface amountInfoForAllPaxTypeAttributes {
    
}

// To specify monetary information details
export interface MonetaryInformationType1 {
    
    $attributes: MonetaryInformationType1Attributes
    
    // Monetary information.
    monetaryDetail: Array<MonetaryInformationDetailsType>
    
}

export interface MonetaryInformationType1Attributes {
    
}


export interface MonetaryInformationDetailsType {
    
    $attributes: MonetaryInformationDetailsTypeAttributes
    
    // To specify amount and percentage.
    amountType: Array<string>
    
    // Amount
    amount: number
    
    // ISO currency code
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsTypeAttributes {
    
}


export interface amountsPerSgtType {
    
    $attributes: amountsPerSgtTypeAttributes
    
    // Requested segment reference
    sgtRef: ReferenceInfoType_133176S
    
    // Amounts : Issue total amount, issue taxes amount, non refundable taxes amount
    amounts: Array<MonetaryInformationType1>
    
}

export interface amountsPerSgtTypeAttributes {
    
}

// To specify an association between references given to travelers, to products, to services
export interface ReferenceInfoType_133176S {
    
    $attributes: ReferenceInfoType_133176SAttributes
    
    // Referencing details
    referencingDetail: Array<ReferencingDetailsType1>
    
}

export interface ReferenceInfoType_133176SAttributes {
    
}


export interface ReferencingDetailsType1 {
    
    $attributes: ReferencingDetailsType1Attributes
    
    // Reference qualifier
    refQualifier: Array<string>
    
    // Requested segment reference
    refNumber: number
    
}

export interface ReferencingDetailsType1Attributes {
    
}


export interface amountInfoPerPaxType {
    
    $attributes: amountInfoPerPaxTypeAttributes
    
    // Passenger references
    paxRef: SpecificTravellerType
    
    // Passenger attributes : Infant indicator
    paxAttributes: Array<FareInformationType_80868S>
    
    // Itinerary amounts information
    itineraryAmounts: MonetaryInformationType1
    
    // Amounts per segment
    amountsPerSgt: Array<amountsPerSgtType>
    
}

export interface amountInfoPerPaxTypeAttributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerType {
    
    $attributes: SpecificTravellerTypeAttributes
    
    // Traveller details
    travellerDetails: Array<SpecificTravellerDetailsType>
    
}

export interface SpecificTravellerTypeAttributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerDetailsType {
    
    $attributes: SpecificTravellerDetailsTypeAttributes
    
    // Reference number
    referenceNumber: Array<string>
    
}

export interface SpecificTravellerDetailsTypeAttributes {
    
}

// To specify fare details.
export interface FareInformationType_80868S {
    
    $attributes: FareInformationType_80868SAttributes
    
    // Fare details
    fareDetails: Array<FareDetailsType1>
    
}

export interface FareInformationType_80868SAttributes {
    
}

// To specify the fare type and related information.
export interface FareDetailsType1 {
    
    $attributes: FareDetailsType1Attributes
    
    // Passenger Type qualifier
    passengerTypeQualifier: Array<string>
    
}

export interface FareDetailsType1Attributes {
    
}


export interface feeDetailsType1 {
    
    $attributes: feeDetailsType1Attributes
    
    // Fee/Reduction Reference number.
    feeReference: ItemReferencesAndVersionsType_78564S
    
    // Fee/Reduction information.
    feeInformation: Array<DiscountAndPenaltyInformationType>
    
    // Fee/Reduction parameters.
    feeParameters: Array<AttributeType_78561S>
    
    // To specify conversion rate details
    convertedOrOriginalInfo: Array<ConversionRateTypeI_78562S>
    
}

export interface feeDetailsType1Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType_78564S {
    
    $attributes: ItemReferencesAndVersionsType_78564SAttributes
    
    // Qualifies the type of the reference used.
    referenceType: Array<string>
    
    // Unique fee reference.
    feeRefNumber: Array<number>
    
}

export interface ItemReferencesAndVersionsType_78564SAttributes {
    
}

// To specify information about discounts and penalties
export interface DiscountAndPenaltyInformationType {
    
    $attributes: DiscountAndPenaltyInformationTypeAttributes
    
    // Used to specify airline collected fee or agent collected fee.
    feeIdentification: Array<string>
    
    // Used to specify penalty information
    feeInformation: Array<DiscountPenaltyMonetaryInformationType>
    
}

export interface DiscountAndPenaltyInformationTypeAttributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationType {
    
    $attributes: DiscountPenaltyMonetaryInformationTypeAttributes
    
    // Type of discount/penalty
    feeType: Array<string>
    
    // The amount Type can be a percentage or an amount
    feeAmountType: Array<string>
    
    // specify the value
    feeAmount: Array<number>
    
    // Fee currency code.
    feeCurrency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationTypeAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_78561S {
    
    $attributes: AttributeType_78561SAttributes
    
    // Fee/reduction parameters.
    feeParameter: Array<AttributeInformationType1>
    
}

export interface AttributeType_78561SAttributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationType1 {
    
    $attributes: AttributeInformationType1Attributes
    
    // Type of parameter.
    feeParameterType: Array<string>
    
    // Reference to company Id.
    feeParameterDescription: Array<string>
    
}

export interface AttributeInformationType1Attributes {
    
}

// To specify conversion rate details
export interface ConversionRateTypeI_78562S {
    
    $attributes: ConversionRateTypeI_78562SAttributes
    
    // Details of conversion
    conversionRateDetail: Array<ConversionRateDetailsTypeI>
    
}

export interface ConversionRateTypeI_78562SAttributes {
    
}


export interface ConversionRateDetailsTypeI {
    
    $attributes: ConversionRateDetailsTypeIAttributes
    
    // Conversion type
    conversionType: Array<string>
    
    // Currency
    currency: Array<string>
    
    // amount
    amount: Array<string>
    
}

export interface ConversionRateDetailsTypeIAttributes {
    
}


export interface BucketInformationType1 {
    
    $attributes: BucketInformationType1Attributes
    
    // Number
    number: Array<string>
    
    // Name
    name: Array<string>
    
    // Mode
    mode: Array<string>
    
}

export interface BucketInformationType1Attributes {
    
}


export interface ThemeText {
    
    $attributes: ThemeTextAttributes
    
    // Reference
    reference: Array<string>
    
    // Text
    text: Array<string>
    
}

export interface ThemeTextAttributes {
    
}


export interface additionalInfoType {
    
    $attributes: additionalInfoTypeAttributes
    
    // Identifier
    identDetails: ProductIdentificationType
    
    // Date information
    dateInfo: Array<DateTimePeriodType>
    
}

export interface additionalInfoTypeAttributes {
    
}

// To identify a product.
export interface ProductIdentificationType {
    
    $attributes: ProductIdentificationTypeAttributes
    
    // Product identification details
    productData: Array<ProductIdentDetailsType>
    
}

export interface ProductIdentificationTypeAttributes {
    
}

// Code, number or name to identify a specific product or service and a code to identify the level or type of product or service.
export interface ProductIdentDetailsType {
    
    $attributes: ProductIdentDetailsTypeAttributes
    
    // Number
    number: Array<string>
    
}

export interface ProductIdentDetailsTypeAttributes {
    
}

// To specify date, and/or time, or period.
export interface DateTimePeriodType {
    
    $attributes: DateTimePeriodTypeAttributes
    
    // Date Time Description
    dateTimeDescription: DateTimePeriodDetailsBatchType
    
}

export interface DateTimePeriodTypeAttributes {
    
}

// Date and/or time, or period relevant to the specified date/time/period type.
export interface DateTimePeriodDetailsBatchType {
    
    $attributes: DateTimePeriodDetailsBatchTypeAttributes
    
    // Date time qualifier
    dateTimeQualifier: Array<string>
    
    // Date time details
    dateTimeDetails: Array<string>
    
}

export interface DateTimePeriodDetailsBatchTypeAttributes {
    
}

// Compagny identification text
export interface CompanyIdentificationTextType {
    
    $attributes: CompanyIdentificationTextTypeAttributes
    
    // Company Id Text reference.
    textRefNumber: Array<number>
    
    // Company id free text.
    companyText: Array<string>
    
}

export interface CompanyIdentificationTextTypeAttributes {
    
}


export interface officeIdDetailsType1 {
    
    $attributes: officeIdDetailsType1Attributes
    
    // Office Id Information
    officeIdInformation: UserIdentificationType1
    
    // Office Id Reference Number
    officeIdReference: ItemReferencesAndVersionsType_78536S
    
}

export interface officeIdDetailsType1Attributes {
    
}

// User Identification
export interface UserIdentificationType1 {
    
    $attributes: UserIdentificationType1Attributes
    
    // Originator Identification Details
    officeIdentification: Array<OriginatorIdentificationDetailsTypeI1>
    
    // Used to specify which kind of info is given in DE 9900.
    officeType: Array<string>
    
    // The code given to an agent by the originating reservation system.
    officeCode: Array<string>
    
}

export interface UserIdentificationType1Attributes {
    
}

// To identify a user
export interface OriginatorIdentificationDetailsTypeI1 {
    
    $attributes: OriginatorIdentificationDetailsTypeI1Attributes
    
    // Office Name.
    officeName: Array<number>
    
    // Agent Sign In .
    agentSignin: Array<string>
    
    // Confidential Office Name.
    confidentialOffice: Array<string>
    
    // Other Office Name
    otherOffice: Array<string>
    
}

export interface OriginatorIdentificationDetailsTypeI1Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType_78536S {
    
    $attributes: ItemReferencesAndVersionsType_78536SAttributes
    
    // Qualifies the type of the reference used.
    referenceType: Array<string>
    
    // Unique fee reference.
    refNumber: Array<number>
    
}

export interface ItemReferencesAndVersionsType_78536SAttributes {
    
}


export interface flightIndexType {
    
    $attributes: flightIndexTypeAttributes
    
    // Indicates references and details about requested segments
    requestedSegmentRef: OriginAndDestinationRequestType1
    
    // List of flights per requested segment
    groupOfFlights: Array<groupOfFlightsType1>
    
}

export interface flightIndexTypeAttributes {
    
}

// To convey information regarding Requested Segments
export interface OriginAndDestinationRequestType1 {
    
    $attributes: OriginAndDestinationRequestType1Attributes
    
    // Requested segment number
    segRef: number
    
    // Forces arrival or departure, from/to the same airport/city
    locationForcing: Array<ItineraryDetailsType1>
    
}

export interface OriginAndDestinationRequestType1Attributes {
    
}

// Forces arrival or departure to/from the same city or airport option
export interface ItineraryDetailsType1 {
    
    $attributes: ItineraryDetailsType1Attributes
    
    // Airport/City Qualifier: the passenger wants to depart/arrive from/to the same airport or city in the specified requested segment
    airportCityQualifier: string
    
    // Requested segment number
    segmentNumber: number
    
}

export interface ItineraryDetailsType1Attributes {
    
}


export interface groupOfFlightsType1 {
    
    $attributes: groupOfFlightsType1Attributes
    
    // To indicate parameters for proposed flight group.
    propFlightGrDetail: ProposedSegmentType1
    
    // List of flight per Elapse Flying time
    flightDetails: Array<flightDetailsType2>
    
}

export interface groupOfFlightsType1Attributes {
    
}

// To specify the parameters used for product quality
export interface ProposedSegmentType1 {
    
    $attributes: ProposedSegmentType1Attributes
    
    // Parameters for proposed flight group
    flightProposal: Array<ProposedSegmentDetailsType1>
    
    // Flight characteristics.
    flightCharacteristic: Array<string>
    
    // Majority cabin
    majCabin: Array<string>
    
}

export interface ProposedSegmentType1Attributes {
    
}


export interface ProposedSegmentDetailsType1 {
    
    $attributes: ProposedSegmentDetailsType1Attributes
    
    // Flight proposal reference
    ref: Array<string>
    
    // Elapse Flying Time
    unitQualifier: Array<string>
    
}

export interface ProposedSegmentDetailsType1Attributes {
    
}


export interface flightDetailsType2 {
    
    $attributes: flightDetailsType2Attributes
    
    // Specification of details on the flight and posting availability
    flightInformation: TravelProductType1
    
    // returns booking class and availability context
    avlInfo: Array<FlightProductInformationType_141442S>
    
    // Details on Flight date, time and location of technical stop or change of gauge
    technicalStop: Array<DateAndTimeInformationType1>
    
    // Code Share Agreement description for current flight.
    commercialAgreement: Array<CommercialAgreementsType1>
    
    // Additional Info about flight, such as Reference number, and several options
    addInfo: Array<HeaderInformationTypeI1>
    
    // Flight characteristics
    flightCharacteristics: Array<FlightCharacteristicsType>
    
    // Flight Services by cabin/rbd
    flightServices: Array<FlightServicesType>
    
    // Meal services
    mealServices: Array<MealServicesType>
    
}

export interface flightDetailsType2Attributes {
    
}

// Contains flight travel (date, time, flight number,...) and posting avaibility information
export interface TravelProductType1 {
    
    $attributes: TravelProductType1Attributes
    
    // Date and time of departure and arrival
    productDateTime: ProductDateTimeType1
    
    // Location of departure and arrival
    location: Array<LocationIdentificationDetailsType1>
    
    
    companyId: Array<CompanyIdentificationType1>
    
    // Flight number or trainNumber
    flightOrtrainNumber: Array<string>
    
    // Product details
    productDetail: Array<AdditionalProductDetailsType1>
    
    // Additional product details
    addProductDetail: Array<ProductFacilitiesType1>
    
    // Attribute details
    attributeDetails: Array<CodedAttributeInformationType_270108C>
    
}

export interface TravelProductType1Attributes {
    
}


export interface ProductDateTimeType1 {
    
    $attributes: ProductDateTimeType1Attributes
    
    // Departure date
    dateOfDeparture: string
    
    // Departure time
    timeOfDeparture: Array<string>
    
    // Arrival date
    dateOfArrival: Array<string>
    
    // Arrival time
    timeOfArrival: Array<string>
    
    // Arrival date compared to departure date, only if different from 0
    dateVariation: Array<number>
    
}

export interface ProductDateTimeType1Attributes {
    
}


export interface LocationIdentificationDetailsType1 {
    
    $attributes: LocationIdentificationDetailsType1Attributes
    
    // 3 characters ATA/IATA airport/city code
    locationId: string
    
    // Airport/city qualifier: the requested point is an airport when ambiguity exists (e.g. HOU)
    airportCityQualifier: Array<string>
    
    // Terminal information
    terminal: Array<string>
    
}

export interface LocationIdentificationDetailsType1Attributes {
    
}


export interface CompanyIdentificationType1 {
    
    $attributes: CompanyIdentificationType1Attributes
    
    // Marketing carrier
    marketingCarrier: string
    
    // Operating carrier
    operatingCarrier: Array<string>
    
    // airline alliance code
    alliance: Array<string>
    
}

export interface CompanyIdentificationType1Attributes {
    
}


export interface AdditionalProductDetailsType1 {
    
    $attributes: AdditionalProductDetailsType1Attributes
    
    // Type of aircraft
    equipmentType: Array<string>
    
    // Day number of the week
    operatingDay: Array<string>
    
    // Number of stops made in a journey if different from 0
    techStopNumber: Array<number>
    
    // Location places of the stops
    locationId: Array<string>
    
}

export interface AdditionalProductDetailsType1Attributes {
    
}

// Level of access
export interface ProductFacilitiesType1 {
    
    $attributes: ProductFacilitiesType1Attributes
    
    // Yes-No indicator whether Last Seat Available
    lastSeatAvailable: Array<string>
    
    // Level of access
    levelOfAccess: Array<string>
    
    // Yes-No indicator whether electronic ticketing
    electronicTicketing: Array<string>
    
    // Product identification suffix
    operationalSuffix: Array<string>
    
    // Define whether a flight has been polled or not
    productDetailQualifier: Array<string>
    
    // Add some flight restrictions (See code set list)
    flightCharacteristic: Array<string>
    
}

export interface ProductFacilitiesType1Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_270108C {
    
    $attributes: CodedAttributeInformationType_270108CAttributes
    
    
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType_270108CAttributes {
    
}

// To specify flight product information details
export interface FlightProductInformationType_141442S {
    
    $attributes: FlightProductInformationType_141442SAttributes
    
    // Indicates flight cabin details
    cabinProduct: Array<CabinProductDetailsType_205138C>
    
    // To specify additional characteristics.
    contextDetails: Array<ProductTypeDetailsType_205137C1>
    
}

export interface FlightProductInformationType_141442SAttributes {
    
}


export interface CabinProductDetailsType_205138C {
    
    $attributes: CabinProductDetailsType_205138CAttributes
    
    // Reservation booking designator - RBD
    rbd: string
    
    // Reservation Booking Modifier
    bookingModifier: Array<string>
    
    // Indicates the cabin related to the Booking code
    cabin: Array<string>
    
    // Availibility status : posting level
    avlStatus: Array<string>
    
}

export interface CabinProductDetailsType_205138CAttributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType_205137C1 {
    
    $attributes: ProductTypeDetailsType_205137C1Attributes
    
    // indicates whether the flight is domestic or international
    avl: Array<string>
    
}

export interface ProductTypeDetailsType_205137C1Attributes {
    
}

// not the standard only used in fare quote message
export interface DateAndTimeInformationType1 {
    
    $attributes: DateAndTimeInformationType1Attributes
    
    // Details on date and time
    stopDetails: Array<DateAndTimeDetailsType1>
    
    
    DummyNET: string
    
}

export interface DateAndTimeInformationType1Attributes {
    
}


export interface DateAndTimeDetailsType1 {
    
    $attributes: DateAndTimeDetailsType1Attributes
    
    // Date time period qualifier
    dateQualifier: Array<string>
    
    // First Date
    date: Array<string>
    
    // First Time
    firstTime: Array<string>
    
    // Movement type.
    equipementType: Array<string>
    
    // Place/location identification.
    locationId: Array<string>
    
}

export interface DateAndTimeDetailsType1Attributes {
    
}

// To specify commercial agreements between two or more companies related to joint, shared, lease operations etc.
export interface CommercialAgreementsType1 {
    
    $attributes: CommercialAgreementsType1Attributes
    
    // Codeshare Details
    codeshareDetails: Array<CompanyRoleIdentificationType1>
    
    // Other codeshare details
    otherCodeshareDetails: Array<CompanyRoleIdentificationType1>
    
}

export interface CommercialAgreementsType1Attributes {
    
}

// To indicate commercial agreements related to the service being provided.
export interface CompanyRoleIdentificationType1 {
    
    $attributes: CompanyRoleIdentificationType1Attributes
    
    // Type of code share agreement.
    codeShareType: Array<string>
    
    // company identification
    airlineDesignator: Array<string>
    
    // flight number
    flightNumber: Array<number>
    
}

export interface CompanyRoleIdentificationType1Attributes {
    
}

// To specify header information applicable to the entire message.
export interface HeaderInformationTypeI1 {
    
    $attributes: HeaderInformationTypeI1Attributes
    
    // Status
    status: Array<string>
    
    // Date and Time info
    dateTimePeriodDetails: Array<DateTimePeriodDetailsTypeI1>
    
    // Reference number
    referenceNumber: Array<string>
    
    // Contains product identification such as UIC code...
    productIdentification: Array<string>
    
}

export interface HeaderInformationTypeI1Attributes {
    
}

// To indicate period of applicability.
export interface DateTimePeriodDetailsTypeI1 {
    
    $attributes: DateTimePeriodDetailsTypeI1Attributes
    
    // Qualifier
    qualifier: string
    
    // Value
    value: Array<string>
    
}

export interface DateTimePeriodDetailsTypeI1Attributes {
    
}

// Convey flight characteristics
export interface FlightCharacteristicsType {
    
    $attributes: FlightCharacteristicsTypeAttributes
    
    // On-Time Performance
    onTimePerformance: Array<OnTimePerformanceType>
    
    // In flight services
    inFlightSrv: Array<string>
    
}

export interface FlightCharacteristicsTypeAttributes {
    
}


export interface OnTimePerformanceType {
    
    $attributes: OnTimePerformanceTypeAttributes
    
    // Date time period
    dateTimePeriod: Array<string>
    
    // Percentage
    percentage: Array<number>
    
    // Accuracy
    accuracy: Array<string>
    
}

export interface OnTimePerformanceTypeAttributes {
    
}

// Convey services for cabin or class
export interface FlightServicesType {
    
    $attributes: FlightServicesTypeAttributes
    
    // Type of service used
    serviceType: string
    
    
    cabinInfo: Array<CabinInformationType>
    
    
    classInfo: Array<ClassInformationType>
    
}

export interface FlightServicesTypeAttributes {
    
}


export interface CabinInformationType {
    
    $attributes: CabinInformationTypeAttributes
    
    // Identify the features associated to the cabin/class
    service: string
    
    // Cabin code designator
    cabin: Array<string>
    
}

export interface CabinInformationTypeAttributes {
    
}


export interface ClassInformationType {
    
    $attributes: ClassInformationTypeAttributes
    
    // Identify the features associated to the cabin/class
    service: string
    
    // Class designator
    rbd: Array<string>
    
}

export interface ClassInformationTypeAttributes {
    
}

// To specify details related to meal services of a product.
export interface MealServicesType {
    
    $attributes: MealServicesTypeAttributes
    
    // Service details
    serviceDetails: Array<ServiceDetailsType>
    
}

export interface MealServicesTypeAttributes {
    
}

// To specify meal services for a product class.
export interface ServiceDetailsType {
    
    $attributes: ServiceDetailsTypeAttributes
    
    // Reservation booking designator
    bookingClass: Array<string>
    
    // Service
    service: Array<string>
    
}

export interface ServiceDetailsTypeAttributes {
    
}


export interface recommendationType {
    
    $attributes: recommendationTypeAttributes
    
    // Specification of the item number
    itemNumber: ItemNumberType_161497S
    
    // To describe type of recommendation
    warningMessage: Array<InteractiveFreeTextType_78544S>
    
    // Indicates the Fare family reference.
    fareFamilyRef: Array<ReferenceInfoType_133176S>
    
    // Recommendation Price and Taxes.
    recPriceInfo: MonetaryInformationType_193024S
    
    // Mini rules
    miniRule: Array<MiniRulesType_78547S>
    
    // Indicates reference of Flight or the fee reference valid for all pax (usage:start with the 1 possible Fee reference, then provide the segments references)
    segmentFlightRef: Array<ReferenceInfoType1>
    
    // Fare details per reuqested segments for all passengers.
    recommandationSegmentsFareDetails: Array<recommandationSegmentsFareDetailsType>
    
    // Passenger fare product details
    paxFareProduct: Array<paxFareProductType>
    
    // Specific recommendation details
    specificRecDetails: Array<specificRecDetailsType>
    
}

export interface recommendationTypeAttributes {
    
}

// To specify item numbers
export interface ItemNumberType_161497S {
    
    $attributes: ItemNumberType_161497SAttributes
    
    // Indicates the recommendation number.
    itemNumberId: Array<ItemNumberIdentificationType_191597C>
    
    // Code share details.
    codeShareDetails: Array<CompanyRoleIdentificationType_120771C>
    
    // Pricing ticketind details.
    priceTicketing: Array<PricingTicketingInformationType1>
    
}

export interface ItemNumberType_161497SAttributes {
    
}


export interface ItemNumberIdentificationType_191597C {
    
    $attributes: ItemNumberIdentificationType_191597CAttributes
    
    // Item number.
    number: Array<string>
    
    // Indicates the item type .
    numberType: Array<string>
    
}

export interface ItemNumberIdentificationType_191597CAttributes {
    
}

// To indicate commercial agreements related to the service being provided.
export interface CompanyRoleIdentificationType_120771C {
    
    $attributes: CompanyRoleIdentificationType_120771CAttributes
    
    // Type of code share agreement.
    transportStageQualifier: Array<string>
    
    // company identification
    company: Array<string>
    
}

export interface CompanyRoleIdentificationType_120771CAttributes {
    
}

// To specify indicators related to pricing and ticketing.
export interface PricingTicketingInformationType1 {
    
    $attributes: PricingTicketingInformationType1Attributes
    
    // Price type qualifier
    priceType: Array<string>
    
}

export interface PricingTicketingInformationType1Attributes {
    
}

// To specify monetary information details
export interface MonetaryInformationType_193024S {
    
    $attributes: MonetaryInformationType_193024SAttributes
    
    // Monetary information.
    monetaryDetail: Array<MonetaryInformationDetailsType>
    
}

export interface MonetaryInformationType_193024SAttributes {
    
}

// To specify the restrictions
export interface MiniRulesType_78547S {
    
    $attributes: MiniRulesType_78547SAttributes
    
    // Type of restriction: PTC, Max Adv Res, Max Ticketing After Res, ...
    restrictionType: Array<string>
    
    // Categoty of restriction: PTC, Max Adv Pur, Days, ...
    category: string
    
    // Indicators
    indicator: Array<MiniRulesIndicatorType>
    
    // Mini rules
    miniRules: Array<MiniRulesDetailsType>
    
}

export interface MiniRulesType_78547SAttributes {
    
}


export interface MiniRulesIndicatorType {
    
    $attributes: MiniRulesIndicatorTypeAttributes
    
    // See rule indicator and free form text indicator
    ruleIndicator: Array<string>
    
}

export interface MiniRulesIndicatorTypeAttributes {
    
}


export interface MiniRulesDetailsType {
    
    $attributes: MiniRulesDetailsTypeAttributes
    
    // Coded text (period or day)
    interpretation: Array<string>
    
    // Data type coded or value of interpretation
    value: Array<string>
    
}

export interface MiniRulesDetailsTypeAttributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInfoType1 {
    
    $attributes: ReferenceInfoType1Attributes
    
    // Referencing details
    referencingDetail: Array<ReferencingDetailsType_191583C>
    
    
    DummyNET: string
    
}

export interface ReferenceInfoType1Attributes {
    
}

// Referencing details
export interface ReferencingDetailsType_191583C {
    
    $attributes: ReferencingDetailsType_191583CAttributes
    
    // Service reference qualifier
    refQualifier: Array<string>
    
    // Service reference
    refNumber: number
    
}

export interface ReferencingDetailsType_191583CAttributes {
    
}


export interface recommandationSegmentsFareDetailsType {
    
    $attributes: recommandationSegmentsFareDetailsTypeAttributes
    
    // Reference and details about requested segments.
    recommendationSegRef: OriginAndDestinationRequestType1
    
    // Amounts per requested segment.
    segmentMonetaryInformation: Array<MonetaryInformationType1>
    
}

export interface recommandationSegmentsFareDetailsTypeAttributes {
    
}


export interface paxFareProductType {
    
    $attributes: paxFareProductTypeAttributes
    
    // Passenger Fare Details.
    paxFareDetail: PricingTicketingSubsequentType_193023S
    
    // Indicates Fee references (usage: start with the 1 possible Fee reference, then provide the segments references)
    feeRef: Array<ReferenceInfoType_134839S>
    
    // Passenger Reference
    paxReference: Array<TravellerReferenceInformationType1>
    
    // add tax details for each passenger of each recommendations.
    passengerTaxDetails: Array<TaxType2>
    
    // fare Details
    fare: Array<fareType1>
    
    // Fare details by Requested segment number
    fareDetails: Array<fareDetailsType2>
    
}

export interface paxFareProductTypeAttributes {
    
}

// To convey additional information related to a ticket
export interface PricingTicketingSubsequentType_193023S {
    
    $attributes: PricingTicketingSubsequentType_193023SAttributes
    
    // Passenger fare product number
    paxFareNum: string
    
    // Total fare amount
    totalFareAmount: number
    
    // Total tax amount
    totalTaxAmount: Array<number>
    
    // Code share details.
    codeShareDetails: Array<CompanyRoleIdentificationType_120771C>
    
    // Monetary information.
    monetaryDetails: Array<MonetaryInformationDetailsType>
    
    // Pricing ticketing details.
    pricingTicketing: Array<PricingTicketingInformationType1>
    
}

export interface PricingTicketingSubsequentType_193023SAttributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInfoType_134839S {
    
    $attributes: ReferenceInfoType_134839SAttributes
    
    // Referencing details
    referencingDetail: Array<ReferencingDetailsType_195561C>
    
}

export interface ReferenceInfoType_134839SAttributes {
    
}

// Referencing details
export interface ReferencingDetailsType_195561C {
    
    $attributes: ReferencingDetailsType_195561CAttributes
    
    // Segment reference qualifier
    refQualifier: Array<string>
    
    // Flight or flight group reference
    refNumber: number
    
}

export interface ReferencingDetailsType_195561CAttributes {
    
}

// To specify traveller/personal details
export interface TravellerReferenceInformationType1 {
    
    $attributes: TravellerReferenceInformationType1Attributes
    
    // Requested passenger type
    ptc: Array<string>
    
    // Traveller details
    traveller: Array<TravellerDetailsType1>
    
}

export interface TravellerReferenceInformationType1Attributes {
    
}


export interface TravellerDetailsType1 {
    
    $attributes: TravellerDetailsType1Attributes
    
    // Direct reference of passenger assigned by requesting system.
    ref: Array<number>
    
    // Traveller is an infant
    infantIndicator: Array<number>
    
}

export interface TravellerDetailsType1Attributes {
    
}

// To specify details relating to tax(es).
export interface TaxType2 {
    
    $attributes: TaxType2Attributes
    
    // Tax category
    taxCategory: Array<string>
    
    // Tax details
    taxDetails: Array<TaxDetailsType>
    
}

export interface TaxType2Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsType {
    
    $attributes: TaxDetailsTypeAttributes
    
    // Amount
    rate: Array<string>
    
    // Country code
    countryCode: Array<string>
    
    // Currency code
    currencyCode: Array<string>
    
    // Type
    type: Array<string>
    
    // Indicator
    indicator: Array<string>
    
}

export interface TaxDetailsTypeAttributes {
    
}


export interface fareType1 {
    
    $attributes: fareType1Attributes
    
    // Last Date to Ticket, Penalties
    pricingMessage: InteractiveFreeTextType_78559S
    
    // Amount of penalties, Surcharges...
    monetaryInformation: Array<MonetaryInformationType_199534S>
    
}

export interface fareType1Attributes {
    
}

// To provide free form or coded text information
export interface InteractiveFreeTextType_78559S {
    
    $attributes: InteractiveFreeTextType_78559SAttributes
    
    // Details on interactive free text
    freeTextQualification: Array<FreeTextQualificationType_120769C>
    
    // Free text
    description: Array<string>
    
}

export interface InteractiveFreeTextType_78559SAttributes {
    
}

// To specify monetary information details
export interface MonetaryInformationType_199534S {
    
    $attributes: MonetaryInformationType_199534SAttributes
    
    // Monetary information
    monetaryDetail: Array<MonetaryInformationDetailsType>
    
}

export interface MonetaryInformationType_199534SAttributes {
    
}


export interface fareDetailsType2 {
    
    $attributes: fareDetailsType2Attributes
    
    // Reference of the Requested Segment
    segmentRef: OriginAndDestinationRequestType1
    
    // Contains the fare details as PTC,Fare Basis, Fare Family applied for each segment
    groupOfFares: Array<groupOfFaresType>
    
    // Amounts per passenger per requested segment.
    psgSegMonetaryInformation: Array<MonetaryInformationType1>
    
    // Majority Cabin Info
    majCabin: Array<ProductInformationType>
    
}

export interface fareDetailsType2Attributes {
    
}


export interface groupOfFaresType {
    
    $attributes: groupOfFaresTypeAttributes
    
    // Contains details of Flight and Fare
    productInformation: FlightProductInformationType_176659S
    
    // Fare calculation code details
    fareCalculationCodeDetails: Array<FareCalculationCodeDetailsType>
    
    // Ticket designator, ticket code and fare basis.
    ticketInfos: Array<FareQualifierDetailsType>
    
    // Reference of Fare Family for each Fare Component
    fareFamiliesRef: Array<ReferenceInfoType_176658S>
    
}

export interface groupOfFaresTypeAttributes {
    
}

// To specify flight product information details
export interface FlightProductInformationType_176659S {
    
    $attributes: FlightProductInformationType_176659SAttributes
    
    // Indicates flight cabin details
    cabinProduct: Array<CabinProductDetailsType1>
    
    // Fare product details
    fareProductDetail: Array<FareProductDetailsType_248552C>
    
    // Corporate number or name and number
    corporateId: Array<string>
    
    // To determine if Fare Breaks at this segment
    breakPoint: Array<string>
    
    // To specify additional characteristics.
    contextDetails: Array<ProductTypeDetailsType1>
    
}

export interface FlightProductInformationType_176659SAttributes {
    
}


export interface CabinProductDetailsType1 {
    
    $attributes: CabinProductDetailsType1Attributes
    
    // Reservation booking designator - RBD
    rbd: string
    
    // Reservation Booking Modifier
    bookingModifier: Array<string>
    
    // Indicates the cabin related to the Booking code
    cabin: Array<string>
    
    // Availibility status : posting level
    avlStatus: Array<string>
    
}

export interface CabinProductDetailsType1Attributes {
    
}


export interface FareProductDetailsType_248552C {
    
    $attributes: FareProductDetailsType_248552CAttributes
    
    // Fare basis code
    fareBasis: Array<string>
    
    // PTC priced
    passengerType: Array<string>
    
    // Type of fare
    fareType: Array<string>
    
}

export interface FareProductDetailsType_248552CAttributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType1 {
    
    $attributes: ProductTypeDetailsType1Attributes
    
    // Availability connection type.
    availabilityCnxType: Array<string>
    
}

export interface ProductTypeDetailsType1Attributes {
    
}

// To specify fare calculation information.
export interface FareCalculationCodeDetailsType {
    
    $attributes: FareCalculationCodeDetailsTypeAttributes
    
    // Qualifier of the amout or rate
    qualifier: Array<string>
    
    // Amount
    amount: Array<number>
    
    // Location code
    locationCode: Array<string>
    
    // Other location code
    otherLocationCode: Array<string>
    
    // Rate
    rate: Array<number>
    
}

export interface FareCalculationCodeDetailsTypeAttributes {
    
}

// To specify the details which qualify a fare
export interface FareQualifierDetailsType {
    
    $attributes: FareQualifierDetailsTypeAttributes
    
    // Route Code
    movementType: Array<string>
    
    // Fare categories
    fareCategories: Array<FareCategoryCodesTypeI>
    
    // Fare details
    fareDetails: Array<FareDetailsTypeI>
    
    // Additional fare details
    additionalFareDetails: Array<AdditionalFareQualifierDetailsTypeI>
    
    // Discount details
    discountDetails: Array<DiscountPenaltyInformationType>
    
}

export interface FareQualifierDetailsTypeAttributes {
    
}

// To designate non-system specific combinations of fare types.
export interface FareCategoryCodesTypeI {
    
    $attributes: FareCategoryCodesTypeIAttributes
    
    // Fare type
    fareType: string
    
    // Other fare type
    otherFareType: Array<string>
    
}

export interface FareCategoryCodesTypeIAttributes {
    
}

// To specify the fare type and related information.
export interface FareDetailsTypeI {
    
    $attributes: FareDetailsTypeIAttributes
    
    // Qualifier
    qualifier: Array<string>
    
    // Rate
    rate: Array<number>
    
    // Country
    country: Array<string>
    
    // Fare category
    fareCategory: Array<string>
    
}

export interface FareDetailsTypeIAttributes {
    
}

// To specify the fare basis and ticket designator codes.
export interface AdditionalFareQualifierDetailsTypeI {
    
    $attributes: AdditionalFareQualifierDetailsTypeIAttributes
    
    // Rate class
    rateClass: Array<string>
    
    // Ticket designator.
    ticketDesignator: Array<string>
    
    // Pricing group
    pricingGroup: Array<string>
    
    // Second rate class
    secondRateClass: Array<string>
    
}

export interface AdditionalFareQualifierDetailsTypeIAttributes {
    
}

// To indicate the discounts and penalties by fare type.
export interface DiscountPenaltyInformationType {
    
    $attributes: DiscountPenaltyInformationTypeAttributes
    
    // Discounted fare,...
    fareQualifier: string
    
    // Dicount code,...
    rateCategory: Array<string>
    
    // Amount
    amount: Array<number>
    
    // Percentage
    percentage: Array<number>
    
}

export interface DiscountPenaltyInformationTypeAttributes {
    
}

// To specify an association between references given to travelers, to products, to services
export interface ReferenceInfoType_176658S {
    
    $attributes: ReferenceInfoType_176658SAttributes
    
    // Referencing details
    referencingDetail: Array<ReferencingDetailsType1>
    
}

export interface ReferenceInfoType_176658SAttributes {
    
}

// To specify details related to routing status of a product.
export interface ProductInformationType {
    
    $attributes: ProductInformationTypeAttributes
    
    // value of the Qualifier: INT for International DOM for Domestic EUR for European otherwise CM#10569 INVALID INTERNATIONAL INDICATOR is returned.
    productDetailsQualifier: Array<string>
    
    
    bookingClassDetails: Array<ProductDetailsType>
    
}

export interface ProductInformationTypeAttributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsType {
    
    $attributes: ProductDetailsTypeAttributes
    
    
    designator: string
    
    
    availabilityStatus: Array<string>
    
    
    specialService: Array<string>
    
    
    option: Array<string>
    
}

export interface ProductDetailsTypeAttributes {
    
}


export interface specificRecDetailsType {
    
    $attributes: specificRecDetailsTypeAttributes
    
    // Recommendation details
    specificRecItem: ItemReferencesAndVersionsType1
    
    // Specific fare product details
    specificProductDetails: Array<specificProductDetailsType>
    
}

export interface specificRecDetailsTypeAttributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType1 {
    
    $attributes: ItemReferencesAndVersionsType1Attributes
    
    // Qualifies the type of the reference used.
    referenceType: Array<string>
    
    // Unique fee reference.
    refNumber: Array<number>
    
}

export interface ItemReferencesAndVersionsType1Attributes {
    
}


export interface specificProductDetailsType {
    
    $attributes: specificProductDetailsTypeAttributes
    
    // Product details
    productReferences: PricingTicketingSubsequentType
    
    // Specific fare details per requested segments.
    fareContextDetails: Array<fareContextDetailsType>
    
}

export interface specificProductDetailsTypeAttributes {
    
}

// To convey additional information related to a ticket
export interface PricingTicketingSubsequentType {
    
    $attributes: PricingTicketingSubsequentTypeAttributes
    
    // Passenger fare product number
    paxFareNum: Array<string>
    
}

export interface PricingTicketingSubsequentTypeAttributes {
    
}


export interface fareContextDetailsType {
    
    $attributes: fareContextDetailsTypeAttributes
    
    // Reference of requested segment
    requestedSegmentInfo: OriginAndDestinationRequestType_134833S
    
    // Fare connection context details
    cnxContextDetails: Array<cnxContextDetailsType>
    
}

export interface fareContextDetailsTypeAttributes {
    
}

// To convey information regarding Requested Segments
export interface OriginAndDestinationRequestType_134833S {
    
    $attributes: OriginAndDestinationRequestType_134833SAttributes
    
    // Requested segment number
    segRef: number
    
}

export interface OriginAndDestinationRequestType_134833SAttributes {
    
}


export interface cnxContextDetailsType {
    
    $attributes: cnxContextDetailsTypeAttributes
    
    // Fare connection context details
    fareCnxInfo: FlightProductInformationType1
    
}

export interface cnxContextDetailsTypeAttributes {
    
}

// To specify flight product information details
export interface FlightProductInformationType1 {
    
    $attributes: FlightProductInformationType1Attributes
    
    // Indicates flight cabin details
    cabinProduct: Array<CabinProductDetailsType_195516C>
    
    // To specify additional characteristics.
    contextDetails: Array<ProductTypeDetailsType1>
    
}

export interface FlightProductInformationType1Attributes {
    
}


export interface CabinProductDetailsType_195516C {
    
    $attributes: CabinProductDetailsType_195516CAttributes
    
    // Reservation booking designator - RBD
    rbd: Array<string>
    
    // Reservation Booking Modifier
    bookingModifier: Array<string>
    
    // Indicates the cabin related to the Booking code
    cabin: Array<string>
    
    // Availibility status : posting level
    avlStatus: string
    
}

export interface CabinProductDetailsType_195516CAttributes {
    
}


export interface otherSolutionsType {
    
    $attributes: otherSolutionsTypeAttributes
    
    // Reference to the current solution
    reference: SequenceDetailsTypeU
    
    // Describes several amount for each sequence
    amtGroup: Array<amtGroupType>
    
    // Passenger Related info (discount card, PTC, fare info, amount ...)
    psgInfo: Array<psgInfoType>
    
}

export interface otherSolutionsTypeAttributes {
    
}

// To provide details relating to the sequence.
export interface SequenceDetailsTypeU {
    
    $attributes: SequenceDetailsTypeUAttributes
    
    // Sequence details
    sequenceDetails: Array<SequenceInformationTypeU>
    
}

export interface SequenceDetailsTypeUAttributes {
    
}

// Identification of a sequence and source for sequencing.
export interface SequenceInformationTypeU {
    
    $attributes: SequenceInformationTypeUAttributes
    
    // Number
    number: string
    
    // Identification code
    identificationCode: Array<string>
    
}

export interface SequenceInformationTypeUAttributes {
    
}


export interface amtGroupType {
    
    $attributes: amtGroupTypeAttributes
    
    // reference to the current amount (per bound, per segment...)
    ref: ReferenceInfoType_165972S
    
    // Amount Description
    amount: Array<MonetaryInformationTypeI1>
    
}

export interface amtGroupTypeAttributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType_165972S {
    
    $attributes: ReferenceInfoType_165972SAttributes
    
    // Reference details
    referenceDetails: Array<ReferencingDetailsType_234704C>
    
    
    DummyNET: string
    
}

export interface ReferenceInfoType_165972SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_234704C {
    
    $attributes: ReferencingDetailsType_234704CAttributes
    
    // Type
    type: Array<string>
    
    // Value
    value: Array<string>
    
}

export interface ReferencingDetailsType_234704CAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI1 {
    
    $attributes: MonetaryInformationTypeI1Attributes
    
    // Monetary details
    monetaryDetails: Array<MonetaryInformationDetailsTypeI1>
    
}

export interface MonetaryInformationTypeI1Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI1 {
    
    $attributes: MonetaryInformationDetailsTypeI1Attributes
    
    // type Qualifier
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI1Attributes {
    
}


export interface psgInfoType {
    
    $attributes: psgInfoTypeAttributes
    
    // passenger reference
    ref: SegmentRepetitionControlTypeI1
    
    // Passenger Description Info
    description: Array<FareInformationTypeI1>
    
    // Passenger frequent traveler info
    freqTraveller: Array<FrequentTravellerIdentificationCodeType1>
    
    // amount per passenger or group of passenger
    amount: Array<MonetaryInformationTypeI1>
    
    // Fare description
    fare: Array<FlightProductInformationType_161491S>
    
    // Additional Information
    attribute: Array<AttributeTypeU>
    
}

export interface psgInfoTypeAttributes {
    
}

// To indicate the number of segment group repetitions.
export interface SegmentRepetitionControlTypeI1 {
    
    $attributes: SegmentRepetitionControlTypeI1Attributes
    
    // Segment control details
    segmentControlDetails: Array<SegmentRepetitionControlDetailsTypeI1>
    
}

export interface SegmentRepetitionControlTypeI1Attributes {
    
}

// Information about the number of selection segments to be processed.
export interface SegmentRepetitionControlDetailsTypeI1 {
    
    $attributes: SegmentRepetitionControlDetailsTypeI1Attributes
    
    // traveller number
    quantity: Array<number>
    
    // range of traveller
    numberOfUnits: Array<number>
    
}

export interface SegmentRepetitionControlDetailsTypeI1Attributes {
    
}

// To specify fare details.
export interface FareInformationTypeI1 {
    
    $attributes: FareInformationTypeI1Attributes
    
    // Value qualifier
    valueQualifier: Array<string>
    
    // Value
    value: Array<number>
    
}

export interface FareInformationTypeI1Attributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType1 {
    
    $attributes: FrequentTravellerIdentificationCodeType1Attributes
    
    // Frequent Traveller Info
    frequentTravellerDetails: Array<FrequentTravellerIdentificationType1>
    
}

export interface FrequentTravellerIdentificationCodeType1Attributes {
    
}


export interface FrequentTravellerIdentificationType1 {
    
    $attributes: FrequentTravellerIdentificationType1Attributes
    
    // Carrier where the FQTV is registered.
    carrier: Array<string>
    
    // Number
    number: Array<string>
    
    // To specify a Tier linked to the FQTV
    tierLevel: Array<string>
    
    // For example : priority code
    priorityCode: Array<string>
    
}

export interface FrequentTravellerIdentificationType1Attributes {
    
}

// To specify flight product information details
export interface FlightProductInformationType_161491S {
    
    $attributes: FlightProductInformationType_161491SAttributes
    
    // Indicates flight cabin details
    cabinProduct: Array<CabinProductDetailsType_229142C>
    
    // Fare product details
    fareProductDetail: Array<FareProductDetailsType1>
    
}

export interface FlightProductInformationType_161491SAttributes {
    
}


export interface CabinProductDetailsType_229142C {
    
    $attributes: CabinProductDetailsType_229142CAttributes
    
    // Reservation booking designator - RBD
    rbd: string
    
    // Indicates the cabin related to the Booking code
    cabin: Array<string>
    
    // Availibility status : posting level
    avlStatus: Array<string>
    
}

export interface CabinProductDetailsType_229142CAttributes {
    
}


export interface FareProductDetailsType1 {
    
    $attributes: FareProductDetailsType1Attributes
    
    // Fare basis code
    fareBasis: Array<string>
    
}

export interface FareProductDetailsType1Attributes {
    
}


export interface AttributeTypeU {
    
    $attributes: AttributeTypeUAttributes
    
    // provides the function of the attribute
    attributeFunction: Array<string>
    
    // provides details for the Attribute
    attributeDetails: AttributeInformationTypeU
    
}

export interface AttributeTypeUAttributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU {
    
    $attributes: AttributeInformationTypeUAttributes
    
    // Attribute type
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface AttributeInformationTypeUAttributes {
    
}


export interface warningInfoType {
    
    $attributes: warningInfoTypeAttributes
    
    // Dummy Segment
    globalMessageMarker: DummySegmentTypeI
    
    // Informative free text information
    globalMessage: InteractiveFreeTextType_78534S
    
}

export interface warningInfoTypeAttributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI {
    
    $attributes: DummySegmentTypeIAttributes
    
}

export interface DummySegmentTypeIAttributes {
    
}

// To provide free form or coded text information
export interface InteractiveFreeTextType_78534S {
    
    $attributes: InteractiveFreeTextType_78534SAttributes
    
    // Details on interactive free text
    freeTextQualification: Array<FreeTextQualificationType>
    
    // Free text
    description: Array<string>
    
}

export interface InteractiveFreeTextType_78534SAttributes {
    
}


export interface FreeTextQualificationType {
    
    $attributes: FreeTextQualificationTypeAttributes
    
    // Type of message
    textSubjectQualifier: string
    
    // Coded Text or type of information in 4440 (e.g. type of OSI or free text, canned message value)
    informationType: Array<string>
    
}

export interface FreeTextQualificationTypeAttributes {
    
}


export interface globalInformationType {
    
    $attributes: globalInformationTypeAttributes
    
    // Coded attributes
    attributes: CodedAttributeType_78535S
    
}

export interface globalInformationTypeAttributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_78535S {
    
    $attributes: CodedAttributeType_78535SAttributes
    
    // Fee/reduction Id
    attributeDetails: Array<CodedAttributeInformationType1>
    
}

export interface CodedAttributeType_78535SAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType1 {
    
    $attributes: CodedAttributeInformationType1Attributes
    
    // Type of fee/reduction
    attributeType: string
    
    // Fee Id Number
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType1Attributes {
    
}


export interface serviceFeesGrpType {
    
    $attributes: serviceFeesGrpTypeAttributes
    
    // Service fee type (OC)
    serviceTypeInfo: SelectionDetailsType1
    
    // Service fee reference (OC ,OCM, OCC)
    serviceFeeRefGrp: Array<serviceFeeRefGrpType>
    
    // Service coverage information per passenger
    serviceCoverageInfoGrp: Array<serviceCoverageInfoGrpType>
    
    // Globalmessage marker
    globalMessageMarker: DummySegmentTypeI
    
    // Service fee information per passenger
    serviceFeeInfoGrp: Array<serviceFeeInfoGrpType>
    
    // Description of applicable services
    serviceDetailsGrp: Array<serviceDetailsGrpType>
    
    // Free baggage allowance information group
    freeBagAllowanceGrp: Array<freeBagAllowanceGrpType>
    
}

export interface serviceFeesGrpTypeAttributes {
    
}

// To specify the details for making a selection.
export interface SelectionDetailsType1 {
    
    $attributes: SelectionDetailsType1Attributes
    
    // Carrier fees options
    carrierFeeDetails: SelectionDetailsInformationType1
    
}

export interface SelectionDetailsType1Attributes {
    
}

// To specify a selected option and associated information.
export interface SelectionDetailsInformationType1 {
    
    $attributes: SelectionDetailsInformationType1Attributes
    
    // Carrier fee type
    type: string
    
    // Carrier fee status
    optionInformation: Array<string>
    
}

export interface SelectionDetailsInformationType1Attributes {
    
}


export interface serviceFeeRefGrpType {
    
    $attributes: serviceFeeRefGrpTypeAttributes
    
    // Reference of service fee global information
    refInfo: ReferenceInfoType1
    
}

export interface serviceFeeRefGrpTypeAttributes {
    
}


export interface serviceCoverageInfoGrpType {
    
    $attributes: serviceCoverageInfoGrpTypeAttributes
    
    // Item reference number for service coverage details
    itemNumberInfo: ItemNumberType1
    
    // Service coverage information group
    serviceCovInfoGrp: Array<serviceCovInfoGrpType>
    
}

export interface serviceCoverageInfoGrpTypeAttributes {
    
}

// To specify an item number
export interface ItemNumberType1 {
    
    $attributes: ItemNumberType1Attributes
    
    // Item number details
    itemNumber: ItemNumberIdentificationType_192331C
    
}

export interface ItemNumberType1Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType_192331C {
    
    $attributes: ItemNumberIdentificationType_192331CAttributes
    
    // Service coverage number
    number: Array<string>
    
    // Type
    type: Array<string>
    
    // Qualifier
    qualifier: Array<string>
    
    // Responsible agency
    responsibleAgency: Array<string>
    
}

export interface ItemNumberIdentificationType_192331CAttributes {
    
}


export interface serviceCovInfoGrpType {
    
    $attributes: serviceCovInfoGrpTypeAttributes
    
    // Passenger reference number
    paxRefInfo: SpecificTravellerType
    
    // Service coverage information at flight level Matched seat characteristics
    coveragePerFlightsInfo: Array<ActionDetailsType>
    
    // Carrier information
    carrierInfo: Array<TransportIdentifierType>
    
    // Service reference number
    refInfo: Array<ReferenceInfoType_134840S>
    
}

export interface serviceCovInfoGrpTypeAttributes {
    
}

// To specify the action that should be taken on a selected reference number.
export interface ActionDetailsType {
    
    $attributes: ActionDetailsTypeAttributes
    
    // Number of items details
    numberOfItemsDetails: Array<ProcessingInformationType>
    
    // Range of segments
    lastItemsDetails: Array<ReferenceType>
    
}

export interface ActionDetailsTypeAttributes {
    
}

// To identify the action to be taken and the selection criteria.
export interface ProcessingInformationType {
    
    $attributes: ProcessingInformationTypeAttributes
    
    // Action qualifier
    actionQualifier: Array<string>
    
    // Reference qualifier
    referenceQualifier: Array<string>
    
    // Reference number
    refNum: Array<string>
    
}

export interface ProcessingInformationTypeAttributes {
    
}

// To specify which number in a sequence of references and/or the reference number.
export interface ReferenceType {
    
    $attributes: ReferenceTypeAttributes
    
    // Reference of leg
    refOfLeg: Array<string>
    
    // Reference of segment starting range
    firstItemIdentifier: Array<number>
    
    // Reference of segment ending range
    lastItemIdentifier: Array<number>
    
}

export interface ReferenceTypeAttributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType {
    
    $attributes: TransportIdentifierTypeAttributes
    
    // Company identification
    companyIdentification: Array<CompanyIdentificationTypeI1>
    
}

export interface TransportIdentifierTypeAttributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI1 {
    
    $attributes: CompanyIdentificationTypeI1Attributes
    
    // Company
    marketingCompany: Array<string>
    
    // Company
    operatingCompany: Array<string>
    
    // Company
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI1Attributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInfoType_134840S {
    
    $attributes: ReferenceInfoType_134840SAttributes
    
    // Referencing details
    referencingDetail: Array<ReferencingDetailsType_195561C>
    
}

export interface ReferenceInfoType_134840SAttributes {
    
}


export interface serviceFeeInfoGrpType {
    
    $attributes: serviceFeeInfoGrpTypeAttributes
    
    // Item number details
    itemNumberInfo: ItemNumberType1
    
    // Service fee informations
    serviceDetailsGrp: Array<serviceDetailsGrpType>
    
}

export interface serviceFeeInfoGrpTypeAttributes {
    
}


export interface serviceDetailsGrpType {
    
    $attributes: serviceDetailsGrpTypeAttributes
    
    // Service reference number
    refInfo: ReferenceInfoType_134840S
    
    // Service matched information
    serviceMatchedInfoGroup: Array<serviceMatchedInfoGroupType>
    
}

export interface serviceDetailsGrpTypeAttributes {
    
}


export interface serviceMatchedInfoGroupType {
    
    $attributes: serviceMatchedInfoGroupTypeAttributes
    
    // Reference on pax number
    paxRefInfo: SpecificTravellerType
    
    // Pricing oriented service matched information
    pricingInfo: Array<FareInformationType_80868S>
    
    // Informative Service amount
    amountInfo: Array<MonetaryInformationType_193024S>
    
    // Attribute information
    attributeInfo: Array<CodedAttributeType1>
    
}

export interface serviceMatchedInfoGroupTypeAttributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType1 {
    
    $attributes: CodedAttributeType1Attributes
    
    // Attribute function
    attributeFunction: Array<string>
    
    // Attribute details
    attributeDetails: Array<CodedAttributeInformationType_283620C>
    
}

export interface CodedAttributeType1Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_283620C {
    
    $attributes: CodedAttributeInformationType_283620CAttributes
    
    
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType_283620CAttributes {
    
}


export interface freeBagAllowanceGrpType {
    
    $attributes: freeBagAllowanceGrpTypeAttributes
    
    // Free baggage allownce information
    freeBagAllownceInfo: ExcessBaggageType
    
    // Item number information
    itemNumberInfo: Array<ItemNumberType_166130S>
    
}

export interface freeBagAllowanceGrpTypeAttributes {
    
}


export interface ExcessBaggageType {
    
    $attributes: ExcessBaggageTypeAttributes
    
    // Baggage details
    baggageDetails: Array<BaggageDetailsType>
    
    // Free baggage allowance details
    bagTagDetails: Array<BagtagDetailsType>
    
}

export interface ExcessBaggageTypeAttributes {
    
}

// To specify the number and weight of baggage.
export interface BaggageDetailsType {
    
    $attributes: BaggageDetailsTypeAttributes
    
    // Number of pieces or weight
    freeAllowance: Array<number>
    
    // Nature of the free allowance ( Number of pieces or weight)
    quantityCode: Array<string>
    
    // Unit qualifier
    unitQualifier: Array<string>
    
}

export interface BaggageDetailsTypeAttributes {
    
}

// To identify baggage by company identification, serial numbers, and destination.
export interface BagtagDetailsType {
    
    $attributes: BagtagDetailsTypeAttributes
    
    // Identifier
    identifier: Array<string>
    
    // Number
    number: Array<number>
    
}

export interface BagtagDetailsTypeAttributes {
    
}

// To specify an item number
export interface ItemNumberType_166130S {
    
    $attributes: ItemNumberType_166130SAttributes
    
    // Item number details
    itemNumberDetails: Array<ItemNumberIdentificationType_234878C>
    
}

export interface ItemNumberType_166130SAttributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType_234878C {
    
    $attributes: ItemNumberIdentificationType_234878CAttributes
    
    // Number
    number: Array<number>
    
    // Type
    type: Array<string>
    
}

export interface ItemNumberIdentificationType_234878CAttributes {
    
}


export interface MultiDimensionalValueType {
    
    $attributes: MultiDimensionalValueTypeAttributes
    
    // Identifier
    identifier: Array<string>
    
    // Dimension detail
    dimensionDetail: Array<DimensionDetailType>
    
}

export interface MultiDimensionalValueTypeAttributes {
    
}


export interface DimensionDetailType {
    
    $attributes: DimensionDetailTypeAttributes
    
    // Bucket reference
    bucketRef: Array<string>
    
    // Value reference
    valueRef: Array<string>
    
}

export interface DimensionDetailTypeAttributes {
    
}

// To specify Criteria with list of parameters
export interface ValueSearchCriteriaType1 {
    
    $attributes: ValueSearchCriteriaType1Attributes
    
    
    ref: Array<string>
    
    
    value: Array<string>
    
    
    criteriaDetails: Array<CriteriaiDetaislType1>
    
}

export interface ValueSearchCriteriaType1Attributes {
    
}

// Criteria details : weights/parameters list
export interface CriteriaiDetaislType1 {
    
    $attributes: CriteriaiDetaislType1Attributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
    // Attribute
    attribute: Array<string>
    
}

export interface CriteriaiDetaislType1Attributes {
    
}


export interface mnrGrpType {
    
    $attributes: mnrGrpTypeAttributes
    
    
    mnr: MiniRulesType
    
    
    mnrDetails: Array<mnrDetailsType>
    
}

export interface mnrGrpTypeAttributes {
    
}

// To specify the restrictions
export interface MiniRulesType {
    
    $attributes: MiniRulesTypeAttributes
    
    // Categoty of restriction: PTC, Max Adv Pur, Days, ...
    category: string
    
}

export interface MiniRulesTypeAttributes {
    
}


export interface mnrDetailsType {
    
    $attributes: mnrDetailsTypeAttributes
    
    
    mnrRef: ItemNumberType_176648S
    
    
    dateInfo: Array<DateAndTimeInformationType_182345S>
    
    // Categories
    catGrp: Array<catGrpType>
    
}

export interface mnrDetailsTypeAttributes {
    
}

// To specify an item number
export interface ItemNumberType_176648S {
    
    $attributes: ItemNumberType_176648SAttributes
    
    
    itemNumberDetails: Array<ItemNumberIdentificationType_248537C>
    
}

export interface ItemNumberType_176648SAttributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType_248537C {
    
    $attributes: ItemNumberIdentificationType_248537CAttributes
    
    
    number: Array<string>
    
}

export interface ItemNumberIdentificationType_248537CAttributes {
    
}

// To convey information regarding estimated or actual dates and times of operational events
export interface DateAndTimeInformationType_182345S {
    
    $attributes: DateAndTimeInformationType_182345SAttributes
    
    // DATE AND TIME DETAILS
    dateAndTimeDetails: Array<DateAndTimeDetailsType_256192C>
    
    
    DummyNET: string
    
}

export interface DateAndTimeInformationType_182345SAttributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeDetailsType_256192C {
    
    $attributes: DateAndTimeDetailsType_256192CAttributes
    
    
    qualifier: Array<string>
    
    
    date: Array<string>
    
    // Time
    time: Array<string>
    
    // Location
    location: Array<string>
    
}

export interface DateAndTimeDetailsType_256192CAttributes {
    
}


export interface catGrpType {
    
    $attributes: catGrpTypeAttributes
    
    // Category information
    catInfo: CategDescrType
    
    // Monetary information
    monInfo: Array<MonetaryInformationType_174241S>
    
    // Status information
    statusInfo: Array<StatusType_182386S>
    
}

export interface catGrpTypeAttributes {
    
}

// To identify an ATPCO Fare Category
export interface CategDescrType {
    
    $attributes: CategDescrTypeAttributes
    
    // Category description information
    descriptionInfo: CategoryDescriptionType
    
    // Category processing indicator
    processIndicator: Array<string>
    
}

export interface CategDescrTypeAttributes {
    
}


export interface CategoryDescriptionType {
    
    $attributes: CategoryDescriptionTypeAttributes
    
    // Category number from ATPCO naming conventions (C05 for Advance Purchase restrictions, C06 for Minimun stay ...)
    number: number
    
    // Category Code (ATPCO component code, e.g ADV for Advance purchase, STP for stopover restrictions, ELG for eligibility restrictions...)
    code: Array<string>
    
}

export interface CategoryDescriptionTypeAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_174241S {
    
    $attributes: MonetaryInformationType_174241SAttributes
    
    
    monetaryDetails: MonetaryInformationDetailsType_245528C
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType_245528C>
    
}

export interface MonetaryInformationType_174241SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_245528C {
    
    $attributes: MonetaryInformationDetailsType_245528CAttributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType_245528CAttributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType_182386S {
    
    $attributes: StatusType_182386SAttributes
    
    // STATUS DETAILS
    statusInformation: Array<StatusDetailsType_256255C>
    
}

export interface StatusType_182386SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType_256255C {
    
    $attributes: StatusDetailsType_256255CAttributes
    
    // list of status/qualifiers Either His for Historical or Crt for Current
    indicator: Array<string>
    
    
    action: Array<string>
    
}

export interface StatusDetailsType_256255CAttributes {
    
}


export interface offersGroupType {
    
    $attributes: offersGroupTypeAttributes
    
    // Response information
    response: ApplicationType1
    
    // Offers
    offers: Array<offersType>
    
}

export interface offersGroupTypeAttributes {
    
}

// This segment is used to specify details on an application
export interface ApplicationType1 {
    
    $attributes: ApplicationType1Attributes
    
    // Application details
    applicationDetails: Array<ApplicationIdentificationType>
    
}

export interface ApplicationType1Attributes {
    
}

// Used to specify application details
export interface ApplicationIdentificationType {
    
    $attributes: ApplicationIdentificationTypeAttributes
    
    // Unique identifier of the item.
    internalId: Array<string>
    
}

export interface ApplicationIdentificationTypeAttributes {
    
}


export interface offersType {
    
    $attributes: offersTypeAttributes
    
    // Offer details
    offerDtetails: OfferType
    
    // Offer items
    offerItems: Array<offerItemsType>
    
}

export interface offersTypeAttributes {
    
}


export interface OfferType {
    
    $attributes: OfferTypeAttributes
    
    // Reference
    reference: Array<string>
    
    // Offer identification
    offerId: Array<string>
    
}

export interface OfferTypeAttributes {
    
}


export interface offerItemsType {
    
    $attributes: offerItemsTypeAttributes
    
    // Offer item details
    offerItemDetails: OfferItemType
    
    // References
    references: Array<ReferenceInfoType_165972S>
    
}

export interface offerItemsTypeAttributes {
    
}


export interface OfferItemType {
    
    $attributes: OfferItemTypeAttributes
    
    // Offer item identifier
    offerItemId: Array<string>
    
    // Status
    status: Array<string>
    
}

export interface OfferItemTypeAttributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationType_97181C1 {
    
    $attributes: AttributeInformationType_97181C1Attributes
    
    // Attribute type
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface AttributeInformationType_97181C1Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType1 {
    
    $attributes: AttributeType1Attributes
    
    // Criteria Set Type
    attributeQualifier: Array<string>
    
    // Criteria details
    attributeDetails: Array<AttributeInformationType_97181C1>
    
}

export interface AttributeType1Attributes {
    
}

// To identify specific data and a quantity related to the data.
export interface DataInformationType1 {
    
    $attributes: DataInformationType1Attributes
    
    // Ancillary services options
    indicator: Array<string>
    
}

export interface DataInformationType1Attributes {
    
}

// To identify the type of data to be sent and to qualify the data when required.
export interface DataTypeInformationType1 {
    
    $attributes: DataTypeInformationType1Attributes
    
    // service group/sub-group/sub-code information
    subType: string
    
    // Status (automated, manually added, exempted). Default is automated
    option: Array<string>
    
}

export interface DataTypeInformationType1Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationTypeI {
    
    $attributes: FreeTextQualificationTypeIAttributes
    
    // Text subject qualifier
    textSubjectQualifier: string
    
}

export interface FreeTextQualificationTypeIAttributes {
    
}

// To provide free form or coded text information.
export interface InteractiveFreeTextType {
    
    $attributes: InteractiveFreeTextTypeAttributes
    
    // Free text qualification
    freeTextQualification: Array<FreeTextQualificationTypeI>
    
    // Free text
    freeText: Array<string>
    
}

export interface InteractiveFreeTextTypeAttributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType1 {
    
    $attributes: ItemNumberIdentificationType1Attributes
    
    // Ancillary Service number
    number: Array<string>
    
    // Type
    type: Array<string>
    
    // Qualifier
    qualifier: Array<string>
    
    // Responsible agency
    responsibleAgency: Array<string>
    
}

export interface ItemNumberIdentificationType1Attributes {
    
}

// To specify an item number
export interface ItemNumberType_80866S1 {
    
    $attributes: ItemNumberType_80866S1Attributes
    
    // Item number details
    itemNumberDetails: ItemNumberIdentificationType1
    
}

export interface ItemNumberType_80866S1Attributes {
    
}

// Special requirements data details
export interface SpecialRequirementsDataDetailsType1 {
    
    $attributes: SpecialRequirementsDataDetailsType1Attributes
    
    // SSR seat characteristic
    seatCharacteristics: Array<string>
    
    
    DummyNET: string
    
}

export interface SpecialRequirementsDataDetailsType1Attributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsType1 {
    
    $attributes: SpecialRequirementsDetailsType1Attributes
    
    // To specify the Service Requirement of the customer
    serviceRequirementsInfo: SpecialRequirementsTypeDetailsType1
    
    // Seat details
    seatDetails: Array<SpecialRequirementsDataDetailsType1>
    
}

export interface SpecialRequirementsDetailsType1Attributes {
    
}


export interface SpecialRequirementsTypeDetailsType1 {
    
    $attributes: SpecialRequirementsTypeDetailsType1Attributes
    
    // To specify the Service Classification of the Service Requirement.
    serviceClassification: string
    
    // Status
    serviceStatus: Array<string>
    
    // To specify the number of items involved
    serviceNumberOfInstances: Array<number>
    
    // To specify to which marketing carrier the service applies
    serviceMarketingCarrier: Array<string>
    
    // Specify the Service group
    serviceGroup: Array<string>
    
    // Specify the Service Sub-Group
    serviceSubGroup: Array<string>
    
    // Free Text attached to the Service.
    serviceFreeText: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsType1Attributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationType1 {
    
    $attributes: SpecificDataInformationType1Attributes
    
    // Carrier fee description
    dataTypeInformation: DataTypeInformationType1
    
    // Data information
    dataInformation: Array<DataInformationType1>
    
}

export interface SpecificDataInformationType1Attributes {
    
}


export interface Fare_MasterPricerTravelBoardSearchType {
    
    $attributes: Fare_MasterPricerTravelBoardSearchTypeAttributes
    
    // Number of seats , recommendations.
    numberOfUnit: Array<NumberOfUnitsType1>
    
    // Global options
    globalOptions: Array<AttributeType2>
    
    // Traveler Details
    paxReference: Array<TravellerReferenceInformationType2>
    
    // Customer references
    customerRef: Array<ConsumerReferenceInformationType1>
    
    // Search options
    searchOptions: Array<AttributeList1>
    
    // Fee with different payment forms by passenger.
    formOfPaymentByPassenger: Array<FOPRepresentationType1>
    
    // Solution Family
    solutionFamily: Array<FareInformationType2>
    
    // Passenger info group (9 ADT + 9 IN)
    passengerInfoGrp: Array<GroupPassengerDetailsType1>
    
    // Fare families.
    fareFamilies: Array<fareFamiliesType1>
    
    // Fare options
    fareOptions: Array<fareOptionsType1>
    
    // Indicates Price to beat
    priceToBeat: Array<MonetaryInformationType2>
    
    // Tax Details
    taxInfo: Array<TaxType3>
    
    // Details of a Flight : Direct, Non stop...
    travelFlightInfo: Array<TravelFlightInformationType_199258S1>
    
    
    valueSearch: Array<ValueSearchCriteriaType2>
    
    // Buckets
    buckets: Array<bucketsType1>
    
    // Itinerary
    itinerary: Array<itineraryType1>
    
    // Changed ticket information.
    ticketChangeInfo: Array<ticketChangeInfoType1>
    
    // Specify fare family combinations
    combinationFareFamilies: Array<combinationFareFamiliesType1>
    
    // Fee option group.
    feeOption: Array<feeOptionType1>
    
    // List of Office Id Details
    officeIdDetails: Array<officeIdDetailsType2>
    
}

export interface Fare_MasterPricerTravelBoardSearchTypeAttributes {
    
}

// To specify the number of Units required
export interface NumberOfUnitsType1 {
    
    $attributes: NumberOfUnitsType1Attributes
    
    // NUMBER OF UNIT DETAILS
    unitNumberDetail: Array<NumberOfUnitDetailsType_270113C1>
    
}

export interface NumberOfUnitsType1Attributes {
    
}


export interface NumberOfUnitDetailsType_270113C1 {
    
    $attributes: NumberOfUnitDetailsType_270113C1Attributes
    
    // Number of Units
    numberOfUnits: number
    
    // Number of unit qualifier
    typeOfUnit: string
    
}

export interface NumberOfUnitDetailsType_270113C1Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType2 {
    
    $attributes: AttributeType2Attributes
    
    // Option parameters
    selectionDetails: Array<AttributeInformationType2>
    
}

export interface AttributeType2Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationType2 {
    
    $attributes: AttributeInformationType2Attributes
    
    // Code of options
    option: string
    
    // Mandatory when alternate date option is used (ALT), must be set to plus (P) or minus (M) a number of days around the original PNR segment dates. E.g.: M1 (for minus 1 day) or P100 (for plus 100 days)
    optionInformation: Array<string>
    
}

export interface AttributeInformationType2Attributes {
    
}

// To specify traveller/personal details
export interface TravellerReferenceInformationType2 {
    
    $attributes: TravellerReferenceInformationType2Attributes
    
    // Requested passenger type
    ptc: Array<string>
    
    // Traveller details
    traveller: Array<TravellerDetailsType2>
    
}

export interface TravellerReferenceInformationType2Attributes {
    
}


export interface TravellerDetailsType2 {
    
    $attributes: TravellerDetailsType2Attributes
    
    // Direct reference of passenger assigned by requesting system.
    ref: number
    
    // Traveller is an infant
    infantIndicator: Array<number>
    
}

export interface TravellerDetailsType2Attributes {
    
}

// To specify consumer reference information.
export interface ConsumerReferenceInformationType1 {
    
    $attributes: ConsumerReferenceInformationType1Attributes
    
    // Customer references
    customerReferences: Array<ConsumerReferenceIdentificationTypeI1>
    
}

export interface ConsumerReferenceInformationType1Attributes {
    
}

// Identification of consumer references by type, company, number and reference to a traveller.
export interface ConsumerReferenceIdentificationTypeI1 {
    
    $attributes: ConsumerReferenceIdentificationTypeI1Attributes
    
    
    referenceQualifier: string
    
    
    referenceNumber: Array<string>
    
    
    referencePartyName: Array<string>
    
    
    travellerReferenceNbr: Array<string>
    
}

export interface ConsumerReferenceIdentificationTypeI1Attributes {
    
}


export interface AttributeList1 {
    
    $attributes: AttributeList1Attributes
    
    // Qualifier
    qualifier: Array<string>
    
    // Attribute details
    attributeDetails: Array<AttributeDetails1>
    
}

export interface AttributeList1Attributes {
    
}


export interface AttributeDetails1 {
    
    $attributes: AttributeDetails1Attributes
    
    // Qualifier
    qualifier: Array<string>
    
    // Value
    value: Array<string>
    
}

export interface AttributeDetails1Attributes {
    
}


export interface FOPRepresentationType1 {
    
    $attributes: FOPRepresentationType1Attributes
    
    // Form of payment information.
    formOfPaymentDetails: FormOfPaymentTypeI1
    
    // Fee/Reduction Passenger reference.
    passengerFeeReference: Array<ItemReferencesAndVersionsType2>
    
}

export interface FOPRepresentationType1Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentTypeI1 {
    
    $attributes: FormOfPaymentTypeI1Attributes
    
    // FORM OF PAYMENT DETAILS
    formOfPaymentDetails: Array<FormOfPaymentDetailsTypeI1>
    
}

export interface FormOfPaymentTypeI1Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsTypeI1 {
    
    $attributes: FormOfPaymentDetailsTypeI1Attributes
    
    // Form of payment identification
    type: string
    
    // amount to be charged on this form
    chargedAmount: Array<number>
    
    // Reference number
    creditCardNumber: Array<string>
    
}

export interface FormOfPaymentDetailsTypeI1Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType2 {
    
    $attributes: ItemReferencesAndVersionsType2Attributes
    
    // Reference Qualifier.
    passengerFeeRefType: Array<string>
    
    // Reference number.
    passengerFeeRefNumber: Array<number>
    
    // Unique id description.
    otherCharacteristics: Array<UniqueIdDescriptionType1>
    
}

export interface ItemReferencesAndVersionsType2Attributes {
    
}


export interface UniqueIdDescriptionType1 {
    
    $attributes: UniqueIdDescriptionType1Attributes
    
    // Reference qualifier.
    passengerFeeRefQualif: Array<string>
    
}

export interface UniqueIdDescriptionType1Attributes {
    
}


export interface FareInformationType2 {
    
    $attributes: FareInformationType2Attributes
    
    // Value Qualifier
    valueQualifier: Array<string>
    
    // Value
    value: Array<number>
    
    // Fare Details
    fareDetails: Array<FareDetailsType2>
    
    // Identity Number
    identityNumber: Array<string>
    
    // Fare Type Grouping
    fareTypeGrouping: Array<FareTypeGroupingInformationType2>
    
    // Rate Category
    rateCategory: Array<string>
    
}

export interface FareInformationType2Attributes {
    
}


export interface FareDetailsType2 {
    
    $attributes: FareDetailsType2Attributes
    
    // Qualifier
    qualifier: Array<string>
    
    // Rate
    rate: Array<number>
    
    // Country
    country: Array<string>
    
    // Fare Category
    fareCategory: Array<string>
    
}

export interface FareDetailsType2Attributes {
    
}


export interface FareTypeGroupingInformationType2 {
    
    $attributes: FareTypeGroupingInformationType2Attributes
    
    // Pricing Group
    pricingGroup: Array<string>
    
}

export interface FareTypeGroupingInformationType2Attributes {
    
}

// Contain passenger information
export interface GroupPassengerDetailsType1 {
    
    $attributes: GroupPassengerDetailsType1Attributes
    
    // Trigger
    passengerReference: SegmentRepetitionControlTypeI2
    
    // pricing option at passenger level
    psgDetailsInfo: Array<psgDetailsInfoType1>
    
}

export interface GroupPassengerDetailsType1Attributes {
    
}

// To indicate the number of segment group repetitions.
export interface SegmentRepetitionControlTypeI2 {
    
    $attributes: SegmentRepetitionControlTypeI2Attributes
    
    // Segment control details
    segmentControlDetails: Array<SegmentRepetitionControlDetailsTypeI2>
    
}

export interface SegmentRepetitionControlTypeI2Attributes {
    
}

// Information about the number of selection segments to be processed.
export interface SegmentRepetitionControlDetailsTypeI2 {
    
    $attributes: SegmentRepetitionControlDetailsTypeI2Attributes
    
    // traveller number
    quantity: Array<number>
    
}

export interface SegmentRepetitionControlDetailsTypeI2Attributes {
    
}


export interface psgDetailsInfoType1 {
    
    $attributes: psgDetailsInfoType1Attributes
    
    // PTC/Discount Code age
    discountPtc: FareInformationTypeI2
    
    // Tier level information
    flequentFlyerDetails: Array<FrequentTravellerIdentificationCodeType2>
    
}

export interface psgDetailsInfoType1Attributes {
    
}

// To specify fare details.
export interface FareInformationTypeI2 {
    
    $attributes: FareInformationTypeI2Attributes
    
    // PTC (Full Codeset List described in ATPCo Documentation B11109 Appendix A)
    valueQualifier: Array<string>
    
    // age
    value: Array<number>
    
}

export interface FareInformationTypeI2Attributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType2 {
    
    $attributes: FrequentTravellerIdentificationCodeType2Attributes
    
    // Frequent Traveller Info
    frequentTravellerDetails: Array<FrequentTravellerIdentificationType2>
    
}

export interface FrequentTravellerIdentificationCodeType2Attributes {
    
}


export interface FrequentTravellerIdentificationType2 {
    
    $attributes: FrequentTravellerIdentificationType2Attributes
    
    // Carrier where the FQTV is registered.
    carrier: Array<string>
    
    
    number: Array<string>
    
    // Specifies which traveller in the TIF segment the frequent traveller number applies (same as 9944 in TIF).
    customerReference: Array<string>
    
    // status code: &#39;OK&#39; if the frequent flyer card has been validated
    status: Array<string>
    
    // To specify a Tier linked to the FQTV
    tierLevel: Array<string>
    
    // For example : priority code
    priorityCode: Array<string>
    
    // For example : Level description
    tierDescription: Array<string>
    
    // For example : Company code of alliance
    companyCode: Array<string>
    
    
    customerValue: Array<number>
    
    // To specify the product/account number qualifier. (e.g. 2=Corporate Frequent Flyer).
    type: Array<string>
    
}

export interface FrequentTravellerIdentificationType2Attributes {
    
}


export interface fareFamiliesType1 {
    
    $attributes: fareFamiliesType1Attributes
    
    // Segment used to target Commercial Fare Family.
    familyInformation: FareFamilyType_80157S1
    
    // Description of Fare Family Criteria.
    familyCriteria: Array<FareFamilyCriteriaType1>
    
    // Fare family requested segment details.
    fareFamilySegment: Array<fareFamilySegmentType1>
    
    // Description of other possible fare family criteria.
    otherPossibleCriteria: Array<otherPossibleCriteriaType1>
    
}

export interface fareFamiliesType1Attributes {
    
}

// NEW FARE SEACH
export interface FareFamilyType_80157S1 {
    
    $attributes: FareFamilyType_80157S1Attributes
    
    // Fare Family Reference Number
    refNumber: Array<number>
    
    // Fare Family Short Name
    fareFamilyname: Array<string>
    
    // HIERARCHICAL ORDER WITHIN FARE FAMILY
    hierarchy: Array<number>
    
    // Indicates Commercial Fare Family Short names
    commercialFamilyDetails: Array<FareFamilyDetailsType2>
    
}

export interface FareFamilyType_80157S1Attributes {
    
}

// NEW FARE SEARCH
export interface FareFamilyDetailsType2 {
    
    $attributes: FareFamilyDetailsType2Attributes
    
    // Commercial fare Family Short name
    commercialFamily: string
    
}

export interface FareFamilyDetailsType2Attributes {
    
}

// Fare family criteria
export interface FareFamilyCriteriaType1 {
    
    $attributes: FareFamilyCriteriaType1Attributes
    
    // Fare publishing carrier.
    carrierId: Array<string>
    
    // Reservation booking designator.
    rdb: Array<string>
    
    // Fare family info.
    fareFamilyInfo: Array<FareQualifierInformationType1>
    
    // Fare product detail.
    fareProductDetail: Array<FareProductDetailsType2>
    
    // Corporate information.
    corporateInfo: Array<MultipleIdentificationNumbersTypeI1>
    
    // Indicates flight cabin details.
    cabinProduct: Array<CabinClassDesignationType1>
    
    // Cabin processing option.
    cabinProcessingIdentifier: Array<string>
    
    // Product date or time.
    dateTimeDetails: Array<ProductDateTimeTypeI_194583C1>
    
    // Other criteria.
    otherCriteria: Array<CodedAttributeInformationType_120742C1>
    
}

export interface FareFamilyCriteriaType1Attributes {
    
}

// To specify multiple qualifier for fare selections.
export interface FareQualifierInformationType1 {
    
    $attributes: FareQualifierInformationType1Attributes
    
    // Fare family combinability.
    fareFamilyQual: Array<string>
    
}

export interface FareQualifierInformationType1Attributes {
    
}


export interface FareProductDetailsType2 {
    
    $attributes: FareProductDetailsType2Attributes
    
    // Fare basis code
    fareBasis: Array<string>
    
    // Type of fare
    fareType: Array<string>
    
}

export interface FareProductDetailsType2Attributes {
    
}

// To specify more than one identification number.
export interface MultipleIdentificationNumbersTypeI1 {
    
    $attributes: MultipleIdentificationNumbersTypeI1Attributes
    
    // Corporate number or ALL.
    corporateNumberIdentifier: Array<string>
    
    // Corporate name.
    corporateName: Array<string>
    
}

export interface MultipleIdentificationNumbersTypeI1Attributes {
    
}

// Cabin class designation
export interface CabinClassDesignationType1 {
    
    $attributes: CabinClassDesignationType1Attributes
    
    // Cabin designator.
    cabinDesignator: string
    
}

export interface CabinClassDesignationType1Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI_194583C1 {
    
    $attributes: ProductDateTimeTypeI_194583C1Attributes
    
    // Ticketing Purchase Date
    date: string
    
    // Ticketing purchase date
    otherDate: Array<string>
    
}

export interface ProductDateTimeTypeI_194583C1Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_120742C1 {
    
    $attributes: CodedAttributeInformationType_120742C1Attributes
    
    // Name.
    name: string
    
    // Value.
    value: Array<string>
    
}

export interface CodedAttributeInformationType_120742C1Attributes {
    
}


export interface fareFamilySegmentType1 {
    
    $attributes: fareFamilySegmentType1Attributes
    
    // Requested segment reference
    referenceInfo: ReferenceInfoType2
    
    // Description of fare family criteria.
    familyCriteria: Array<FareFamilyCriteriaType1>
    
}

export interface fareFamilySegmentType1Attributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInfoType2 {
    
    $attributes: ReferenceInfoType2Attributes
    
    // Referencing details
    referencingDetail: Array<ReferencingDetailsType2>
    
    
    DummyNET: string
    
}

export interface ReferenceInfoType2Attributes {
    
}

// Referencing details
export interface ReferencingDetailsType2 {
    
    $attributes: ReferencingDetailsType2Attributes
    
    // Segment reference qualifier
    refQualifier: Array<string>
    
    // Flight or flight group reference
    refNumber: number
    
}

export interface ReferencingDetailsType2Attributes {
    
}


export interface otherPossibleCriteriaType1 {
    
    $attributes: otherPossibleCriteriaType1Attributes
    
    // Logical link with other criteria.
    logicalLink: BooleanExpressionRuleType1
    
    // Description of fare family criteria.
    familyCriteria: Array<FareFamilyCriteriaType1>
    
    // Fare family requested segment details.
    fareFamilySegment: Array<fareFamilySegmentType1>
    
}

export interface otherPossibleCriteriaType1Attributes {
    
}

// To perform boolean operations
export interface BooleanExpressionRuleType1 {
    
    $attributes: BooleanExpressionRuleType1Attributes
    
    // Boolean expression associated to the decision rule.
    booleanExpression: ArithmeticEvaluationType1
    
}

export interface BooleanExpressionRuleType1Attributes {
    
}


export interface ArithmeticEvaluationType1 {
    
    $attributes: ArithmeticEvaluationType1Attributes
    
    // Boolean operator
    codeOperator: Array<string>
    
}

export interface ArithmeticEvaluationType1Attributes {
    
}


export interface fareOptionsType1 {
    
    $attributes: fareOptionsType1Attributes
    
    // Pricing and ticketing details.
    pricingTickInfo: PricingTicketingDetailsType1
    
    // Corporate name/number used to target fares
    corporate: Array<CorporateIdentificationType1>
    
    // Ticketing price scheme.
    ticketingPriceScheme: Array<TicketingPriceSchemeType1>
    
    // PSR number
    feeIdDescription: Array<CodedAttributeType_199259S1>
    
    // Used to force the currency of pricing
    conversionRate: Array<ConversionRateType1>
    
    // Form of payment information.
    formOfPayment: Array<FormOfPaymentTypeI1>
    
    // Frequent traveller information
    frequentTravellerInfo: Array<FrequentTravellerIdentificationCodeType_177150S1>
    
    // Monetary and cabin information.
    monetaryCabinInfo: Array<MonetaryAndCabinInformationType1>
    
}

export interface fareOptionsType1Attributes {
    
}

// To specify pricing/ticketing details
export interface PricingTicketingDetailsType1 {
    
    $attributes: PricingTicketingDetailsType1Attributes
    
    // Pricing ticketing Details.
    pricingTicketing: Array<PricingTicketingInformationType2>
    
    // PRODUCT DATE OR TIME
    ticketingDate: Array<ProductDateTimeTypeI_194598C1>
    
    // COMPANY IDENTIFICATION
    companyId: Array<CompanyIdentificationType2>
    
    // LOCATION DETAILS
    sellingPoint: Array<LocationDetailsTypeI1>
    
    // LOCATION DETAILS
    ticketingPoint: Array<LocationDetailsTypeI1>
    
    // Used to Target Transborder Fares
    journeyOriginPoint: Array<LocationDetailsTypeI1>
    
    // Contains the ARC,IATA and ERSP numbers
    corporateId: Array<AgentIdentificationType1>
    
}

export interface PricingTicketingDetailsType1Attributes {
    
}

// To specify indicators related to pricing and ticketing.
export interface PricingTicketingInformationType2 {
    
    $attributes: PricingTicketingInformationType2Attributes
    
    // Price type qualifier
    priceType: Array<string>
    
}

export interface PricingTicketingInformationType2Attributes {
    
}


export interface ProductDateTimeTypeI_194598C1 {
    
    $attributes: ProductDateTimeTypeI_194598C1Attributes
    
    // First date
    date: string
    
    // Half round trip combination.
    rtcDate: Array<string>
    
}

export interface ProductDateTimeTypeI_194598C1Attributes {
    
}


export interface CompanyIdentificationType2 {
    
    $attributes: CompanyIdentificationType2Attributes
    
}

export interface CompanyIdentificationType2Attributes {
    
}


export interface LocationDetailsTypeI1 {
    
    $attributes: LocationDetailsTypeI1Attributes
    
    // Place or Location identification
    locationId: string
    
    // Country, coded
    country: Array<string>
    
}

export interface LocationDetailsTypeI1Attributes {
    
}


export interface AgentIdentificationType1 {
    
    $attributes: AgentIdentificationType1Attributes
    
    // Contains ARC number
    arcNumber: Array<string>
    
    // ERSP number of the Office or Customer
    erspNumber: Array<string>
    
    // IATA Number
    iataNumber: Array<string>
    
}

export interface AgentIdentificationType1Attributes {
    
}

// To specify corporate number(s) or name(s)
export interface CorporateIdentificationType1 {
    
    $attributes: CorporateIdentificationType1Attributes
    
    // Corporate identity
    corporateId: Array<CorporateIdentityType1>
    
}

export interface CorporateIdentificationType1Attributes {
    
}

// Corporate fare types indicated in PTK are detailed
export interface CorporateIdentityType1 {
    
    $attributes: CorporateIdentityType1Attributes
    
    // Indicates if 1A corporate (RC) or Unifare corporate (RW) requested.
    corporateQualifier: string
    
    // Corporate contract number or name
    identity: Array<string>
    
}

export interface CorporateIdentityType1Attributes {
    
}

// Price Scheme Information
export interface TicketingPriceSchemeType1 {
    
    $attributes: TicketingPriceSchemeType1Attributes
    
    // PSR (Price Scheme Reference): unique reference of the price scheme as a 8 digit number.
    referenceNumber: string
    
    // Price Scheme Name
    name: Array<string>
    
    // Price Scheme Status. Is the price scheme valid for service fee calculation ?
    status: Array<string>
    
    // free flow description of the price scheme
    description: Array<string>
    
}

export interface TicketingPriceSchemeType1Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_199259S1 {
    
    $attributes: CodedAttributeType_199259S1Attributes
    
    // Fee/reduction Id
    feeId: Array<CodedAttributeInformationType_277155C1>
    
}

export interface CodedAttributeType_199259S1Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_277155C1 {
    
    $attributes: CodedAttributeInformationType_277155C1Attributes
    
    // Type of fee/reduction
    feeType: string
    
    // Fee Id Number
    feeIdNumber: string
    
}

export interface CodedAttributeInformationType_277155C1Attributes {
    
}

// To specify conversion rate details
export interface ConversionRateType1 {
    
    $attributes: ConversionRateType1Attributes
    
    // Detail of conversion rate of First Monetary Unit
    conversionRateDetail: Array<ConversionRateDetailsType1>
    
}

export interface ConversionRateType1Attributes {
    
}


export interface ConversionRateDetailsType1 {
    
    $attributes: ConversionRateDetailsType1Attributes
    
    // Conversion type
    conversionType: Array<string>
    
    // Currency
    currency: string
    
}

export interface ConversionRateDetailsType1Attributes {
    
}

// To specify frequent traveler information.
export interface FrequentTravellerIdentificationCodeType_177150S1 {
    
    $attributes: FrequentTravellerIdentificationCodeType_177150S1Attributes
    
    // Frequent traveller details
    frequentTravellerDetails: Array<FrequentTravellerIdentificationType_249074C1>
    
}

export interface FrequentTravellerIdentificationCodeType_177150S1Attributes {
    
}

// Identification of the frequent traveller number by company code with the capability to reference a specific traveller.
export interface FrequentTravellerIdentificationType_249074C1 {
    
    $attributes: FrequentTravellerIdentificationType_249074C1Attributes
    
    // carrier
    carrier: string
    
    // Frequent traveller number
    number: Array<string>
    
    // Customer reference
    customerReference: Array<string>
    
    // Tier level
    tierLevel: Array<string>
    
    // Priority code
    priorityCode: Array<string>
    
    // Tier description
    tierDescription: Array<string>
    
    // To specify the product/account number qualifier. (e.g. 2=Corporate Frequent Flyer).
    type: Array<string>
    
}

export interface FrequentTravellerIdentificationType_249074C1Attributes {
    
}


export interface MonetaryAndCabinInformationType1 {
    
    $attributes: MonetaryAndCabinInformationType1Attributes
    
    // Monetary and cabin information.
    moneyAndCabinInfo: Array<MonetaryAndCabinInformationDetailsType1>
    
}

export interface MonetaryAndCabinInformationType1Attributes {
    
}


export interface MonetaryAndCabinInformationDetailsType1 {
    
    $attributes: MonetaryAndCabinInformationDetailsType1Attributes
    
    // Amount qualifier.
    amountType: Array<string>
    
    // Amount
    amount: number
    
    // ISO currency code
    currency: Array<string>
    
    // Airport/city code
    locationId: Array<string>
    
    // Cabin class designator
    cabinClassDesignator: Array<string>
    
}

export interface MonetaryAndCabinInformationDetailsType1Attributes {
    
}

// To specify monetary information details
export interface MonetaryInformationType2 {
    
    $attributes: MonetaryInformationType2Attributes
    
    // MONEY INFORMATION
    moneyInfo: MonetaryInformationDetailsTypeI2
    
    // MONEY INFORMATION
    additionalMoneyInfo: Array<MonetaryInformationDetailsTypeI_194597C1>
    
}

export interface MonetaryInformationType2Attributes {
    
}


export interface MonetaryInformationDetailsTypeI2 {
    
    $attributes: MonetaryInformationDetailsTypeI2Attributes
    
    // Monetary amount type qualifier, coded
    qualifier: Array<string>
    
    // Allowance or charge number
    amount: number
    
    // Currency, coded
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI2Attributes {
    
}


export interface MonetaryInformationDetailsTypeI_194597C1 {
    
    $attributes: MonetaryInformationDetailsTypeI_194597C1Attributes
    
    // Monetary amount type qualifier, coded
    qualifier: Array<string>
    
    // Allowance or charge number
    amount: number
    
    // Currency, coded
    currency: Array<string>
    
    // Place or Location identification
    locationId: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI_194597C1Attributes {
    
}

// To specify details realting to tax(es)
export interface TaxType3 {
    
    $attributes: TaxType3Attributes
    
    // Duty tax fee category, coded
    withholdTaxSurcharge: Array<string>
    
    // TAX DETAILS
    taxDetail: Array<TaxDetailsTypeI1>
    
}

export interface TaxType3Attributes {
    
}


export interface TaxDetailsTypeI1 {
    
    $attributes: TaxDetailsTypeI1Attributes
    
    // Duty/tax/fee rate
    rate: Array<string>
    
    // Country, coded
    country: Array<string>
    
    // Currency, coded
    currency: Array<string>
    
    // Duty/Tax fee type, coded
    type: Array<string>
    
    // Amount type qualifier, coded
    amountQualifier: Array<string>
    
}

export interface TaxDetailsTypeI1Attributes {
    
}

// Information about flight options
export interface TravelFlightInformationType_199258S1 {
    
    $attributes: TravelFlightInformationType_199258S1Attributes
    
    // Cabin identification
    cabinId: Array<CabinIdentificationType_233500C1>
    
    // Company Identification
    companyIdentity: Array<CompanyIdentificationType_275415C1>
    
    // Type of flight details
    flightDetail: Array<ProductTypeDetailsType_120801C1>
    
    // Details of included connect point
    inclusionDetail: Array<ConnectPointDetailsType_195492C1>
    
    // Further connection details
    exclusionDetail: Array<ConnectPointDetailsType1>
    
    // Added departed flights flag
    unitNumberDetail: Array<NumberOfUnitDetailsTypeI1>
    
}

export interface TravelFlightInformationType_199258S1Attributes {
    
}


export interface CabinIdentificationType_233500C1 {
    
    $attributes: CabinIdentificationType_233500C1Attributes
    
    // Cabin qualifier. For Star Pricer,MD stands for Mandatory Cabin qualifier. For other products no qualifier stands for Mandatory Cabin.
    cabinQualifier: Array<string>
    
    // Cabin
    cabin: Array<string>
    
}

export interface CabinIdentificationType_233500C1Attributes {
    
}


export interface CompanyIdentificationType_275415C1 {
    
    $attributes: CompanyIdentificationType_275415C1Attributes
    
    // Item description identification.
    carrierQualifier: string
    
    // carrier id
    carrierId: Array<string>
    
}

export interface CompanyIdentificationType_275415C1Attributes {
    
}


export interface ProductTypeDetailsType_120801C1 {
    
    $attributes: ProductTypeDetailsType_120801C1Attributes
    
    // Type of flight
    flightType: Array<string>
    
}

export interface ProductTypeDetailsType_120801C1Attributes {
    
}


export interface ConnectPointDetailsType_195492C1 {
    
    $attributes: ConnectPointDetailsType_195492C1Attributes
    
    // Inclusion identification
    inclusionIdentifier: string
    
    // Place or Location identification
    locationId: string
    
    // Airport/city qualifier
    airportCityQualifier: Array<string>
    
}

export interface ConnectPointDetailsType_195492C1Attributes {
    
}


export interface ConnectPointDetailsType1 {
    
    $attributes: ConnectPointDetailsType1Attributes
    
    // Exclusion identification
    exclusionIdentifier: string
    
    // Place or Location identification
    locationId: string
    
    // Airport/city qualifier
    airportCityQualifier: Array<string>
    
}

export interface ConnectPointDetailsType1Attributes {
    
}


export interface NumberOfUnitDetailsTypeI1 {
    
    $attributes: NumberOfUnitDetailsTypeI1Attributes
    
    // Number of Units
    numberOfUnits: number
    
    // Number of unit qualifier
    typeOfUnit: string
    
}

export interface NumberOfUnitDetailsTypeI1Attributes {
    
}

// To specify Criteria with list of parameters
export interface ValueSearchCriteriaType2 {
    
    $attributes: ValueSearchCriteriaType2Attributes
    
    // Value search reference
    ref: Array<string>
    
    
    criteriaName: Array<string>
    
    
    criteriaCode: Array<string>
    
    
    value: Array<string>
    
    
    criteriaDetails: Array<CriteriaiDetaislType2>
    
}

export interface ValueSearchCriteriaType2Attributes {
    
}

// Criteria details : weights/parameters list
export interface CriteriaiDetaislType2 {
    
    $attributes: CriteriaiDetaislType2Attributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
    
    attribute: Array<string>
    
}

export interface CriteriaiDetaislType2Attributes {
    
}


export interface bucketsType1 {
    
    $attributes: bucketsType1Attributes
    
    // Bucket information: name, priority, weight
    bucketInfo: BucketInformationType2
    
    // Bucket details
    bucketDetails: Array<BucketDetailsType1>
    
}

export interface bucketsType1Attributes {
    
}


export interface BucketInformationType2 {
    
    $attributes: BucketInformationType2Attributes
    
    // Number
    number: Array<string>
    
    // Name
    name: Array<string>
    
    // Completion
    completion: Array<string>
    
    // Mode
    mode: Array<string>
    
    // Value reference
    valueRef: Array<string>
    
    // Weight
    weight: Array<number>
    
    // Number of solutions in the bucket
    count: Array<number>
    
    // Number of solutions per attribute
    attributeCount: Array<number>
    
}

export interface BucketInformationType2Attributes {
    
}


export interface BucketDetailsType1 {
    
    $attributes: BucketDetailsType1Attributes
    
    // Code
    code: Array<string>
    
    // Option or distribution
    type: Array<string>
    
    // Attribute
    attribute: Array<AttributeDetailsType1>
    
}

export interface BucketDetailsType1Attributes {
    
}


export interface AttributeDetailsType1 {
    
    $attributes: AttributeDetailsType1Attributes
    
    // Reference of the requested segment
    requestedSgt: Array<string>
    
    // List of airlines, cabins, time window, number of connections.
    value: Array<string>
    
}

export interface AttributeDetailsType1Attributes {
    
}


export interface itineraryType1 {
    
    $attributes: itineraryType1Attributes
    
    // Indicates reference of the requested segment
    requestedSegmentRef: OriginAndDestinationRequestType2
    
    // Specification of the requested departure point
    departureLocalization: Array<DepartureLocationType1>
    
    // Specification of the requested arrival point
    arrivalLocalization: Array<ArrivalLocalizationType1>
    
    // Details on requested date and time plus range of date trip duration
    timeDetails: Array<DateAndTimeInformationType_181295S1>
    
    // Specify Flight options.
    flightInfo: Array<TravelFlightInformationType_199585S1>
    
    // Segment used to target Commercial Fare Family at requested segment level
    familyInformation: Array<FareFamilyType2>
    
    
    valueSearch: Array<ValueSearchCriteriaType2>
    
    // list of proposed segments per requested segment
    groupOfFlights: Array<groupOfFlightsType2>
    
    // Info concerning the flights booked in the PNR
    flightInfoPNR: Array<flightInfoPNRType1>
    
    // Action identification for the requested segment
    requestedSegmentAction: Array<ActionIdentificationType1>
    
    // Coded attributes
    attributes: Array<CodedAttributeType2>
    
}

export interface itineraryType1Attributes {
    
}

// To convey information regarding Requested Segments
export interface OriginAndDestinationRequestType2 {
    
    $attributes: OriginAndDestinationRequestType2Attributes
    
    // Requested segment number
    segRef: number
    
    // Forces arrival or departure, from/to the same airport/city
    locationForcing: Array<ItineraryDetailsType2>
    
}

export interface OriginAndDestinationRequestType2Attributes {
    
}

// Forces arrival or departure to/from the same city or airport option
export interface ItineraryDetailsType2 {
    
    $attributes: ItineraryDetailsType2Attributes
    
    // Airport/City Qualifier: the passenger wants to depart/arrive from/to the same airport or city in the specified requested segment
    airportCityQualifier: string
    
    // Requested segment number
    segmentNumber: number
    
}

export interface ItineraryDetailsType2Attributes {
    
}

// To convey information of requested departure
export interface DepartureLocationType1 {
    
    $attributes: DepartureLocationType1Attributes
    
    // Details on localization of the departure point
    departurePoint: Array<ArrivalLocationDetailsType_120834C1>
    
    // Departure multi city option
    depMultiCity: Array<MultiCityOptionType1>
    
    // To specify a series or a range of PNR segments
    firstPnrSegmentRef: Array<PNRSegmentReferenceType1>
    
    // Attribute details
    attributeDetails: Array<CodedAttributeInformationType_139508C1>
    
}

export interface DepartureLocationType1Attributes {
    
}


export interface ArrivalLocationDetailsType_120834C1 {
    
    $attributes: ArrivalLocationDetailsType_120834C1Attributes
    
    // For Radius: This is the length of the requested radius around the location of origin.
    distance: Array<number>
    
    // Distance unit qualifier for radius
    distanceUnit: Array<string>
    
    // ATA/IATA airport/city code of arrival In case of SP request from a PNR, this field is empty.
    locationId: Array<string>
    
    // Request from no PNR A = consider the locationID specified as an airport (used only when ambiguous) C = consider the locationId as a city (used only when ambiguous) A and C are not used in case of a request from PNR Request from a PNR with Radius option: O = radius applies to the origin of the PNR segments D = radius applies to the destination of the PNR segments
    airportCityQualifier: Array<string>
    
    // Latitude in degrees (decimal format) with hemisphere N=north S=south
    latitude: Array<string>
    
    // Longitude in degrees (decimal format) with hemisphere E=east, W=west
    longitude: Array<string>
    
}

export interface ArrivalLocationDetailsType_120834C1Attributes {
    
}

// List of requested arrival points
export interface MultiCityOptionType1 {
    
    $attributes: MultiCityOptionType1Attributes
    
    // ATA/IATA airport/city code of arrival multi city option enable to define until 20 airports/cities
    locationId: string
    
    // Requested arrival point is an airport or a city (default is city and used only when ambiguity)
    airportCityQualifier: Array<string>
    
}

export interface MultiCityOptionType1Attributes {
    
}

// Reference to PNR segment
export interface PNRSegmentReferenceType1 {
    
    $attributes: PNRSegmentReferenceType1Attributes
    
    // For a request from PNR: this is the reference number of a PNR air segment. In case a range of PNR segments is specified (eg. segments 2-5), then it is the 1st of the range, the last being in ARR.
    pnrSegmentTattoo: Array<number>
    
    
    pnrSegmentQualifier: Array<string>
    
}

export interface PNRSegmentReferenceType1Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_139508C1 {
    
    $attributes: CodedAttributeInformationType_139508C1Attributes
    
    // Attribute type
    type: Array<string>
    
    // Value.
    value: Array<string>
    
}

export interface CodedAttributeInformationType_139508C1Attributes {
    
}

// To convey information of the requested arrival location
export interface ArrivalLocalizationType1 {
    
    $attributes: ArrivalLocalizationType1Attributes
    
    // Details on the location of the arrival point
    arrivalPointDetails: Array<ArrivalLocationDetailsType1>
    
    // Arrival multi city option
    arrivalMultiCity: Array<MultiCityOptionType1>
    
    // Attribute details
    attributeDetails: Array<CodedAttributeInformationType_139508C1>
    
}

export interface ArrivalLocalizationType1Attributes {
    
}


export interface ArrivalLocationDetailsType1 {
    
    $attributes: ArrivalLocationDetailsType1Attributes
    
    // For Radius: This is the length of the requested radius around the location of destination.
    distance: Array<number>
    
    // Distance unit qualifier for radius
    distanceUnit: Array<string>
    
    // ATA/IATA airport/city code of arrival In case of SP request from a PNR, this field is empty.
    locationId: Array<string>
    
    // Request from no PNR A = consider the locationID specified as an airport (used only when ambiguous) C = consider the locationId as a city (used only when ambiguous) A and C are not used in case of a request from PNR Request from a PNR with Radius option: O = radius applies to the origin of the PNR segments D = radius applies to the destination of the PNR segments
    airportCityQualifier: Array<string>
    
    // Latitude in degrees (decimal format) with hemisphere N=north S=south
    latitude: Array<string>
    
    // Longitude in degrees (decimal format) with hemisphere E=east, W=west
    longitude: Array<string>
    
}

export interface ArrivalLocationDetailsType1Attributes {
    
}

// Target estimated or actual dates and times
export interface DateAndTimeInformationType_181295S1 {
    
    $attributes: DateAndTimeInformationType_181295S1Attributes
    
    // Details on date and Time
    firstDateTimeDetail: DateAndTimeDetailsTypeI1
    
    // Details of the Requested Range of Dates
    rangeOfDate: Array<DateAndTimeDetailsType_254619C1>
    
    // Details of the trip duration
    tripDetails: Array<DateAndTimeDetailsType2>
    
}

export interface DateAndTimeInformationType_181295S1Attributes {
    
}

// DATE AND TIME DETAILS
export interface DateAndTimeDetailsTypeI1 {
    
    $attributes: DateAndTimeDetailsTypeI1Attributes
    
    // Toidentify type of time Arrival/Departure
    timeQualifier: Array<string>
    
    // Date
    date: Array<string>
    
    // Time
    time: Array<string>
    
    // Time window size in hours
    timeWindow: Array<string>
    
}

export interface DateAndTimeDetailsTypeI1Attributes {
    
}

// DATE AND TIME DETAILS
export interface DateAndTimeDetailsType_254619C1 {
    
    $attributes: DateAndTimeDetailsType_254619C1Attributes
    
    // To identify type of range (Plus,Minus or combined)
    rangeQualifier: Array<string>
    
    // Range of dates : Number of Days preceding or/and Following the request departure date
    dayInterval: Array<number>
    
    // Time at destination (local)
    timeAtdestination: Array<string>
    
}

export interface DateAndTimeDetailsType_254619C1Attributes {
    
}

// DATE AND TIME DETAILS
export interface DateAndTimeDetailsType2 {
    
    $attributes: DateAndTimeDetailsType2Attributes
    
    // Trip Duration type(Plus,Minus,Combined)
    flexibilityQualifier: Array<string>
    
    // Number of days added or/and retrieved to the trip duration
    tripInterval: Array<number>
    
    // Period between date of departure and date of arrival
    tripDuration: Array<number>
    
}

export interface DateAndTimeDetailsType2Attributes {
    
}

// Information about flight options
export interface TravelFlightInformationType_199585S1 {
    
    $attributes: TravelFlightInformationType_199585S1Attributes
    
    // Cabin identification
    cabinId: Array<CabinIdentificationType_233500C1>
    
    // Company Identification
    companyIdentity: Array<CompanyIdentificationType_120719C1>
    
    // Type of flight details
    flightDetail: Array<ProductTypeDetailsType_120801C1>
    
    // Details of included connect point
    inclusionDetail: Array<ConnectPointDetailsType_195492C1>
    
    // Further connection details
    exclusionDetail: Array<ConnectPointDetailsType1>
    
    // Nb of connections allowed at requested segment level.
    unitNumberDetail: Array<NumberOfUnitDetailsTypeI1>
    
}

export interface TravelFlightInformationType_199585S1Attributes {
    
}


export interface CompanyIdentificationType_120719C1 {
    
    $attributes: CompanyIdentificationType_120719C1Attributes
    
    // Item description identification.
    carrierQualifier: string
    
    // carrier id
    carrierId: Array<string>
    
}

export interface CompanyIdentificationType_120719C1Attributes {
    
}

// NEW FARE SEACH
export interface FareFamilyType2 {
    
    $attributes: FareFamilyType2Attributes
    
    // Indicates Commercial Fare Family Short names
    commercialFamilyDetails: Array<FareFamilyDetailsType2>
    
}

export interface FareFamilyType2Attributes {
    
}


export interface groupOfFlightsType2 {
    
    $attributes: groupOfFlightsType2Attributes
    
    // To indicate parameters for proposed flight group.
    propFlightGrDetail: ProposedSegmentType2
    
    // Indicates Price to beat
    priceToBeat: Array<MonetaryInformationType2>
    
    // list of flight per proposed segment
    flightDetails: Array<flightDetailsType3>
    
}

export interface groupOfFlightsType2Attributes {
    
}

// To specify the parameters used for product quality
export interface ProposedSegmentType2 {
    
    $attributes: ProposedSegmentType2Attributes
    
    // Parameters for proposed flight group
    flightProposal: Array<ProposedSegmentDetailsType2>
    
    // Flight characteristics.
    flightCharacteristic: Array<string>
    
    // Majority cabin
    majCabin: Array<string>
    
}

export interface ProposedSegmentType2Attributes {
    
}


export interface ProposedSegmentDetailsType2 {
    
    $attributes: ProposedSegmentDetailsType2Attributes
    
    // Flight proposal reference
    ref: Array<string>
    
    // Elapse Flying Time
    unitQualifier: Array<string>
    
}

export interface ProposedSegmentDetailsType2Attributes {
    
}


export interface flightDetailsType3 {
    
    $attributes: flightDetailsType3Attributes
    
    // Specification of details on the flight and posting availability
    flightInformation: TravelProductType2
    
    // returns booking class and availability context
    avlInfo: Array<FlightProductInformationType2>
    
    // Details on Flight date, time and location of technical stop or change of gauge
    technicalStop: Array<DateAndTimeInformationType2>
    
    // Code Share Agreement description for current flight.
    commercialAgreement: Array<CommercialAgreementsType_78540S1>
    
    // Additional Info about flight, such as Reference number, and several options
    addInfo: Array<HeaderInformationTypeI2>
    
    // Terminal, Equipment and EFT Details. If a Total EFT of the Travel Solution is requested then we will have 2 occurrences of the terminalEquipmentDetails attached to the first leg flightInformation: the 1st occurence will give the EFT of the leg, the 2nd occurrence will give the total EFT of the Travel Solution.
    terminalEquipmentDetails: Array<AdditionalProductDetailsTypeI1>
    
    // PNR flight reservation info
    reservationInfo: Array<PassengerItineraryInformationType1>
    
    // Indicates Price to beat
    priceToBeat: Array<MonetaryInformationType2>
    
}

export interface flightDetailsType3Attributes {
    
}

// Contains flight travel (date, time, flight number,...) and posting avaibility information
export interface TravelProductType2 {
    
    $attributes: TravelProductType2Attributes
    
    // Date and time of departure and arrival
    productDateTime: ProductDateTimeType_195546C1
    
    // Location of departure and arrival
    location: Array<LocationIdentificationDetailsType2>
    
    // Company identification
    companyId: Array<CompanyIdentificationType_195544C1>
    
    // Flight number or trainNumber
    flightOrtrainNumber: Array<string>
    
    // Product details
    productDetail: Array<AdditionalProductDetailsType2>
    
    // Additional product details
    addProductDetail: Array<ProductFacilitiesType2>
    
    // Attribute details
    attributeDetails: Array<CodedAttributeInformationType_247828C1>
    
}

export interface TravelProductType2Attributes {
    
}


export interface ProductDateTimeType_195546C1 {
    
    $attributes: ProductDateTimeType_195546C1Attributes
    
    // Departure date
    dateOfDeparture: string
    
    // Departure time
    timeOfDeparture: Array<string>
    
    // Arrival date
    dateOfArrival: Array<string>
    
    // Arrival time
    timeOfArrival: Array<string>
    
    // Arrival date compared to departure date, only if different from 0
    dateVariation: Array<number>
    
}

export interface ProductDateTimeType_195546C1Attributes {
    
}


export interface LocationIdentificationDetailsType2 {
    
    $attributes: LocationIdentificationDetailsType2Attributes
    
    // 3 characters ATA/IATA airport/city code
    locationId: string
    
    // Airport/city qualifier: the requested point is an airport when ambiguity exists (e.g. HOU)
    airportCityQualifier: Array<string>
    
    // Terminal information
    terminal: Array<string>
    
}

export interface LocationIdentificationDetailsType2Attributes {
    
}


export interface CompanyIdentificationType_195544C1 {
    
    $attributes: CompanyIdentificationType_195544C1Attributes
    
    // Marketing carrier
    marketingCarrier: string
    
    // Operating carrier
    operatingCarrier: Array<string>
    
}

export interface CompanyIdentificationType_195544C1Attributes {
    
}


export interface AdditionalProductDetailsType2 {
    
    $attributes: AdditionalProductDetailsType2Attributes
    
    // Type of aircraft
    equipmentType: Array<string>
    
    // Day number of the week
    operatingDay: Array<string>
    
    // Number of stops made in a journey if different from 0
    techStopNumber: Array<number>
    
    // Location places of the stops
    locationId: Array<string>
    
}

export interface AdditionalProductDetailsType2Attributes {
    
}

// Level of access
export interface ProductFacilitiesType2 {
    
    $attributes: ProductFacilitiesType2Attributes
    
    // Yes-No indicator whether Last Seat Available
    lastSeatAvailable: Array<string>
    
    // Level of access
    levelOfAccess: Array<string>
    
    // Yes-No indicator whether electronic ticketing
    electronicTicketing: Array<string>
    
    // Product identification suffix
    operationalSuffix: Array<string>
    
    // Define whether a flight has been polled or not
    productDetailQualifier: Array<string>
    
    // Add some flight restrictions (See code set list)
    flightCharacteristic: Array<string>
    
}

export interface ProductFacilitiesType2Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_247828C1 {
    
    $attributes: CodedAttributeInformationType_247828C1Attributes
    
    
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType_247828C1Attributes {
    
}

// To specify flight product information details
export interface FlightProductInformationType2 {
    
    $attributes: FlightProductInformationType2Attributes
    
    // Indicates flight cabin details
    cabinProduct: Array<CabinProductDetailsType2>
    
    // To specify additional characteristics.
    contextDetails: Array<ProductTypeDetailsType_205137C2>
    
}

export interface FlightProductInformationType2Attributes {
    
}


export interface CabinProductDetailsType2 {
    
    $attributes: CabinProductDetailsType2Attributes
    
    // Reservation booking designator - RBD
    rbd: string
    
    // Reservation Booking Modifier
    bookingModifier: Array<string>
    
    // Indicates the cabin related to the Booking code
    cabin: Array<string>
    
    // Availibility status : posting level
    avlStatus: Array<string>
    
}

export interface CabinProductDetailsType2Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType_205137C2 {
    
    $attributes: ProductTypeDetailsType_205137C2Attributes
    
    // indicates whether the flight is domestic or international
    avl: Array<string>
    
}

export interface ProductTypeDetailsType_205137C2Attributes {
    
}

// not the standard only used in fare quote message
export interface DateAndTimeInformationType2 {
    
    $attributes: DateAndTimeInformationType2Attributes
    
    // Details on date and time
    stopDetails: Array<DateAndTimeDetailsType_120762C1>
    
    
    DummyNET: string
    
}

export interface DateAndTimeInformationType2Attributes {
    
}


export interface DateAndTimeDetailsType_120762C1 {
    
    $attributes: DateAndTimeDetailsType_120762C1Attributes
    
    // Date time period qualifier
    dateQualifier: Array<string>
    
    // First Date
    date: Array<string>
    
    // First Time
    firstTime: Array<string>
    
    // Movement type.
    equipementType: Array<string>
    
    // Place/location identification.
    locationId: Array<string>
    
}

export interface DateAndTimeDetailsType_120762C1Attributes {
    
}

// To specify commercial agreements between two or more companies related to joint, shared, lease operations etc.
export interface CommercialAgreementsType_78540S1 {
    
    $attributes: CommercialAgreementsType_78540S1Attributes
    
    // Codeshare Details
    codeshareDetails: Array<CompanyRoleIdentificationType_120761C1>
    
    // Other codeshare details
    otherCodeshareDetails: Array<CompanyRoleIdentificationType_120761C1>
    
}

export interface CommercialAgreementsType_78540S1Attributes {
    
}

// To indicate commercial agreements related to the service being provided.
export interface CompanyRoleIdentificationType_120761C1 {
    
    $attributes: CompanyRoleIdentificationType_120761C1Attributes
    
    // Type of code share agreement.
    codeShareType: Array<string>
    
    // company identification
    airlineDesignator: Array<string>
    
    // flight number
    flightNumber: Array<number>
    
}

export interface CompanyRoleIdentificationType_120761C1Attributes {
    
}

// To specify header information applicable to the entire message.
export interface HeaderInformationTypeI2 {
    
    $attributes: HeaderInformationTypeI2Attributes
    
    // Status
    status: Array<string>
    
    // Date and Time info
    dateTimePeriodDetails: Array<DateTimePeriodDetailsTypeI2>
    
    // Reference number
    referenceNumber: Array<string>
    
    // Contains product identification such as UIC code...
    productIdentification: Array<string>
    
}

export interface HeaderInformationTypeI2Attributes {
    
}

// To indicate period of applicability.
export interface DateTimePeriodDetailsTypeI2 {
    
    $attributes: DateTimePeriodDetailsTypeI2Attributes
    
    // Qualifier
    qualifier: string
    
    // Value
    value: Array<string>
    
}

export interface DateTimePeriodDetailsTypeI2Attributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsTypeI1 {
    
    $attributes: AdditionalProductDetailsTypeI1Attributes
    
    // Flight details
    legDetails: Array<AdditionalProductTypeI1>
    
    // Departure station
    departureStationInfo: Array<StationInformationTypeI1>
    
    
    arrivalStationInfo: Array<StationInformationTypeI1>
    
    // Ground Time Details when connection
    mileageTimeDetails: Array<MileageTimeDetailsTypeI1>
    
}

export interface AdditionalProductDetailsTypeI1Attributes {
    
}

// Additional details describing a specific means of transport.
export interface AdditionalProductTypeI1 {
    
    $attributes: AdditionalProductTypeI1Attributes
    
    // Equipment type
    equipment: Array<string>
    
    // Elaps flying time of the leg
    duration: Array<number>
    
    // COG indicator
    complexingFlightIndicator: Array<string>
    
}

export interface AdditionalProductTypeI1Attributes {
    
}

// To specify departure/arrival information concerning a means of transport.
export interface StationInformationTypeI1 {
    
    $attributes: StationInformationTypeI1Attributes
    
    // Departure terminal
    terminal: Array<string>
    
}

export interface StationInformationTypeI1Attributes {
    
}

// Information about the distance/duration of a trip.
export interface MileageTimeDetailsTypeI1 {
    
    $attributes: MileageTimeDetailsTypeI1Attributes
    
    // Ground Time in minutes at Board point (connection with incoming flight)
    elapsedGroundTime: Array<number>
    
}

export interface MileageTimeDetailsTypeI1Attributes {
    
}

// Contains PNR travel (Reservation Booking code, Booking status). Only present in case with-PNR.
export interface PassengerItineraryInformationType1 {
    
    $attributes: PassengerItineraryInformationType1Attributes
    
    // .
    booking: Array<string>
    
    // .
    identifier: Array<string>
    
    // .
    status: Array<string>
    
    // .
    itemNumber: Array<number>
    
    // .
    dateTimeDetails: Array<ProductDateTimeType2>
    
    // .
    designator: Array<string>
    
    // .
    movementType: Array<string>
    
    // .
    productTypeDetails: Array<ProductTypeDetailsType2>
    
}

export interface PassengerItineraryInformationType1Attributes {
    
}

// Product date or time
export interface ProductDateTimeType2 {
    
    $attributes: ProductDateTimeType2Attributes
    
    // .
    date: string
    
    // .
    time: Array<string>
    
}

export interface ProductDateTimeType2Attributes {
    
}

// Product type details
export interface ProductTypeDetailsType2 {
    
    $attributes: ProductTypeDetailsType2Attributes
    
    // .
    sequenceNumber: Array<string>
    
    // PNR availability context
    availabilityContext: Array<string>
    
}

export interface ProductTypeDetailsType2Attributes {
    
}


export interface flightInfoPNRType1 {
    
    $attributes: flightInfoPNRType1Attributes
    
    // Travel Response Details: - Board/Off aiports - Flight number - Part of the journey - Day difference between Board and off - Departure/Arrival dates - Departure/Arrival times
    travelResponseDetails: TravelProductInformationTypeI1
    
    // Time Table Effective/Discontinue dates and frequency of operating Travel Solution
    timeTableDate: Array<StructuredPeriodInformationType1>
    
    // Terminal, Equipment and EFT Details. If a Total EFT of the Travel Solution is requested then we will have 2 occurrences of the terminalEquipmentDetails attached to the first leg travelResponseDetails: the 1st occurrence will give the EFT of the leg, the 2nd occurrence will give the total EFT of the Travel Solution.
    terminalEquipmentDetails: Array<AdditionalProductDetailsTypeI1>
    
    // Codeshare data
    codeshareData: Array<CommercialAgreementsType2>
    
    // Disclosure message from an operating carrier.
    disclosure: Array<FreeTextInformationType1>
    
    // Stops Details
    stopDetails: Array<RoutingInformationTypeI1>
    
    // Traffic restriction information
    trafficRestrictionData: Array<TrafficRestrictionTypeI1>
    
    // PNR flight reservation info
    reservationInfo: Array<PassengerItineraryInformationType1>
    
    // Incidental stop information.
    incidentalStopInfo: Array<incidentalStopInfoType1>
    
}

export interface flightInfoPNRType1Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI1 {
    
    $attributes: TravelProductInformationTypeI1Attributes
    
    // Flight Date
    flightDate: Array<ProductDateTimeTypeI1>
    
    // Board point
    boardPointDetails: LocationTypeI1
    
    // Off point
    offpointDetails: LocationTypeI1
    
    // Flight Carrier
    companyDetails: CompanyIdentificationTypeI2
    
    // Flight identification
    flightIdentification: Array<ProductIdentificationDetailsTypeI1>
    
    // Identify flight part of the journey
    flightTypeDetails: Array<ProductTypeDetailsTypeI1>
    
}

export interface TravelProductInformationTypeI1Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI1 {
    
    $attributes: ProductDateTimeTypeI1Attributes
    
    // Departure date in YYYYMMDD format
    departureDate: Array<string>
    
    // Departure time
    departureTime: Array<string>
    
    // Arrival date
    arrivalDate: Array<string>
    
    // Arrival time
    arrivalTime: Array<string>
    
    // Day difference between Departure date of the leg and date of reference (Departure or Arrival date specified in the SDI)
    dateVariation: Array<number>
    
}

export interface ProductDateTimeTypeI1Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI1 {
    
    $attributes: LocationTypeI1Attributes
    
    // Departure or Arrival IATA airport code
    trueLocationId: string
    
}

export interface LocationTypeI1Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI2 {
    
    $attributes: CompanyIdentificationTypeI2Attributes
    
    // Carrier code
    marketingCompany: string
    
}

export interface CompanyIdentificationTypeI2Attributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI1 {
    
    $attributes: ProductIdentificationDetailsTypeI1Attributes
    
    // Flight number
    flightNumber: number
    
    // Flight suffix
    operationalSuffix: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI1Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsTypeI1 {
    
    $attributes: ProductTypeDetailsTypeI1Attributes
    
    // Part of the journey (C,E,S), Codeshare service (A), Technical stop at off point in a Direct (TSD), Technical stop at off point in a COG (TSC), E-Ticket candidate (ET), Prohibited Countries (RPC, WPC)
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsTypeI1Attributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType1 {
    
    $attributes: StructuredPeriodInformationType1Attributes
    
    // Effective date of period of operation
    beginDateTime: Array<StructuredDateTimeType1>
    
    // Discontinue date of period of operation
    endDateTime: Array<StructuredDateTimeType1>
    
    // It is used with a period to give a restriction for days impacted. It permits for example to indicate on which days, a flight operates.
    frequency: Array<FrequencyType1>
    
}

export interface StructuredPeriodInformationType1Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType1 {
    
    $attributes: StructuredDateTimeType1Attributes
    
    // Year number. The format is a little long for short term usage but it can be reduced by implementation if required.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: Array<number>
    
    // Day number in the month ( begins to 1 )
    day: Array<number>
    
}

export interface StructuredDateTimeType1Attributes {
    
}

// Give the days of the week involved for a period
export interface FrequencyType1 {
    
    $attributes: FrequencyType1Attributes
    
    // Indicate if the sequence number represents days of the week or days of the month.
    qualifier: string
    
    // Used to represent days of the week. 1 is monday and 7 is sunday.
    value: Array<number>
    
}

export interface FrequencyType1Attributes {
    
}

// To specify commercial agreements between two or more companies related to joint, shared, lease operations etc.
export interface CommercialAgreementsType2 {
    
    $attributes: CommercialAgreementsType2Attributes
    
    // Codeshare Details
    codeshareDetails: CompanyRoleIdentificationType2
    
    // Other codeshare details
    otherCodeshareDetails: Array<CompanyRoleIdentificationType2>
    
}

export interface CommercialAgreementsType2Attributes {
    
}

// To indicate commercial agreements related to the service being provided.
export interface CompanyRoleIdentificationType2 {
    
    $attributes: CompanyRoleIdentificationType2Attributes
    
    // Codeshare qualifier
    transportStageQualifier: string
    
    // company identification
    airlineDesignator: Array<string>
    
    // flight number
    flightNumber: Array<number>
    
    // suffix
    operationalSuffix: Array<string>
    
}

export interface CompanyRoleIdentificationType2Attributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType1 {
    
    $attributes: FreeTextInformationType1Attributes
    
    // Details for the free text message
    freeTextDetails: FreeTextDetailsType1
    
    // Free text corresponding to the DEI 127 data.
    freeText: string
    
}

export interface FreeTextInformationType1Attributes {
    
}


export interface FreeTextDetailsType1 {
    
    $attributes: FreeTextDetailsType1Attributes
    
    // Qualifier of the free text. Always literal in our usage.
    textSubjectQualifier: string
    
    // Type of the free text. Always 7 for our usage.
    informationType: Array<string>
    
    // Source of the information.
    source: string
    
    // Encoding method used.
    encoding: string
    
}

export interface FreeTextDetailsType1Attributes {
    
}

// To provide routing information.
export interface RoutingInformationTypeI1 {
    
    $attributes: RoutingInformationTypeI1Attributes
    
    // Stops details
    routingDetails: Array<ProductLocationDetailsTypeI1>
    
}

export interface RoutingInformationTypeI1Attributes {
    
}

// To indicate a location and the type of location.
export interface ProductLocationDetailsTypeI1 {
    
    $attributes: ProductLocationDetailsTypeI1Attributes
    
    // airport
    station: Array<string>
    
}

export interface ProductLocationDetailsTypeI1Attributes {
    
}

// To convey certain restrictions that apply to a means of transport on all or part of a journey
export interface TrafficRestrictionTypeI1 {
    
    $attributes: TrafficRestrictionTypeI1Attributes
    
    // Traffic Restriction Details
    trafficRestrictionDetails: Array<TrafficRestrictionDetailsTypeI1>
    
}

export interface TrafficRestrictionTypeI1Attributes {
    
}

// Coded or free text details which restrict a means of transport.
export interface TrafficRestrictionDetailsTypeI1 {
    
    $attributes: TrafficRestrictionDetailsTypeI1Attributes
    
    // Traffic Restriction code
    code: Array<string>
    
}

export interface TrafficRestrictionDetailsTypeI1Attributes {
    
}


export interface incidentalStopInfoType1 {
    
    $attributes: incidentalStopInfoType1Attributes
    
    // Incidental stop date/time information
    dateTimeInfo: DateAndTimeInformationTypeI1
    
}

export interface incidentalStopInfoType1Attributes {
    
}

// To convey information regarding estimated or actual dates and times of operational events
export interface DateAndTimeInformationTypeI1 {
    
    $attributes: DateAndTimeInformationTypeI1Attributes
    
    // DATE AND TIME DETAILS.
    dateTimeDetails: Array<DateAndTimeDetailsTypeI_120740C1>
    
}

export interface DateAndTimeInformationTypeI1Attributes {
    
}


export interface DateAndTimeDetailsTypeI_120740C1 {
    
    $attributes: DateAndTimeDetailsTypeI_120740C1Attributes
    
    // Date time period qualifier
    qualifier: Array<string>
    
    // First Date
    date: Array<string>
    
    // First Time
    time: Array<string>
    
    // .
    qualifier2: Array<string>
    
    
    reserved1: Array<string>
    
    
    reserved2: Array<string>
    
}

export interface DateAndTimeDetailsTypeI_120740C1Attributes {
    
}

// To provide details of action required or taken, the flights to which this action refers, and reasons for action taken.
export interface ActionIdentificationType1 {
    
    $attributes: ActionIdentificationType1Attributes
    
    // Action request code
    actionRequestCode: string
    
    
    productDetails: Array<ProductIdentificationDetailsTypeI_50878C1>
    
}

export interface ActionIdentificationType1Attributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI_50878C1 {
    
    $attributes: ProductIdentificationDetailsTypeI_50878C1Attributes
    
    
    flightNumber: string
    
    
    bookingClass: Array<string>
    
    
    operationalSuffix: Array<string>
    
    
    modifier: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI_50878C1Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType2 {
    
    $attributes: CodedAttributeType2Attributes
    
    // Attribute details
    attributeDetails: Array<CodedAttributeInformationType_254574C1>
    
}

export interface CodedAttributeType2Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_254574C1 {
    
    $attributes: CodedAttributeInformationType_254574C1Attributes
    
    // Attribute type
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType_254574C1Attributes {
    
}


export interface ticketChangeInfoType1 {
    
    $attributes: ticketChangeInfoType1Attributes
    
    // Ticket nb details.
    ticketNumberDetails: TicketNumberTypeI1
    
    // Changed ticket requested segments.
    ticketRequestedSegments: Array<ticketRequestedSegmentsType1>
    
}

export interface ticketChangeInfoType1Attributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberTypeI1 {
    
    $attributes: TicketNumberTypeI1Attributes
    
    
    documentDetails: Array<TicketNumberDetailsTypeI1>
    
}

export interface TicketNumberTypeI1Attributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsTypeI1 {
    
    $attributes: TicketNumberDetailsTypeI1Attributes
    
    
    number: Array<string>
    
}

export interface TicketNumberDetailsTypeI1Attributes {
    
}


export interface ticketRequestedSegmentsType1 {
    
    $attributes: ticketRequestedSegmentsType1Attributes
    
    // Action identification.
    actionIdentification: ActionIdentificationType1
    
    // Connected cities in changed ticket requested segment.
    connectPointDetails: Array<ConnectionTypeI1>
    
}

export interface ticketRequestedSegmentsType1Attributes {
    
}

// To specify connection city and airline designator.
export interface ConnectionTypeI1 {
    
    $attributes: ConnectionTypeI1Attributes
    
    // Connection details.
    connectionDetails: Array<ConnectionDetailsTypeI1>
    
}

export interface ConnectionTypeI1Attributes {
    
}

// To specify the location, product supplier and time for a connection with the next means of transport.
export interface ConnectionDetailsTypeI1 {
    
    $attributes: ConnectionDetailsTypeI1Attributes
    
    // Location
    location: string
    
}

export interface ConnectionDetailsTypeI1Attributes {
    
}


export interface combinationFareFamiliesType1 {
    
    $attributes: combinationFareFamiliesType1Attributes
    
    // Specification of the item number
    itemFFCNumber: ItemNumberType2
    
    // Number of units.
    nbOfUnits: Array<NumberOfUnitsType_80154S1>
    
    // Requested segment reference
    referenceInfo: Array<ReferenceInfoType2>
    
}

export interface combinationFareFamiliesType1Attributes {
    
}

// To specify an item number
export interface ItemNumberType2 {
    
    $attributes: ItemNumberType2Attributes
    
    // Indicates the fare family combination number
    itemNumberId: ItemNumberIdentificationType2
    
}

export interface ItemNumberType2Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType2 {
    
    $attributes: ItemNumberIdentificationType2Attributes
    
    // Fare family combination number
    number: Array<string>
    
    // Type
    type: Array<string>
    
    // Qualifier
    qualifier: Array<string>
    
    // Responsible agency
    responsibleAgency: Array<string>
    
}

export interface ItemNumberIdentificationType2Attributes {
    
}

// To specify the number of Units required
export interface NumberOfUnitsType_80154S1 {
    
    $attributes: NumberOfUnitsType_80154S1Attributes
    
    // NUMBER OF UNIT DETAILS
    unitNumberDetail: Array<NumberOfUnitDetailsType1>
    
}

export interface NumberOfUnitsType_80154S1Attributes {
    
}


export interface NumberOfUnitDetailsType1 {
    
    $attributes: NumberOfUnitDetailsType1Attributes
    
    // Number of Units
    numberOfUnits: Array<number>
    
    // Number of unit qualifier
    typeOfUnit: string
    
}

export interface NumberOfUnitDetailsType1Attributes {
    
}


export interface feeOptionType1 {
    
    $attributes: feeOptionType1Attributes
    
    // Nature of the fee (OB,OC,..)
    feeTypeInfo: SelectionDetailsType2
    
    // Associated rate tax.
    rateTax: Array<MonetaryInformationType_80162S1>
    
    // Details for each fee.
    feeDetails: Array<feeDetailsType2>
    
}

export interface feeOptionType1Attributes {
    
}

// To specify the details for making a selection.
export interface SelectionDetailsType2 {
    
    $attributes: SelectionDetailsType2Attributes
    
    // Carrier fees options
    carrierFeeDetails: SelectionDetailsInformationType2
    
    
    otherSelectionDetails: Array<SelectionDetailsInformationTypeI1>
    
}

export interface SelectionDetailsType2Attributes {
    
}

// To specify a selected option and associated information.
export interface SelectionDetailsInformationType2 {
    
    $attributes: SelectionDetailsInformationType2Attributes
    
    // Carrier fee type
    type: string
    
    // Carrier fee status
    optionInformation: Array<string>
    
}

export interface SelectionDetailsInformationType2Attributes {
    
}

// To specify a selected option and associated information.
export interface SelectionDetailsInformationTypeI1 {
    
    $attributes: SelectionDetailsInformationTypeI1Attributes
    
    
    option: string
    
    
    optionInformation: Array<string>
    
}

export interface SelectionDetailsInformationTypeI1Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_80162S1 {
    
    $attributes: MonetaryInformationType_80162S1Attributes
    
    // Monetary info
    monetaryDetails: Array<MonetaryInformationDetailsTypeI_65140C1>
    
}

export interface MonetaryInformationType_80162S1Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI_65140C1 {
    
    $attributes: MonetaryInformationDetailsTypeI_65140C1Attributes
    
    // Qualifier
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI_65140C1Attributes {
    
}


export interface feeDetailsType2 {
    
    $attributes: feeDetailsType2Attributes
    
    // Fee information
    feeInfo: SpecificDataInformationType2
    
    // Associated amounts : amounts to take into account to calculate fee.
    associatedAmounts: Array<MonetaryInformationTypeI2>
    
    // Fee description
    feeDescriptionGrp: Array<feeDescriptionGrpType1>
    
}

export interface feeDetailsType2Attributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationType2 {
    
    $attributes: SpecificDataInformationType2Attributes
    
    // Carrier fee description
    dataTypeInformation: DataTypeInformationType2
    
    // Data information
    dataInformation: Array<DataInformationType2>
    
}

export interface SpecificDataInformationType2Attributes {
    
}

// To identify the type of data to be sent and to qualify the data when required.
export interface DataTypeInformationType2 {
    
    $attributes: DataTypeInformationType2Attributes
    
    // Carrier fee code
    subType: string
    
    // Status (automated, manually added, exempted). Default is automated
    option: Array<string>
    
}

export interface DataTypeInformationType2Attributes {
    
}

// To identify specific data and a quantity related to the data.
export interface DataInformationType2 {
    
    $attributes: DataInformationType2Attributes
    
    // Ancillary services options
    indicator: Array<string>
    
}

export interface DataInformationType2Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI2 {
    
    $attributes: MonetaryInformationTypeI2Attributes
    
    // Monetary info
    monetaryDetails: Array<MonetaryInformationDetailsTypeI_65141C1>
    
}

export interface MonetaryInformationTypeI2Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI_65141C1 {
    
    $attributes: MonetaryInformationDetailsTypeI_65141C1Attributes
    
    // Qualifier
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
    // Location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI_65141C1Attributes {
    
}


export interface feeDescriptionGrpType1 {
    
    $attributes: feeDescriptionGrpType1Attributes
    
    // Specification of the item number
    itemNumberInfo: ItemNumberType_80866S2
    
    // Attributes (SSR code EMD, RFIC, SSIM)
    serviceAttributesInfo: Array<AttributeType_61377S1>
    
    // Other service information (service description, ...)
    serviceDescriptionInfo: Array<SpecialRequirementsDetailsType2>
    
}

export interface feeDescriptionGrpType1Attributes {
    
}

// To specify an item number
export interface ItemNumberType_80866S2 {
    
    $attributes: ItemNumberType_80866S2Attributes
    
    // Item number details
    itemNumberDetails: ItemNumberIdentificationType2
    
}

export interface ItemNumberType_80866S2Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_61377S1 {
    
    $attributes: AttributeType_61377S1Attributes
    
    // Criteria Set Type
    attributeQualifier: Array<string>
    
    // Criteria details
    attributeDetails: Array<AttributeInformationType_97181C2>
    
}

export interface AttributeType_61377S1Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationType_97181C2 {
    
    $attributes: AttributeInformationType_97181C2Attributes
    
    // Attribute type
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface AttributeInformationType_97181C2Attributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsType2 {
    
    $attributes: SpecialRequirementsDetailsType2Attributes
    
    // To specify the Service Requirement of the customer
    serviceRequirementsInfo: SpecialRequirementsTypeDetailsType2
    
    // Seat details
    seatDetails: Array<SpecialRequirementsDataDetailsType2>
    
}

export interface SpecialRequirementsDetailsType2Attributes {
    
}


export interface SpecialRequirementsTypeDetailsType2 {
    
    $attributes: SpecialRequirementsTypeDetailsType2Attributes
    
    // To specify the Service Classification of the Service Requirement.
    serviceClassification: string
    
    // Status
    serviceStatus: Array<string>
    
    // To specify the number of items involved
    serviceNumberOfInstances: Array<number>
    
    // To specify to which marketing carrier the service applies
    serviceMarketingCarrier: Array<string>
    
    // Specify the Service group
    serviceGroup: Array<string>
    
    // Specify the Service Sub-Group
    serviceSubGroup: Array<string>
    
    // Free Text attached to the Service.
    serviceFreeText: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsType2Attributes {
    
}

// Special requirements data details
export interface SpecialRequirementsDataDetailsType2 {
    
    $attributes: SpecialRequirementsDataDetailsType2Attributes
    
    // SSR seat characteristic
    seatCharacteristics: Array<string>
    
    
    DummyNET: string
    
}

export interface SpecialRequirementsDataDetailsType2Attributes {
    
}


export interface officeIdDetailsType2 {
    
    $attributes: officeIdDetailsType2Attributes
    
    // Office Id Information
    officeIdInformation: UserIdentificationType2
    
    // Number of units.
    nbOfUnits: Array<NumberOfUnitsType_80154S1>
    
    // UID option
    uidOption: Array<CodedAttributeType_78500S1>
    
    // Pricing and ticketing details.
    pricingTickInfo: Array<PricingTicketingDetailsType1>
    
    // Corporate fare information
    corporateFareInfo: Array<CorporateFareInformationType1>
    
    // Details of a Flight : Direct, Non stop...
    travelFlightInfo: Array<TravelFlightInformationType1>
    
    // Details of airline distribution at requested segment level
    airlineDistributionDetails: Array<airlineDistributionDetailsType1>
    
}

export interface officeIdDetailsType2Attributes {
    
}

// User Identification
export interface UserIdentificationType2 {
    
    $attributes: UserIdentificationType2Attributes
    
    // Originator Identification Details
    officeIdentification: Array<OriginatorIdentificationDetailsTypeI2>
    
    // Used to specify which kind of info is given in DE 9900.
    officeType: Array<string>
    
    // The code given to an agent by the originating reservation system.
    officeCode: Array<string>
    
}

export interface UserIdentificationType2Attributes {
    
}

// To identify a user
export interface OriginatorIdentificationDetailsTypeI2 {
    
    $attributes: OriginatorIdentificationDetailsTypeI2Attributes
    
    // Office Name.
    officeName: Array<number>
    
    // Agent Sign In .
    agentSignin: Array<string>
    
    // Confidential Office Name.
    confidentialOffice: Array<string>
    
    // Other Office Name
    otherOffice: Array<string>
    
}

export interface OriginatorIdentificationDetailsTypeI2Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_78500S1 {
    
    $attributes: CodedAttributeType_78500S1Attributes
    
    // Atrribute details.
    attributeDetails: Array<CodedAttributeInformationType2>
    
}

export interface CodedAttributeType_78500S1Attributes {
    
}

// Attribute information
export interface CodedAttributeInformationType2 {
    
    $attributes: CodedAttributeInformationType2Attributes
    
    // Attribute type identification
    attributeType: string
    
    // Attribute Description
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType2Attributes {
    
}

// To specify corporate fare information
export interface CorporateFareInformationType1 {
    
    $attributes: CorporateFareInformationType1Attributes
    
    // Corporate fare identifiers
    corporateFareIdentifiers: Array<CorporateFareIdentifiersType1>
    
}

export interface CorporateFareInformationType1Attributes {
    
}


export interface CorporateFareIdentifiersType1 {
    
    $attributes: CorporateFareIdentifiersType1Attributes
    
    // Indicates the type of corporate fares requested
    fareQualifier: Array<string>
    
    // Corporate contract number or name
    identifyNumber: Array<string>
    
}

export interface CorporateFareIdentifiersType1Attributes {
    
}

// Information about flight options
export interface TravelFlightInformationType1 {
    
    $attributes: TravelFlightInformationType1Attributes
    
    // Cabin identification
    cabinId: Array<CabinIdentificationType1>
    
    // Company Identification
    companyIdentity: Array<CompanyIdentificationType_120719C1>
    
    // Type of flight details
    flightDetail: Array<ProductTypeDetailsType_120801C1>
    
    // Details of included connecting points
    inclusionDetail: Array<ConnectPointDetailsType_195492C1>
    
    // Further connection details
    exclusionDetail: Array<ConnectPointDetailsType1>
    
    // Nb of connections for each requested segment of the journey.
    unitNumberDetail: Array<NumberOfUnitDetailsTypeI1>
    
}

export interface TravelFlightInformationType1Attributes {
    
}


export interface CabinIdentificationType1 {
    
    $attributes: CabinIdentificationType1Attributes
    
    // Cabin qualifier. For Star Pricer,MD stands for Mandatory Cabin qualifier. For other products no qualifier stands for Mandatory Cabin.
    cabinQualifier: Array<string>
    
    // Cabin
    cabin: Array<string>
    
}

export interface CabinIdentificationType1Attributes {
    
}


export interface airlineDistributionDetailsType1 {
    
    $attributes: airlineDistributionDetailsType1Attributes
    
    // Indicates reference of the requested segment
    requestedSegmentRef: OriginAndDestinationRequestType2
    
    // Specify Flight options.
    flightInfo: Array<TravelFlightInformationType1>
    
}

export interface airlineDistributionDetailsType1Attributes {
    
}


export interface Fare_MasterPricerTravelBoardSearchReplyType {
    
    $attributes: Fare_MasterPricerTravelBoardSearchReplyTypeAttributes
    
    // Gives status about reply : type of process, region , CPU etc..
    replyStatus: Array<StatusType1>
    
    // Error message
    errorMessage: Array<errorMessageType1>
    
    // Specifies the currency used for pricing.
    conversionRate: Array<ConversionRateTypeI1>
    
    // Solution Family
    solutionFamily: Array<FareInformationType3>
    
    // Details of the fare families processed
    familyInformation: Array<FareFamilyType3>
    
    // Amount information for all passengers
    amountInfoForAllPax: Array<amountInfoForAllPaxType1>
    
    // Amount information per passengers
    amountInfoPerPax: Array<amountInfoPerPaxType1>
    
    // Fee/Reduction details.
    feeDetails: Array<feeDetailsType3>
    
    // Bucket information
    bucketInfo: Array<BucketInformationType3>
    
    // Theme identification text
    themeIdText: Array<ThemeText1>
    
    // Additional information
    additionalInfo: Array<additionalInfoType1>
    
    // Free text identifying an airline in a code share.
    companyIdText: Array<CompanyIdentificationTextType1>
    
    // List of Office Id Details
    officeIdDetails: Array<officeIdDetailsType3>
    
    // List of flights
    flightIndex: Array<flightIndexType1>
    
    // Recommendation details
    recommendation: Array<recommendationType1>
    
    // Additional solutions, such as Rail solutions...
    otherSolutions: Array<otherSolutionsType1>
    
    // Warning information
    warningInfo: Array<warningInfoType1>
    
    // Global information
    globalInformation: Array<globalInformationType1>
    
    
    serviceFeesGrp: Array<serviceFeesGrpType1>
    
    // Multi dimension references
    multiDimensionRef: Array<MultiDimensionalValueType1>
    
    
    value: Array<ValueSearchCriteriaType3>
    
    
    mnrGrp: Array<mnrGrpType1>
    
    // Group of offers and offer items identifiers
    offersGroup: Array<offersGroupType1>
    
}

export interface Fare_MasterPricerTravelBoardSearchReplyTypeAttributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType1 {
    
    $attributes: StatusType1Attributes
    
    // Status details
    status: Array<StatusDetailsType1>
    
}

export interface StatusType1Attributes {
    
}


export interface StatusDetailsType1 {
    
    $attributes: StatusDetailsType1Attributes
    
    // Advisory type information, Fare Server
    advisoryTypeInfo: Array<string>
    
    // CPU time, user type
    notification: Array<string>
    
    // CPU time,user type
    notification2: Array<string>
    
    // Capture and trace information
    description: Array<string>
    
}

export interface StatusDetailsType1Attributes {
    
}


export interface errorMessageType1 {
    
    $attributes: errorMessageType1Attributes
    
    // Application error details.
    applicationError: ApplicationErrorInformationType_78543S1
    
    // Type of error message and free text
    errorMessageText: Array<InteractiveFreeTextType_78544S1>
    
}

export interface errorMessageType1Attributes {
    
}

// To identify the type of application error within a message
export interface ApplicationErrorInformationType_78543S1 {
    
    $attributes: ApplicationErrorInformationType_78543S1Attributes
    
    // Details on application error.
    applicationErrorDetail: ApplicationErrorInformationType1
    
}

export interface ApplicationErrorInformationType_78543S1Attributes {
    
}


export interface ApplicationErrorInformationType1 {
    
    $attributes: ApplicationErrorInformationType1Attributes
    
    // The code assigned by the receiver of a message for identification of a data validation error condition.
    error: string
    
}

export interface ApplicationErrorInformationType1Attributes {
    
}

// To provide free form or coded text information
export interface InteractiveFreeTextType_78544S1 {
    
    $attributes: InteractiveFreeTextType_78544S1Attributes
    
    // Details on interactive free text
    freeTextQualification: Array<FreeTextQualificationType_120769C1>
    
    // Free text
    description: Array<string>
    
}

export interface InteractiveFreeTextType_78544S1Attributes {
    
}


export interface FreeTextQualificationType_120769C1 {
    
    $attributes: FreeTextQualificationType_120769C1Attributes
    
    // Type of message
    textSubjectQualifier: string
    
    // Coded Text or type of information in 4440 (e.g. type of OSI or free text, canned message value)
    informationType: Array<string>
    
    // ISO code for language of free text (default is English)
    language: Array<string>
    
}

export interface FreeTextQualificationType_120769C1Attributes {
    
}

// To specify conversion rate details
export interface ConversionRateTypeI1 {
    
    $attributes: ConversionRateTypeI1Attributes
    
    // Detail of conversion rate of First Monetary Unit.
    conversionRateDetail: Array<ConversionRateDetailsTypeI_179848C1>
    
}

export interface ConversionRateTypeI1Attributes {
    
}


export interface ConversionRateDetailsTypeI_179848C1 {
    
    $attributes: ConversionRateDetailsTypeI_179848C1Attributes
    
    // Conversion type
    conversionType: Array<string>
    
    // Currency
    currency: string
    
    // Conversion rate for pricing
    rate: Array<string>
    
    // Converted value amount
    convertedAmountLink: Array<string>
    
    // Applicable ISO country code or Tax designator code.
    taxQualifier: Array<string>
    
}

export interface ConversionRateDetailsTypeI_179848C1Attributes {
    
}


export interface FareInformationType3 {
    
    $attributes: FareInformationType3Attributes
    
    // Value Qualifier
    valueQualifier: Array<string>
    
    // Value
    value: Array<number>
    
    // Fare Details
    fareDetails: Array<FareDetailsType_193037C1>
    
    // Identity Number
    identityNumber: Array<string>
    
    // Fare Type Grouping
    fareTypeGrouping: Array<FareTypeGroupingInformationType3>
    
    // Rate Category
    rateCategory: Array<string>
    
}

export interface FareInformationType3Attributes {
    
}


export interface FareDetailsType_193037C1 {
    
    $attributes: FareDetailsType_193037C1Attributes
    
    // Qualifier
    qualifier: Array<string>
    
    // Rate
    rate: Array<number>
    
    // Country
    country: Array<string>
    
    // Fare Category
    fareCategory: Array<string>
    
}

export interface FareDetailsType_193037C1Attributes {
    
}


export interface FareTypeGroupingInformationType3 {
    
    $attributes: FareTypeGroupingInformationType3Attributes
    
    // Pricing Group
    pricingGroup: Array<string>
    
}

export interface FareTypeGroupingInformationType3Attributes {
    
}

// NEW FARE SEACH
export interface FareFamilyType3 {
    
    $attributes: FareFamilyType3Attributes
    
    // Fare Family Reference Number
    refNumber: number
    
    // Fare Family Short Name
    fareFamilyname: Array<string>
    
    // HIERARCHICAL ORDER WITHIN FARE FAMILY
    hierarchy: Array<number>
    
    // CABIN USED FOR FARE FAMILY
    cabin: Array<string>
    
    // Indicates Commercial Fare Family Short names
    commercialFamilyDetails: Array<FareFamilyDetailsType3>
    
    // Short description of the fare family
    description: Array<string>
    
    // Carrier code
    carrier: Array<string>
    
    // Reference to the services details
    services: Array<ServicesReferences1>
    
    // Reservation booking designator
    bookingClass: Array<string>
    
}

export interface FareFamilyType3Attributes {
    
}

// NEW FARE SEARCH
export interface FareFamilyDetailsType3 {
    
    $attributes: FareFamilyDetailsType3Attributes
    
    // Commercial fare Family Short name
    commercialFamily: string
    
}

export interface FareFamilyDetailsType3Attributes {
    
}


export interface ServicesReferences1 {
    
    $attributes: ServicesReferences1Attributes
    
    // Reference of the service
    reference: Array<string>
    
    // Status of the service
    status: Array<string>
    
    // Service lowest price
    fromPrice: Array<string>
    
}

export interface ServicesReferences1Attributes {
    
}


export interface amountInfoForAllPaxType1 {
    
    $attributes: amountInfoForAllPaxType1Attributes
    
    // Itinerary amounts for all passengers
    itineraryAmounts: MonetaryInformationType3
    
    // Amounts information per segment
    amountsPerSgt: Array<amountsPerSgtType1>
    
}

export interface amountInfoForAllPaxType1Attributes {
    
}

// To specify monetary information details
export interface MonetaryInformationType3 {
    
    $attributes: MonetaryInformationType3Attributes
    
    // Monetary information.
    monetaryDetail: Array<MonetaryInformationDetailsType1>
    
}

export interface MonetaryInformationType3Attributes {
    
}


export interface MonetaryInformationDetailsType1 {
    
    $attributes: MonetaryInformationDetailsType1Attributes
    
    // To specify amount and percentage.
    amountType: Array<string>
    
    // Amount
    amount: number
    
    // ISO currency code
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsType1Attributes {
    
}


export interface amountsPerSgtType1 {
    
    $attributes: amountsPerSgtType1Attributes
    
    // Requested segment reference
    sgtRef: ReferenceInfoType_133176S1
    
    // Amounts : Issue total amount, issue taxes amount, non refundable taxes amount
    amounts: Array<MonetaryInformationType3>
    
}

export interface amountsPerSgtType1Attributes {
    
}

// To specify an association between references given to travelers, to products, to services
export interface ReferenceInfoType_133176S1 {
    
    $attributes: ReferenceInfoType_133176S1Attributes
    
    // Referencing details
    referencingDetail: Array<ReferencingDetailsType3>
    
}

export interface ReferenceInfoType_133176S1Attributes {
    
}


export interface ReferencingDetailsType3 {
    
    $attributes: ReferencingDetailsType3Attributes
    
    // Reference qualifier
    refQualifier: Array<string>
    
    // Requested segment reference
    refNumber: number
    
}

export interface ReferencingDetailsType3Attributes {
    
}


export interface amountInfoPerPaxType1 {
    
    $attributes: amountInfoPerPaxType1Attributes
    
    // Passenger references
    paxRef: SpecificTravellerType1
    
    // Passenger attributes : Infant indicator
    paxAttributes: Array<FareInformationType_80868S1>
    
    // Itinerary amounts information
    itineraryAmounts: MonetaryInformationType3
    
    // Amounts per segment
    amountsPerSgt: Array<amountsPerSgtType1>
    
}

export interface amountInfoPerPaxType1Attributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerType1 {
    
    $attributes: SpecificTravellerType1Attributes
    
    // Traveller details
    travellerDetails: Array<SpecificTravellerDetailsType1>
    
}

export interface SpecificTravellerType1Attributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerDetailsType1 {
    
    $attributes: SpecificTravellerDetailsType1Attributes
    
    // Reference number
    referenceNumber: Array<string>
    
}

export interface SpecificTravellerDetailsType1Attributes {
    
}

// To specify fare details.
export interface FareInformationType_80868S1 {
    
    $attributes: FareInformationType_80868S1Attributes
    
    // Fare details
    fareDetails: Array<FareDetailsType3>
    
}

export interface FareInformationType_80868S1Attributes {
    
}

// To specify the fare type and related information.
export interface FareDetailsType3 {
    
    $attributes: FareDetailsType3Attributes
    
    // Passenger Type qualifier
    passengerTypeQualifier: Array<string>
    
}

export interface FareDetailsType3Attributes {
    
}


export interface feeDetailsType3 {
    
    $attributes: feeDetailsType3Attributes
    
    // Fee/Reduction Reference number.
    feeReference: ItemReferencesAndVersionsType_78564S1
    
    // Fee/Reduction information.
    feeInformation: Array<DiscountAndPenaltyInformationType1>
    
    // Fee/Reduction parameters.
    feeParameters: Array<AttributeType_78561S1>
    
    // To specify conversion rate details
    convertedOrOriginalInfo: Array<ConversionRateTypeI_78562S1>
    
}

export interface feeDetailsType3Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType_78564S1 {
    
    $attributes: ItemReferencesAndVersionsType_78564S1Attributes
    
    // Qualifies the type of the reference used.
    referenceType: Array<string>
    
    // Unique fee reference.
    feeRefNumber: Array<number>
    
}

export interface ItemReferencesAndVersionsType_78564S1Attributes {
    
}

// To specify information about discounts and penalties
export interface DiscountAndPenaltyInformationType1 {
    
    $attributes: DiscountAndPenaltyInformationType1Attributes
    
    // Used to specify airline collected fee or agent collected fee.
    feeIdentification: Array<string>
    
    // Used to specify penalty information
    feeInformation: Array<DiscountPenaltyMonetaryInformationType1>
    
}

export interface DiscountAndPenaltyInformationType1Attributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationType1 {
    
    $attributes: DiscountPenaltyMonetaryInformationType1Attributes
    
    // Type of discount/penalty
    feeType: Array<string>
    
    // The amount Type can be a percentage or an amount
    feeAmountType: Array<string>
    
    // specify the value
    feeAmount: Array<number>
    
    // Fee currency code.
    feeCurrency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationType1Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_78561S1 {
    
    $attributes: AttributeType_78561S1Attributes
    
    // Fee/reduction parameters.
    feeParameter: Array<AttributeInformationType3>
    
}

export interface AttributeType_78561S1Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationType3 {
    
    $attributes: AttributeInformationType3Attributes
    
    // Type of parameter.
    feeParameterType: Array<string>
    
    // Reference to company Id.
    feeParameterDescription: Array<string>
    
}

export interface AttributeInformationType3Attributes {
    
}

// To specify conversion rate details
export interface ConversionRateTypeI_78562S1 {
    
    $attributes: ConversionRateTypeI_78562S1Attributes
    
    // Details of conversion
    conversionRateDetail: Array<ConversionRateDetailsTypeI1>
    
}

export interface ConversionRateTypeI_78562S1Attributes {
    
}


export interface ConversionRateDetailsTypeI1 {
    
    $attributes: ConversionRateDetailsTypeI1Attributes
    
    // Conversion type
    conversionType: Array<string>
    
    // Currency
    currency: Array<string>
    
    // amount
    amount: Array<string>
    
}

export interface ConversionRateDetailsTypeI1Attributes {
    
}


export interface BucketInformationType3 {
    
    $attributes: BucketInformationType3Attributes
    
    // Number
    number: Array<string>
    
    // Name
    name: Array<string>
    
    // Mode
    mode: Array<string>
    
}

export interface BucketInformationType3Attributes {
    
}


export interface ThemeText1 {
    
    $attributes: ThemeText1Attributes
    
    // Reference
    reference: Array<string>
    
    // Text
    text: Array<string>
    
}

export interface ThemeText1Attributes {
    
}


export interface additionalInfoType1 {
    
    $attributes: additionalInfoType1Attributes
    
    // Identifier
    identDetails: ProductIdentificationType1
    
    // Date information
    dateInfo: Array<DateTimePeriodType1>
    
}

export interface additionalInfoType1Attributes {
    
}

// To identify a product.
export interface ProductIdentificationType1 {
    
    $attributes: ProductIdentificationType1Attributes
    
    // Product identification details
    productData: Array<ProductIdentDetailsType1>
    
}

export interface ProductIdentificationType1Attributes {
    
}

// Code, number or name to identify a specific product or service and a code to identify the level or type of product or service.
export interface ProductIdentDetailsType1 {
    
    $attributes: ProductIdentDetailsType1Attributes
    
    // Number
    number: Array<string>
    
}

export interface ProductIdentDetailsType1Attributes {
    
}

// To specify date, and/or time, or period.
export interface DateTimePeriodType1 {
    
    $attributes: DateTimePeriodType1Attributes
    
    // Date Time Description
    dateTimeDescription: DateTimePeriodDetailsBatchType1
    
}

export interface DateTimePeriodType1Attributes {
    
}

// Date and/or time, or period relevant to the specified date/time/period type.
export interface DateTimePeriodDetailsBatchType1 {
    
    $attributes: DateTimePeriodDetailsBatchType1Attributes
    
    // Date time qualifier
    dateTimeQualifier: Array<string>
    
    // Date time details
    dateTimeDetails: Array<string>
    
}

export interface DateTimePeriodDetailsBatchType1Attributes {
    
}

// Compagny identification text
export interface CompanyIdentificationTextType1 {
    
    $attributes: CompanyIdentificationTextType1Attributes
    
    // Company Id Text reference.
    textRefNumber: Array<number>
    
    // Company id free text.
    companyText: Array<string>
    
}

export interface CompanyIdentificationTextType1Attributes {
    
}


export interface officeIdDetailsType3 {
    
    $attributes: officeIdDetailsType3Attributes
    
    // Office Id Information
    officeIdInformation: UserIdentificationType3
    
    // Office Id Reference Number
    officeIdReference: ItemReferencesAndVersionsType_78536S1
    
}

export interface officeIdDetailsType3Attributes {
    
}

// User Identification
export interface UserIdentificationType3 {
    
    $attributes: UserIdentificationType3Attributes
    
    // Originator Identification Details
    officeIdentification: Array<OriginatorIdentificationDetailsTypeI3>
    
    // Used to specify which kind of info is given in DE 9900.
    officeType: Array<string>
    
    // The code given to an agent by the originating reservation system.
    officeCode: Array<string>
    
}

export interface UserIdentificationType3Attributes {
    
}

// To identify a user
export interface OriginatorIdentificationDetailsTypeI3 {
    
    $attributes: OriginatorIdentificationDetailsTypeI3Attributes
    
    // Office Name.
    officeName: Array<number>
    
    // Agent Sign In .
    agentSignin: Array<string>
    
    // Confidential Office Name.
    confidentialOffice: Array<string>
    
    // Other Office Name
    otherOffice: Array<string>
    
}

export interface OriginatorIdentificationDetailsTypeI3Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType_78536S1 {
    
    $attributes: ItemReferencesAndVersionsType_78536S1Attributes
    
    // Qualifies the type of the reference used.
    referenceType: Array<string>
    
    // Unique fee reference.
    refNumber: Array<number>
    
}

export interface ItemReferencesAndVersionsType_78536S1Attributes {
    
}


export interface flightIndexType1 {
    
    $attributes: flightIndexType1Attributes
    
    // Indicates references and details about requested segments
    requestedSegmentRef: OriginAndDestinationRequestType3
    
    // List of flights per requested segment
    groupOfFlights: Array<groupOfFlightsType3>
    
}

export interface flightIndexType1Attributes {
    
}

// To convey information regarding Requested Segments
export interface OriginAndDestinationRequestType3 {
    
    $attributes: OriginAndDestinationRequestType3Attributes
    
    // Requested segment number
    segRef: number
    
    // Forces arrival or departure, from/to the same airport/city
    locationForcing: Array<ItineraryDetailsType3>
    
}

export interface OriginAndDestinationRequestType3Attributes {
    
}

// Forces arrival or departure to/from the same city or airport option
export interface ItineraryDetailsType3 {
    
    $attributes: ItineraryDetailsType3Attributes
    
    // Airport/City Qualifier: the passenger wants to depart/arrive from/to the same airport or city in the specified requested segment
    airportCityQualifier: string
    
    // Requested segment number
    segmentNumber: number
    
}

export interface ItineraryDetailsType3Attributes {
    
}


export interface groupOfFlightsType3 {
    
    $attributes: groupOfFlightsType3Attributes
    
    // To indicate parameters for proposed flight group.
    propFlightGrDetail: ProposedSegmentType3
    
    // List of flight per Elapse Flying time
    flightDetails: Array<flightDetailsType4>
    
}

export interface groupOfFlightsType3Attributes {
    
}

// To specify the parameters used for product quality
export interface ProposedSegmentType3 {
    
    $attributes: ProposedSegmentType3Attributes
    
    // Parameters for proposed flight group
    flightProposal: Array<ProposedSegmentDetailsType3>
    
    // Flight characteristics.
    flightCharacteristic: Array<string>
    
    // Majority cabin
    majCabin: Array<string>
    
}

export interface ProposedSegmentType3Attributes {
    
}


export interface ProposedSegmentDetailsType3 {
    
    $attributes: ProposedSegmentDetailsType3Attributes
    
    // Flight proposal reference
    ref: Array<string>
    
    // Elapse Flying Time
    unitQualifier: Array<string>
    
}

export interface ProposedSegmentDetailsType3Attributes {
    
}


export interface flightDetailsType4 {
    
    $attributes: flightDetailsType4Attributes
    
    // Specification of details on the flight and posting availability
    flightInformation: TravelProductType3
    
    // returns booking class and availability context
    avlInfo: Array<FlightProductInformationType_141442S1>
    
    // Details on Flight date, time and location of technical stop or change of gauge
    technicalStop: Array<DateAndTimeInformationType3>
    
    // Code Share Agreement description for current flight.
    commercialAgreement: Array<CommercialAgreementsType3>
    
    // Additional Info about flight, such as Reference number, and several options
    addInfo: Array<HeaderInformationTypeI3>
    
    // Flight characteristics
    flightCharacteristics: Array<FlightCharacteristicsType1>
    
    // Flight Services by cabin/rbd
    flightServices: Array<FlightServicesType1>
    
    // Meal services
    mealServices: Array<MealServicesType1>
    
}

export interface flightDetailsType4Attributes {
    
}

// Contains flight travel (date, time, flight number,...) and posting avaibility information
export interface TravelProductType3 {
    
    $attributes: TravelProductType3Attributes
    
    // Date and time of departure and arrival
    productDateTime: ProductDateTimeType3
    
    // Location of departure and arrival
    location: Array<LocationIdentificationDetailsType3>
    
    
    companyId: Array<CompanyIdentificationType3>
    
    // Flight number or trainNumber
    flightOrtrainNumber: Array<string>
    
    // Product details
    productDetail: Array<AdditionalProductDetailsType3>
    
    // Additional product details
    addProductDetail: Array<ProductFacilitiesType3>
    
    // Attribute details
    attributeDetails: Array<CodedAttributeInformationType_270108C1>
    
}

export interface TravelProductType3Attributes {
    
}


export interface ProductDateTimeType3 {
    
    $attributes: ProductDateTimeType3Attributes
    
    // Departure date
    dateOfDeparture: string
    
    // Departure time
    timeOfDeparture: Array<string>
    
    // Arrival date
    dateOfArrival: Array<string>
    
    // Arrival time
    timeOfArrival: Array<string>
    
    // Arrival date compared to departure date, only if different from 0
    dateVariation: Array<number>
    
}

export interface ProductDateTimeType3Attributes {
    
}


export interface LocationIdentificationDetailsType3 {
    
    $attributes: LocationIdentificationDetailsType3Attributes
    
    // 3 characters ATA/IATA airport/city code
    locationId: string
    
    // Airport/city qualifier: the requested point is an airport when ambiguity exists (e.g. HOU)
    airportCityQualifier: Array<string>
    
    // Terminal information
    terminal: Array<string>
    
}

export interface LocationIdentificationDetailsType3Attributes {
    
}


export interface CompanyIdentificationType3 {
    
    $attributes: CompanyIdentificationType3Attributes
    
    // Marketing carrier
    marketingCarrier: string
    
    // Operating carrier
    operatingCarrier: Array<string>
    
    // airline alliance code
    alliance: Array<string>
    
}

export interface CompanyIdentificationType3Attributes {
    
}


export interface AdditionalProductDetailsType3 {
    
    $attributes: AdditionalProductDetailsType3Attributes
    
    // Type of aircraft
    equipmentType: Array<string>
    
    // Day number of the week
    operatingDay: Array<string>
    
    // Number of stops made in a journey if different from 0
    techStopNumber: Array<number>
    
    // Location places of the stops
    locationId: Array<string>
    
}

export interface AdditionalProductDetailsType3Attributes {
    
}

// Level of access
export interface ProductFacilitiesType3 {
    
    $attributes: ProductFacilitiesType3Attributes
    
    // Yes-No indicator whether Last Seat Available
    lastSeatAvailable: Array<string>
    
    // Level of access
    levelOfAccess: Array<string>
    
    // Yes-No indicator whether electronic ticketing
    electronicTicketing: Array<string>
    
    // Product identification suffix
    operationalSuffix: Array<string>
    
    // Define whether a flight has been polled or not
    productDetailQualifier: Array<string>
    
    // Add some flight restrictions (See code set list)
    flightCharacteristic: Array<string>
    
}

export interface ProductFacilitiesType3Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_270108C1 {
    
    $attributes: CodedAttributeInformationType_270108C1Attributes
    
    
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType_270108C1Attributes {
    
}

// To specify flight product information details
export interface FlightProductInformationType_141442S1 {
    
    $attributes: FlightProductInformationType_141442S1Attributes
    
    // Indicates flight cabin details
    cabinProduct: Array<CabinProductDetailsType_205138C1>
    
    // To specify additional characteristics.
    contextDetails: Array<ProductTypeDetailsType_205137C3>
    
}

export interface FlightProductInformationType_141442S1Attributes {
    
}


export interface CabinProductDetailsType_205138C1 {
    
    $attributes: CabinProductDetailsType_205138C1Attributes
    
    // Reservation booking designator - RBD
    rbd: string
    
    // Reservation Booking Modifier
    bookingModifier: Array<string>
    
    // Indicates the cabin related to the Booking code
    cabin: Array<string>
    
    // Availibility status : posting level
    avlStatus: Array<string>
    
}

export interface CabinProductDetailsType_205138C1Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType_205137C3 {
    
    $attributes: ProductTypeDetailsType_205137C3Attributes
    
    // indicates whether the flight is domestic or international
    avl: Array<string>
    
}

export interface ProductTypeDetailsType_205137C3Attributes {
    
}

// not the standard only used in fare quote message
export interface DateAndTimeInformationType3 {
    
    $attributes: DateAndTimeInformationType3Attributes
    
    // Details on date and time
    stopDetails: Array<DateAndTimeDetailsType3>
    
    
    DummyNET: string
    
}

export interface DateAndTimeInformationType3Attributes {
    
}


export interface DateAndTimeDetailsType3 {
    
    $attributes: DateAndTimeDetailsType3Attributes
    
    // Date time period qualifier
    dateQualifier: Array<string>
    
    // First Date
    date: Array<string>
    
    // First Time
    firstTime: Array<string>
    
    // Movement type.
    equipementType: Array<string>
    
    // Place/location identification.
    locationId: Array<string>
    
}

export interface DateAndTimeDetailsType3Attributes {
    
}

// To specify commercial agreements between two or more companies related to joint, shared, lease operations etc.
export interface CommercialAgreementsType3 {
    
    $attributes: CommercialAgreementsType3Attributes
    
    // Codeshare Details
    codeshareDetails: Array<CompanyRoleIdentificationType3>
    
    // Other codeshare details
    otherCodeshareDetails: Array<CompanyRoleIdentificationType3>
    
}

export interface CommercialAgreementsType3Attributes {
    
}

// To indicate commercial agreements related to the service being provided.
export interface CompanyRoleIdentificationType3 {
    
    $attributes: CompanyRoleIdentificationType3Attributes
    
    // Type of code share agreement.
    codeShareType: Array<string>
    
    // company identification
    airlineDesignator: Array<string>
    
    // flight number
    flightNumber: Array<number>
    
}

export interface CompanyRoleIdentificationType3Attributes {
    
}

// To specify header information applicable to the entire message.
export interface HeaderInformationTypeI3 {
    
    $attributes: HeaderInformationTypeI3Attributes
    
    // Status
    status: Array<string>
    
    // Date and Time info
    dateTimePeriodDetails: Array<DateTimePeriodDetailsTypeI3>
    
    // Reference number
    referenceNumber: Array<string>
    
    // Contains product identification such as UIC code...
    productIdentification: Array<string>
    
}

export interface HeaderInformationTypeI3Attributes {
    
}

// To indicate period of applicability.
export interface DateTimePeriodDetailsTypeI3 {
    
    $attributes: DateTimePeriodDetailsTypeI3Attributes
    
    // Qualifier
    qualifier: string
    
    // Value
    value: Array<string>
    
}

export interface DateTimePeriodDetailsTypeI3Attributes {
    
}

// Convey flight characteristics
export interface FlightCharacteristicsType1 {
    
    $attributes: FlightCharacteristicsType1Attributes
    
    // On-Time Performance
    onTimePerformance: Array<OnTimePerformanceType1>
    
    // In flight services
    inFlightSrv: Array<string>
    
}

export interface FlightCharacteristicsType1Attributes {
    
}


export interface OnTimePerformanceType1 {
    
    $attributes: OnTimePerformanceType1Attributes
    
    // Date time period
    dateTimePeriod: Array<string>
    
    // Percentage
    percentage: Array<number>
    
    // Accuracy
    accuracy: Array<string>
    
}

export interface OnTimePerformanceType1Attributes {
    
}

// Convey services for cabin or class
export interface FlightServicesType1 {
    
    $attributes: FlightServicesType1Attributes
    
    // Type of service used
    serviceType: string
    
    
    cabinInfo: Array<CabinInformationType1>
    
    
    classInfo: Array<ClassInformationType1>
    
}

export interface FlightServicesType1Attributes {
    
}


export interface CabinInformationType1 {
    
    $attributes: CabinInformationType1Attributes
    
    // Identify the features associated to the cabin/class
    service: string
    
    // Cabin code designator
    cabin: Array<string>
    
}

export interface CabinInformationType1Attributes {
    
}


export interface ClassInformationType1 {
    
    $attributes: ClassInformationType1Attributes
    
    // Identify the features associated to the cabin/class
    service: string
    
    // Class designator
    rbd: Array<string>
    
}

export interface ClassInformationType1Attributes {
    
}

// To specify details related to meal services of a product.
export interface MealServicesType1 {
    
    $attributes: MealServicesType1Attributes
    
    // Service details
    serviceDetails: Array<ServiceDetailsType1>
    
}

export interface MealServicesType1Attributes {
    
}

// To specify meal services for a product class.
export interface ServiceDetailsType1 {
    
    $attributes: ServiceDetailsType1Attributes
    
    // Reservation booking designator
    bookingClass: Array<string>
    
    // Service
    service: Array<string>
    
}

export interface ServiceDetailsType1Attributes {
    
}


export interface recommendationType1 {
    
    $attributes: recommendationType1Attributes
    
    // Specification of the item number
    itemNumber: ItemNumberType_161497S1
    
    // To describe type of recommendation
    warningMessage: Array<InteractiveFreeTextType_78544S1>
    
    // Indicates the Fare family reference.
    fareFamilyRef: Array<ReferenceInfoType_133176S1>
    
    // Recommendation Price and Taxes.
    recPriceInfo: MonetaryInformationType_193024S1
    
    // Mini rules
    miniRule: Array<MiniRulesType_78547S1>
    
    // Indicates reference of Flight or the fee reference valid for all pax (usage:start with the 1 possible Fee reference, then provide the segments references)
    segmentFlightRef: Array<ReferenceInfoType3>
    
    // Fare details per reuqested segments for all passengers.
    recommandationSegmentsFareDetails: Array<recommandationSegmentsFareDetailsType1>
    
    // Passenger fare product details
    paxFareProduct: Array<paxFareProductType1>
    
    // Specific recommendation details
    specificRecDetails: Array<specificRecDetailsType1>
    
}

export interface recommendationType1Attributes {
    
}

// To specify item numbers
export interface ItemNumberType_161497S1 {
    
    $attributes: ItemNumberType_161497S1Attributes
    
    // Indicates the recommendation number.
    itemNumberId: Array<ItemNumberIdentificationType_191597C1>
    
    // Code share details.
    codeShareDetails: Array<CompanyRoleIdentificationType_120771C1>
    
    // Pricing ticketind details.
    priceTicketing: Array<PricingTicketingInformationType3>
    
}

export interface ItemNumberType_161497S1Attributes {
    
}


export interface ItemNumberIdentificationType_191597C1 {
    
    $attributes: ItemNumberIdentificationType_191597C1Attributes
    
    // Item number.
    number: Array<string>
    
    // Indicates the item type .
    numberType: Array<string>
    
}

export interface ItemNumberIdentificationType_191597C1Attributes {
    
}

// To indicate commercial agreements related to the service being provided.
export interface CompanyRoleIdentificationType_120771C1 {
    
    $attributes: CompanyRoleIdentificationType_120771C1Attributes
    
    // Type of code share agreement.
    transportStageQualifier: Array<string>
    
    // company identification
    company: Array<string>
    
}

export interface CompanyRoleIdentificationType_120771C1Attributes {
    
}

// To specify indicators related to pricing and ticketing.
export interface PricingTicketingInformationType3 {
    
    $attributes: PricingTicketingInformationType3Attributes
    
    // Price type qualifier
    priceType: Array<string>
    
}

export interface PricingTicketingInformationType3Attributes {
    
}

// To specify monetary information details
export interface MonetaryInformationType_193024S1 {
    
    $attributes: MonetaryInformationType_193024S1Attributes
    
    // Monetary information.
    monetaryDetail: Array<MonetaryInformationDetailsType1>
    
}

export interface MonetaryInformationType_193024S1Attributes {
    
}

// To specify the restrictions
export interface MiniRulesType_78547S1 {
    
    $attributes: MiniRulesType_78547S1Attributes
    
    // Type of restriction: PTC, Max Adv Res, Max Ticketing After Res, ...
    restrictionType: Array<string>
    
    // Categoty of restriction: PTC, Max Adv Pur, Days, ...
    category: string
    
    // Indicators
    indicator: Array<MiniRulesIndicatorType1>
    
    // Mini rules
    miniRules: Array<MiniRulesDetailsType1>
    
}

export interface MiniRulesType_78547S1Attributes {
    
}


export interface MiniRulesIndicatorType1 {
    
    $attributes: MiniRulesIndicatorType1Attributes
    
    // See rule indicator and free form text indicator
    ruleIndicator: Array<string>
    
}

export interface MiniRulesIndicatorType1Attributes {
    
}


export interface MiniRulesDetailsType1 {
    
    $attributes: MiniRulesDetailsType1Attributes
    
    // Coded text (period or day)
    interpretation: Array<string>
    
    // Data type coded or value of interpretation
    value: Array<string>
    
}

export interface MiniRulesDetailsType1Attributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInfoType3 {
    
    $attributes: ReferenceInfoType3Attributes
    
    // Referencing details
    referencingDetail: Array<ReferencingDetailsType_191583C1>
    
    
    DummyNET: string
    
}

export interface ReferenceInfoType3Attributes {
    
}

// Referencing details
export interface ReferencingDetailsType_191583C1 {
    
    $attributes: ReferencingDetailsType_191583C1Attributes
    
    // Service reference qualifier
    refQualifier: Array<string>
    
    // Service reference
    refNumber: number
    
}

export interface ReferencingDetailsType_191583C1Attributes {
    
}


export interface recommandationSegmentsFareDetailsType1 {
    
    $attributes: recommandationSegmentsFareDetailsType1Attributes
    
    // Reference and details about requested segments.
    recommendationSegRef: OriginAndDestinationRequestType3
    
    // Amounts per requested segment.
    segmentMonetaryInformation: Array<MonetaryInformationType3>
    
}

export interface recommandationSegmentsFareDetailsType1Attributes {
    
}


export interface paxFareProductType1 {
    
    $attributes: paxFareProductType1Attributes
    
    // Passenger Fare Details.
    paxFareDetail: PricingTicketingSubsequentType_193023S1
    
    // Indicates Fee references (usage: start with the 1 possible Fee reference, then provide the segments references)
    feeRef: Array<ReferenceInfoType_134839S1>
    
    // Passenger Reference
    paxReference: Array<TravellerReferenceInformationType3>
    
    // add tax details for each passenger of each recommendations.
    passengerTaxDetails: Array<TaxType4>
    
    // fare Details
    fare: Array<fareType2>
    
    // Fare details by Requested segment number
    fareDetails: Array<fareDetailsType3>
    
}

export interface paxFareProductType1Attributes {
    
}

// To convey additional information related to a ticket
export interface PricingTicketingSubsequentType_193023S1 {
    
    $attributes: PricingTicketingSubsequentType_193023S1Attributes
    
    // Passenger fare product number
    paxFareNum: string
    
    // Total fare amount
    totalFareAmount: number
    
    // Total tax amount
    totalTaxAmount: Array<number>
    
    // Code share details.
    codeShareDetails: Array<CompanyRoleIdentificationType_120771C1>
    
    // Monetary information.
    monetaryDetails: Array<MonetaryInformationDetailsType1>
    
    // Pricing ticketing details.
    pricingTicketing: Array<PricingTicketingInformationType3>
    
}

export interface PricingTicketingSubsequentType_193023S1Attributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInfoType_134839S1 {
    
    $attributes: ReferenceInfoType_134839S1Attributes
    
    // Referencing details
    referencingDetail: Array<ReferencingDetailsType_195561C1>
    
}

export interface ReferenceInfoType_134839S1Attributes {
    
}

// Referencing details
export interface ReferencingDetailsType_195561C1 {
    
    $attributes: ReferencingDetailsType_195561C1Attributes
    
    // Segment reference qualifier
    refQualifier: Array<string>
    
    // Flight or flight group reference
    refNumber: number
    
}

export interface ReferencingDetailsType_195561C1Attributes {
    
}

// To specify traveller/personal details
export interface TravellerReferenceInformationType3 {
    
    $attributes: TravellerReferenceInformationType3Attributes
    
    // Requested passenger type
    ptc: Array<string>
    
    // Traveller details
    traveller: Array<TravellerDetailsType3>
    
}

export interface TravellerReferenceInformationType3Attributes {
    
}


export interface TravellerDetailsType3 {
    
    $attributes: TravellerDetailsType3Attributes
    
    // Direct reference of passenger assigned by requesting system.
    ref: Array<number>
    
    // Traveller is an infant
    infantIndicator: Array<number>
    
}

export interface TravellerDetailsType3Attributes {
    
}

// To specify details relating to tax(es).
export interface TaxType4 {
    
    $attributes: TaxType4Attributes
    
    // Tax category
    taxCategory: Array<string>
    
    // Tax details
    taxDetails: Array<TaxDetailsType1>
    
}

export interface TaxType4Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsType1 {
    
    $attributes: TaxDetailsType1Attributes
    
    // Amount
    rate: Array<string>
    
    // Country code
    countryCode: Array<string>
    
    // Currency code
    currencyCode: Array<string>
    
    // Type
    type: Array<string>
    
    // Indicator
    indicator: Array<string>
    
}

export interface TaxDetailsType1Attributes {
    
}


export interface fareType2 {
    
    $attributes: fareType2Attributes
    
    // Last Date to Ticket, Penalties
    pricingMessage: InteractiveFreeTextType_78559S1
    
    // Amount of penalties, Surcharges...
    monetaryInformation: Array<MonetaryInformationType_199534S1>
    
}

export interface fareType2Attributes {
    
}

// To provide free form or coded text information
export interface InteractiveFreeTextType_78559S1 {
    
    $attributes: InteractiveFreeTextType_78559S1Attributes
    
    // Details on interactive free text
    freeTextQualification: Array<FreeTextQualificationType_120769C1>
    
    // Free text
    description: Array<string>
    
}

export interface InteractiveFreeTextType_78559S1Attributes {
    
}

// To specify monetary information details
export interface MonetaryInformationType_199534S1 {
    
    $attributes: MonetaryInformationType_199534S1Attributes
    
    // Monetary information
    monetaryDetail: Array<MonetaryInformationDetailsType1>
    
}

export interface MonetaryInformationType_199534S1Attributes {
    
}


export interface fareDetailsType3 {
    
    $attributes: fareDetailsType3Attributes
    
    // Reference of the Requested Segment
    segmentRef: OriginAndDestinationRequestType3
    
    // Contains the fare details as PTC,Fare Basis, Fare Family applied for each segment
    groupOfFares: Array<groupOfFaresType1>
    
    // Amounts per passenger per requested segment.
    psgSegMonetaryInformation: Array<MonetaryInformationType3>
    
    // Majority Cabin Info
    majCabin: Array<ProductInformationType1>
    
}

export interface fareDetailsType3Attributes {
    
}


export interface groupOfFaresType1 {
    
    $attributes: groupOfFaresType1Attributes
    
    // Contains details of Flight and Fare
    productInformation: FlightProductInformationType_176659S1
    
    // Fare calculation code details
    fareCalculationCodeDetails: Array<FareCalculationCodeDetailsType1>
    
    // Ticket designator, ticket code and fare basis.
    ticketInfos: Array<FareQualifierDetailsType1>
    
    // Reference of Fare Family for each Fare Component
    fareFamiliesRef: Array<ReferenceInfoType_176658S1>
    
}

export interface groupOfFaresType1Attributes {
    
}

// To specify flight product information details
export interface FlightProductInformationType_176659S1 {
    
    $attributes: FlightProductInformationType_176659S1Attributes
    
    // Indicates flight cabin details
    cabinProduct: Array<CabinProductDetailsType3>
    
    // Fare product details
    fareProductDetail: Array<FareProductDetailsType_248552C1>
    
    // Corporate number or name and number
    corporateId: Array<string>
    
    // To determine if Fare Breaks at this segment
    breakPoint: Array<string>
    
    // To specify additional characteristics.
    contextDetails: Array<ProductTypeDetailsType3>
    
}

export interface FlightProductInformationType_176659S1Attributes {
    
}


export interface CabinProductDetailsType3 {
    
    $attributes: CabinProductDetailsType3Attributes
    
    // Reservation booking designator - RBD
    rbd: string
    
    // Reservation Booking Modifier
    bookingModifier: Array<string>
    
    // Indicates the cabin related to the Booking code
    cabin: Array<string>
    
    // Availibility status : posting level
    avlStatus: Array<string>
    
}

export interface CabinProductDetailsType3Attributes {
    
}


export interface FareProductDetailsType_248552C1 {
    
    $attributes: FareProductDetailsType_248552C1Attributes
    
    // Fare basis code
    fareBasis: Array<string>
    
    // PTC priced
    passengerType: Array<string>
    
    // Type of fare
    fareType: Array<string>
    
}

export interface FareProductDetailsType_248552C1Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType3 {
    
    $attributes: ProductTypeDetailsType3Attributes
    
    // Availability connection type.
    availabilityCnxType: Array<string>
    
}

export interface ProductTypeDetailsType3Attributes {
    
}

// To specify fare calculation information.
export interface FareCalculationCodeDetailsType1 {
    
    $attributes: FareCalculationCodeDetailsType1Attributes
    
    // Qualifier of the amout or rate
    qualifier: Array<string>
    
    // Amount
    amount: Array<number>
    
    // Location code
    locationCode: Array<string>
    
    // Other location code
    otherLocationCode: Array<string>
    
    // Rate
    rate: Array<number>
    
}

export interface FareCalculationCodeDetailsType1Attributes {
    
}

// To specify the details which qualify a fare
export interface FareQualifierDetailsType1 {
    
    $attributes: FareQualifierDetailsType1Attributes
    
    // Route Code
    movementType: Array<string>
    
    // Fare categories
    fareCategories: Array<FareCategoryCodesTypeI1>
    
    // Fare details
    fareDetails: Array<FareDetailsTypeI1>
    
    // Additional fare details
    additionalFareDetails: Array<AdditionalFareQualifierDetailsTypeI1>
    
    // Discount details
    discountDetails: Array<DiscountPenaltyInformationType1>
    
}

export interface FareQualifierDetailsType1Attributes {
    
}

// To designate non-system specific combinations of fare types.
export interface FareCategoryCodesTypeI1 {
    
    $attributes: FareCategoryCodesTypeI1Attributes
    
    // Fare type
    fareType: string
    
    // Other fare type
    otherFareType: Array<string>
    
}

export interface FareCategoryCodesTypeI1Attributes {
    
}

// To specify the fare type and related information.
export interface FareDetailsTypeI1 {
    
    $attributes: FareDetailsTypeI1Attributes
    
    // Qualifier
    qualifier: Array<string>
    
    // Rate
    rate: Array<number>
    
    // Country
    country: Array<string>
    
    // Fare category
    fareCategory: Array<string>
    
}

export interface FareDetailsTypeI1Attributes {
    
}

// To specify the fare basis and ticket designator codes.
export interface AdditionalFareQualifierDetailsTypeI1 {
    
    $attributes: AdditionalFareQualifierDetailsTypeI1Attributes
    
    // Rate class
    rateClass: Array<string>
    
    // Ticket designator.
    ticketDesignator: Array<string>
    
    // Pricing group
    pricingGroup: Array<string>
    
    // Second rate class
    secondRateClass: Array<string>
    
}

export interface AdditionalFareQualifierDetailsTypeI1Attributes {
    
}

// To indicate the discounts and penalties by fare type.
export interface DiscountPenaltyInformationType1 {
    
    $attributes: DiscountPenaltyInformationType1Attributes
    
    // Discounted fare,...
    fareQualifier: string
    
    // Dicount code,...
    rateCategory: Array<string>
    
    // Amount
    amount: Array<number>
    
    // Percentage
    percentage: Array<number>
    
}

export interface DiscountPenaltyInformationType1Attributes {
    
}

// To specify an association between references given to travelers, to products, to services
export interface ReferenceInfoType_176658S1 {
    
    $attributes: ReferenceInfoType_176658S1Attributes
    
    // Referencing details
    referencingDetail: Array<ReferencingDetailsType3>
    
}

export interface ReferenceInfoType_176658S1Attributes {
    
}

// To specify details related to routing status of a product.
export interface ProductInformationType1 {
    
    $attributes: ProductInformationType1Attributes
    
    // value of the Qualifier: INT for International DOM for Domestic EUR for European otherwise CM#10569 INVALID INTERNATIONAL INDICATOR is returned.
    productDetailsQualifier: Array<string>
    
    
    bookingClassDetails: Array<ProductDetailsType1>
    
}

export interface ProductInformationType1Attributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsType1 {
    
    $attributes: ProductDetailsType1Attributes
    
    
    designator: string
    
    
    availabilityStatus: Array<string>
    
    
    specialService: Array<string>
    
    
    option: Array<string>
    
}

export interface ProductDetailsType1Attributes {
    
}


export interface specificRecDetailsType1 {
    
    $attributes: specificRecDetailsType1Attributes
    
    // Recommendation details
    specificRecItem: ItemReferencesAndVersionsType3
    
    // Specific fare product details
    specificProductDetails: Array<specificProductDetailsType1>
    
}

export interface specificRecDetailsType1Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType3 {
    
    $attributes: ItemReferencesAndVersionsType3Attributes
    
    // Qualifies the type of the reference used.
    referenceType: Array<string>
    
    // Unique fee reference.
    refNumber: Array<number>
    
}

export interface ItemReferencesAndVersionsType3Attributes {
    
}


export interface specificProductDetailsType1 {
    
    $attributes: specificProductDetailsType1Attributes
    
    // Product details
    productReferences: PricingTicketingSubsequentType1
    
    // Specific fare details per requested segments.
    fareContextDetails: Array<fareContextDetailsType1>
    
}

export interface specificProductDetailsType1Attributes {
    
}

// To convey additional information related to a ticket
export interface PricingTicketingSubsequentType1 {
    
    $attributes: PricingTicketingSubsequentType1Attributes
    
    // Passenger fare product number
    paxFareNum: Array<string>
    
}

export interface PricingTicketingSubsequentType1Attributes {
    
}


export interface fareContextDetailsType1 {
    
    $attributes: fareContextDetailsType1Attributes
    
    // Reference of requested segment
    requestedSegmentInfo: OriginAndDestinationRequestType_134833S1
    
    // Fare connection context details
    cnxContextDetails: Array<cnxContextDetailsType1>
    
}

export interface fareContextDetailsType1Attributes {
    
}

// To convey information regarding Requested Segments
export interface OriginAndDestinationRequestType_134833S1 {
    
    $attributes: OriginAndDestinationRequestType_134833S1Attributes
    
    // Requested segment number
    segRef: number
    
}

export interface OriginAndDestinationRequestType_134833S1Attributes {
    
}


export interface cnxContextDetailsType1 {
    
    $attributes: cnxContextDetailsType1Attributes
    
    // Fare connection context details
    fareCnxInfo: FlightProductInformationType3
    
}

export interface cnxContextDetailsType1Attributes {
    
}

// To specify flight product information details
export interface FlightProductInformationType3 {
    
    $attributes: FlightProductInformationType3Attributes
    
    // Indicates flight cabin details
    cabinProduct: Array<CabinProductDetailsType_195516C1>
    
    // To specify additional characteristics.
    contextDetails: Array<ProductTypeDetailsType3>
    
}

export interface FlightProductInformationType3Attributes {
    
}


export interface CabinProductDetailsType_195516C1 {
    
    $attributes: CabinProductDetailsType_195516C1Attributes
    
    // Reservation booking designator - RBD
    rbd: Array<string>
    
    // Reservation Booking Modifier
    bookingModifier: Array<string>
    
    // Indicates the cabin related to the Booking code
    cabin: Array<string>
    
    // Availibility status : posting level
    avlStatus: string
    
}

export interface CabinProductDetailsType_195516C1Attributes {
    
}


export interface otherSolutionsType1 {
    
    $attributes: otherSolutionsType1Attributes
    
    // Reference to the current solution
    reference: SequenceDetailsTypeU1
    
    // Describes several amount for each sequence
    amtGroup: Array<amtGroupType1>
    
    // Passenger Related info (discount card, PTC, fare info, amount ...)
    psgInfo: Array<psgInfoType1>
    
}

export interface otherSolutionsType1Attributes {
    
}

// To provide details relating to the sequence.
export interface SequenceDetailsTypeU1 {
    
    $attributes: SequenceDetailsTypeU1Attributes
    
    // Sequence details
    sequenceDetails: Array<SequenceInformationTypeU1>
    
}

export interface SequenceDetailsTypeU1Attributes {
    
}

// Identification of a sequence and source for sequencing.
export interface SequenceInformationTypeU1 {
    
    $attributes: SequenceInformationTypeU1Attributes
    
    // Number
    number: string
    
    // Identification code
    identificationCode: Array<string>
    
}

export interface SequenceInformationTypeU1Attributes {
    
}


export interface amtGroupType1 {
    
    $attributes: amtGroupType1Attributes
    
    // reference to the current amount (per bound, per segment...)
    ref: ReferenceInfoType_165972S1
    
    // Amount Description
    amount: Array<MonetaryInformationTypeI3>
    
}

export interface amtGroupType1Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType_165972S1 {
    
    $attributes: ReferenceInfoType_165972S1Attributes
    
    // Reference details
    referenceDetails: Array<ReferencingDetailsType_234704C1>
    
    
    DummyNET: string
    
}

export interface ReferenceInfoType_165972S1Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_234704C1 {
    
    $attributes: ReferencingDetailsType_234704C1Attributes
    
    // Type
    type: Array<string>
    
    // Value
    value: Array<string>
    
}

export interface ReferencingDetailsType_234704C1Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI3 {
    
    $attributes: MonetaryInformationTypeI3Attributes
    
    // Monetary details
    monetaryDetails: Array<MonetaryInformationDetailsTypeI3>
    
}

export interface MonetaryInformationTypeI3Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI3 {
    
    $attributes: MonetaryInformationDetailsTypeI3Attributes
    
    // type Qualifier
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI3Attributes {
    
}


export interface psgInfoType1 {
    
    $attributes: psgInfoType1Attributes
    
    // passenger reference
    ref: SegmentRepetitionControlTypeI3
    
    // Passenger Description Info
    description: Array<FareInformationTypeI3>
    
    // Passenger frequent traveler info
    freqTraveller: Array<FrequentTravellerIdentificationCodeType3>
    
    // amount per passenger or group of passenger
    amount: Array<MonetaryInformationTypeI3>
    
    // Fare description
    fare: Array<FlightProductInformationType_161491S1>
    
    // Additional Information
    attribute: Array<AttributeTypeU1>
    
}

export interface psgInfoType1Attributes {
    
}

// To indicate the number of segment group repetitions.
export interface SegmentRepetitionControlTypeI3 {
    
    $attributes: SegmentRepetitionControlTypeI3Attributes
    
    // Segment control details
    segmentControlDetails: Array<SegmentRepetitionControlDetailsTypeI3>
    
}

export interface SegmentRepetitionControlTypeI3Attributes {
    
}

// Information about the number of selection segments to be processed.
export interface SegmentRepetitionControlDetailsTypeI3 {
    
    $attributes: SegmentRepetitionControlDetailsTypeI3Attributes
    
    // traveller number
    quantity: Array<number>
    
    // range of traveller
    numberOfUnits: Array<number>
    
}

export interface SegmentRepetitionControlDetailsTypeI3Attributes {
    
}

// To specify fare details.
export interface FareInformationTypeI3 {
    
    $attributes: FareInformationTypeI3Attributes
    
    // Value qualifier
    valueQualifier: Array<string>
    
    // Value
    value: Array<number>
    
}

export interface FareInformationTypeI3Attributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType3 {
    
    $attributes: FrequentTravellerIdentificationCodeType3Attributes
    
    // Frequent Traveller Info
    frequentTravellerDetails: Array<FrequentTravellerIdentificationType3>
    
}

export interface FrequentTravellerIdentificationCodeType3Attributes {
    
}


export interface FrequentTravellerIdentificationType3 {
    
    $attributes: FrequentTravellerIdentificationType3Attributes
    
    // Carrier where the FQTV is registered.
    carrier: Array<string>
    
    // Number
    number: Array<string>
    
    // To specify a Tier linked to the FQTV
    tierLevel: Array<string>
    
    // For example : priority code
    priorityCode: Array<string>
    
}

export interface FrequentTravellerIdentificationType3Attributes {
    
}

// To specify flight product information details
export interface FlightProductInformationType_161491S1 {
    
    $attributes: FlightProductInformationType_161491S1Attributes
    
    // Indicates flight cabin details
    cabinProduct: Array<CabinProductDetailsType_229142C1>
    
    // Fare product details
    fareProductDetail: Array<FareProductDetailsType3>
    
}

export interface FlightProductInformationType_161491S1Attributes {
    
}


export interface CabinProductDetailsType_229142C1 {
    
    $attributes: CabinProductDetailsType_229142C1Attributes
    
    // Reservation booking designator - RBD
    rbd: string
    
    // Indicates the cabin related to the Booking code
    cabin: Array<string>
    
    // Availibility status : posting level
    avlStatus: Array<string>
    
}

export interface CabinProductDetailsType_229142C1Attributes {
    
}


export interface FareProductDetailsType3 {
    
    $attributes: FareProductDetailsType3Attributes
    
    // Fare basis code
    fareBasis: Array<string>
    
}

export interface FareProductDetailsType3Attributes {
    
}


export interface AttributeTypeU1 {
    
    $attributes: AttributeTypeU1Attributes
    
    // provides the function of the attribute
    attributeFunction: Array<string>
    
    // provides details for the Attribute
    attributeDetails: AttributeInformationTypeU1
    
}

export interface AttributeTypeU1Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU1 {
    
    $attributes: AttributeInformationTypeU1Attributes
    
    // Attribute type
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface AttributeInformationTypeU1Attributes {
    
}


export interface warningInfoType1 {
    
    $attributes: warningInfoType1Attributes
    
    // Dummy Segment
    globalMessageMarker: DummySegmentTypeI1
    
    // Informative free text information
    globalMessage: InteractiveFreeTextType_78534S1
    
}

export interface warningInfoType1Attributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI1 {
    
    $attributes: DummySegmentTypeI1Attributes
    
}

export interface DummySegmentTypeI1Attributes {
    
}

// To provide free form or coded text information
export interface InteractiveFreeTextType_78534S1 {
    
    $attributes: InteractiveFreeTextType_78534S1Attributes
    
    // Details on interactive free text
    freeTextQualification: Array<FreeTextQualificationType1>
    
    // Free text
    description: Array<string>
    
}

export interface InteractiveFreeTextType_78534S1Attributes {
    
}


export interface FreeTextQualificationType1 {
    
    $attributes: FreeTextQualificationType1Attributes
    
    // Type of message
    textSubjectQualifier: string
    
    // Coded Text or type of information in 4440 (e.g. type of OSI or free text, canned message value)
    informationType: Array<string>
    
}

export interface FreeTextQualificationType1Attributes {
    
}


export interface globalInformationType1 {
    
    $attributes: globalInformationType1Attributes
    
    // Coded attributes
    attributes: CodedAttributeType_78535S1
    
}

export interface globalInformationType1Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_78535S1 {
    
    $attributes: CodedAttributeType_78535S1Attributes
    
    // Fee/reduction Id
    attributeDetails: Array<CodedAttributeInformationType3>
    
}

export interface CodedAttributeType_78535S1Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType3 {
    
    $attributes: CodedAttributeInformationType3Attributes
    
    // Type of fee/reduction
    attributeType: string
    
    // Fee Id Number
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType3Attributes {
    
}


export interface serviceFeesGrpType1 {
    
    $attributes: serviceFeesGrpType1Attributes
    
    // Service fee type (OC)
    serviceTypeInfo: SelectionDetailsType3
    
    // Service fee reference (OC ,OCM, OCC)
    serviceFeeRefGrp: Array<serviceFeeRefGrpType1>
    
    // Service coverage information per passenger
    serviceCoverageInfoGrp: Array<serviceCoverageInfoGrpType1>
    
    // Globalmessage marker
    globalMessageMarker: DummySegmentTypeI1
    
    // Service fee information per passenger
    serviceFeeInfoGrp: Array<serviceFeeInfoGrpType1>
    
    // Description of applicable services
    serviceDetailsGrp: Array<serviceDetailsGrpType1>
    
    // Free baggage allowance information group
    freeBagAllowanceGrp: Array<freeBagAllowanceGrpType1>
    
}

export interface serviceFeesGrpType1Attributes {
    
}

// To specify the details for making a selection.
export interface SelectionDetailsType3 {
    
    $attributes: SelectionDetailsType3Attributes
    
    // Carrier fees options
    carrierFeeDetails: SelectionDetailsInformationType3
    
}

export interface SelectionDetailsType3Attributes {
    
}

// To specify a selected option and associated information.
export interface SelectionDetailsInformationType3 {
    
    $attributes: SelectionDetailsInformationType3Attributes
    
    // Carrier fee type
    type: string
    
    // Carrier fee status
    optionInformation: Array<string>
    
}

export interface SelectionDetailsInformationType3Attributes {
    
}


export interface serviceFeeRefGrpType1 {
    
    $attributes: serviceFeeRefGrpType1Attributes
    
    // Reference of service fee global information
    refInfo: ReferenceInfoType3
    
}

export interface serviceFeeRefGrpType1Attributes {
    
}


export interface serviceCoverageInfoGrpType1 {
    
    $attributes: serviceCoverageInfoGrpType1Attributes
    
    // Item reference number for service coverage details
    itemNumberInfo: ItemNumberType3
    
    // Service coverage information group
    serviceCovInfoGrp: Array<serviceCovInfoGrpType1>
    
}

export interface serviceCoverageInfoGrpType1Attributes {
    
}

// To specify an item number
export interface ItemNumberType3 {
    
    $attributes: ItemNumberType3Attributes
    
    // Item number details
    itemNumber: ItemNumberIdentificationType_192331C1
    
}

export interface ItemNumberType3Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType_192331C1 {
    
    $attributes: ItemNumberIdentificationType_192331C1Attributes
    
    // Service coverage number
    number: Array<string>
    
    // Type
    type: Array<string>
    
    // Qualifier
    qualifier: Array<string>
    
    // Responsible agency
    responsibleAgency: Array<string>
    
}

export interface ItemNumberIdentificationType_192331C1Attributes {
    
}


export interface serviceCovInfoGrpType1 {
    
    $attributes: serviceCovInfoGrpType1Attributes
    
    // Passenger reference number
    paxRefInfo: SpecificTravellerType1
    
    // Service coverage information at flight level Matched seat characteristics
    coveragePerFlightsInfo: Array<ActionDetailsType1>
    
    // Carrier information
    carrierInfo: Array<TransportIdentifierType1>
    
    // Service reference number
    refInfo: Array<ReferenceInfoType_134840S1>
    
}

export interface serviceCovInfoGrpType1Attributes {
    
}

// To specify the action that should be taken on a selected reference number.
export interface ActionDetailsType1 {
    
    $attributes: ActionDetailsType1Attributes
    
    // Number of items details
    numberOfItemsDetails: Array<ProcessingInformationType1>
    
    // Range of segments
    lastItemsDetails: Array<ReferenceType1>
    
}

export interface ActionDetailsType1Attributes {
    
}

// To identify the action to be taken and the selection criteria.
export interface ProcessingInformationType1 {
    
    $attributes: ProcessingInformationType1Attributes
    
    // Action qualifier
    actionQualifier: Array<string>
    
    // Reference qualifier
    referenceQualifier: Array<string>
    
    // Reference number
    refNum: Array<string>
    
}

export interface ProcessingInformationType1Attributes {
    
}

// To specify which number in a sequence of references and/or the reference number.
export interface ReferenceType1 {
    
    $attributes: ReferenceType1Attributes
    
    // Reference of leg
    refOfLeg: Array<string>
    
    // Reference of segment starting range
    firstItemIdentifier: Array<number>
    
    // Reference of segment ending range
    lastItemIdentifier: Array<number>
    
}

export interface ReferenceType1Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType1 {
    
    $attributes: TransportIdentifierType1Attributes
    
    // Company identification
    companyIdentification: Array<CompanyIdentificationTypeI3>
    
}

export interface TransportIdentifierType1Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI3 {
    
    $attributes: CompanyIdentificationTypeI3Attributes
    
    // Company
    marketingCompany: Array<string>
    
    // Company
    operatingCompany: Array<string>
    
    // Company
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI3Attributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInfoType_134840S1 {
    
    $attributes: ReferenceInfoType_134840S1Attributes
    
    // Referencing details
    referencingDetail: Array<ReferencingDetailsType_195561C1>
    
}

export interface ReferenceInfoType_134840S1Attributes {
    
}


export interface serviceFeeInfoGrpType1 {
    
    $attributes: serviceFeeInfoGrpType1Attributes
    
    // Item number details
    itemNumberInfo: ItemNumberType3
    
    // Service fee informations
    serviceDetailsGrp: Array<serviceDetailsGrpType1>
    
}

export interface serviceFeeInfoGrpType1Attributes {
    
}


export interface serviceDetailsGrpType1 {
    
    $attributes: serviceDetailsGrpType1Attributes
    
    // Service reference number
    refInfo: ReferenceInfoType_134840S1
    
    // Service matched information
    serviceMatchedInfoGroup: Array<serviceMatchedInfoGroupType1>
    
}

export interface serviceDetailsGrpType1Attributes {
    
}


export interface serviceMatchedInfoGroupType1 {
    
    $attributes: serviceMatchedInfoGroupType1Attributes
    
    // Reference on pax number
    paxRefInfo: SpecificTravellerType1
    
    // Pricing oriented service matched information
    pricingInfo: Array<FareInformationType_80868S1>
    
    // Informative Service amount
    amountInfo: Array<MonetaryInformationType_193024S1>
    
    // Attribute information
    attributeInfo: Array<CodedAttributeType3>
    
}

export interface serviceMatchedInfoGroupType1Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType3 {
    
    $attributes: CodedAttributeType3Attributes
    
    // Attribute function
    attributeFunction: Array<string>
    
    // Attribute details
    attributeDetails: Array<CodedAttributeInformationType_283620C1>
    
}

export interface CodedAttributeType3Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_283620C1 {
    
    $attributes: CodedAttributeInformationType_283620C1Attributes
    
    
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType_283620C1Attributes {
    
}


export interface freeBagAllowanceGrpType1 {
    
    $attributes: freeBagAllowanceGrpType1Attributes
    
    // Free baggage allownce information
    freeBagAllownceInfo: ExcessBaggageType1
    
    // Item number information
    itemNumberInfo: Array<ItemNumberType_166130S1>
    
}

export interface freeBagAllowanceGrpType1Attributes {
    
}


export interface ExcessBaggageType1 {
    
    $attributes: ExcessBaggageType1Attributes
    
    // Baggage details
    baggageDetails: Array<BaggageDetailsType1>
    
    // Free baggage allowance details
    bagTagDetails: Array<BagtagDetailsType1>
    
}

export interface ExcessBaggageType1Attributes {
    
}

// To specify the number and weight of baggage.
export interface BaggageDetailsType1 {
    
    $attributes: BaggageDetailsType1Attributes
    
    // Number of pieces or weight
    freeAllowance: Array<number>
    
    // Nature of the free allowance ( Number of pieces or weight)
    quantityCode: Array<string>
    
    // Unit qualifier
    unitQualifier: Array<string>
    
}

export interface BaggageDetailsType1Attributes {
    
}

// To identify baggage by company identification, serial numbers, and destination.
export interface BagtagDetailsType1 {
    
    $attributes: BagtagDetailsType1Attributes
    
    // Identifier
    identifier: Array<string>
    
    // Number
    number: Array<number>
    
}

export interface BagtagDetailsType1Attributes {
    
}

// To specify an item number
export interface ItemNumberType_166130S1 {
    
    $attributes: ItemNumberType_166130S1Attributes
    
    // Item number details
    itemNumberDetails: Array<ItemNumberIdentificationType_234878C1>
    
}

export interface ItemNumberType_166130S1Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType_234878C1 {
    
    $attributes: ItemNumberIdentificationType_234878C1Attributes
    
    // Number
    number: Array<number>
    
    // Type
    type: Array<string>
    
}

export interface ItemNumberIdentificationType_234878C1Attributes {
    
}


export interface MultiDimensionalValueType1 {
    
    $attributes: MultiDimensionalValueType1Attributes
    
    // Identifier
    identifier: Array<string>
    
    // Dimension detail
    dimensionDetail: Array<DimensionDetailType1>
    
}

export interface MultiDimensionalValueType1Attributes {
    
}


export interface DimensionDetailType1 {
    
    $attributes: DimensionDetailType1Attributes
    
    // Bucket reference
    bucketRef: Array<string>
    
    // Value reference
    valueRef: Array<string>
    
}

export interface DimensionDetailType1Attributes {
    
}

// To specify Criteria with list of parameters
export interface ValueSearchCriteriaType3 {
    
    $attributes: ValueSearchCriteriaType3Attributes
    
    
    ref: Array<string>
    
    
    value: Array<string>
    
    
    criteriaDetails: Array<CriteriaiDetaislType3>
    
}

export interface ValueSearchCriteriaType3Attributes {
    
}

// Criteria details : weights/parameters list
export interface CriteriaiDetaislType3 {
    
    $attributes: CriteriaiDetaislType3Attributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
    // Attribute
    attribute: Array<string>
    
}

export interface CriteriaiDetaislType3Attributes {
    
}


export interface mnrGrpType1 {
    
    $attributes: mnrGrpType1Attributes
    
    
    mnr: MiniRulesType1
    
    
    mnrDetails: Array<mnrDetailsType1>
    
}

export interface mnrGrpType1Attributes {
    
}

// To specify the restrictions
export interface MiniRulesType1 {
    
    $attributes: MiniRulesType1Attributes
    
    // Categoty of restriction: PTC, Max Adv Pur, Days, ...
    category: string
    
}

export interface MiniRulesType1Attributes {
    
}


export interface mnrDetailsType1 {
    
    $attributes: mnrDetailsType1Attributes
    
    
    mnrRef: ItemNumberType_176648S1
    
    
    dateInfo: Array<DateAndTimeInformationType_182345S1>
    
    // Categories
    catGrp: Array<catGrpType1>
    
}

export interface mnrDetailsType1Attributes {
    
}

// To specify an item number
export interface ItemNumberType_176648S1 {
    
    $attributes: ItemNumberType_176648S1Attributes
    
    
    itemNumberDetails: Array<ItemNumberIdentificationType_248537C1>
    
}

export interface ItemNumberType_176648S1Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType_248537C1 {
    
    $attributes: ItemNumberIdentificationType_248537C1Attributes
    
    
    number: Array<string>
    
}

export interface ItemNumberIdentificationType_248537C1Attributes {
    
}

// To convey information regarding estimated or actual dates and times of operational events
export interface DateAndTimeInformationType_182345S1 {
    
    $attributes: DateAndTimeInformationType_182345S1Attributes
    
    // DATE AND TIME DETAILS
    dateAndTimeDetails: Array<DateAndTimeDetailsType_256192C1>
    
    
    DummyNET: string
    
}

export interface DateAndTimeInformationType_182345S1Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeDetailsType_256192C1 {
    
    $attributes: DateAndTimeDetailsType_256192C1Attributes
    
    
    qualifier: Array<string>
    
    
    date: Array<string>
    
    // Time
    time: Array<string>
    
    // Location
    location: Array<string>
    
}

export interface DateAndTimeDetailsType_256192C1Attributes {
    
}


export interface catGrpType1 {
    
    $attributes: catGrpType1Attributes
    
    // Category information
    catInfo: CategDescrType1
    
    // Monetary information
    monInfo: Array<MonetaryInformationType_174241S1>
    
    // Status information
    statusInfo: Array<StatusType_182386S1>
    
}

export interface catGrpType1Attributes {
    
}

// To identify an ATPCO Fare Category
export interface CategDescrType1 {
    
    $attributes: CategDescrType1Attributes
    
    // Category description information
    descriptionInfo: CategoryDescriptionType1
    
    // Category processing indicator
    processIndicator: Array<string>
    
}

export interface CategDescrType1Attributes {
    
}


export interface CategoryDescriptionType1 {
    
    $attributes: CategoryDescriptionType1Attributes
    
    // Category number from ATPCO naming conventions (C05 for Advance Purchase restrictions, C06 for Minimun stay ...)
    number: number
    
    // Category Code (ATPCO component code, e.g ADV for Advance purchase, STP for stopover restrictions, ELG for eligibility restrictions...)
    code: Array<string>
    
}

export interface CategoryDescriptionType1Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_174241S1 {
    
    $attributes: MonetaryInformationType_174241S1Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsType_245528C1
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType_245528C1>
    
}

export interface MonetaryInformationType_174241S1Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_245528C1 {
    
    $attributes: MonetaryInformationDetailsType_245528C1Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType_245528C1Attributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType_182386S1 {
    
    $attributes: StatusType_182386S1Attributes
    
    // STATUS DETAILS
    statusInformation: Array<StatusDetailsType_256255C1>
    
}

export interface StatusType_182386S1Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType_256255C1 {
    
    $attributes: StatusDetailsType_256255C1Attributes
    
    // list of status/qualifiers Either His for Historical or Crt for Current
    indicator: Array<string>
    
    
    action: Array<string>
    
}

export interface StatusDetailsType_256255C1Attributes {
    
}


export interface offersGroupType1 {
    
    $attributes: offersGroupType1Attributes
    
    // Response information
    response: ApplicationType2
    
    // Offers
    offers: Array<offersType1>
    
}

export interface offersGroupType1Attributes {
    
}

// This segment is used to specify details on an application
export interface ApplicationType2 {
    
    $attributes: ApplicationType2Attributes
    
    // Application details
    applicationDetails: Array<ApplicationIdentificationType1>
    
}

export interface ApplicationType2Attributes {
    
}

// Used to specify application details
export interface ApplicationIdentificationType1 {
    
    $attributes: ApplicationIdentificationType1Attributes
    
    // Unique identifier of the item.
    internalId: Array<string>
    
}

export interface ApplicationIdentificationType1Attributes {
    
}


export interface offersType1 {
    
    $attributes: offersType1Attributes
    
    // Offer details
    offerDtetails: OfferType1
    
    // Offer items
    offerItems: Array<offerItemsType1>
    
}

export interface offersType1Attributes {
    
}


export interface OfferType1 {
    
    $attributes: OfferType1Attributes
    
    // Reference
    reference: Array<string>
    
    // Offer identification
    offerId: Array<string>
    
}

export interface OfferType1Attributes {
    
}


export interface offerItemsType1 {
    
    $attributes: offerItemsType1Attributes
    
    // Offer item details
    offerItemDetails: OfferItemType1
    
    // References
    references: Array<ReferenceInfoType_165972S1>
    
}

export interface offerItemsType1Attributes {
    
}


export interface OfferItemType1 {
    
    $attributes: OfferItemType1Attributes
    
    // Offer item identifier
    offerItemId: Array<string>
    
    // Status
    status: Array<string>
    
}

export interface OfferItemType1Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationType_97181C3 {
    
    $attributes: AttributeInformationType_97181C3Attributes
    
    // Attribute type
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface AttributeInformationType_97181C3Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType3 {
    
    $attributes: AttributeType3Attributes
    
    // Criteria Set Type
    attributeQualifier: Array<string>
    
    // Criteria details
    attributeDetails: Array<AttributeInformationType_97181C3>
    
}

export interface AttributeType3Attributes {
    
}

// To identify specific data and a quantity related to the data.
export interface DataInformationType3 {
    
    $attributes: DataInformationType3Attributes
    
    // Ancillary services options
    indicator: Array<string>
    
}

export interface DataInformationType3Attributes {
    
}

// To identify the type of data to be sent and to qualify the data when required.
export interface DataTypeInformationType3 {
    
    $attributes: DataTypeInformationType3Attributes
    
    // service group/sub-group/sub-code information
    subType: string
    
    // Status (automated, manually added, exempted). Default is automated
    option: Array<string>
    
}

export interface DataTypeInformationType3Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationTypeI1 {
    
    $attributes: FreeTextQualificationTypeI1Attributes
    
    // Text subject qualifier
    textSubjectQualifier: string
    
}

export interface FreeTextQualificationTypeI1Attributes {
    
}

// To provide free form or coded text information.
export interface InteractiveFreeTextType1 {
    
    $attributes: InteractiveFreeTextType1Attributes
    
    // Free text qualification
    freeTextQualification: Array<FreeTextQualificationTypeI1>
    
    // Free text
    freeText: Array<string>
    
}

export interface InteractiveFreeTextType1Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType3 {
    
    $attributes: ItemNumberIdentificationType3Attributes
    
    // Ancillary Service number
    number: Array<string>
    
    // Type
    type: Array<string>
    
    // Qualifier
    qualifier: Array<string>
    
    // Responsible agency
    responsibleAgency: Array<string>
    
}

export interface ItemNumberIdentificationType3Attributes {
    
}

// To specify an item number
export interface ItemNumberType_80866S3 {
    
    $attributes: ItemNumberType_80866S3Attributes
    
    // Item number details
    itemNumberDetails: ItemNumberIdentificationType3
    
}

export interface ItemNumberType_80866S3Attributes {
    
}

// Special requirements data details
export interface SpecialRequirementsDataDetailsType3 {
    
    $attributes: SpecialRequirementsDataDetailsType3Attributes
    
    // SSR seat characteristic
    seatCharacteristics: Array<string>
    
    
    DummyNET: string
    
}

export interface SpecialRequirementsDataDetailsType3Attributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsType3 {
    
    $attributes: SpecialRequirementsDetailsType3Attributes
    
    // To specify the Service Requirement of the customer
    serviceRequirementsInfo: SpecialRequirementsTypeDetailsType3
    
    // Seat details
    seatDetails: Array<SpecialRequirementsDataDetailsType3>
    
}

export interface SpecialRequirementsDetailsType3Attributes {
    
}


export interface SpecialRequirementsTypeDetailsType3 {
    
    $attributes: SpecialRequirementsTypeDetailsType3Attributes
    
    // To specify the Service Classification of the Service Requirement.
    serviceClassification: string
    
    // Status
    serviceStatus: Array<string>
    
    // To specify the number of items involved
    serviceNumberOfInstances: Array<number>
    
    // To specify to which marketing carrier the service applies
    serviceMarketingCarrier: Array<string>
    
    // Specify the Service group
    serviceGroup: Array<string>
    
    // Specify the Service Sub-Group
    serviceSubGroup: Array<string>
    
    // Free Text attached to the Service.
    serviceFreeText: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsType3Attributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationType3 {
    
    $attributes: SpecificDataInformationType3Attributes
    
    // Carrier fee description
    dataTypeInformation: DataTypeInformationType3
    
    // Data information
    dataInformation: Array<DataInformationType3>
    
}

export interface SpecificDataInformationType3Attributes {
    
}


export interface Hotel_SellType {
    
    $attributes: Hotel_SellTypeAttributes
    
    // Conveys the system identifier (AeTM, Hotel+, etc)
    systemIdentifier: Array<SystemDetailsInfoType>
    
    // This is used to convey the company creating the booking: brand and sub-brand
    bookingCompany: Array<bookingCompanyType>
    
    // This segment is used to convey the record locator of the PNR when available. This record locator is present only if an end of transaction has already been applied in the past for this PNR
    reservationInfo: Array<ReservationControlInformationTypeI_61610S>
    
    // used to convey - sub channels - site ID (SEP) - Corporate SiteID
    extraIndentification: Array<ReferenceInformationTypeI_154222S>
    
    // This segment is used to convey all the global technical information. - Indicator GR: conveys the group Indicator. Possible action values are: Yes and No. This segment combined with RPI segment and the repetitions of group RSCQ defines the type of booking. RQ.T.|RPI|STX|RSCQ rep|Resp.Type ---------------------------------- 1) G |)1 | - | )1 |groups/ERR 2) G | 1 |yes| 1 |groups/ERR 3) I | 1 | - | 1 |individual 4) M |)1 |yes| 1 |groups/ERR 5) M |)1 | no| 1 |individual 6) M |)1 | - | 1 |groups or individual Case 4 forces RSD to execute multirooms as groups or return error if not allowed by the chain. Case 6 lets RSD determines the optional implementation of multiroom as Groups or several individuals. ----- Clarifications: First column is the type of booking conveyed in the request message. It is not implicitly written anywhere, and can be guessed by RPI, STX and RSCQ repetitions. The diferent types of booking are: I = Individual booking M = Multiroom booking G = Groups booking Last column is the kind of response message. Notice that can be diferent than the request message. ONLY the combinations specified in the table are allowed, any other combination should not be received. /ERR means that group booking is not allowed by all chains, so even if a message is well formed, an error can be returned if this option is not allowed.
    groupIndicator: Array<StatusTypeI_54261S>
    
    // This segment is used to convey the travel agent information: - AP : Travel Agent Phone. - APE: Travel Agent Email - APF: Travel Agent Fax At least the email is mandatory.
    travelAgentRef: Array<ElementManagementSegmentType>
    
    // This group contains the booking payer details
    bookingPayerDetails: Array<bookingPayerDetailsType>
    
    // This group is defined for roomstay. One instance per room.
    roomStayData: Array<roomStayDataType>
    
    // This group is used to convey all the data related to the arrival flight details. It is used just in case of Individual booking
    arrivalFlightDetailsGrp: Array<arrivalFlightDetailsGrpType>
    
}

export interface Hotel_SellTypeAttributes {
    
}

// Used to specify a system
export interface SystemDetailsInfoType {
    
    $attributes: SystemDetailsInfoTypeAttributes
    
    // delivering system
    deliveringSystem: SystemDetailsTypeI
    
}

export interface SystemDetailsInfoTypeAttributes {
    
}

// To identify by code or name and location the system that originates or delivers the message for a third party.
export interface SystemDetailsTypeI {
    
    $attributes: SystemDetailsTypeIAttributes
    
    // conveys the system identifier (AeTM, Hotel+, etc)
    companyId: string
    
}

export interface SystemDetailsTypeIAttributes {
    
}


export interface bookingCompanyType {
    
    $attributes: bookingCompanyTypeAttributes
    
    // Will indicate the qualifier of the company name: Brand, SubBrand, Sub-SubBrand, Corporation Name...
    companyQualifier: CodedAttributeType4
    
    // This element is used to set the name of the company
    companyName: Array<CompanyInformationType>
    
}

export interface bookingCompanyTypeAttributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType4 {
    
    $attributes: CodedAttributeType4Attributes
    
    
    attributeDetails: Array<CodedAttributeInformationType4>
    
}

export interface CodedAttributeType4Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType4 {
    
    $attributes: CodedAttributeInformationType4Attributes
    
    
    attributeType: string
    
}

export interface CodedAttributeInformationType4Attributes {
    
}

// This segment is used to convey the company information
export interface CompanyInformationType {
    
    $attributes: CompanyInformationTypeAttributes
    
    // This data element is used to convey the company name of a company
    companyName: Array<string>
    
}

export interface CompanyInformationTypeAttributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI_61610S {
    
    $attributes: ReservationControlInformationTypeI_61610SAttributes
    
    // This composite is used to convey the reservation control information
    reservation: ReservationControlInformationDetailsTypeI
    
}

export interface ReservationControlInformationTypeI_61610SAttributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI {
    
    $attributes: ReservationControlInformationDetailsTypeIAttributes
    
    // This data element is used to convey the company which owns the booking: - 1A
    companyId: Array<string>
    
    // This data element is used to convey the reservation number (record locator of a PNR, confirmation number...)
    controlNumber: string
    
    // This data element is used to indicate the type on reservation control number conveyed in this segment: - P for PNR record Locator - 2 for a confirmation number
    controlType: string
    
}

export interface ReservationControlInformationDetailsTypeIAttributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInformationTypeI_154222S {
    
    $attributes: ReferenceInformationTypeI_154222SAttributes
    
    
    referenceDetails: Array<ReferencingDetailsTypeI_220586C>
    
}

export interface ReferenceInformationTypeI_154222SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_220586C {
    
    $attributes: ReferencingDetailsTypeI_220586CAttributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
}

export interface ReferencingDetailsTypeI_220586CAttributes {
    
}

// To identify a status and related information.
export interface StatusTypeI_54261S {
    
    $attributes: StatusTypeI_54261SAttributes
    
    // Infant indicator
    statusDetails: Array<StatusDetailsTypeI>
    
}

export interface StatusTypeI_54261SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI {
    
    $attributes: StatusDetailsTypeIAttributes
    
    // Status qualifier
    indicator: string
    
    // Status value
    action: string
    
}

export interface StatusDetailsTypeIAttributes {
    
}

// To specify the PNR segments/elements references and action to apply
export interface ElementManagementSegmentType {
    
    $attributes: ElementManagementSegmentTypeAttributes
    
    // X if the element is a cancelled one
    status: Array<string>
    
    // Reference details
    reference: Array<ReferencingDetailsType_178839C>
    
}

export interface ElementManagementSegmentTypeAttributes {
    
}


export interface ReferencingDetailsType_178839C {
    
    $attributes: ReferencingDetailsType_178839CAttributes
    
    // Amadeus codes: - OT for Other element (non name, non segment) Tattoo - PT for Passenger Tattoo - ST for Segment Tattoo
    type: string
    
    // Tattoo number: it is attributed by Central System to reference the PNR segment/element
    value: number
    
}

export interface ReferencingDetailsType_178839CAttributes {
    
}


export interface bookingPayerDetailsType {
    
    $attributes: bookingPayerDetailsTypeAttributes
    
    // This segment contains the booker name(s) when he/she is a person that is not occupant and has an associated profile. It can contain also the name(s) on utf8 of a guest (in order to complete the names on ascii in pnr).
    bookerName: EnhancedTravellerInformationType
    
    // This segment define if the payer is the booking holder or not and if he/she is a guest. Moreover if present, it associates it with his/her tattoo number
    bookingPayer: Array<ReferenceInformationType>
    
    // This segment conveys the guest email address
    guestContactInfo: Array<PhoneAndEmailAddressType_153416S>
    
    // This composite contains details on user preferences : _ Language code
    occupantPreferences: Array<UserPreferencesType>
    
    // This segment conveys the gender of the guest and document information related to a traveler.
    occupantPersonalInformation: Array<PassengerApiInformationType>
    
    // This segment contains the booker address when he/she is a person that is not occupant and has an associated profile. It can contain also the address on utf8 of a guest (in order to complete the names on ascii in pnr).
    bookerAddress: Array<AddressType_193145S>
    
}

export interface bookingPayerDetailsTypeAttributes {
    
}

// To specify traveler and personal details relating to one traveler having rich name and/or multiple names
export interface EnhancedTravellerInformationType {
    
    $attributes: EnhancedTravellerInformationTypeAttributes
    
    // Name attributes unique for one passenger.
    travellerNameInfo: Array<TravellerNameInfoType>
    
    // 5 possible types of names, for 1 passenger.
    otherPaxNamesDetails: TravellerNameDetailsType
    
}

export interface EnhancedTravellerInformationTypeAttributes {
    
}


export interface TravellerNameInfoType {
    
    $attributes: TravellerNameInfoTypeAttributes
    
    
    quantity: Array<number>
    
    
    age: Array<number>
    
}

export interface TravellerNameInfoTypeAttributes {
    
}

// To identify all the names in different alphabets associated to a same traveller
export interface TravellerNameDetailsType {
    
    $attributes: TravellerNameDetailsTypeAttributes
    
    // Passenger surname
    surname: string
    
    // Passenger firstname
    givenName: Array<string>
    
    
    title: Array<string>
    
}

export interface TravellerNameDetailsTypeAttributes {
    
}

// Used to convey the passenger references.
export interface ReferenceInformationType {
    
    $attributes: ReferenceInformationTypeAttributes
    
    // Used to convey the payer type and tatoo or display number.
    passengerReference: Array<ReferencingDetailsType_270193C>
    
}

export interface ReferenceInformationTypeAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_270193C {
    
    $attributes: ReferencingDetailsType_270193CAttributes
    
    // Define the type of payer.
    type: string
    
    // Value of the association reference (tatoo)
    value: Array<string>
    
}

export interface ReferencingDetailsType_270193CAttributes {
    
}

// To specify a phone or email address
export interface PhoneAndEmailAddressType_153416S {
    
    $attributes: PhoneAndEmailAddressType_153416SAttributes
    
    // Phone or Email contact type
    phoneOrEmailType: string
    
    // Email address
    emailAddress: Array<string>
    
}

export interface PhoneAndEmailAddressType_153416SAttributes {
    
}

// Used to specify country, currency and language
export interface UserPreferencesType {
    
    $attributes: UserPreferencesTypeAttributes
    
    // This composite contains details on user preferences : _ Country code _ Language code _ Currency code
    userPreferences: Array<OriginatorDetailsTypeI>
    
}

export interface UserPreferencesTypeAttributes {
    
}

// Characteristics of the originator of a request.
export interface OriginatorDetailsTypeI {
    
    $attributes: OriginatorDetailsTypeIAttributes
    
    // This is segment is used to convey the information regarding the preffered Langauage for the traveller.
    codedLanguage: Array<string>
    
}

export interface OriginatorDetailsTypeIAttributes {
    
}

// To specify personal identification date for passengers under API facility
export interface PassengerApiInformationType {
    
    $attributes: PassengerApiInformationTypeAttributes
    
    // Gender as mentionned on the Passport, Visa or Green Card of the Customer.
    regulatoryGender: Array<string>
    
    // To specify the Document References
    documentIdentification: Array<DocumentIdTypeI>
    
}

export interface PassengerApiInformationTypeAttributes {
    
}

// To specify document information as it is related to API data.
export interface DocumentIdTypeI {
    
    $attributes: DocumentIdTypeIAttributes
    
    // This is to send the document type : Passport National ID etc
    type: Array<string>
    
    // This filed is used to send the number of the identification document for AR and BR markets
    number: string
    
}

export interface DocumentIdTypeIAttributes {
    
}

// To specify an address
export interface AddressType_193145S {
    
    $attributes: AddressType_193145SAttributes
    
    // will convey the adress text
    addressDetails: Array<AddressDetailsTypeU>
    
    // City name.
    city: Array<string>
    
    // postal identification code.
    zipCode: Array<string>
    
    // Country code
    countryCode: Array<string>
    
    // To convey a sub-entity within a country : region, states..
    regionDetails: Array<CountrySubEntityDetailsTypeU_270098C>
    
    
    locationDetails: Array<LocationIdentificationTypeU_270096C>
    
}

export interface AddressType_193145SAttributes {
    
}

// To specify the details of an address.
export interface AddressDetailsTypeU {
    
    $attributes: AddressDetailsTypeUAttributes
    
    // Address Format . Will be 5 unstructured
    format: string
    
    // Address Text. Any of the following address lines may start with a tag: Street- ExternalNumber- InternalNumber- County- Neighbourhood- State-
    line1: string
    
    // address&#39;s line 2
    line2: Array<string>
    
    // address&#39;s line 3
    line3: Array<string>
    
    // address&#39;s line 4
    line4: Array<string>
    
    // address&#39;s line 5
    line5: Array<string>
    
}

export interface AddressDetailsTypeUAttributes {
    
}

// To specify a part of a country (eg county or part of a city).
export interface CountrySubEntityDetailsTypeU_270098C {
    
    $attributes: CountrySubEntityDetailsTypeU_270098CAttributes
    
    // State or province name (eg. Texas).
    name: Array<string>
    
}

export interface CountrySubEntityDetailsTypeU_270098CAttributes {
    
}

// Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name
export interface LocationIdentificationTypeU_270096C {
    
    $attributes: LocationIdentificationTypeU_270096CAttributes
    
    // County or region name (eg. Fairfax).
    name: Array<string>
    
}

export interface LocationIdentificationTypeU_270096CAttributes {
    
}


export interface roomStayDataType {
    
    $attributes: roomStayDataTypeAttributes
    
    // This segment permits to make this group beginning by a mandatory segment.
    markerRoomStayData: DummySegmentTypeI2
    
    // Conveys the PNR/TTR tattoo of the Hotel Offer to be confirmed. An offer is an item proposition, i.e. a set availability and quotation, made to the End-user before booking, with no guarantee of price and availability. From the Customer point of view, it can be considered as a snapshot of the Travel Agency proposal at a given moment.
    tattooReference: Array<ElementManagementSegmentType_122243S>
    
    // It contains the information that defines the booking on a global way, without mentioning roomstay details
    globalBookingInfo: Array<globalBookingInfoType>
    
    // Conveys the information of each roomstay of the group booking. 1 occurence per roomstay. If it is used for Individual booking, then just the following segments are applied: -SPR -CRI -FTI -HTR -STX -RUL -TFF -TXF (functionally mandatory) -PXR -QTY
    roomList: Array<roomListType>
    
}

export interface roomStayDataTypeAttributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI2 {
    
    $attributes: DummySegmentTypeI2Attributes
    
}

export interface DummySegmentTypeI2Attributes {
    
}

// To specify the PNR segments/elements references and action to apply
export interface ElementManagementSegmentType_122243S {
    
    $attributes: ElementManagementSegmentType_122243SAttributes
    
    // Action to perform (When a PNR segment/element is transmitted) . IF for Information only (Value by default, Code used in a Server response)
    status: Array<string>
    
    
    reference: ReferencingDetailsType_178847C
    
    // PNR segment or element name
    segmentName: Array<string>
    
}

export interface ElementManagementSegmentType_122243SAttributes {
    
}

// Tatooo
export interface ReferencingDetailsType_178847C {
    
    $attributes: ReferencingDetailsType_178847CAttributes
    
    // Amadeus codes : OF for Offer element(non name, non segment) Tatoo In this message we only expect OF since this message targets Offers
    type: string
    
    // Number attributed by the Server to reference the PNR segment/element Limited to the time the PNR is worked (First retrieve - End of Transaction)
    value: number
    
}

export interface ReferencingDetailsType_178847CAttributes {
    
}


export interface globalBookingInfoType {
    
    $attributes: globalBookingInfoTypeAttributes
    
    // Not applicable for this version of the product. Only reference sell is allowed: an availability request is needed previous to the sell request. The reservation data is taken from the context.
    markerGlobalBookingInfo: HotelPropertyType
    
    // In case of a distribution channel pushing a booking already performed on its system, use this segment to give identification details for the booking as performed on the distribution channel system. It is a unique reference of the reservation coming from an external partner. The couple External Booking ID and External Booking ID Source is unique in Amadeus Hotel Platform.
    externalBookingId: Array<ReservationControlInformationTypeI>
    
    // This segment is used to convey the booking source. It identifies the originator of the booking. If not present, it is taken from the office profile.
    bookingSource: Array<UserIdentificationType_58688S>
    
    // This segment is just used in case of Individual booking and conveys the billable information
    billableInfo: Array<BillableInformationTypeU>
    
    // This segment is used to convey additional information which is entered by the agent and stored on the hotel booking. In the case of a Group Booking, it just conveys the supplementary information (/SI) that is
    textOptions: Array<MiscellaneousRemarksType>
    
    // This segment is just used in case of Individual booking and conveys the saving amount/percentage information
    savingAmountInfo: Array<MonetaryInformationTypeI4>
    
    // This segment is used to convey the total price of the reservation. Amount is used to convey price before tax and totalAmount is used if the price to convey includes taxes. This segment is also used to add the Manual Markup.
    globalPriceOverride: Array<TariffInformationTypeI>
    
    // Independently if it&#39;s Indivual or Groups booking, this group should contain the following information: - booking holder (occupying room or not) - passengers (up to 99) occupying the rooms (children non-pax must be modelized at room stay level) - stakeholders : booker (at most 1), intermediary (up to 10), or partner (up to 10) In the case of Groups booking it also contains: - group name For Individual booking this group is functionally mandatory today, then expected to become really optional (but mandatory at EOT) with hosted chains. A reservation holder is an entity, person or company, responsible for the reservation. For Groups booking this group is functionally mandatory.
    representativeParties: Array<representativePartiesType>
    
    // Spare for two-level tree of key values: List of key1, [list of [key2, value]]
    keyValueTree: Array<CodedAttributeType_198714S>
    
}

export interface globalBookingInfoTypeAttributes {
    
}

// This segment is used to convey the Hotel Property information
export interface HotelPropertyType {
    
    $attributes: HotelPropertyTypeAttributes
    
    // This composite is used to convey the hotel identifier.
    hotelReference: Array<HotelUniqueIdType>
    
    // This composite is used to convey the hotel name
    hotelName: Array<string>
    
    // This data element is used to indicates if the hotel is compliant with the fire safety rules.
    fireSafetyIndicator: Array<string>
    
}

export interface HotelPropertyTypeAttributes {
    
}


export interface HotelUniqueIdType {
    
    $attributes: HotelUniqueIdTypeAttributes
    
    // To convey the chain code in the property ID
    chainCode: string
    
    // To convey the city code in the hotel Id
    cityCode: string
    
    // To convey the property code in the Hotel Id
    hotelCode: string
    
}

export interface HotelUniqueIdTypeAttributes {
    
}

// external booking identification
export interface ReservationControlInformationTypeI {
    
    $attributes: ReservationControlInformationTypeIAttributes
    
    // Specifies information regarding the booking as performed on the distribution channel.
    externalBookingIdentification: ReservationControlInformationType
    
}

export interface ReservationControlInformationTypeIAttributes {
    
}


export interface ReservationControlInformationType {
    
    $attributes: ReservationControlInformationTypeAttributes
    
    // Code of the distribution channel pushing the booking.
    channelCode: string
    
    // Unique number to identify the reservation, i.e. Confirmation, Cancellation, or Record Locator
    reservationControlNumber: string
    
    // Code to describe the type of reservation control number, i.e. Confirmation, Cancellation, or Record Locator.
    reservationControlNbQualifier: string
    
    // Y: a previous attempt was already tried N: sender is making a first attempt
    duplicateIndicator: Array<string>
    
}

export interface ReservationControlInformationTypeAttributes {
    
}

// This segment is used to identify a user.
export interface UserIdentificationType_58688S {
    
    $attributes: UserIdentificationType_58688SAttributes
    
    // Originator Identification Details
    originIdentification: OriginatorIdentificationDetailsTypeI4
    
}

export interface UserIdentificationType_58688SAttributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI4 {
    
    $attributes: OriginatorIdentificationDetailsTypeI4Attributes
    
    // This data element is used to convey the bouking source.
    originatorId: number
    
}

export interface OriginatorIdentificationDetailsTypeI4Attributes {
    
}

// To provide billable information for a claim or encounter.
export interface BillableInformationTypeU {
    
    $attributes: BillableInformationTypeUAttributes
    
    // This composite is used to convey the billable information.
    billingInfo: Array<DiagnosisTypeU>
    
}

export interface BillableInformationTypeUAttributes {
    
}

// To identify the diagnosis and its type
export interface DiagnosisTypeU {
    
    $attributes: DiagnosisTypeUAttributes
    
    // This data element can convey either an agency accounting or a billing number.
    billingDetails: string
    
    // This data element is used to specify the type of billable information that could be found in this segment
    billingQualifier: string
    
}

export interface DiagnosisTypeUAttributes {
    
}

// To specify miscellaneous, confidential, quality control and invoice remarks, as well as departure comments, applicable to Acceptance, Boarding, Baggage....
export interface MiscellaneousRemarksType {
    
    $attributes: MiscellaneousRemarksTypeAttributes
    
    // Miscellaneous remarks
    remarkDetails: MiscellaneousRemarkType
    
}

export interface MiscellaneousRemarksTypeAttributes {
    
}

// Miscellaneous remarks
export interface MiscellaneousRemarkType {
    
    $attributes: MiscellaneousRemarkTypeAttributes
    
    // This data element is used to convey the type of the remark. (see data mapping to view the codes)
    type: string
    
    // Free text and message sequence numbers of the remarks.
    freetext: string
    
    // This data element is used to convey the business function
    businessFunction: Array<string>
    
    // language used for the free text.
    language: string
    
    // Indicates if it has been manually entered by an agent or system generated.
    source: string
    
    // Coded identification of the character encoding used in the interchange
    encoding: string
    
}

export interface MiscellaneousRemarkTypeAttributes {
    
}

// To convey monetary amounts and rates
export interface MonetaryInformationTypeI4 {
    
    $attributes: MonetaryInformationTypeI4Attributes
    
    // This composite is used to convey the saving amount.
    monetaryDetails: MonetaryInformationDetailsTypeI4
    
}

export interface MonetaryInformationTypeI4Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI4 {
    
    $attributes: MonetaryInformationDetailsTypeI4Attributes
    
    // This data element is used to indicate the amount is a saving amount (value SAV).
    typeQualifier: string
    
    // This data element is used to convey the saving amount.
    amount: number
    
    // This data element is used to convey the currency associated to the saving amount.
    currency: string
    
}

export interface MonetaryInformationDetailsTypeI4Attributes {
    
}

// To specify tariff details relating to a service or product.
export interface TariffInformationTypeI {
    
    $attributes: TariffInformationTypeIAttributes
    
    // This composite is used to convey the tariff information
    tariffInfo: Array<TariffInformationDetailsTypeI>
    
    // This composite is used to convey all the extra charge information.
    chargeDetails: Array<AssociatedChargesInformationTypeI>
    
}

export interface TariffInformationTypeIAttributes {
    
}

// To identify the rates or tariff details.
export interface TariffInformationDetailsTypeI {
    
    $attributes: TariffInformationDetailsTypeIAttributes
    
    // This field is used to convey the amount excluding tax. This field is mutually mandatory with totalAmount.
    amount: Array<number>
    
    // This field is used to convey the currency
    currency: string
    
    // Rate DLY or TTL indicator DY for Daily 3 for Total
    dailyTotalIndicator: string
    
    
    status: Array<string>
    
    // This data element is used to specify the fact that a rate change occurs during the period of the stay. If there is a change the value is * .
    rateChangeIndicator: Array<string>
    
    // This field is used to convey the total amount included tax. It is mutually mandatory with amount.
    totalAmount: Array<number>
    
}

export interface TariffInformationDetailsTypeIAttributes {
    
}

// Identification of the additional charges that are associated to a product or service.
export interface AssociatedChargesInformationTypeI {
    
    $attributes: AssociatedChargesInformationTypeIAttributes
    
    // GR.1/TFF (RESRSP) or GR.2/TFF (RESREQ): Associated charge type: 4 for Extra Adult (/EX-) 5 for Rollaway Adult (/RA-) 6 for Crib (/CR-) 12 for Rollaway Child (/RC-) Amadeus codes. AP for American Plan (/AP-) FA for Family American Plan (/FA-) FM for Family modified American Plan (/FM-) MA for Modified American Plan (/MA-) Level 1/TFF: Not Used
    chargeCode: Array<string>
    
    // This data element is used to convey the amount of the supplementary charge.
    amount: Array<number>
    
    // Used to describe the associated charge
    description: Array<string>
    
    // This data element is used to convey the currency
    currency: Array<string>
    
}

export interface AssociatedChargesInformationTypeIAttributes {
    
}


export interface representativePartiesType {
    
    $attributes: representativePartiesTypeAttributes
    
    // This segment contains either: -the booking holder tattoo -the group tattoo -All the occupants (except non-pax children)
    occupantList: ReferenceInformationType_64689S
    
    // This segment conveys the age of the person
    age: Array<QuantityTypeI>
    
    // This segment conveys the guest email address
    guestContactInfo: Array<PhoneAndEmailAddressType>
    
    // This composite contains details on user preferences : _ Language code
    occupantPreferences: Array<UserPreferencesType_198719S>
    
    // This segment conveys the gender of the guest and document information related to a traveler.
    occupantPersonalInformation: Array<PassengerApiInformationType>
    
    // This entry is used to convey the address of the occupant
    occupantAddress: Array<AddressType_145375S>
    
    // Country of Residence
    residenceCountry: Array<CountryCodeListType>
    
    // To mention the nationality of the guest
    travellerNationality: Array<NationalityTypeU>
    
    // Contains - profile type/ID - Secondary roles (partner/intermediary/booker) associated to the person/account of given profile ID - Profile Name(s) if not provided in PXR or Guest name on utf8
    profileInfo: Array<profileInfoType>
    
}

export interface representativePartiesTypeAttributes {
    
}

// Used to convey the passenger references.
export interface ReferenceInformationType_64689S {
    
    $attributes: ReferenceInformationType_64689SAttributes
    
    // Used to convey the passenger tatoo or display number.
    passengerReference: Array<ReferencingDetailsTypeI>
    
}

export interface ReferenceInformationType_64689SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI {
    
    $attributes: ReferencingDetailsTypeIAttributes
    
    // will sotre the type of the Id NOX or CVV
    type: string
    
    // value of the id
    value: string
    
}

export interface ReferencingDetailsTypeIAttributes {
    
}

// To specify a pertinent quantity.
export interface QuantityTypeI {
    
    $attributes: QuantityTypeIAttributes
    
    // This composite is used to convey the quantity details
    quantityDetails: QuantityDetailsTypeI
    
}

export interface QuantityTypeIAttributes {
    
}

// Quantity information in a transaction, qualified when relevant.
export interface QuantityDetailsTypeI {
    
    $attributes: QuantityDetailsTypeIAttributes
    
    // A for age
    qualifier: string
    
    // Age = number of years(default) or monthes.
    value: number
    
}

export interface QuantityDetailsTypeIAttributes {
    
}

// To specify a phone or email address
export interface PhoneAndEmailAddressType {
    
    $attributes: PhoneAndEmailAddressTypeAttributes
    
    // Fax contact
    phoneOrEmailType: string
    
    // Structured telephone or fax number
    telephoneNumberDetails: Array<StructuredTelephoneNumberType>
    
    // Email address
    emailAddress: Array<string>
    
}

export interface PhoneAndEmailAddressTypeAttributes {
    
}

// Convey structured phone information
export interface StructuredTelephoneNumberType {
    
    $attributes: StructuredTelephoneNumberTypeAttributes
    
    // FAX number
    telephoneNumber: string
    
}

export interface StructuredTelephoneNumberTypeAttributes {
    
}

// Used to specify country, currency and language
export interface UserPreferencesType_198719S {
    
    $attributes: UserPreferencesType_198719SAttributes
    
    // This composite contains details on user preferences : _ Country code _ Language code _ Currency code
    occupantPreferences: Array<OriginatorDetailsTypeI_276563C>
    
}

export interface UserPreferencesType_198719SAttributes {
    
}

// Characteristics of the originator of a request.
export interface OriginatorDetailsTypeI_276563C {
    
    $attributes: OriginatorDetailsTypeI_276563CAttributes
    
    // This is segment is used to convey the information regarding the preffered Langauage for the traveller.
    occupantLanguage: Array<string>
    
}

export interface OriginatorDetailsTypeI_276563CAttributes {
    
}

// To specify an address
export interface AddressType_145375S {
    
    $attributes: AddressType_145375SAttributes
    
    // Country code
    countryCode: Array<string>
    
}

export interface AddressType_145375SAttributes {
    
}

// To provide the ISO code of a country
export interface CountryCodeListType {
    
    $attributes: CountryCodeListTypeAttributes
    
    // ISO country code of the DESTINATION of the trip.
    destinationCountryCode: string
    
}

export interface CountryCodeListTypeAttributes {
    
}

// To specify a nationality.
export interface NationalityTypeU {
    
    $attributes: NationalityTypeUAttributes
    
    // will indicate the qualifier of nationaliy: Nationality at Birth, Current Nationality, Previous Nationality
    nationaliyQualifier: string
    
    // Nationality of Traveller
    nationalityDetail: Array<NationalityDetailsTypeU>
    
}

export interface NationalityTypeUAttributes {
    
}

// To specify a nationality.
export interface NationalityDetailsTypeU {
    
    $attributes: NationalityDetailsTypeUAttributes
    
    // Nationality in ISO Country Code
    nationalityCode: Array<string>
    
}

export interface NationalityDetailsTypeUAttributes {
    
}


export interface profileInfoType {
    
    $attributes: profileInfoTypeAttributes
    
    // This segement contains the secondary roles that are not associated to a PAX in PNR. This segment contains a repeatable identify number element. This identify number can take the following values: - B: Booker - I: Intermediary - P: Partner
    secondaryRoleList: RoleType
    
    // Conveys profile type (guest/account) and profile ID
    profileTypeAndID: ReferenceInfoType_74068S
    
    // This segment conains the booker name(s) when he/she is a person that is not occupant and has an associated profile. It can contain also the name(s) on utf8 of a guest (in order to complete the names on ascii in pnr).
    bookerName: Array<TravellerInformationTypeU>
    
    // account name To be filled when account (company, TA, etc.) with a profile ID has a stakeholder role in the reservation (booker/intermediary/partner).
    accountName: Array<NameTypeU>
    
}

export interface profileInfoTypeAttributes {
    
}

// provides the main Information about a Role Type
export interface RoleType {
    
    $attributes: RoleTypeAttributes
    
    // provides the Identifier for the Sub Roles: Intermediary, Booker, Partner
    subRoleIds: Array<string>
    
}

export interface RoleTypeAttributes {
    
}

// Conveys Profile ID and Type
export interface ReferenceInfoType_74068S {
    
    $attributes: ReferenceInfoType_74068SAttributes
    
    // conveys the tattoo of the booking concerned by the action of the message
    referenceDetails: Array<ReferencingDetailsTypeI_114661C>
    
}

export interface ReferenceInfoType_74068SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_114661C {
    
    $attributes: ReferencingDetailsTypeI_114661CAttributes
    
    // type of the profile: &#39;30&#39; for account profile type &#39;31&#39; for guest profile type
    type: string
    
    // Conveys the Profile ID
    value: string
    
}

export interface ReferencingDetailsTypeI_114661CAttributes {
    
}

// To specify traveller(s) and personal details.
export interface TravellerInformationTypeU {
    
    $attributes: TravellerInformationTypeUAttributes
    
    // TRAVELLER SURNAME AND RELATED INFORMATION
    travellerInformation: TravellerSurnameAndRelatedInformationTypeU
    
    // TRAVELLER DETAILS
    travellerDetails: Array<TravellerDetailsTypeU>
    
}

export interface TravellerInformationTypeUAttributes {
    
}


export interface TravellerSurnameAndRelatedInformationTypeU {
    
    $attributes: TravellerSurnameAndRelatedInformationTypeUAttributes
    
    // Family name of the traveller
    surname: string
    
    // Nb of travellers in this TIF Must be 1.
    quantity: Array<number>
    
}

export interface TravellerSurnameAndRelatedInformationTypeUAttributes {
    
}


export interface TravellerDetailsTypeU {
    
    $attributes: TravellerDetailsTypeUAttributes
    
    // First name of the traveller
    givenName: Array<string>
    
    // Title of the traveller
    title: Array<string>
    
}

export interface TravellerDetailsTypeUAttributes {
    
}

// To identify the name of a person or entity.
export interface NameTypeU {
    
    $attributes: NameTypeUAttributes
    
    // name Information
    nameInformation: Array<NameInformationTypeU>
    
}

export interface NameTypeUAttributes {
    
}

// NAME INFORMATION
export interface NameInformationTypeU {
    
    $attributes: NameInformationTypeUAttributes
    
    // party Qualifier
    qualifier: string
    
    // party Name
    name: string
    
}

export interface NameInformationTypeUAttributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_198714S {
    
    $attributes: CodedAttributeType_198714SAttributes
    
    // provides the function of the attribute
    attributeFunction: Array<string>
    
    // provides details for the Attribute
    attributeDetails: Array<CodedAttributeInformationType_276558C>
    
}

export interface CodedAttributeType_198714SAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_276558C {
    
    $attributes: CodedAttributeInformationType_276558CAttributes
    
    // provides the attribute Type
    attributeType: string
    
    // provides a description for the attribute
    attributeDescription: Array<string>
    
    
    language: Array<string>
    
    
    encoding: Array<string>
    
    
    source: Array<string>
    
}

export interface CodedAttributeInformationType_276558CAttributes {
    
}


export interface roomListType {
    
    $attributes: roomListTypeAttributes
    
    // Not applicable for this version of the verb. Only reference sell is allowed: an availability request is needed previous to the sell request. The reservation data is taken from the context.
    markerRoomstayQuery: StructuredPeriodInformationType_92287S
    
    // Spare for two-level tree of key values: List of key1, [list of [key2, value]]
    keyValueTree: Array<CodedAttributeType_198716S>
    
    // This segment is used to specify the structured special requests.
    structuredSpecialRequest: Array<AttributeType4>
    
    // Not applicable in this version of the verb. This segment is used to specify the mode of the booking.
    bookingIndicator: Array<StatusType2>
    
    // Used to convey the stay link index of the roomstay.
    stayLink: Array<SequenceDetailsTypeU2>
    
    // This group is used to convey the room /rate details. (is used as well in case of Individual Booking)
    roomRateDetails: Array<roomRateDetailsType>
    
    // This segment is used to convey the customer reference number (is used as well in case of Individual Booking)
    customerInfo: Array<ConsumerReferenceInformationTypeI>
    
    // This segment is used to convey the frequent traveler number. It gives the number of a hotel/airline loyalty program. For non-standard Frequent Traveller numbers, the carrier can be left empty. (is used as well in case of Individual Booking)
    frequentTravellerInfo: Array<FrequentTravellerIdentificationCodeType4>
    
    // This group is used for the guarantee or deposit (is used as well in case of Individual Booking)
    guaranteeOrDeposit: Array<guaranteeOrDepositType>
    
    // This segment is used to convey the supplementary info (/SI) attached to the roomstay
    supplementaryInfo: Array<MiscellaneousRemarksType>
    
    // List of guests of the room The role of the guest is stored into the PXR. The PXR can remain empty to convey the age of children (non pax) occupant of the room. In case of response, contains only the children (mirrored from request) (is used as well in case of Individual Booking)
    guestList: Array<guestListType>
    
}

export interface roomListTypeAttributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType_92287S {
    
    $attributes: StructuredPeriodInformationType_92287SAttributes
    
}

export interface StructuredPeriodInformationType_92287SAttributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_198716S {
    
    $attributes: CodedAttributeType_198716SAttributes
    
    
    attributeFunction: Array<string>
    
    
    attributeDetails: Array<CodedAttributeInformationType_276560C>
    
}

export interface CodedAttributeType_198716SAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_276560C {
    
    $attributes: CodedAttributeInformationType_276560CAttributes
    
    
    attributeType: string
    
    
    attributeDescription: Array<string>
    
    
    language: Array<string>
    
    
    encoding: Array<string>
    
    
    source: Array<string>
    
}

export interface CodedAttributeInformationType_276560CAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType4 {
    
    $attributes: AttributeType4Attributes
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU2>
    
}

export interface AttributeType4Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU2 {
    
    $attributes: AttributeInformationTypeU2Attributes
    
    // structured special request code
    attributeType: string
    
}

export interface AttributeInformationTypeU2Attributes {
    
}

// To identify a status and related information.
export interface StatusType2 {
    
    $attributes: StatusType2Attributes
    
    // This composite is used to convey the rate status details.
    statusInformation: StatusDetailsTypeI
    
}

export interface StatusType2Attributes {
    
}

// To provide details relating to the sequence.
export interface SequenceDetailsTypeU2 {
    
    $attributes: SequenceDetailsTypeU2Attributes
    
    
    actionRequest: Array<string>
    
    // GDS-sender &#34;conversation&#34; number for this booking, incremented as defined in 02294176. Stored in PNR segment.
    sequenceDetails: SequenceInformationTypeU2
    
}

export interface SequenceDetailsTypeU2Attributes {
    
}

// Identification of a sequence and source for sequencing.
export interface SequenceInformationTypeU2 {
    
    $attributes: SequenceInformationTypeU2Attributes
    
    
    number: string
    
}

export interface SequenceInformationTypeU2Attributes {
    
}


export interface roomRateDetailsType {
    
    $attributes: roomRateDetailsTypeAttributes
    
    // Not applicable for this version of the product. Only reference sell is allowed: an availability request is needed previous to the sell request. The reservation data is taken from the context.
    marker: HotelRoomType
    
    // Provides an Hotel recommendation number : - Booking Code - Product Index
    hotelProductReference: Array<ReferenceInfoType_95595S>
    
    // This segment is used to convey all the information relative to non standard Booking Code and Hold Id. The Booking Code is used as the reference to the Availability response. By looking at the Booking Code, AHP will then gather all the reservation data from the context to identify the product, i.e. Room Type and Rate Plan.
    specialInfo: Array<FreeTextInformationType_121547S>
    
    // This group conveys the extras. When used in response, these extras can be requestable or not.
    chargeAndExtras: Array<chargeAndExtrasType>
    
    // Mark the end of group Extra
    markerOfExtra: DummySegmentTypeI2
    
}

export interface roomRateDetailsTypeAttributes {
    
}

// This segment is used to convey the hotel room information
export interface HotelRoomType {
    
    $attributes: HotelRoomTypeAttributes
    
}

export interface HotelRoomTypeAttributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType_95595S {
    
    $attributes: ReferenceInfoType_95595SAttributes
    
    // Use to convey the reference details
    referenceDetails: ReferencingDetailsType4
    
}

export interface ReferenceInfoType_95595SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType4 {
    
    $attributes: ReferencingDetailsType4Attributes
    
    // Reference qualifier Amadeus codes : OT for Other element(non name, non segment) Tatoo PT for Passenger Tatoo ST for Segment Tatoo SS for Segment Tatoo+SubTatoo
    type: Array<string>
    
    // Reference number Number attributed by the Server to reference the PNR segment/element Limited to the time the PNR is worked (First retrieve - End of Transaction)
    value: Array<string>
    
}

export interface ReferencingDetailsType4Attributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_121547S {
    
    $attributes: FreeTextInformationType_121547SAttributes
    
    
    freeTextDetails: FreeTextDetailsType_178814C
    
    // Free text and message sequence numbers of the remarks.
    freeText: string
    
}

export interface FreeTextInformationType_121547SAttributes {
    
}


export interface FreeTextDetailsType_178814C {
    
    $attributes: FreeTextDetailsType_178814CAttributes
    
    
    textSubjectQualifier: string
    
    
    informationType: string
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType_178814CAttributes {
    
}


export interface chargeAndExtrasType {
    
    $attributes: chargeAndExtrasTypeAttributes
    
    // This segment is used to convey the extra information. use 5153 for distrib service codes use 5154 for CRS internal service codes
    taxFeeInformation: HotelTaxesServiceChargesFeesType
    
    // uniquely identify an extra in the reservation. empty for add. always set for delete/modify.
    extraId: Array<ReferenceInfoType_80821S>
    
    // This segment is used to convey the dates of validity of the Hotel tax, surcharge, Fee, service information.
    taxFeeValidity: Array<StructuredPeriodInformationType2>
    
    // Conveys the rates.
    rateChanges: Array<rateChangesType>
    
    // conveys the descriptions about the extra : Extra (type = EXT ) Meal (type = MEA)
    taxDescriptions: Array<InteractiveFreeTextTypeU>
    
    // This segment is used to specify the diverse status of extra. EXO - Extra price override
    extraStatus: Array<StatusType2>
    
}

export interface chargeAndExtrasTypeAttributes {
    
}

// hotel taxes, service charges and fees
export interface HotelTaxesServiceChargesFeesType {
    
    $attributes: HotelTaxesServiceChargesFeesTypeAttributes
    
    // This data element is used to idicate if the Tax or fee is included in the base amount
    includedInAmount: string
    
    // This data element is used to indicate is this Tax or fee is included in the taxes breakdown
    includedInTaxBreakdown: Array<string>
    
    // This tag indicate if the tax or fee is per person or not
    perPerson: string
    
    // This data element is used to know if the tax or fee applies per stay, per period or per night.
    timeUnit: Array<string>
    
    // This data element is used to convey the category of the tax,fee...
    category: Array<string>
    
    // Predefined name of the Tax or Fee
    code: Array<string>
    
    // amount
    amount: Array<string>
    
    // ISO Currency code
    currencyCode: Array<string>
    
    // percentage
    percentage: Array<number>
    
    // Long name of the Tax or Fee
    longName: Array<string>
    
    // This composite is used to convey the information relative to the long name
    longNameDetails: Array<FreeTextDetailsType_276562C>
    
    // to Convey CRS internal code
    crsInternalCode: Array<string>
    
    // Associated charge quantity
    chargeQuantity: Array<number>
    
}

export interface HotelTaxesServiceChargesFeesTypeAttributes {
    
}


export interface FreeTextDetailsType_276562C {
    
    $attributes: FreeTextDetailsType_276562CAttributes
    
    
    textSubjectQualifier: string
    
    
    informationType: string
    
    
    language: Array<string>
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType_276562CAttributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_80821S {
    
    $attributes: ReferenceInfoType_80821SAttributes
    
    // Conveys the identifier of the extra associated to the booking
    referenceDetails: ReferencingDetailsTypeI_123751C
    
}

export interface ReferenceInfoType_80821SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_123751C {
    
    $attributes: ReferencingDetailsTypeI_123751CAttributes
    
    // type of the value: &#39;EID&#39; for Extra ID
    type: string
    
    // Value
    value: number
    
}

export interface ReferencingDetailsTypeI_123751CAttributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType2 {
    
    $attributes: StructuredPeriodInformationType2Attributes
    
    // This data element can be used to provide the semantic of the information provided.
    businessSemantic: string
    
    // Convey the begin date/time of a period.
    beginDateTime: StructuredDateTimeType2
    
    // Convey the end date/time of a period.
    endDateTime: StructuredDateTimeType2
    
}

export interface StructuredPeriodInformationType2Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType2 {
    
    $attributes: StructuredDateTimeType2Attributes
    
    // Year number.
    year: number
    
    // Month number in the year ( begins to 1 )
    month: number
    
    // Day number in the month ( begins to 1 )
    day: number
    
}

export interface StructuredDateTimeType2Attributes {
    
}


export interface rateChangesType {
    
    $attributes: rateChangesTypeAttributes
    
    // This segment is used to convey the amount when a rate change occurs.
    rateChangeAmountInformation: TariffInformationType
    
    // This segment is used to convey the period when a rate change occurs
    rateChangePeriodInformation: Array<StructuredPeriodInformationType2>
    
    // This segment is used to convey a comment when a rate change occurs
    rateChangeText: Array<FreeTextInformationType_31910S>
    
}

export interface rateChangesTypeAttributes {
    
}

// To specify tariff details relating to a service or product
export interface TariffInformationType {
    
    $attributes: TariffInformationTypeAttributes
    
    // This composite is used for the Rate information
    priceDetails: Array<TariffInformationDetailsTypeU>
    
}

export interface TariffInformationTypeAttributes {
    
}

// To identify the rates or tariff details.
export interface TariffInformationDetailsTypeU {
    
    $attributes: TariffInformationDetailsTypeUAttributes
    
    // amount of the rate
    amount: number
    
    
    currency: Array<string>
    
    // Rate DLY or TTL indicator DY for Daily 3 for Total
    dailyTotalIndicator: Array<string>
    
    
    status: Array<string>
    
    // GR.1/TFF (RESRSP) or GR.2/TFF (RESREQ): Rate change indicator 3 for Price change Level 1/TFF: Not Used
    rateChangeIndicator: Array<string>
    
    // This data element is used to indicate if the amount includes the tax or not. It is used in particular for &#34;room rate override&#34; input: tax included by default.
    includesTax: Array<string>
    
}

export interface TariffInformationDetailsTypeUAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_31910S {
    
    $attributes: FreeTextInformationType_31910SAttributes
    
    // This composite is used to convey all the free text information
    freeTextDetails: FreeTextDetailsType_178814C
    
    // Free text and message sequence numbers of the remarks.
    freeText: string
    
}

export interface FreeTextInformationType_31910SAttributes {
    
}

// To provide free form information
export interface InteractiveFreeTextTypeU {
    
    $attributes: InteractiveFreeTextTypeUAttributes
    
    // There are 2 IFT&#39;s in the messages: - Level 1/IFT for Provider&#39;s Marketing lines and Terms and Pricing information free flow text data, - GR.1/IFT (RESRSP) or GR.2/IFT (RESREQ) for HHL free flow text options.
    freeTextQualification: FreeTextQualificationTypeU
    
    // - 9 possible lines of the same information - Actually, the max is 6 lines of Marketing Lines (ML) - For the data greater than 70 chars, split of data by fixed 70 chars slices over as many pseudo-lines as necessary to cover the data length (max=9*70 chars). Example for /SI- Supplemental Information (Max=70 + 30)
    freeText: Array<string>
    
}

export interface InteractiveFreeTextTypeUAttributes {
    
}


export interface FreeTextQualificationTypeU {
    
    $attributes: FreeTextQualificationTypeUAttributes
    
    // 2 for Free
    textSubjectQualifier: string
    
    // Amadeus code. ADV for Advance booking BOO for Booking requirements CHK for Check in and/or out CHI for Check in CHO for Check out COM for Commission CXL for Cancellation policy DES for Rate description EXT for Extra MEA for Meals ML for Marketing lines STA for Stay SMI for Stay : MIn lenght SMA for Stay : MAX lenght SVC for Service charge TAX for Tax
    informationTypeId: string
    
    // 3 for Delete Not specified otherwise. When delete 4440 is empty: no value when deleted information.
    status: Array<string>
    
}

export interface FreeTextQualificationTypeUAttributes {
    
}

// To specify consumer reference information.
export interface ConsumerReferenceInformationTypeI {
    
    $attributes: ConsumerReferenceInformationTypeIAttributes
    
    // This composite is used to convey the different consumer numbers
    customerReferences: Array<ConsumerReferenceIdentificationTypeI2>
    
}

export interface ConsumerReferenceInformationTypeIAttributes {
    
}

// Identification of consumer references by type, company, number and reference to a traveller.
export interface ConsumerReferenceIdentificationTypeI2 {
    
    $attributes: ConsumerReferenceIdentificationTypeI2Attributes
    
    // This data element is used to specify the kind of consumer reference that is passed in this segment.(see data mapping)
    referenceQualifier: string
    
    // This data element is used to convey the reference number
    referenceNumber: string
    
}

export interface ConsumerReferenceIdentificationTypeI2Attributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType4 {
    
    $attributes: FrequentTravellerIdentificationCodeType4Attributes
    
    // Frequent Traveller Info
    frequentTravellerDetails: FrequentTravellerIdentificationType4
    
}

export interface FrequentTravellerIdentificationCodeType4Attributes {
    
}


export interface FrequentTravellerIdentificationType4 {
    
    $attributes: FrequentTravellerIdentificationType4Attributes
    
    // Carrier where the FQTV is registered.
    carrier: Array<string>
    
    
    number: string
    
}

export interface FrequentTravellerIdentificationType4Attributes {
    
}


export interface guaranteeOrDepositType {
    
    $attributes: guaranteeOrDepositTypeAttributes
    
    // This segment is used to convey the guarantee or deposit form of payment (is used as well in case of Individual Booking)
    paymentInfo: PaymentInformationTypeI
    
    // This segment is used to convey all the payment indicator: - Delayed or Immediate Payment
    paymentIndicator: Array<StatusType_122245S>
    
    // Conveys the Credit Card information (is used as well in case of Individual Booking)
    groupCreditCardInfo: Array<CreditCardDataGroupType>
    
    
    groupBillbackData: Array<groupBillbackDataType>
    
}

export interface guaranteeOrDepositTypeAttributes {
    
}

// To specify information concerning the payment.
export interface PaymentInformationTypeI {
    
    $attributes: PaymentInformationTypeIAttributes
    
    // This composite is used to convey the payment information
    paymentDetails: PaymentDetailsTypeI
    
}

export interface PaymentInformationTypeIAttributes {
    
}

// To identify the method, type, amount, currency and due date of payment.
export interface PaymentDetailsTypeI {
    
    $attributes: PaymentDetailsTypeIAttributes
    
    // To convey the guarantee /deposit form
    formOfPaymentCode: string
    
    // This data element is used to idicates if it is a guarantee or a deposit
    paymentType: string
    
    // This data element is used to identify the type of service to be paid, in our case it will always be 3 for hotel
    serviceToPay: string
    
    // This data element is used to convey the guarantee or the deposit reference.
    referenceNumber: Array<string>
    
}

export interface PaymentDetailsTypeIAttributes {
    
}

// To identify a status and related information.
export interface StatusType_122245S {
    
    $attributes: StatusType_122245SAttributes
    
    // This composite is used to convey the rate status details.
    statusInformation: Array<StatusDetailsTypeI>
    
}

export interface StatusType_122245SAttributes {
    
}

// will convey all credit card data needed for payment
export interface CreditCardDataGroupType {
    
    $attributes: CreditCardDataGroupTypeAttributes
    
    // Conveys the Credit Card information
    creditCardInfo: CreditCardDataType_80119S
    
    // convey the concealed data of the credit card
    concealedCreditCardInfo: Array<CreditCardDataType>
    
    // will convey both the CVV and the Credit card number Ids stored in the fortknox Database
    fortknoxIds: Array<ReferenceInfoType4>
    
    // Contains card holder&#39;s address information.
    cardHolderAddress: Array<AddressType3>
    
    // ccInCLearRequested: To use only in a request. If true, the application will return the CC in clear (from the FNox ID provided) in the response. ccTravelAgency: If true, the CC is a Travel Agent Credit Card.
    creditCardIndicator: Array<StatusTypeI>
    
}

export interface CreditCardDataGroupTypeAttributes {
    
}

// specify credit card data for credit card authorization
export interface CreditCardDataType_80119S {
    
    $attributes: CreditCardDataType_80119SAttributes
    
    // Credit Card information
    ccInfo: Array<CreditCardInformationType_123803C>
    
}

export interface CreditCardDataType_80119SAttributes {
    
}

// credit card info
export interface CreditCardInformationType_123803C {
    
    $attributes: CreditCardInformationType_123803CAttributes
    
    // Vendor code (VI,CA,AX.)
    vendorCode: Array<string>
    
    // may contain CC sub Types. eg: Maestro or Solo cards
    vendorCodeSubType: Array<string>
    
    // Card number Card number
    cardNumber: Array<string>
    
    // Conveys the security ID of the Credit Card (CVV,CVV2), 3-4 digits stored on the back of the card
    securityId: Array<string>
    
    // Expiry date : format MMYY
    expiryDate: Array<string>
    
    // This field indicates the date the Credit Card was issued. This data is present in case of (UK) maestro cards.
    startDate: Array<string>
    
    // This field indicates the date the Credit Card will not be valid anymore This data is present in case of (UK) maestro cards. May be different from the expiry date
    endDate: Array<string>
    
    // Conveys Credit card holder&#39;s name, as written on the card.
    ccHolderName: Array<string>
    
    // will contain the code of the bank that issued the credit card
    issuingBankName: Array<string>
    
    // CC country of issuance details
    cardCountryOfIssuance: Array<string>
    
    // This is the Credit Card Issue number. This represents the number of time a card has been issued. 1 is for the first time then in case of card renewal or card loss this issue number will be increased Today this is applicable to maestro cards.
    issueNumber: Array<number>
    
    // Will convey the full name of the institution that issued he credit card
    issuingBankLongName: Array<string>
    
    // Stores the CC track 1 information (base64 encoded)
    track1: Array<string>
    
    // Stores the CC track 2 information (base64 encoded)
    track2: Array<string>
    
    // Stores the CC track 3 information (base64 encoded)
    track3: Array<string>
    
    // Stores the CC pin code information
    pinCode: Array<string>
    
    // All the tracks of a swipe credit card are contained here as one block.
    rawTrackData: Array<string>
    
    // This field is used to split the ccHolderName field in order to convey only the CC holder surname. e.g. : ccHolderName : Mr Jean DUPONT surname : DUPONT
    surname: Array<string>
    
    // This field is used to split the ccHolderName field in order to convey only the CC holder first name. e.g. : ccHolderName : Mr Jean DUPONT firstName : Jean
    firstName: Array<string>
    
    // This field is used to split the ccHolderName field in order to convey only the CC holder first name. e.g. : ccHolderName : Mr Jean DUPONT title : Mr
    title: Array<string>
    
}

export interface CreditCardInformationType_123803CAttributes {
    
}

// convey the Concealled data of a Credit Card
export interface CreditCardDataType {
    
    $attributes: CreditCardDataTypeAttributes
    
    // Credit Card information
    ccInfo: CreditCardInformationType
    
}

export interface CreditCardDataTypeAttributes {
    
}

// credit card info
export interface CreditCardInformationType {
    
    $attributes: CreditCardInformationTypeAttributes
    
    // Card number Card number
    cardNumber: Array<string>
    
    // Conveys the security ID of the Credit Card (CVV,CVV2), 3-4 digits stored on the back of the card
    securityId: Array<string>
    
}

export interface CreditCardInformationTypeAttributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType4 {
    
    $attributes: ReferenceInfoType4Attributes
    
    // REFERENCING DETAILS
    referenceDetails: ReferencingDetailsTypeI
    
}

export interface ReferenceInfoType4Attributes {
    
}

// To specify an address
export interface AddressType3 {
    
    $attributes: AddressType3Attributes
    
    // will convey the adress text
    addressDetails: Array<AddressDetailsTypeU>
    
    // City name.
    city: Array<string>
    
    // postal identification code.
    zipCode: Array<string>
    
    // Country name.
    countryCode: Array<string>
    
    // To convey a sub-entity within a country : region, states.
    regionDetails: Array<CountrySubEntityDetailsTypeU>
    
    // County or region name (eg. Fairfax).
    locationDetails: Array<LocationIdentificationTypeU>
    
}

export interface AddressType3Attributes {
    
}

// To specify a part of a country (eg county or part of a city).
export interface CountrySubEntityDetailsTypeU {
    
    $attributes: CountrySubEntityDetailsTypeUAttributes
    
    // State or province name (eg. Texas).
    name: Array<string>
    
}

export interface CountrySubEntityDetailsTypeUAttributes {
    
}

// Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name
export interface LocationIdentificationTypeU {
    
    $attributes: LocationIdentificationTypeUAttributes
    
    // County or region name (eg. Fairfax).
    name: Array<string>
    
}

export interface LocationIdentificationTypeUAttributes {
    
}

// To identify a status and related information.
export interface StatusTypeI {
    
    $attributes: StatusTypeIAttributes
    
    // 0 ccInClearRequested 1 ccTravelAgent
    statusDetails: Array<StatusDetailsTypeI_178842C>
    
}

export interface StatusTypeIAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI_178842C {
    
    $attributes: StatusDetailsTypeI_178842CAttributes
    
    // 0 ccInClearRequested 1 ccTravelAgent
    indicator: string
    
}

export interface StatusDetailsTypeI_178842CAttributes {
    
}


export interface groupBillbackDataType {
    
    $attributes: groupBillbackDataTypeAttributes
    
    // Conveys the external payment server information
    providerInformation: CompanyInformationType_198722S
    
    // Conveys Payment Record ID (used by Payment Manager) to identify payment in a unique manner. May convey also a &#34;correlator Id&#34; used by the calling application to reconciliate its payment data.
    deploymentId: Array<ItemReferencesAndVersionsType4>
    
    // Convey the identification used by the travel agent to perform the booking Supported: T -) agentID G -) bookerID
    agentIdentification: Array<UserIdentificationType4>
    
    // Convey either the phone or the email adress of the supplier
    supplierInformation: Array<PhoneAndEmailAddressType>
    
    // Convey the payment instructions received in the cryptic request
    paymentInstructions: Array<FreeTextInformationType2>
    
    // Convey the consumer account code
    consumerAccount: ReferenceInformationTypeI
    
}

export interface groupBillbackDataTypeAttributes {
    
}

// This segment is used to convey the merchant information
export interface CompanyInformationType_198722S {
    
    $attributes: CompanyInformationType_198722SAttributes
    
    // This data element is used to qualify the company code, to identify the industry business it belongs.
    travelSector: Array<string>
    
    // This data element is used to convey the company code of a company Ex: AF for Air France MIL for millenium foundation
    companyCode: string
    
    // This data element is used to convey the numeric merchant ID.
    companyNumericCode: Array<string>
    
}

export interface CompanyInformationType_198722SAttributes {
    
}

// Payment record unique identifier
export interface ItemReferencesAndVersionsType4 {
    
    $attributes: ItemReferencesAndVersionsType4Attributes
    
    // qualifies the type of the reference used. Here it will be: PRI Payment Record Id APP Application Correlator Id EXT Third party Record Id
    referenceType: string
    
    // The value of the payment record/correlator Id
    uniqueReference: string
    
}

export interface ItemReferencesAndVersionsType4Attributes {
    
}

// This segment is used to identify a user.
export interface UserIdentificationType4 {
    
    $attributes: UserIdentificationType4Attributes
    
    // Identify the type of agent.
    originatorTypeCode: string
    
    // ID of the agent who performs the booking, provided by Amadeus Hotel
    originator: string
    
}

export interface UserIdentificationType4Attributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType2 {
    
    $attributes: FreeTextInformationType2Attributes
    
    // Type of remarks added in the PNR for a hotel booking
    freeTextDetails: FreeTextDetailsType2
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType2Attributes {
    
}


export interface FreeTextDetailsType2 {
    
    $attributes: FreeTextDetailsType2Attributes
    
    // Type of remarks added in the PNR for a hotel booking
    textSubjectQualifier: string
    
    // Source of the comments: manual
    source: string
    
    // type of encoding
    encoding: string
    
}

export interface FreeTextDetailsType2Attributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInformationTypeI {
    
    $attributes: ReferenceInformationTypeIAttributes
    
    
    referenceDetails: Array<ReferencingDetailsTypeI_177289C>
    
}

export interface ReferenceInformationTypeIAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_177289C {
    
    $attributes: ReferencingDetailsTypeI_177289CAttributes
    
    // Payment reference
    type: Array<string>
    
    // value of the Payment reference
    value: Array<string>
    
}

export interface ReferencingDetailsTypeI_177289CAttributes {
    
}


export interface guestListType {
    
    $attributes: guestListTypeAttributes
    
    // This segment contains : - the holder of the room - the occupants of the room - In case of child non pax, it is just used as marker (is used as well in case of Individual Booking)
    occupantList: ReferenceInformationType_64689S
    
    // This segment conveys the age of the person (is used as well in case of Individual Booking)
    age: Array<QuantityTypeI>
    
    // Occupant Address tag with place holder for occupant Nationality (coded) and country of residence
    occupantAddress: Array<AddressType_197031S>
    
}

export interface guestListTypeAttributes {
    
}

// To specify an address of the guest and Nationality
export interface AddressType_197031S {
    
    $attributes: AddressType_197031SAttributes
    
    // will convey the adress text
    addressDetails: Array<AddressDetailsTypeU>
    
    // City name.
    city: Array<string>
    
    // postal identification code.
    zipCode: Array<string>
    
    // Country code
    countryCode: Array<string>
    
    // Data element holds the traveller nationality in ISO Country Code
    nationalityCode: Array<string>
    
    // To convey a sub-entity within a country : region, states..
    regionDetails: Array<CountrySubEntityDetailsTypeU_270098C>
    
    
    locationDetails: Array<LocationIdentificationTypeU_270096C>
    
}

export interface AddressType_197031SAttributes {
    
}


export interface arrivalFlightDetailsGrpType {
    
    $attributes: arrivalFlightDetailsGrpTypeAttributes
    
    // This tag is used to flag the Arrival Flight Info
    arrivalFlightDetailsTag: OriginAndDestinationDetailsTypeU
    
    // This group is used to convey the data passed to the /ARR- option
    arrivalFlightDetailsData: arrivalFlightDetailsDataType
    
}

export interface arrivalFlightDetailsGrpTypeAttributes {
    
}

// To convey first the origin and then final destination of a journey.
export interface OriginAndDestinationDetailsTypeU {
    
    $attributes: OriginAndDestinationDetailsTypeUAttributes
    
    
    origin: Array<string>
    
}

export interface OriginAndDestinationDetailsTypeUAttributes {
    
}


export interface arrivalFlightDetailsDataType {
    
    $attributes: arrivalFlightDetailsDataTypeAttributes
    
    // Travel Product Information
    travelProductInformation: TravelProductInformationTypeU
    
    // Additional transport details
    additionalTransportDetails: AdditionalTransportDetailsTypeU
    
}

export interface arrivalFlightDetailsDataTypeAttributes {
    
}

// To specify details related to a travel product.
export interface TravelProductInformationTypeU {
    
    $attributes: TravelProductInformationTypeUAttributes
    
    // arrival time
    flightDate: ProductDateAndTimeTypeU
    
    
    boardPointDetails: Array<LocationTypeU>
    
    // flight info details
    productIdentification: ProductIdentificationDetailsTypeU
    
}

export interface TravelProductInformationTypeUAttributes {
    
}

// To specify first the beginning date and time followed by the ending date and time associated with a product or service.
export interface ProductDateAndTimeTypeU {
    
    $attributes: ProductDateAndTimeTypeUAttributes
    
    // arrival time
    arrivalTime: string
    
}

export interface ProductDateAndTimeTypeUAttributes {
    
}

// To identify a location
export interface LocationTypeU {
    
    $attributes: LocationTypeUAttributes
    
    
    code: string
    
}

export interface LocationTypeUAttributes {
    
}

// Code, number or name to identify a specific product or service and a code to identify the level or type of product or service.
export interface ProductIdentificationDetailsTypeU {
    
    $attributes: ProductIdentificationDetailsTypeUAttributes
    
    // airline code
    number: string
    
    // flight number
    idCharacteristic: number
    
}

export interface ProductIdentificationDetailsTypeUAttributes {
    
}

// To convey additional information concerning a means of transport.
export interface AdditionalTransportDetailsTypeU {
    
    $attributes: AdditionalTransportDetailsTypeUAttributes
    
    // Terminal Information
    terminalInformation: Array<TerminalInformationTypeU>
    
}

export interface AdditionalTransportDetailsTypeUAttributes {
    
}

// To specify departure or arrival information relative to a terminal.
export interface TerminalInformationTypeU {
    
    $attributes: TerminalInformationTypeUAttributes
    
    // Arrival Terminal
    arrivalTerminal: string
    
}

export interface TerminalInformationTypeUAttributes {
    
}


export interface Hotel_SellReplyType {
    
    $attributes: Hotel_SellReplyTypeAttributes
    
    // This group is used to convey the global Error.
    errorGroup: Array<ErrorGroupType_242040G>
    
    // provides the outcome / status of the response for each offer
    offerResponse: Array<OfferInformationType>
    
    // This group specifies, together with the number of repetitions of RSCQ group, if the booking is Individual, Multiroom or Groups.
    bookingTypeIndicator: bookingTypeIndicatorType
    
    // Conveys the system identifier (AeTM, Hotel+, etc)
    systemIdentifier: Array<SystemDetailsInfoType1>
    
    // This is used to convey the company creating the booking: brand and sub-brand
    bookingCompany: Array<bookingCompanyType1>
    
    // This segmens is just used in Individual booking and is functionally mandatory. It is used to indicate the booking type. In the option field: - P10 : for Standard access booking - P4: for Complete Access booking - P2: for Complete Access Plus booking
    individualSelectionInformation: Array<SelectionDetailsTypeI>
    
    // This group contain the booking payer details.
    bookingPayerDetails: Array<bookingPayerDetailsType1>
    
    // This group is defined for the details of a reservation.
    roomStayData: Array<roomStayDataType1>
    
    // This group is just used in Individual booking and is functionally conditional. It is used to convey all the data related to the /ARR- option
    arrivalFlightDetailsGrp: Array<arrivalFlightDetailsGrpType1>
    
}

export interface Hotel_SellReplyTypeAttributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType_242040G {
    
    $attributes: ErrorGroupType_242040GAttributes
    
    // This segment is used to convey the type of error as an amadeus Canned message code. errorCodeOwner is &#34;1A&#34; when error from HDP (11008, 00387) &#34;PR&#34; when error from provider translated by HDP (even if against Edifact proper definition - namespace)
    messageErrorInformation: ApplicationErrorInformationType_123182S
    
    // This segment is used to convey the error description
    errorDescription: Array<FreeTextInformationType_198728S>
    
}

export interface ErrorGroupType_242040GAttributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType_123182S {
    
    $attributes: ApplicationErrorInformationType_123182SAttributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType_180018C
    
}

export interface ApplicationErrorInformationType_123182SAttributes {
    
}


export interface ApplicationErrorDetailType_180018C {
    
    $attributes: ApplicationErrorDetailType_180018CAttributes
    
    // Code identifying the data validation error condition: Amadeus canned message number
    errorCode: string
    
    // Identification of a code list. IATA coded. EC for Error Code WEC for Warning code
    errorCategory: string
    
    // Code identifying the agency responsible for a code list. &#34;1A&#34; when error from HDP (11008, 00387) &#34;PR&#34; when error from provider translated by HDP (even if against Edifact proper definition - namespace)
    errorCodeOwner: string
    
}

export interface ApplicationErrorDetailType_180018CAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_198728S {
    
    $attributes: FreeTextInformationType_198728SAttributes
    
    // This composite is used to convey all the free text information
    freeTextDetails: FreeTextDetailsType_276572C
    
    // Free text and message sequence numbers of the remarks.
    freeText: string
    
}

export interface FreeTextInformationType_198728SAttributes {
    
}


export interface FreeTextDetailsType_276572C {
    
    $attributes: FreeTextDetailsType_276572CAttributes
    
    // Text qualifier
    textSubjectQualifier: string
    
    // This field is used to convey the type of information that can be carried in this segment
    informationType: string
    
    // This data element is used to convey the language code for the free text
    language: string
    
    // This data element is used to convey the type of source from which the free text was extracted: - M for manual typing - S for extracted from a system (Database...)
    source: string
    
    // This data element is used to convey the character set. (It should be ASCII 7 bits)
    encoding: string
    
}

export interface FreeTextDetailsType_276572CAttributes {
    
}

// conveys the outcome of a confirm offer transaction
export interface OfferInformationType {
    
    $attributes: OfferInformationTypeAttributes
    
    // Marker of the GOFR Group Provides the status of the offer, the validity date
    offerCharacteristics: OfferPropertiesType
    
    // Provides the output of the confirm offer transaction
    responseDetails: ResponseAnalysisDetailsType
    
    // Tatoo of the offer that has just been (tentatively) verified or confirmed (Same Tatoo as received in POFRV/KQ)
    offerTatoo: Array<ElementManagementSegmentType1>
    
    // In case of technical errors, or in case of Functional reject returned by Fare and Availability server, further error description can be provided via thr group ERR
    errorsDescription: Array<ErrorGroupType>
    
    // Provides the old and new offer pricing summary when price conditions change
    offerPrice: Array<offerPriceType>
    
}

export interface OfferInformationTypeAttributes {
    
}

// Offer elements description
export interface OfferPropertiesType {
    
    $attributes: OfferPropertiesTypeAttributes
    
    // Provide the offer status
    offerStatus: string
    
    // This is the date after which the offer will be considered as expired.
    offerValidityDate: Array<StructuredDateTimeType_150105C>
    
}

export interface OfferPropertiesTypeAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_150105C {
    
    $attributes: StructuredDateTimeType_150105CAttributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
}

export interface StructuredDateTimeType_150105CAttributes {
    
}

// To specify the type of query and the processing status associated with this response.
export interface ResponseAnalysisDetailsType {
    
    $attributes: ResponseAnalysisDetailsTypeAttributes
    
    // Status of the transaction outcome
    statusCode: string
    
}

export interface ResponseAnalysisDetailsTypeAttributes {
    
}

// To specify the PNR segments/elements references and action to apply
export interface ElementManagementSegmentType1 {
    
    $attributes: ElementManagementSegmentType1Attributes
    
    // Reference details
    reference: ReferencingDetailsType5
    
    // PNR segment or element name
    segmentName: Array<string>
    
}

export interface ElementManagementSegmentType1Attributes {
    
}

// Tatooo
export interface ReferencingDetailsType5 {
    
    $attributes: ReferencingDetailsType5Attributes
    
    // Amadeus codes : OF for Offer element(non name, non segment) Tatoo In this message we only expect OF since this message targets Offers
    type: string
    
    // Number attributed by the Server to reference the PNR segment/element Limited to the time the PNR is worked (First retrieve - End of Transaction)
    value: number
    
}

export interface ReferencingDetailsType5Attributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType {
    
    $attributes: ErrorGroupTypeAttributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType2
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType3>
    
}

export interface ErrorGroupTypeAttributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType2 {
    
    $attributes: ApplicationErrorInformationType2Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType
    
}

export interface ApplicationErrorInformationType2Attributes {
    
}


export interface ApplicationErrorDetailType {
    
    $attributes: ApplicationErrorDetailTypeAttributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailTypeAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType3 {
    
    $attributes: FreeTextInformationType3Attributes
    
    // Free text details.
    freeTextDetails: FreeTextDetailsType_150107C
    
    // Free text and message sequence numbers of the remarks.
    freeText: string
    
}

export interface FreeTextInformationType3Attributes {
    
}


export interface FreeTextDetailsType_150107C {
    
    $attributes: FreeTextDetailsType_150107CAttributes
    
    // Text subject qualifier.
    textSubjectQualifier: string
    
    // Source.
    source: string
    
    // Encoding.
    encoding: string
    
}

export interface FreeTextDetailsType_150107CAttributes {
    
}


export interface offerPriceType {
    
    $attributes: offerPriceTypeAttributes
    
    // Total Price of the Offer
    totalPrice: MonetaryInformationType4
    
    // Tattoo/type of the pricing record Only to be filled for new records (i.e SDT = CUR)
    pricingRecordId: Array<ItemReferencesAndVersionsType5>
    
    // qualifies the amounts as old or new (i.e. current)
    selectionDetails: StatusType3
    
}

export interface offerPriceTypeAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType4 {
    
    $attributes: MonetaryInformationType4Attributes
    
    // Total price details of an offer
    monetaryDetails: MonetaryInformationDetailsType2
    
    // This composite can be repeated to carry information ion the tax inclusion for hotel: - included - excluded - unknown
    otherMonetaryDetails: Array<MonetaryInformationDetailsType2>
    
}

export interface MonetaryInformationType4Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType2 {
    
    $attributes: MonetaryInformationDetailsType2Attributes
    
    // Offer Ammount qualifier (e.g. tax including or excluding) GT = Offer Grand Total including OB Fees
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsType2Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType5 {
    
    $attributes: ItemReferencesAndVersionsType5Attributes
    
    // qualifies the type of pricing record reference used.
    referenceType: string
    
    // Recommendation number
    uniqueReference: number
    
}

export interface ItemReferencesAndVersionsType5Attributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType3 {
    
    $attributes: StatusType3Attributes
    
    // STATUS DETAILS
    statusInformation: Array<StatusDetailsType2>
    
}

export interface StatusType3Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType2 {
    
    $attributes: StatusDetailsType2Attributes
    
    // list of status/qualifiers Either His for Historical or Crt for Current
    indicator: Array<string>
    
}

export interface StatusDetailsType2Attributes {
    
}


export interface bookingTypeIndicatorType {
    
    $attributes: bookingTypeIndicatorTypeAttributes
    
    // This segment conveys the number of rooms. It also contains the status code of the room in case of Individual booking response
    numberOfRooms: RelatedProductInformationTypeI
    
    // This segment conveys the group Indicator. Possible action values are: Yes and No. This segment combined with RPI segment and the repetitions of group RSCQ defines the type of booking. RQ.T.|RPI|STX|RSCQ rep|Resp.Type ---------------------------------- 1) G |)1 | - | )1 |groups/ERR 2) G | 1 |yes| 1 |groups/ERR 3) I | 1 | - | 1 |individual 4) M |)1 |yes| 1 |groups/ERR 5) M |)1 | no| 1 |individual 6) M |)1 | - | 1 |groups or individual Case 4 forces RSD to execute multirooms as groups or return error if not allowed by the chain. Case 6 lets RSD determines the optional implementation of multiroom as Groups or several individuals. ----- Clarifications: First column is the type of booking conveyed in the request message. It is not implicitly written anywhere, and can be guessed by RPI, STX and RSCQ repetitions. The diferent types of booking are: I = Individual booking M = Multiroom booking G = Groups booking Last column is the kind of response message. Notice that can be diferent than the request message. ONLY the combinations specified in the table are allowed, any other combination should not be received. /ERR means that group booking is not allowed by all chains, so even if a message is well formed, an error can be returned if this option is not allowed.
    groupIndicator: Array<StatusTypeI_81808S>
    
}

export interface bookingTypeIndicatorTypeAttributes {
    
}

// To indicate quantity and action required in relation to a product.
export interface RelatedProductInformationTypeI {
    
    $attributes: RelatedProductInformationTypeIAttributes
    
    // This data element is used to convey the number of rooms requested
    quantity: number
    
    // This data element is used to convey the booking status in case of Individual booking response The code list is not used.
    statusCode: Array<string>
    
}

export interface RelatedProductInformationTypeIAttributes {
    
}

// To identify a status and related information.
export interface StatusTypeI_81808S {
    
    $attributes: StatusTypeI_81808SAttributes
    
    // This composite is used to convey the rate status details.
    statusDetails: Array<StatusDetailsTypeI1>
    
}

export interface StatusTypeI_81808SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI1 {
    
    $attributes: StatusDetailsTypeI1Attributes
    
    // Status qualifier
    indicator: string
    
    // Status value
    action: string
    
}

export interface StatusDetailsTypeI1Attributes {
    
}

// Used to specify a system
export interface SystemDetailsInfoType1 {
    
    $attributes: SystemDetailsInfoType1Attributes
    
    // delivering system
    deliveringSystem: SystemDetailsTypeI1
    
}

export interface SystemDetailsInfoType1Attributes {
    
}

// To identify by code or name and location the system that originates or delivers the message for a third party.
export interface SystemDetailsTypeI1 {
    
    $attributes: SystemDetailsTypeI1Attributes
    
    // conveys the system identifier (AeTM, Hotel+, etc)
    companyId: string
    
}

export interface SystemDetailsTypeI1Attributes {
    
}


export interface bookingCompanyType1 {
    
    $attributes: bookingCompanyType1Attributes
    
    // Will indicate the qualifier of the company name: Brand, SubBrand, Sub-SubBrand...
    companyQualifier: CodedAttributeType5
    
    // This element is used to set the Brand or Sub-brand
    companyName: CompanyInformationType_198749S
    
}

export interface bookingCompanyType1Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType5 {
    
    $attributes: CodedAttributeType5Attributes
    
    
    attributeDetails: Array<CodedAttributeInformationType5>
    
}

export interface CodedAttributeType5Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType5 {
    
    $attributes: CodedAttributeInformationType5Attributes
    
    
    attributeType: string
    
}

export interface CodedAttributeInformationType5Attributes {
    
}

// This segment is used to convey the company information
export interface CompanyInformationType_198749S {
    
    $attributes: CompanyInformationType_198749SAttributes
    
    // This data element is used to convey the company name of a company
    companyName: Array<string>
    
}

export interface CompanyInformationType_198749SAttributes {
    
}

// To specify the details for making a selection.
export interface SelectionDetailsTypeI {
    
    $attributes: SelectionDetailsTypeIAttributes
    
    // This composite is used to convey the selection details.
    selectionDetails: SelectionDetailsInformationTypeI2
    
}

export interface SelectionDetailsTypeIAttributes {
    
}

// To specify a selected option and associated information.
export interface SelectionDetailsInformationTypeI2 {
    
    $attributes: SelectionDetailsInformationTypeI2Attributes
    
    // This data element is used to identify the Booking type. In the sell request, only P10 (Basic sell) can be used to force the standard access sell.
    option: string
    
}

export interface SelectionDetailsInformationTypeI2Attributes {
    
}


export interface bookingPayerDetailsType1 {
    
    $attributes: bookingPayerDetailsType1Attributes
    
    // This segment contains the booker name(s) when he/she is a person that is not occupant and has an associated profile. It can contain also the name(s) on utf8 of a guest (in order to complete the names on ascii in pnr).
    bookerName: EnhancedTravellerInformationType1
    
    // This segment define if the payer is the booking holder or not and if he/she is a guest. Moreover if present, it associates it with his/her tattoo number
    bookingPayer: Array<ReferenceInformationType1>
    
    // This segment conveys the guest email address
    guestContactInfo: Array<PhoneAndEmailAddressType_153416S1>
    
    // This composite contains details on user preferences : _ Language code
    occupantPreferences: Array<UserPreferencesType1>
    
    // This segment conveys the gender of the guest and document information related to a traveler.
    occupantPersonalInformation: Array<PassengerApiInformationType1>
    
    // This segment contains the booker address when he/she is a person that is not occupant and has an associated profile. It can contain also the address on utf8 of a guest (in order to complete the names on ascii in pnr).
    bookerAddress: Array<AddressType_193145S1>
    
}

export interface bookingPayerDetailsType1Attributes {
    
}

// To specify traveler and personal details relating to one traveler having rich name and/or multiple names
export interface EnhancedTravellerInformationType1 {
    
    $attributes: EnhancedTravellerInformationType1Attributes
    
    // Name attributes unique for one passenger.
    travellerNameInfo: Array<TravellerNameInfoType1>
    
    // 5 possible types of names, for 1 passenger.
    otherPaxNamesDetails: TravellerNameDetailsType1
    
}

export interface EnhancedTravellerInformationType1Attributes {
    
}


export interface TravellerNameInfoType1 {
    
    $attributes: TravellerNameInfoType1Attributes
    
    
    quantity: Array<number>
    
    
    age: Array<number>
    
}

export interface TravellerNameInfoType1Attributes {
    
}

// To identify all the names in different alphabets associated to a same traveller
export interface TravellerNameDetailsType1 {
    
    $attributes: TravellerNameDetailsType1Attributes
    
    // Passenger surname
    surname: string
    
    // Passenger firstname
    givenName: Array<string>
    
    
    title: Array<string>
    
}

export interface TravellerNameDetailsType1Attributes {
    
}

// Used to convey the passenger references.
export interface ReferenceInformationType1 {
    
    $attributes: ReferenceInformationType1Attributes
    
    // Used to convey the payer type and tatoo or display number.
    passengerReference: Array<ReferencingDetailsType_270193C1>
    
}

export interface ReferenceInformationType1Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_270193C1 {
    
    $attributes: ReferencingDetailsType_270193C1Attributes
    
    // Define the type of payer.
    type: string
    
    // Value of the association reference (tatoo)
    value: Array<string>
    
}

export interface ReferencingDetailsType_270193C1Attributes {
    
}

// To specify a phone or email address
export interface PhoneAndEmailAddressType_153416S1 {
    
    $attributes: PhoneAndEmailAddressType_153416S1Attributes
    
    // Phone or Email contact type
    phoneOrEmailType: string
    
    // Email address
    emailAddress: Array<string>
    
}

export interface PhoneAndEmailAddressType_153416S1Attributes {
    
}

// Used to specify country, currency and language
export interface UserPreferencesType1 {
    
    $attributes: UserPreferencesType1Attributes
    
    // This composite contains details on user preferences : _ Country code _ Language code _ Currency code
    userPreferences: Array<OriginatorDetailsTypeI1>
    
}

export interface UserPreferencesType1Attributes {
    
}

// Characteristics of the originator of a request.
export interface OriginatorDetailsTypeI1 {
    
    $attributes: OriginatorDetailsTypeI1Attributes
    
    // This is segment is used to convey the information regarding the preffered Langauage for the traveller.
    codedLanguage: Array<string>
    
}

export interface OriginatorDetailsTypeI1Attributes {
    
}

// To specify personal identification date for passengers under API facility
export interface PassengerApiInformationType1 {
    
    $attributes: PassengerApiInformationType1Attributes
    
    // Gender as mentionned on the Passport, Visa or Green Card of the Customer.
    regulatoryGender: Array<string>
    
    // To specify the Document References
    documentIdentification: Array<DocumentIdTypeI1>
    
}

export interface PassengerApiInformationType1Attributes {
    
}

// To specify document information as it is related to API data.
export interface DocumentIdTypeI1 {
    
    $attributes: DocumentIdTypeI1Attributes
    
    // This is to send the document type : Passport National ID etc
    type: Array<string>
    
    // This filed is used to send the number of the identification document for AR and BR markets
    number: string
    
}

export interface DocumentIdTypeI1Attributes {
    
}

// To specify an address
export interface AddressType_193145S1 {
    
    $attributes: AddressType_193145S1Attributes
    
    // will convey the adress text
    addressDetails: Array<AddressDetailsTypeU_270095C>
    
    // City name.
    city: Array<string>
    
    // postal identification code.
    zipCode: Array<string>
    
    // Country code
    countryCode: Array<string>
    
    // To convey a sub-entity within a country : region, states..
    regionDetails: Array<CountrySubEntityDetailsTypeU_270098C1>
    
    
    locationDetails: Array<LocationIdentificationTypeU_270096C1>
    
}

export interface AddressType_193145S1Attributes {
    
}

// To specify the details of an address.
export interface AddressDetailsTypeU_270095C {
    
    $attributes: AddressDetailsTypeU_270095CAttributes
    
    
    format: string
    
    // Address Text. Any of the following address lines may start with a tag: Street- ExternalNumber- InternalNumber- County- Neighbourhood- State-
    line1: string
    
    
    line2: Array<string>
    
    
    line3: Array<string>
    
    
    line4: Array<string>
    
    
    line5: Array<string>
    
}

export interface AddressDetailsTypeU_270095CAttributes {
    
}

// To specify a part of a country (eg county or part of a city).
export interface CountrySubEntityDetailsTypeU_270098C1 {
    
    $attributes: CountrySubEntityDetailsTypeU_270098C1Attributes
    
    // State or province name (eg. Texas).
    name: Array<string>
    
}

export interface CountrySubEntityDetailsTypeU_270098C1Attributes {
    
}

// Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name
export interface LocationIdentificationTypeU_270096C1 {
    
    $attributes: LocationIdentificationTypeU_270096C1Attributes
    
    // County or region name (eg. Fairfax).
    name: Array<string>
    
}

export interface LocationIdentificationTypeU_270096C1Attributes {
    
}


export interface roomStayDataType1 {
    
    $attributes: roomStayDataType1Attributes
    
    // This segment permits to make this group beginning by a mandatory segment.
    markerRoomStayData: DummySegmentTypeI3
    
    // This group is returned in case of error, from HDP or provider In case of Individual booking should just use ERC and TXF segments
    errorInformation: Array<errorInformationType>
    
    // It conveys PNR information; the RECLOC and the most representative tattoo (global tattoo for Groups case and normal tattoo for Individual case)
    pnrInfo: Array<pnrInfoType>
    
    // It returns the information that defines the booking on a global way, without mentioning roomstay details
    globalBookingInfo: Array<globalBookingInfoType1>
    
    // It conveys the information regarding roomStay response details In case of Individual booking just segments SEQ, REF, IFT as well as group RSCQ should be used
    roomListInfo: Array<roomListInfoType>
    
}

export interface roomStayDataType1Attributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI3 {
    
    $attributes: DummySegmentTypeI3Attributes
    
}

export interface DummySegmentTypeI3Attributes {
    
}


export interface errorInformationType {
    
    $attributes: errorInformationTypeAttributes
    
    // This segment is used to convey the type of error as an amadeus Canned message code. errorCodeOwner is &#34;1A&#34; when error from HDP (11008, 00387) &#34;PR&#34; when error from provider translated by HDP (even if against Edifact proper definition - namespace)
    messageErrorInformation: ApplicationErrorInformationType_123182S
    
    // This segment is used to convey the error description
    errorDescription: Array<FreeTextInformationType_198728S>
    
    // 1) &#34;TYF&#34; on Sell response (not rebook) 2) &#34;CPO&#34; on Cancel response (interactive or not) 3) &#34;DME&#34; on Sell/Modify response else absent when n/a. 4) &#34;MPO&#34; on Modify response
    errorIndicator: Array<StatusTypeI_77998S>
    
    // The indexes of the roomStays concerned by this error/warning. If not SEQ instance is present, this is a global error.
    roomStayIndex: Array<SequenceDetailsTypeU3>
    
    
    markerErrorInformation: DummySegmentTypeI3
    
}

export interface errorInformationTypeAttributes {
    
}

// To identify a status and related information.
export interface StatusTypeI_77998S {
    
    $attributes: StatusTypeI_77998SAttributes
    
    // This composite is used to convey the rate status details.
    statusDetails: StatusDetailsTypeI_120121C
    
}

export interface StatusTypeI_77998SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI_120121C {
    
    $attributes: StatusDetailsTypeI_120121CAttributes
    
    // Status qualifier
    indicator: string
    
}

export interface StatusDetailsTypeI_120121CAttributes {
    
}

// To provide details relating to the sequence.
export interface SequenceDetailsTypeU3 {
    
    $attributes: SequenceDetailsTypeU3Attributes
    
    
    actionRequest: Array<string>
    
    // GDS-sender &#34;conversation&#34; number for this booking, incremented as defined in 02294176. Stored in PNR segment.
    sequenceDetails: SequenceInformationTypeU3
    
}

export interface SequenceDetailsTypeU3Attributes {
    
}

// Identification of a sequence and source for sequencing.
export interface SequenceInformationTypeU3 {
    
    $attributes: SequenceInformationTypeU3Attributes
    
    
    number: string
    
}

export interface SequenceInformationTypeU3Attributes {
    
}


export interface pnrInfoType {
    
    $attributes: pnrInfoTypeAttributes
    
    // Conveys the PNR tattoo of: - the booking for single room commit - the global group information for group room commit
    tattooReference: ReferenceInfoType_74856S
    
    // This segment is used to convey the record locator of the PNR.
    reservationControlInfoPNR: Array<ReservationControlInformationTypeI1>
    
}

export interface pnrInfoTypeAttributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_74856S {
    
    $attributes: ReferenceInfoType_74856SAttributes
    
    // conveys the tattoo of the booking concerned by the action of the message
    referenceDetails: Array<ReferencingDetailsTypeI_49038C>
    
}

export interface ReferenceInfoType_74856SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_49038C {
    
    $attributes: ReferencingDetailsTypeI_49038CAttributes
    
    // type of the value : &#39;S&#39; for PNR segment reference number
    type: string
    
    // Conveys the PNR tattoo corresponding to the booking
    value: string
    
}

export interface ReferencingDetailsTypeI_49038CAttributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI1 {
    
    $attributes: ReservationControlInformationTypeI1Attributes
    
    // This composite is used to convey the reservation control information
    reservation: ReservationControlInformationDetailsTypeI1
    
}

export interface ReservationControlInformationTypeI1Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI1 {
    
    $attributes: ReservationControlInformationDetailsTypeI1Attributes
    
    // This data element is used to convey the company which owns the booking: - 1A
    companyId: Array<string>
    
    // This data element is used to convey the reservation number (record locator of a PNR, confirmation number...)
    controlNumber: string
    
    // This data element is used to indicate the type on reservation control number conveyed in this segment: - P for PNR record Locator - 2 for a confirmation number
    controlType: string
    
}

export interface ReservationControlInformationDetailsTypeI1Attributes {
    
}


export interface globalBookingInfoType1 {
    
    $attributes: globalBookingInfoType1Attributes
    
    // This segment is used to convey the hotel property information.
    hotelPropertyInfo: HotelPropertyType1
    
    // This segment is used to specify the mode of the booking FS - Force sell (image level)
    forceSellIndicator: Array<StatusType_74091S>
    
    // This segmens is used in Individual and Group booking and is functionally mandatory. It is used to convey the hotel chain code and name.
    individualCompanyId: Array<CompanyInformationType_54269S>
    
    // These segments are used to convey the confirmation number and the cancellation number.
    bookingInfo: Array<ReservationControlInformationTypeI1>
    
    // This segment is used to convey the amount of the cumulative fees applied to the booking (cancellation/modification fee).
    actionFee: Array<MonetaryInformationTypeI_81173S>
    
    // Conveys the global marketing lines for a Group booking (type = ML)
    globalMarketingLines: Array<InteractiveFreeTextTypeU1>
    
    // used to convey a global cancellation policy
    globalCancellationPolicy: Array<globalCancellationPolicyType>
    
    // This segment is used to convey the booking source
    bookingSource: UserIdentificationType_62601S
    
    // This segment is just used in Groups booking and is functionally conditional. It conveys the commission information
    groupGlobalCommissionAndMarkup: Array<groupGlobalCommissionAndMarkupType>
    
    // This segment is just used in Individual booking and is functionally conditional. It is used to convey the billable information
    individualBillableInfo: Array<BillableInformationTypeU1>
    
    // This segment is used to convey additional information which are entered by the agent and stored on the hotel booking. In case of Groups booking will just contains suplementary info /SI. In the case of Expedia, it conveys the SI on ascii or utf-8.
    textOptions: Array<MiscellaneousRemarksType1>
    
    // If we are in Individual booking case. It&#39;s used to convey the saving amount/percentage information
    individualSavingAmount: Array<MonetaryInformationTypeI5>
    
    // This group is used to convey the global price information.
    globalPriceInformation: Array<globalPriceInformationType>
    
    // Independently if it&#39;s Indivual or Groups booking, this group should contain the following information: - booking holder (occupying room or not) - passengers (up to 99) occupying the rooms (children non-pax must be modelized at room stay level) - stakeholders : booker (at most 1), intermediary (up to 10), or partner (up to 10) In the case of Groups booking it also contains: - group name For Individual booking this group is functionally mandatory today, then expected to become really optional (but mandatory at EOT) with hosted chains. For Groups booking this group is functionally mandatory.
    representativeParties: Array<representativePartiesType1>
    
    // Spare for two-level tree of key values: List of key1, [list of [key2, value]]
    keyValueTree: Array<CodedAttributeType_198731S>
    
}

export interface globalBookingInfoType1Attributes {
    
}

// This segment is used to convey the Hotel Property information
export interface HotelPropertyType1 {
    
    $attributes: HotelPropertyType1Attributes
    
    // This composite is used to convey the hotel identifier.
    hotelReference: HotelUniqueIdType1
    
    // This composite is used to convey the hotel name
    hotelName: string
    
    // This data element is used to indicates if the hotel is compliant with the fire safety rules.
    fireSafetyIndicator: Array<string>
    
}

export interface HotelPropertyType1Attributes {
    
}


export interface HotelUniqueIdType1 {
    
    $attributes: HotelUniqueIdType1Attributes
    
    // To convey the chain code in the property ID
    chainCode: string
    
    // To convey the city code in the hotel Id
    cityCode: string
    
    // To convey the property code in the Hotel Id
    hotelCode: string
    
}

export interface HotelUniqueIdType1Attributes {
    
}

// To identify a status and related information.
export interface StatusType_74091S {
    
    $attributes: StatusType_74091SAttributes
    
    // This composite is used to convey the rate status details.
    statusDetails: StatusDetailsTypeI1
    
}

export interface StatusType_74091SAttributes {
    
}

// This segment is used to convey the non-air company information
export interface CompanyInformationType_54269S {
    
    $attributes: CompanyInformationType_54269SAttributes
    
    // This data element is used to convey the company name of a non-air company
    companyName: string
    
}

export interface CompanyInformationType_54269SAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI_81173S {
    
    $attributes: MonetaryInformationTypeI_81173SAttributes
    
    // This composite is used to convey the rate change amount details.
    monetaryDetails: MonetaryInformationDetailsTypeI5
    
}

export interface MonetaryInformationTypeI_81173SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI5 {
    
    $attributes: MonetaryInformationDetailsTypeI5Attributes
    
    // amount
    amount: number
    
    // ISO currency code
    currency: string
    
}

export interface MonetaryInformationDetailsTypeI5Attributes {
    
}

// To provide free form information
export interface InteractiveFreeTextTypeU1 {
    
    $attributes: InteractiveFreeTextTypeU1Attributes
    
    // There are 2 IFT&#39;s in the messages: - Level 1/IFT for Provider&#39;s Marketing lines and Terms and Pricing information free flow text data, - GR.1/IFT (RESRSP) or GR.2/IFT (RESREQ) for HHL free flow text options.
    freeTextQualification: FreeTextQualificationTypeU1
    
    // - 9 possible lines of the same information - Actually, the max is 6 lines of Marketing Lines (ML) - For the data greater than 70 chars, split of data by fixed 70 chars slices over as many pseudo-lines as necessary to cover the data length (max=9*70 chars). Example for /SI- Supplemental Information (Max=70 + 30)
    freeText: Array<string>
    
}

export interface InteractiveFreeTextTypeU1Attributes {
    
}


export interface FreeTextQualificationTypeU1 {
    
    $attributes: FreeTextQualificationTypeU1Attributes
    
    // 2 for Free
    textSubjectQualifier: string
    
    // Amadeus code. ADV for Advance booking BOO for Booking requirements CHK for Check in and/or out CHI for Check in CHO for Check out COM for Commission CXL for Cancellation policy DES for Rate description EXT for Extra MEA for Meals ML for Marketing lines STA for Stay SMI for Stay : MIn lenght SMA for Stay : MAX lenght SVC for Service charge TAX for Tax
    informationTypeId: string
    
    // 3 for Delete Not specified otherwise. When delete 4440 is empty: no value when deleted information.
    status: Array<string>
    
}

export interface FreeTextQualificationTypeU1Attributes {
    
}


export interface globalCancellationPolicyType {
    
    $attributes: globalCancellationPolicyTypeAttributes
    
    // This segment is used to convey the latest date/time to cancel to avoid the linked cancellation fee.
    cancellationDateTime: StructuredDateTimeInformationType
    
    // This segment is used to convey the amount or the percentage of the cancellation/modification fee: - if currency, coded = PCT, then the amount is a percentage of the full reservation, else it&#39; s the currency.
    fee: Array<MonetaryInformationTypeI_81173S>
    
    // This segment is used to indicate the number of nights that will be charged in case of late cancellation
    cancellationNights: Array<QuantityTypeI1>
    
    // conveys the commission description (type = CXL)
    cancelationPolicyDescription: Array<InteractiveFreeTextTypeU1>
    
}

export interface globalCancellationPolicyTypeAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType {
    
    $attributes: StructuredDateTimeInformationTypeAttributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - Impacted period - Departure date - Estimated arrival date and time
    businessSemantic: string
    
    // Indicate if the time is expressed in UTC or in local time mode ( Codes U and L ). In the last case, the time zone information can be provided in the composite C89K.
    timeMode: Array<string>
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType_70768C>
    
}

export interface StructuredDateTimeInformationTypeAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_70768C {
    
    $attributes: StructuredDateTimeType_70768CAttributes
    
    // Year number.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: Array<number>
    
    // Day number in the month ( begins to 1 )
    day: Array<number>
    
    // Hour between 0 and 23
    hour: Array<number>
    
    // Minutes between 0 and 59
    minutes: Array<number>
    
}

export interface StructuredDateTimeType_70768CAttributes {
    
}

// To specify a pertinent quantity.
export interface QuantityTypeI1 {
    
    $attributes: QuantityTypeI1Attributes
    
    // This composite is ude to convey the quantity details
    quantityDetails: QuantityDetailsTypeI1
    
}

export interface QuantityTypeI1Attributes {
    
}

// Quantity information in a transaction, qualified when relevant.
export interface QuantityDetailsTypeI1 {
    
    $attributes: QuantityDetailsTypeI1Attributes
    
    // CAN for cancellation fee
    qualifier: string
    
    // Number of nights to be charged in case of cancellation
    value: number
    
    // The quantity is expressed in days.
    unit: string
    
}

export interface QuantityDetailsTypeI1Attributes {
    
}

// This segment is used to identify a user.
export interface UserIdentificationType_62601S {
    
    $attributes: UserIdentificationType_62601SAttributes
    
    // Originator Identification Details
    originIdentification: OriginatorIdentificationDetailsTypeI5
    
}

export interface UserIdentificationType_62601SAttributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI5 {
    
    $attributes: OriginatorIdentificationDetailsTypeI5Attributes
    
    // This data element is used to convey the bouking source.
    originatorId: number
    
}

export interface OriginatorIdentificationDetailsTypeI5Attributes {
    
}


export interface groupGlobalCommissionAndMarkupType {
    
    $attributes: groupGlobalCommissionAndMarkupTypeAttributes
    
    // This segment is used to convey the commission information
    commissionInfo: CommissionInformationType
    
    // conveys the commission description(type = COM)
    commissionDescription: Array<InteractiveFreeTextTypeU1>
    
    // This segment conveys information concerning the commission/markup indicator.
    markupIndicator: Array<StatusTypeI_77998S>
    
}

export interface groupGlobalCommissionAndMarkupTypeAttributes {
    
}

// To specify information about a commission.
export interface CommissionInformationType {
    
    $attributes: CommissionInformationTypeAttributes
    
    // Commission details
    commissionDetails: CommissionDetailsType
    
}

export interface CommissionInformationTypeAttributes {
    
}

// To specify the commission conditions, amount, currency, party paying and any related free text.
export interface CommissionDetailsType {
    
    $attributes: CommissionDetailsTypeAttributes
    
    // Commission type
    type: string
    
    // Commission amount
    amount: Array<number>
    
    // ISO currency code
    currency: Array<string>
    
    // Commission percentage
    rate: Array<number>
    
}

export interface CommissionDetailsTypeAttributes {
    
}

// To provide billable information for a claim or encounter.
export interface BillableInformationTypeU1 {
    
    $attributes: BillableInformationTypeU1Attributes
    
    // This composite is used to convey the billable information.
    billingInfo: Array<DiagnosisTypeU1>
    
}

export interface BillableInformationTypeU1Attributes {
    
}

// To identify the diagnosis and its type
export interface DiagnosisTypeU1 {
    
    $attributes: DiagnosisTypeU1Attributes
    
    // This data element can convey either an agency accounting or a billing number.
    billingDetails: string
    
    // This data element is used to specify the type of billable information that could be found in this segment
    billingQualifier: string
    
}

export interface DiagnosisTypeU1Attributes {
    
}

// To specify miscellaneous, confidential, quality control and invoice remarks, as well as departure comments, applicable to Acceptance, Boarding, Baggage....
export interface MiscellaneousRemarksType1 {
    
    $attributes: MiscellaneousRemarksType1Attributes
    
    // Miscellaneous remarks
    remarkDetails: MiscellaneousRemarkType1
    
}

export interface MiscellaneousRemarksType1Attributes {
    
}

// Miscellaneous remarks
export interface MiscellaneousRemarkType1 {
    
    $attributes: MiscellaneousRemarkType1Attributes
    
    // This data element is used to convey the type of the remark. (see data mapping to view the codes)
    type: string
    
    // Free text and message sequence numbers of the remarks.
    freetext: string
    
    // This data element is used to convey the business function
    businessFunction: Array<string>
    
    // language used for the free text.
    language: string
    
    // Indicates if it has been manually entered by an agent or system generated.
    source: string
    
    // Coded identification of the character encoding used in the interchange
    encoding: string
    
}

export interface MiscellaneousRemarkType1Attributes {
    
}

// To convey monetary amounts and rates
export interface MonetaryInformationTypeI5 {
    
    $attributes: MonetaryInformationTypeI5Attributes
    
    // This composite is used to convey the saving amount.
    monetaryDetails: MonetaryInformationDetailsTypeI_276581C
    
}

export interface MonetaryInformationTypeI5Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI_276581C {
    
    $attributes: MonetaryInformationDetailsTypeI_276581CAttributes
    
    // This data element is used to indicate the amount is a saving amount (value SAV).
    typeQualifier: string
    
    // This data element is used to convey the saving amount.
    amount: number
    
    // This data element is used to convey the currency associated to the saving amount.
    currency: string
    
}

export interface MonetaryInformationDetailsTypeI_276581CAttributes {
    
}


export interface globalPriceInformationType {
    
    $attributes: globalPriceInformationTypeAttributes
    
    // This segment is used to convey the total price (Before Tax/After Tax)
    globalPrice: TariffInformationTypeI1
    
    // This segment is used to convey the Total Amount of Tax.
    totalTax: Array<MonetaryInformationTypeI5>
    
}

export interface globalPriceInformationTypeAttributes {
    
}

// To specify tariff details relating to a service or product.
export interface TariffInformationTypeI1 {
    
    $attributes: TariffInformationTypeI1Attributes
    
    // This composite is used to convey the tariff information
    tariffInfo: TariffInformationDetailsTypeI1
    
    // This composite is used to convey all the extra charge information.
    chargeDetails: Array<AssociatedChargesInformationTypeI1>
    
}

export interface TariffInformationTypeI1Attributes {
    
}

// To identify the rates or tariff details.
export interface TariffInformationDetailsTypeI1 {
    
    $attributes: TariffInformationDetailsTypeI1Attributes
    
    // This field is used to convey the amount excluding tax. This field is mutually mandatory with totalAmount.
    amount: Array<number>
    
    // This field is used to convey the currency
    currency: string
    
    // Rate DLY or TTL indicator DY for Daily 3 for Total
    dailyTotalIndicator: string
    
    
    status: Array<string>
    
    // This data element is used to specify the fact that a rate change occurs during the period of the stay. If there is a change the value is * .
    rateChangeIndicator: Array<string>
    
    // This field is used to convey the total amount included tax. It is mutually mandatory with amount.
    totalAmount: Array<number>
    
}

export interface TariffInformationDetailsTypeI1Attributes {
    
}

// Identification of the additional charges that are associated to a product or service.
export interface AssociatedChargesInformationTypeI1 {
    
    $attributes: AssociatedChargesInformationTypeI1Attributes
    
    
    type: Array<string>
    
    // This data element is used to convey the amount of the supplementary charge.
    amount: Array<number>
    
    
    description: Array<string>
    
    // This data element is used to convey the currency
    currency: Array<string>
    
}

export interface AssociatedChargesInformationTypeI1Attributes {
    
}


export interface representativePartiesType1 {
    
    $attributes: representativePartiesType1Attributes
    
    // This segment contains either: -the booking holder tattoo -the group tattoo -All the occupants (except non-pax children)
    occupantList: ReferenceInformationType_64689S1
    
    // This segment conveys the age of the person
    age: Array<QuantityTypeI_58716S>
    
    // This segment conveys the guest email address
    guestContactInfo: Array<PhoneAndEmailAddressType1>
    
    // This composite contains details on user preferences : _ Language code
    occupantPreferences: Array<UserPreferencesType_198736S>
    
    // This segment conveys the gender of the guest and document information related to a traveller.
    occupantPersonalInformation: Array<PassengerApiInformationType1>
    
    // This entry is used to convey the address of the occupant
    occupantAddress: Array<AddressType4>
    
    // Contains - profile type/ID - Secondary roles (partner/intermediary/booker) associated to the person/account of given profile ID - Profile Name(s) if not provided in PXR or Guest name on utf8
    profileInfo: Array<profileInfoType1>
    
}

export interface representativePartiesType1Attributes {
    
}

// Used to convey the passenger references.
export interface ReferenceInformationType_64689S1 {
    
    $attributes: ReferenceInformationType_64689S1Attributes
    
    // Used to convey the passenger tatoo or display number.
    passengerReference: Array<ReferencingDetailsTypeI1>
    
}

export interface ReferenceInformationType_64689S1Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI1 {
    
    $attributes: ReferencingDetailsTypeI1Attributes
    
    // will sotre the type of the Id NOX or CVV
    type: string
    
    // value of the id
    value: string
    
}

export interface ReferencingDetailsTypeI1Attributes {
    
}

// To specify a pertinent quantity.
export interface QuantityTypeI_58716S {
    
    $attributes: QuantityTypeI_58716SAttributes
    
    // This composite is used to convey the quantity details
    quantityDetails: QuantityDetailsTypeI_93773C
    
}

export interface QuantityTypeI_58716SAttributes {
    
}

// Quantity information in a transaction, qualified when relevant.
export interface QuantityDetailsTypeI_93773C {
    
    $attributes: QuantityDetailsTypeI_93773CAttributes
    
    // A for age
    qualifier: string
    
    // Age = number of years(default) or monthes.
    value: number
    
}

export interface QuantityDetailsTypeI_93773CAttributes {
    
}

// To specify a phone or email address
export interface PhoneAndEmailAddressType1 {
    
    $attributes: PhoneAndEmailAddressType1Attributes
    
    // Fax contact
    phoneOrEmailType: string
    
    // Structured telephone or fax number
    telephoneNumberDetails: Array<StructuredTelephoneNumberType1>
    
    // Email address
    emailAddress: Array<string>
    
}

export interface PhoneAndEmailAddressType1Attributes {
    
}

// Convey structured phone information
export interface StructuredTelephoneNumberType1 {
    
    $attributes: StructuredTelephoneNumberType1Attributes
    
    // FAX number
    telephoneNumber: string
    
}

export interface StructuredTelephoneNumberType1Attributes {
    
}

// Used to specify country, currency and language
export interface UserPreferencesType_198736S {
    
    $attributes: UserPreferencesType_198736SAttributes
    
    // This composite contains details on user preferences : _ Country code _ Language code _ Currency code
    occupantPreferences: Array<OriginatorDetailsTypeI_276580C>
    
}

export interface UserPreferencesType_198736SAttributes {
    
}

// Characteristics of the originator of a request.
export interface OriginatorDetailsTypeI_276580C {
    
    $attributes: OriginatorDetailsTypeI_276580CAttributes
    
    // This is segment is used to convey the information regarding the preffered Langauage for the traveller.
    occupantLanguage: Array<string>
    
}

export interface OriginatorDetailsTypeI_276580CAttributes {
    
}

// To specify an address
export interface AddressType4 {
    
    $attributes: AddressType4Attributes
    
    // Country code
    countryCode: Array<string>
    
}

export interface AddressType4Attributes {
    
}


export interface profileInfoType1 {
    
    $attributes: profileInfoType1Attributes
    
    // This segement contains the secondary roles that are not associated to a PAX in PNR. This segment contains a repeatable identify number element. This identify number can take the following values: - B: Booker - I: Intermediary - P: Partner
    secondaryRoleList: RoleType1
    
    // Conveys profile type (guest/account) and profile ID
    profileTypeAndID: ReferenceInfoType_74068S1
    
    // This segment conains the booker name(s) when he/she is a person that is not occupant and has an associated profile. It can contain also the name(s) on utf8 of a guest (in order to complete the names on ascii in pnr).
    bookerName: Array<TravellerInformationTypeU1>
    
    // account name To be filled when account (company, TA, etc.) with a profile ID has a stakeholder role in the reservation (booker/intermediary/partner).
    accountName: Array<NameTypeU1>
    
}

export interface profileInfoType1Attributes {
    
}

// provides the main Information about a Role Type
export interface RoleType1 {
    
    $attributes: RoleType1Attributes
    
    // provides the Identifier for the Sub Roles: Intermediary, Booker, Partner
    subRoleIds: Array<string>
    
}

export interface RoleType1Attributes {
    
}

// Conveys Profile ID and Type
export interface ReferenceInfoType_74068S1 {
    
    $attributes: ReferenceInfoType_74068S1Attributes
    
    // conveys the tattoo of the booking concerned by the action of the message
    referenceDetails: Array<ReferencingDetailsTypeI_114661C1>
    
}

export interface ReferenceInfoType_74068S1Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_114661C1 {
    
    $attributes: ReferencingDetailsTypeI_114661C1Attributes
    
    // type of the profile: &#39;30&#39; for account profile type &#39;31&#39; for guest profile type
    type: string
    
    // Conveys the Profile ID
    value: string
    
}

export interface ReferencingDetailsTypeI_114661C1Attributes {
    
}

// To specify traveller(s) and personal details.
export interface TravellerInformationTypeU1 {
    
    $attributes: TravellerInformationTypeU1Attributes
    
    // TRAVELLER SURNAME AND RELATED INFORMATION
    travellerInformation: TravellerSurnameAndRelatedInformationTypeU1
    
    // TRAVELLER DETAILS
    travellerDetails: Array<TravellerDetailsTypeU1>
    
}

export interface TravellerInformationTypeU1Attributes {
    
}


export interface TravellerSurnameAndRelatedInformationTypeU1 {
    
    $attributes: TravellerSurnameAndRelatedInformationTypeU1Attributes
    
    // Family name of the traveller
    surname: string
    
    // Nb of travellers in this TIF Must be 1.
    quantity: Array<number>
    
}

export interface TravellerSurnameAndRelatedInformationTypeU1Attributes {
    
}


export interface TravellerDetailsTypeU1 {
    
    $attributes: TravellerDetailsTypeU1Attributes
    
    // First name of the traveller
    givenName: Array<string>
    
    // Title of the traveller
    title: Array<string>
    
}

export interface TravellerDetailsTypeU1Attributes {
    
}

// To identify the name of a person or entity.
export interface NameTypeU1 {
    
    $attributes: NameTypeU1Attributes
    
    // name Information
    nameInformation: Array<NameInformationTypeU1>
    
}

export interface NameTypeU1Attributes {
    
}

// NAME INFORMATION
export interface NameInformationTypeU1 {
    
    $attributes: NameInformationTypeU1Attributes
    
    // party Qualifier
    qualifier: string
    
    // party Name
    name: string
    
}

export interface NameInformationTypeU1Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_198731S {
    
    $attributes: CodedAttributeType_198731SAttributes
    
    // provides the function of the attribute
    attributeFunction: Array<string>
    
    // provides details for the Attribute
    attributeDetails: Array<CodedAttributeInformationType_276575C>
    
}

export interface CodedAttributeType_198731SAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_276575C {
    
    $attributes: CodedAttributeInformationType_276575CAttributes
    
    // provides the attribute Type
    attributeType: string
    
    // provides a description for the attribute
    attributeDescription: Array<string>
    
    
    language: Array<string>
    
    
    encoding: Array<string>
    
    
    source: Array<string>
    
}

export interface CodedAttributeInformationType_276575CAttributes {
    
}


export interface roomListInfoType {
    
    $attributes: roomListInfoTypeAttributes
    
    // The index of the room stay. (is used as well in case of Individual Booking)
    roomStayIndex: SequenceDetailsTypeU3
    
    // Conveys the PNR tattoo of: - the booking for single room commit - All the roomStay in case of Group Booking. (is used as well in case of Individual Booking)
    tattooReference: Array<ReferenceInfoType5>
    
    // Conveys the marketing lines (type = ML) and the rate description (type = DES). (is used as well in case of Individual Booking, but just for marketing lines)
    markLinesAndRateDesc: Array<InteractiveFreeTextTypeU1>
    
    // Conveys the advance booking restrictions.
    advanceBookingResrictions: Array<advanceBookingResrictionsType>
    
    // Conveys the check in and check out rules.
    checkInOutRules: Array<checkInOutRulesType>
    
    // conveys the commission information
    commissionAndMarkup: Array<commissionAndMarkupType>
    
    // Conveys the cancellation policies.
    cancellationPolicies: Array<cancellationPoliciesType>
    
    // Convey the hotel promotions (discount/surcharge)
    hotelPromotions: Array<HotelTaxesServiceChargesFeesType_198735S>
    
    // convey the response information that are requestable. (is used as well in case of Individual Booking)
    requestableInformation: requestableInformationType
    
    // Conveys the stay booking restriction. - one instance for minStay info (struct or desc) - one instance for maxStay info (struct or desc) - one instance for commonStay info (desc)
    stayBookingRestriction: Array<stayBookingRestrictionType>
    
    // Conveys the tax information
    taxes: Array<taxesType>
    
    // Conveys the rates.
    rateChanges: Array<rateChangesType1>
    
}

export interface roomListInfoTypeAttributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType5 {
    
    $attributes: ReferenceInfoType5Attributes
    
    // conveys the tattoo of the booking concerned by the action of the message
    referenceDetails: ReferencingDetailsTypeI_49038C
    
}

export interface ReferenceInfoType5Attributes {
    
}


export interface advanceBookingResrictionsType {
    
    $attributes: advanceBookingResrictionsTypeAttributes
    
    // Conveys the min and max lead time. If not structured data, used as marker (empty)
    leadTime: RuleInformationTypeU_69073S
    
    // Conveys the lead time description (type = ADV)
    leadTimeDescription: Array<InteractiveFreeTextTypeU1>
    
}

export interface advanceBookingResrictionsTypeAttributes {
    
}

// To specify rule for advance booking restriction
export interface RuleInformationTypeU_69073S {
    
    $attributes: RuleInformationTypeU_69073SAttributes
    
    // This composite is used to convey the rules details.
    ruleDetails: Array<RuleDetailsTypeU>
    
}

export interface RuleInformationTypeU_69073SAttributes {
    
}

// To indicate the coded rule, a number and it&#39;s relation to the rule, a start day of service, a monetary amount associated to the rule, and additional information associated with the rule
export interface RuleDetailsTypeU {
    
    $attributes: RuleDetailsTypeUAttributes
    
    // This data element is used to identify the type of rule (see data mapping).
    type: string
    
    // This data element is used to convey the rule quantity, express in the unit defined in the data element 6353
    quantity: Array<number>
    
    // This data element is used to specify the unit used to express the quantity.
    quantityUnit: Array<string>
    
}

export interface RuleDetailsTypeUAttributes {
    
}


export interface checkInOutRulesType {
    
    $attributes: checkInOutRulesTypeAttributes
    
    // This segment is used to convey structured check-in / check-out information Use only as marker is no structured info available.
    checkInOutTimeAndExpressInfo: HotelCheckInCheckOutInformationType
    
    // conveys the descriptions about : CheckIn and/or checkOut (type = CHK) CheckIn (type = CHI) CheckOut (type = CHO)
    checkInOutDescription: Array<InteractiveFreeTextTypeU1>
    
}

export interface checkInOutRulesTypeAttributes {
    
}

// This segment is designed to convey the information relative to the check-in ckeck-out information
export interface HotelCheckInCheckOutInformationType {
    
    $attributes: HotelCheckInCheckOutInformationTypeAttributes
    
    // This indicator is net to Y when Express check-In is allowed
    expressCheckIn: string
    
    // This indicator is net to Y when Express check-out is allowed
    expressCheckOut: string
    
    // Indicate if the time is expressed in local time mode
    timeMode: Array<string>
    
    // This composite is used to convey the earliest time to perform the check-in.
    checkInTimeLimitation: Array<StructuredDateTimeType_55592C>
    
    // This composite is used to convey the latest time to perform the check-out.
    checkOutTimeLimitation: Array<StructuredDateTimeType_55592C>
    
}

export interface HotelCheckInCheckOutInformationTypeAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_55592C {
    
    $attributes: StructuredDateTimeType_55592CAttributes
    
    // Hour between 0 and 23
    hour: number
    
    // Minutes between 0 and 59
    minutes: number
    
}

export interface StructuredDateTimeType_55592CAttributes {
    
}


export interface commissionAndMarkupType {
    
    $attributes: commissionAndMarkupTypeAttributes
    
    // This segment is used to convey the commission information
    commissionInfo: CommissionInformationType
    
    // conveys the commission description(type = COM)
    commissionDescription: Array<InteractiveFreeTextTypeU1>
    
    // This segment conveys information concerning the commission/markup indicator.
    markupIndicator: Array<StatusTypeI_77998S>
    
}

export interface commissionAndMarkupTypeAttributes {
    
}


export interface cancellationPoliciesType {
    
    $attributes: cancellationPoliciesTypeAttributes
    
    // This segment is used to convey the latest date/time to cancel to avoid the linked cancellation fee.
    cancellationDateTime: StructuredDateTimeInformationType
    
    // This segment is used to convey the amount or the percentage of the cancellation/modification fee: - if currency, coded = PCT, then the amount is a percentage of the full reservation, else it&#39; s the currency.
    fee: Array<MonetaryInformationTypeI_81173S>
    
    // This segment is used to indicate the number of nights that will be charged in case of late cancellation
    cancellationNights: Array<QuantityTypeI1>
    
    // conveys the commission description (type = CXL)
    cancelationPolicyDescription: Array<InteractiveFreeTextTypeU1>
    
}

export interface cancellationPoliciesTypeAttributes {
    
}

// Hotel Promotions
export interface HotelTaxesServiceChargesFeesType_198735S {
    
    $attributes: HotelTaxesServiceChargesFeesType_198735SAttributes
    
    // This data element is used to convey the category of the tax,fee...
    category: string
    
    // Predefined name of the Tax or Fee
    code: string
    
    // amount
    amount: number
    
    // ISO Currency code
    currencyCode: Array<string>
    
    // Long name of the Tax or Fee
    longName: Array<string>
    
    // This composite is used to convey the information relative to the long name of the tax
    longNameDetails: Array<FreeTextDetailsType_276569C>
    
    
    freeText: Array<string>
    
}

export interface HotelTaxesServiceChargesFeesType_198735SAttributes {
    
}


export interface FreeTextDetailsType_276569C {
    
    $attributes: FreeTextDetailsType_276569CAttributes
    
    // Text qualifier
    textSubjectQualifier: string
    
    // This field is used to convey the type of information that can be carried in this segment
    informationType: string
    
    // This data element is used to convey the language code for the free text
    language: Array<string>
    
    // This data element is used to convey the type of source from which the free text was extracted: - M for manual typing - S for extracted from a system (Database...)
    source: string
    
    // This data element is used to convey the character set. (It should be ASCII 7 bits)
    encoding: string
    
}

export interface FreeTextDetailsType_276569CAttributes {
    
}


export interface requestableInformationType {
    
    $attributes: requestableInformationTypeAttributes
    
    // This segment is used to convey the dates of the roomstay (is used as well in case of Individual Booking)
    requestedDates: StructuredPeriodInformationType_58687S
    
    // Spare for two-level tree of key values: List of key1, [list of [key2, value]]
    keyValueTree: Array<CodedAttributeType_198731S>
    
    // This segment is used to specify the structured special requests.
    structuredSpecialRequest: Array<AttributeType5>
    
    // This segment is used to specify the mode of the booking WL - Waitlist (room level) TT - Tentative (room level) (is used as well in case of Individual Booking)
    bookingIndicator: Array<StatusType_74091S>
    
    // Used to convey the stay link index of the roomstay.
    stayLink: Array<SequenceDetailsTypeU3>
    
    // It conveys a list where to specify the diferent psysical rooms the room booking can have during the time (period - room number) (is used as well in case of Individual Booking) Note: It is just used for hosted chains and it has been created for PMS (FrontRes)
    roomAssignmentList: Array<roomAssignmentListType>
    
    // This group is used to convey the room /rate details. (is used as well in case of Individual Booking)
    roomRateDetails: roomRateDetailsType1
    
    // This segment is used to convey the customer reference number (is used as well in case of Individual Booking)
    customerInfo: Array<ConsumerReferenceInformationTypeI1>
    
    // This segment is used to convey the frequent traveler number For non-standard FT, let the carrier empty. (is used as well in case of Individual Booking)
    frequentTravellerInfo: Array<FrequentTravellerIdentificationCodeType5>
    
    // This group is used for the guarantee or deposit (is used as well in case of Individual Booking)
    guaranteeOrDeposit: Array<guaranteeOrDepositType1>
    
    // This segment is used to convey the supplementary info (/SI) attached to the roomstay
    supplementaryInfo: Array<MiscellaneousRemarksType1>
    
    // List of guests of the room The role of the guest is stored into the PXR. The PXR can remain empty to convey the age of children (non pax) occupant of the room. In case of response, contains only the children (mirrored from request) (is used as well in case of Individual Booking)
    guestList: Array<guestListType1>
    
}

export interface requestableInformationTypeAttributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType_58687S {
    
    $attributes: StructuredPeriodInformationType_58687SAttributes
    
    // This data element can be used to provide the semantic of the information provided.
    businessSemantic: string
    
    // Indicate the time is expressed in local time mode.
    timeMode: string
    
    // Convey the begin date/time of a period.
    beginDateTime: StructuredDateTimeType3
    
    // Convey the end date/time of a period.
    endDateTime: StructuredDateTimeType3
    
}

export interface StructuredPeriodInformationType_58687SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType3 {
    
    $attributes: StructuredDateTimeType3Attributes
    
    // Year number.
    year: number
    
    // Month number in the year ( begins to 1 )
    month: number
    
    // Day number in the month ( begins to 1 )
    day: number
    
}

export interface StructuredDateTimeType3Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType5 {
    
    $attributes: AttributeType5Attributes
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU3>
    
}

export interface AttributeType5Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU3 {
    
    $attributes: AttributeInformationTypeU3Attributes
    
    // structured special request code
    attributeType: string
    
}

export interface AttributeInformationTypeU3Attributes {
    
}


export interface roomAssignmentListType {
    
    $attributes: roomAssignmentListTypeAttributes
    
    // beginDate/endDate of the room number assignment
    roomAssignmentPeriod: StructuredPeriodInformationType3
    
    // room number
    roomNumber: ReferenceInfoType_74887S
    
}

export interface roomAssignmentListTypeAttributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType3 {
    
    $attributes: StructuredPeriodInformationType3Attributes
    
    // This data element can be used to provide the semantic of the information provided.
    businessSemantic: string
    
    // Convey the begin date/time of a period.
    beginDateTime: StructuredDateTimeType3
    
    // Convey the end date/time of a period.
    endDateTime: StructuredDateTimeType3
    
}

export interface StructuredPeriodInformationType3Attributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_74887S {
    
    $attributes: ReferenceInfoType_74887SAttributes
    
    // REFERENCING DETAILS
    referenceDetails: ReferencingDetailsTypeI_112927C
    
}

export interface ReferenceInfoType_74887SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_112927C {
    
    $attributes: ReferencingDetailsTypeI_112927CAttributes
    
    // will sotre the type of the Id NOX or CVV
    type: string
    
    // value of the id
    value: string
    
}

export interface ReferencingDetailsTypeI_112927CAttributes {
    
}


export interface roomRateDetailsType1 {
    
    $attributes: roomRateDetailsType1Attributes
    
    // This segment is used to convey the room information. (is used as well in case of Individual Booking)
    roomInformation: HotelRoomType1
    
    // This segment is used to convey all the information relative to non standard Booking Code, Rate Code, Room Type and Hold Id (Specific for hotel Store)
    specialInfo: Array<FreeTextInformationType_81979S>
    
    // This group convey the booking requirement : G/DP/holdtime + accepted form / value. (is used as well in case of Individual Booking)
    bookingRequirement: Array<bookingRequirementType>
    
    // Overrides the room price: room price can be overridden with different values for different date ranges of the stay.
    roomRateOverride: Array<roomRateOverrideType>
    
    // This group conveys the extras. When used in response, these extras can be requestable or not.
    chargeAndExtras: Array<chargeAndExtrasType1>
    
    // Mark the end of group Extra
    markerOfExtra: DummySegmentTypeI3
    
    // This segment is used to convey the tariff of the room stay. (is used as well in case of Individual Booking)
    tariffInformation: TariffInformationType1
    
    // This segment is used to convey the room rate description (from avail context)
    roomRateDescription: Array<FreeTextInformationType_198729S>
    
}

export interface roomRateDetailsType1Attributes {
    
}

// This segment is used to convey the hotel room information
export interface HotelRoomType1 {
    
    $attributes: HotelRoomType1Attributes
    
    // This composite is used to convey the room/ rate identifier.
    roomRateIdentifier: Array<HotelRoomRateInformationType>
    
    // This data element is used to convey the booking code.
    bookingCode: Array<string>
    
    // This composite is used to convey the occupancy level of the room.
    guestCountDetails: NumberOfUnitDetailsTypeI2
    
}

export interface HotelRoomType1Attributes {
    
}


export interface HotelRoomRateInformationType {
    
    $attributes: HotelRoomRateInformationTypeAttributes
    
    // This data element is used to convey the room type
    roomType: Array<string>
    
    // This data element is used to convey the hotel rate code
    ratePlanCode: Array<string>
    
}

export interface HotelRoomRateInformationTypeAttributes {
    
}

// Identification of number of units and its purpose.
export interface NumberOfUnitDetailsTypeI2 {
    
    $attributes: NumberOfUnitDetailsTypeI2Attributes
    
    // This data element is used to convey the occupancy level of the room
    numberOfUnit: number
    
    // This data element is used to indicate the occupancy is the number of Adults in the room.
    unitQualifier: string
    
}

export interface NumberOfUnitDetailsTypeI2Attributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_81979S {
    
    $attributes: FreeTextInformationType_81979SAttributes
    
    
    freeTextDetails: FreeTextDetailsType3
    
    // Free text and message sequence numbers of the remarks.
    freeText: string
    
}

export interface FreeTextInformationType_81979SAttributes {
    
}


export interface FreeTextDetailsType3 {
    
    $attributes: FreeTextDetailsType3Attributes
    
    
    textSubjectQualifier: string
    
    
    informationType: string
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType3Attributes {
    
}


export interface bookingRequirementType {
    
    $attributes: bookingRequirementTypeAttributes
    
    // This segment is used to convey one of the following indicators : - Guarantee required - Deposit required Use as marker with status Unkown if the booking requirement is only the holdTime (is used as well in case of Individual Booking)
    guaranteeDepositStatusInfo: StatusTypeI1
    
    // Details of guarantee/deposit rule : - amount - amount override indicator - deadline - deadline override indicator (is used as well in case of Individual Booking)
    guaranteeDepositRule: Array<TariffInformationType_198744S>
    
    // This segment is used to convey the Hold Time information, that is a number of hours. (is used as well in case of Individual Booking)
    holdTime: Array<RuleInformationTypeU>
    
    // This segment is used to convey the form of payment authorized for guarantee or deposit. Up to 9 are supported (cf codeset).
    paymentInformation: Array<PaymentInformationTypeI1>
    
    // This segment is used to convey the credit card information. Up to 20 different credit card types are supported.
    creditCardInformation: Array<FormOfPaymentTypeI2>
    
    // conveys the descriptions about the booking restriction (type = BOO)
    bookingRestrictionDescriptions: Array<InteractiveFreeTextTypeU1>
    
    // Mark the end of group bookingRequirement
    markerOfBookingRequirement: DummySegmentTypeI3
    
}

export interface bookingRequirementTypeAttributes {
    
}

// To identify a status and related information.
export interface StatusTypeI1 {
    
    $attributes: StatusTypeI1Attributes
    
    // This composite is used to convey the rate status details.
    statusDetails: StatusDetailsTypeI1
    
}

export interface StatusTypeI1Attributes {
    
}

// To specify tariff details relating to a service or product
export interface TariffInformationType_198744S {
    
    $attributes: TariffInformationType_198744SAttributes
    
    // This composite is used for the Rate information
    tariffInfo: TariffInformationDetailsTypeU_276589C
    
    // This composite is used for Associated charges
    associatedCharges: Array<AssociatedChargesInformationTypeU>
    
}

export interface TariffInformationType_198744SAttributes {
    
}

// Tariff information
export interface TariffInformationDetailsTypeU_276589C {
    
    $attributes: TariffInformationDetailsTypeU_276589CAttributes
    
    
    amount: Array<number>
    
    
    currency: Array<string>
    
    // Deadline of deposit/guarantee rule Format YYYYMMDD
    deadlineDate: Array<number>
    
    // Deadline of deposit/guarantee rule Format HHMMSS
    deadlineTime: Array<number>
    
    // Amount/deadline of the deposit rule can be overridden. AO - amount override DO - deadline override
    overrideIndicator: Array<string>
    
}

export interface TariffInformationDetailsTypeU_276589CAttributes {
    
}

// Associated charges information
export interface AssociatedChargesInformationTypeU {
    
    $attributes: AssociatedChargesInformationTypeUAttributes
    
    // GR.1/TFF (RESRSP) or GR.2/TFF (RESREQ): Associated charge type: 4 for Extra Adult (/EX-) 5 for Rollaway Adult (/RA-) 6 for Crib (/CR-) 12 for Rollaway Child (/RC-) Amadeus codes. AP for American Plan (/AP-) FA for Family American Plan (/FA-) FM for Family modified American Plan (/FM-) MA for Modified American Plan (/MA-) Level 1/TFF: Not Used
    chargeCode: Array<string>
    
    // GR.1/TFF (RESRSP) or GR.2/TFF (RESREQ): Associated charge amount Level 1/TFF: Not Used
    chargeAmount: Array<number>
    
    // Not Used
    description: Array<string>
    
    // GR.1/TFF (RESRSP) or GR.2/TFF (RESREQ): Associated charge currency Level 1/TFF: Not Used
    chargeCurrency: Array<string>
    
}

export interface AssociatedChargesInformationTypeUAttributes {
    
}

// To specify rule information and rule status.
export interface RuleInformationTypeU {
    
    $attributes: RuleInformationTypeUAttributes
    
    // This composite is used to convey the rules details.
    ruleDetails: RuleDetailsTypeU_93763C
    
}

export interface RuleInformationTypeUAttributes {
    
}

// To indicate the coded rule, a number and it&#39;s relation to the rule, a start day of service, a monetary amount associated to the rule, and additional information associated with the rule
export interface RuleDetailsTypeU_93763C {
    
    $attributes: RuleDetailsTypeU_93763CAttributes
    
    // This data element is used to identify the type of rule (see data mapping).
    type: string
    
    // This data element is used to convey the rule quantity, express in the unit defined in the data element 6353
    quantity: Array<number>
    
    // This data element is used to specify the unit used to express the quantity.
    quantityUnit: Array<string>
    
}

export interface RuleDetailsTypeU_93763CAttributes {
    
}

// To specify information concerning the payment.
export interface PaymentInformationTypeI1 {
    
    $attributes: PaymentInformationTypeI1Attributes
    
    // This composite is used to convey the payment information
    paymentDetails: PaymentDetailsTypeI_55586C
    
}

export interface PaymentInformationTypeI1Attributes {
    
}

// To identify the method, type, amount, currency and due date of payment.
export interface PaymentDetailsTypeI_55586C {
    
    $attributes: PaymentDetailsTypeI_55586CAttributes
    
    // To convey the guarantee /deposit form
    formOfPaymentCode: string
    
    // This data element is used to idicates if it is a guarantee or a deposit
    paymentType: string
    
    // This data element is used to identify the type of service to be paid, in our case it will always be 3 for hotel
    serviceToPay: string
    
}

export interface PaymentDetailsTypeI_55586CAttributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentTypeI2 {
    
    $attributes: FormOfPaymentTypeI2Attributes
    
    // form of payment: Credit card
    formOfPayment: FormOfPaymentDetailsTypeI2
    
}

export interface FormOfPaymentTypeI2Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsTypeI2 {
    
    $attributes: FormOfPaymentDetailsTypeI2Attributes
    
    // Type of form of payment
    type: string
    
    // Credit card vendor code
    vendorCode: string
    
}

export interface FormOfPaymentDetailsTypeI2Attributes {
    
}


export interface roomRateOverrideType {
    
    $attributes: roomRateOverrideTypeAttributes
    
    // beginDate/endDate of the room rate override
    rateOverridePeriod: StructuredPeriodInformationType3
    
    // amount of the room rate override
    rateOverrideAmountInformation: TariffInformationType_198745S
    
}

export interface roomRateOverrideTypeAttributes {
    
}

// To specify tariff details relating to a service or product
export interface TariffInformationType_198745S {
    
    $attributes: TariffInformationType_198745SAttributes
    
    // This composite is used for the Rate information
    tariffInfo: TariffInformationDetailsTypeU_276591C
    
    // This composite is used for Associated charges
    associatedCharges: Array<AssociatedChargesInformationTypeU>
    
}

export interface TariffInformationType_198745SAttributes {
    
}

// Tariff information
export interface TariffInformationDetailsTypeU_276591C {
    
    $attributes: TariffInformationDetailsTypeU_276591CAttributes
    
    // Rate amount
    amount: number
    
    
    currency: Array<string>
    
    // This data element is used to indicate if the amount of extra includes the tax or not. It is used in particular for &#34;room rate override&#34; input: tax included by default.
    includesTax: Array<string>
    
}

export interface TariffInformationDetailsTypeU_276591CAttributes {
    
}


export interface chargeAndExtrasType1 {
    
    $attributes: chargeAndExtrasType1Attributes
    
    // This segment is used to convey the extra information. use 5153 for distrib service codes use 5154 for CRS internal service codes
    taxFeeInformation: HotelTaxesServiceChargesFeesType1
    
    // uniquely identify an extra in the reservation. empty for add. always set for delete/modify.
    extraId: Array<ReferenceInfoType_80821S1>
    
    // This segment is used to convey the dates of validity of the Hotel tax, surcharge, Fee, service information.
    taxFeeValidity: Array<StructuredPeriodInformationType3>
    
    // Conveys the rates.
    rateChanges: Array<rateChangesType1>
    
    // conveys the descriptions about the extra : Extra (type = EXT ) Meal (type = MEA)
    taxDescriptions: Array<InteractiveFreeTextTypeU1>
    
    // This segment is used to specify the diverse status of extra. EXO - Extra price override
    extraStatus: Array<StatusType_74091S>
    
}

export interface chargeAndExtrasType1Attributes {
    
}

// hotel taxes, service charges and fees
export interface HotelTaxesServiceChargesFeesType1 {
    
    $attributes: HotelTaxesServiceChargesFeesType1Attributes
    
    // This data element is used to idicate if the Tax or fee is included in the base amount
    includedInAmount: string
    
    // This data element is used to indicate if the amount of extra includes the tax or not. It is used in particular for &#34;extra rate override&#34; input: tax included by default.
    includesTax: Array<string>
    
    // This tag indicate if the tax or fee is per person or not
    perPerson: string
    
    // This data element is used to know if the tax or fee applies per stay, per period or per night.
    timeUnit: Array<string>
    
    // This data element is used to convey the category of the tax,fee...
    category: Array<string>
    
    // Predefined name of the Tax or Fee
    code: Array<string>
    
    // amount
    amount: Array<number>
    
    // ISO Currency code
    currencyCode: Array<string>
    
    // percentage
    percentage: Array<number>
    
    // Associated charge quantity
    chargeQuantity: Array<number>
    
    // Long name of the Tax or Fee
    longName: Array<string>
    
    // This composite is used to convey the information relative to the long name of the tax
    longNameDetails: Array<FreeTextDetailsType_276569C>
    
    // to Convey CRS internal code
    crsInternalCode: Array<string>
    
}

export interface HotelTaxesServiceChargesFeesType1Attributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_80821S1 {
    
    $attributes: ReferenceInfoType_80821S1Attributes
    
    // Conveys the identifier of the extra associated to the booking
    referenceDetails: ReferencingDetailsTypeI_123751C1
    
}

export interface ReferenceInfoType_80821S1Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_123751C1 {
    
    $attributes: ReferencingDetailsTypeI_123751C1Attributes
    
    // type of the value: &#39;EID&#39; for Extra ID
    type: string
    
    // Value
    value: number
    
}

export interface ReferencingDetailsTypeI_123751C1Attributes {
    
}


export interface rateChangesType1 {
    
    $attributes: rateChangesType1Attributes
    
    // This segment is used to convey the amount when a rate change occurs.
    rateChangeAmountInformation: TariffInformationType_198747S
    
    // This segment is used to convey the period when a rate change occurs
    rateChangePeriodInformation: Array<StructuredPeriodInformationType3>
    
    // This segment is used to convey a comment when a rate change occurs
    rateChangeText: Array<FreeTextInformationType_31910S1>
    
}

export interface rateChangesType1Attributes {
    
}

// To specify tariff details relating to a service or product
export interface TariffInformationType_198747S {
    
    $attributes: TariffInformationType_198747SAttributes
    
    // This composite is used for the Rate information
    tariffInfo: Array<TariffInformationDetailsTypeU_276595C>
    
    // This composite is used for Associated charges
    associatedCharges: Array<AssociatedChargesInformationTypeU>
    
}

export interface TariffInformationType_198747SAttributes {
    
}

// Tariff information
export interface TariffInformationDetailsTypeU_276595C {
    
    $attributes: TariffInformationDetailsTypeU_276595CAttributes
    
    // Rate amount
    amount: number
    
    
    currency: Array<string>
    
    // Rate DLY or TTL indicator DY for Daily 3 for Total
    dailyTotalIndicator: Array<string>
    
    
    status: Array<string>
    
    // GR.1/TFF (RESRSP) or GR.2/TFF (RESREQ): Rate change indicator 3 for Price change Level 1/TFF: Not Used
    rateChangeIndicator: Array<string>
    
    // This data element is used to indicate if the amount includes the tax or not. It is used in particular for &#34;room rate override&#34; input: tax included by default.
    includesTax: Array<string>
    
}

export interface TariffInformationDetailsTypeU_276595CAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_31910S1 {
    
    $attributes: FreeTextInformationType_31910S1Attributes
    
    // This composite is used to convey all the free text information
    freeTextDetails: FreeTextDetailsType3
    
    // Free text and message sequence numbers of the remarks.
    freeText: string
    
}

export interface FreeTextInformationType_31910S1Attributes {
    
}

// To specify tariff details relating to a service or product
export interface TariffInformationType1 {
    
    $attributes: TariffInformationType1Attributes
    
    // This composite is used for the Rate information
    tariffInfo: Array<TariffInformationDetailsTypeU1>
    
    // This composite is used for Associated charges
    associatedCharges: Array<AssociatedChargesInformationTypeU>
    
}

export interface TariffInformationType1Attributes {
    
}

// Tariff information
export interface TariffInformationDetailsTypeU1 {
    
    $attributes: TariffInformationDetailsTypeU1Attributes
    
    // Rate amount
    amount: number
    
    
    currency: Array<string>
    
    // Rate DLY or TTL indicator DY for Daily 3 for Total
    dailyTotalIndicator: string
    
    
    status: Array<string>
    
    // GR.1/TFF (RESRSP) or GR.2/TFF (RESREQ): Rate change indicator 3 for Price change Level 1/TFF: Not Used
    rateChangeIndicator: Array<string>
    
}

export interface TariffInformationDetailsTypeU1Attributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_198729S {
    
    $attributes: FreeTextInformationType_198729SAttributes
    
    // This composite is used to convey all the free text information
    freeTextDetails: FreeTextDetailsType_276572C
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType_198729SAttributes {
    
}

// To specify consumer reference information.
export interface ConsumerReferenceInformationTypeI1 {
    
    $attributes: ConsumerReferenceInformationTypeI1Attributes
    
    // This composite is used to convey the different consumer numbers
    customerReferences: Array<ConsumerReferenceIdentificationTypeI3>
    
}

export interface ConsumerReferenceInformationTypeI1Attributes {
    
}

// Identification of consumer references by type, company, number and reference to a traveller.
export interface ConsumerReferenceIdentificationTypeI3 {
    
    $attributes: ConsumerReferenceIdentificationTypeI3Attributes
    
    // This data element is used to specify the kind of consumer reference that is passed in this segment.(see data mapping)
    referenceQualifier: string
    
    // This data element is used to convey the reference number
    referenceNumber: string
    
}

export interface ConsumerReferenceIdentificationTypeI3Attributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType5 {
    
    $attributes: FrequentTravellerIdentificationCodeType5Attributes
    
    // Frequent Traveller Info
    frequentTravellerDetails: FrequentTravellerIdentificationType5
    
}

export interface FrequentTravellerIdentificationCodeType5Attributes {
    
}


export interface FrequentTravellerIdentificationType5 {
    
    $attributes: FrequentTravellerIdentificationType5Attributes
    
    // Carrier where the FQTV is registered.
    carrier: Array<string>
    
    // Frequent Traveller Reference Number
    number: string
    
}

export interface FrequentTravellerIdentificationType5Attributes {
    
}


export interface guaranteeOrDepositType1 {
    
    $attributes: guaranteeOrDepositType1Attributes
    
    // This segment is used to convey the guarantee or deposit form of payment (is used as well in case of Individual Booking)
    paymentInfo: PaymentInformationTypeI_85688S
    
    // This segment is used to covey all the payment indicator: - Delayed or Immediate Payment
    paymentIndicator: Array<StatusType_85690S>
    
    // Conveys the Credit Card information (is used as well in case of Individual Booking)
    groupCreditCardInfo: Array<CreditCardDataGroupType1>
    
    
    groupBillbackData: Array<groupBillbackDataType1>
    
}

export interface guaranteeOrDepositType1Attributes {
    
}

// To specify information concerning the payment.
export interface PaymentInformationTypeI_85688S {
    
    $attributes: PaymentInformationTypeI_85688SAttributes
    
    // This composite is used to convey the payment information
    paymentDetails: PaymentDetailsTypeI1
    
}

export interface PaymentInformationTypeI_85688SAttributes {
    
}

// To identify the method, type, amount, currency and due date of payment.
export interface PaymentDetailsTypeI1 {
    
    $attributes: PaymentDetailsTypeI1Attributes
    
    // To convey the guarantee /deposit form
    formOfPaymentCode: string
    
    // This data element is used to idicates if it is a guarantee or a deposit
    paymentType: string
    
    // This data element is used to identify the type of service to be paid, in our case it will always be 3 for hotel
    serviceToPay: string
    
    // This data element is used to convey the guarantee or the deposit reference.
    referenceNumber: Array<string>
    
}

export interface PaymentDetailsTypeI1Attributes {
    
}

// To identify a status and related information.
export interface StatusType_85690S {
    
    $attributes: StatusType_85690SAttributes
    
    // This composite is used to convey the rate status details.
    statusDetails: Array<StatusDetailsTypeI1>
    
}

export interface StatusType_85690SAttributes {
    
}

// will convey all credit card data needed for payment
export interface CreditCardDataGroupType1 {
    
    $attributes: CreditCardDataGroupType1Attributes
    
    // Conveys the Credit Card information
    creditCardInfo: CreditCardDataType_80119S1
    
    // convey the concealed data of the credit card
    concealedCreditCardInfo: Array<CreditCardDataType1>
    
    // will convey both the CVV and the Credit card number Ids stored in the fortknox Database
    fortknoxIds: Array<ReferenceInfoType_68132S>
    
    // Contains card holder&#39;s address information.
    cardHolderAddress: Array<AddressType_79536S>
    
    // ccInCLearRequested: To use only in a request. If true, the application will return the CC in clear (from the FNox ID provided) in the response. ccTravelAgency: If true, the CC is a Travel Agent Credit Card.
    creditCardIndicator: Array<StatusTypeI_81973S>
    
}

export interface CreditCardDataGroupType1Attributes {
    
}

// specify credit card data for credit card authorization
export interface CreditCardDataType_80119S1 {
    
    $attributes: CreditCardDataType_80119S1Attributes
    
    // Credit Card information
    ccInfo: Array<CreditCardInformationType_123803C1>
    
}

export interface CreditCardDataType_80119S1Attributes {
    
}

// credit card info
export interface CreditCardInformationType_123803C1 {
    
    $attributes: CreditCardInformationType_123803C1Attributes
    
    // Vendor code (VI,CA,AX.)
    vendorCode: Array<string>
    
    // may contain CC sub Types. eg: Maestro or Solo cards
    vendorCodeSubType: Array<string>
    
    // Card number Card number
    cardNumber: Array<string>
    
    // Conveys the security ID of the Credit Card (CVV,CVV2), 3-4 digits stored on the back of the card
    securityId: Array<string>
    
    // Expiry date : format MMYY
    expiryDate: Array<string>
    
    // This field indicates the date the Credit Card was issued. This data is present in case of (UK) maestro cards.
    startDate: Array<string>
    
    // This field indicates the date the Credit Card will not be valid anymore This data is present in case of (UK) maestro cards. May be different from the expiry date
    endDate: Array<string>
    
    // Conveys Credit card holder&#39;s name, as written on the card.
    ccHolderName: Array<string>
    
    // will contain the code of the bank that issued the credit card
    issuingBankName: Array<string>
    
    // CC country of issuance details
    cardCountryOfIssuance: Array<string>
    
    // This is the Credit Card Issue number. This represents the number of time a card has been issued. 1 is for the first time then in case of card renewal or card loss this issue number will be increased Today this is applicable to maestro cards.
    issueNumber: Array<number>
    
    // Will convey the full name of the institution that issued he credit card
    issuingBankLongName: Array<string>
    
    // Stores the CC track 1 information (base64 encoded)
    track1: Array<string>
    
    // Stores the CC track 2 information (base64 encoded)
    track2: Array<string>
    
    // Stores the CC track 3 information (base64 encoded)
    track3: Array<string>
    
    // Stores the CC pin code information
    pinCode: Array<string>
    
    // All the tracks of a swipe credit card are contained here as one block.
    rawTrackData: Array<string>
    
    // This field is used to split the ccHolderName field in order to convey only the CC holder surname. e.g. : ccHolderName : Mr Jean DUPONT surname : DUPONT
    surname: Array<string>
    
    // This field is used to split the ccHolderName field in order to convey only the CC holder first name. e.g. : ccHolderName : Mr Jean DUPONT firstName : Jean
    firstName: Array<string>
    
    // This field is used to split the ccHolderName field in order to convey only the CC holder first name. e.g. : ccHolderName : Mr Jean DUPONT title : Mr
    title: Array<string>
    
}

export interface CreditCardInformationType_123803C1Attributes {
    
}

// convey the Concealled data of a Credit Card
export interface CreditCardDataType1 {
    
    $attributes: CreditCardDataType1Attributes
    
    // Credit Card information
    ccInfo: CreditCardInformationType1
    
}

export interface CreditCardDataType1Attributes {
    
}

// credit card info
export interface CreditCardInformationType1 {
    
    $attributes: CreditCardInformationType1Attributes
    
    // Card number Card number
    cardNumber: Array<string>
    
    // Conveys the security ID of the Credit Card (CVV,CVV2), 3-4 digits stored on the back of the card
    securityId: Array<string>
    
}

export interface CreditCardInformationType1Attributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_68132S {
    
    $attributes: ReferenceInfoType_68132SAttributes
    
    // REFERENCING DETAILS
    referenceDetails: ReferencingDetailsTypeI1
    
}

export interface ReferenceInfoType_68132SAttributes {
    
}

// To specify an address
export interface AddressType_79536S {
    
    $attributes: AddressType_79536SAttributes
    
    // will convey the adress text
    addressDetails: Array<AddressDetailsTypeU1>
    
    // City name.
    city: Array<string>
    
    // postal identification code.
    zipCode: Array<string>
    
    // Country name.
    country: Array<string>
    
    // To convey a sub-entity within a country : region, states..
    regionDetails: Array<CountrySubEntityDetailsTypeU1>
    
    
    locationDetails: Array<LocationIdentificationTypeU1>
    
}

export interface AddressType_79536SAttributes {
    
}

// To specify the details of an address.
export interface AddressDetailsTypeU1 {
    
    $attributes: AddressDetailsTypeU1Attributes
    
    // Address Text. Any of the following address lines may start with a tag: Street- ExternalNumber- InternalNumber- County- Neighbourhood- State-
    line1: string
    
    
    line2: Array<string>
    
    
    line3: Array<string>
    
    
    line4: Array<string>
    
    
    line5: Array<string>
    
}

export interface AddressDetailsTypeU1Attributes {
    
}

// To specify a part of a country (eg county or part of a city).
export interface CountrySubEntityDetailsTypeU1 {
    
    $attributes: CountrySubEntityDetailsTypeU1Attributes
    
    // State or province name (eg. Texas).
    state: Array<string>
    
}

export interface CountrySubEntityDetailsTypeU1Attributes {
    
}

// Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name
export interface LocationIdentificationTypeU1 {
    
    $attributes: LocationIdentificationTypeU1Attributes
    
    // County or region name (eg. Fairfax).
    county: Array<string>
    
}

export interface LocationIdentificationTypeU1Attributes {
    
}

// To identify a status and related information.
export interface StatusTypeI_81973S {
    
    $attributes: StatusTypeI_81973SAttributes
    
    // 0 ccInClearRequested 1 ccTravelAgent
    statusDetails: Array<StatusDetailsTypeI_120121C>
    
}

export interface StatusTypeI_81973SAttributes {
    
}


export interface groupBillbackDataType1 {
    
    $attributes: groupBillbackDataType1Attributes
    
    // Conveys the external payment server information
    providerInformation: CompanyInformationType1
    
    // Conveys Payment Record ID (used by Payment Manager) to identify payment in a unique manner. May convey also a &#34;correlator Id&#34; used by the calling application to reconciliate its payment data.
    deploymentId: Array<ItemReferencesAndVersionsType_120945S>
    
    // Convey the identification used by the travel agent to perform the booking Supported: T -) agentID G -) bookerID
    agentIdentification: Array<UserIdentificationType5>
    
    // Convey either the phone or the email adress of the supplier
    supplierInformation: Array<PhoneAndEmailAddressType1>
    
    // Convey the payment instructions received in the cryptic request
    paymentInstructions: Array<FreeTextInformationType_120943S>
    
    // Convey the consumer account code
    consumerAccount: ReferenceInformationTypeI1
    
}

export interface groupBillbackDataType1Attributes {
    
}

// This segment is used to convey the merchant information
export interface CompanyInformationType1 {
    
    $attributes: CompanyInformationType1Attributes
    
    // This data element is used to qualify the company code, to identify the industry business it belongs.
    travelSector: Array<string>
    
    // This data element is used to convey the company code of a company Ex: AF for Air France MIL for millenium foundation
    companyCode: string
    
    // This data element is used to convey the numeric merchant ID.
    companyNumericCode: Array<string>
    
}

export interface CompanyInformationType1Attributes {
    
}

// Payment record unique identifier
export interface ItemReferencesAndVersionsType_120945S {
    
    $attributes: ItemReferencesAndVersionsType_120945SAttributes
    
    // qualifies the type of the reference used. Here it will be: PRI Payment Record Id APP Application Correlator Id EXT Third party Record Id
    referenceType: string
    
    // The value of the payment record/correlator Id
    uniqueReference: string
    
}

export interface ItemReferencesAndVersionsType_120945SAttributes {
    
}

// This segment is used to identify a user.
export interface UserIdentificationType5 {
    
    $attributes: UserIdentificationType5Attributes
    
    // Identify the type of agent.
    originatorTypeCode: string
    
    // ID of the agent who performs the booking, provided by Amadeus Hotel
    originator: string
    
}

export interface UserIdentificationType5Attributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType_120943S {
    
    $attributes: FreeTextInformationType_120943SAttributes
    
    // Type of remarks added in the PNR for a hotel booking
    freeTextDetails: FreeTextDetailsType_150107C
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType_120943SAttributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInformationTypeI1 {
    
    $attributes: ReferenceInformationTypeI1Attributes
    
    
    referenceDetails: Array<ReferencingDetailsTypeI_177289C1>
    
}

export interface ReferenceInformationTypeI1Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_177289C1 {
    
    $attributes: ReferencingDetailsTypeI_177289C1Attributes
    
    // Payment reference
    type: Array<string>
    
    // value of the Payment reference
    value: Array<string>
    
}

export interface ReferencingDetailsTypeI_177289C1Attributes {
    
}


export interface guestListType1 {
    
    $attributes: guestListType1Attributes
    
    // This segment contains : - the holder of the room - the occupants of the room - In case of child non pax, it is just used as marker (is used as well in case of Individual Booking)
    occupantList: ReferenceInformationType_64689S1
    
    // This segment conveys the age of the person (is used as well in case of Individual Booking)
    age: Array<QuantityTypeI_58716S>
    
}

export interface guestListType1Attributes {
    
}


export interface stayBookingRestrictionType {
    
    $attributes: stayBookingRestrictionTypeAttributes
    
    // Conveys the min or max of the stay. use as marker is no struct info
    minMaxStay: RuleInformationTypeU_69073S
    
    // conveys the descriptions about the : stayDescription (type = STA ) maxLOS (type = SMA) minLOS (type = SMI)
    stayDescriptions: Array<InteractiveFreeTextTypeU1>
    
}

export interface stayBookingRestrictionTypeAttributes {
    
}


export interface taxesType {
    
    $attributes: taxesTypeAttributes
    
    // This segment is used to convey the tax, fee, service, surcharge information.
    taxFeeInformation: HotelTaxesServiceChargesFeesType_198727S
    
    // This segment is used to convey the dates of validity of the Hotel tax, surcharge, Fee, service information.
    taxFeeValidity: Array<StructuredPeriodInformationType3>
    
    // conveys the descriptions about the : services (type = SVC ) tax (type = TAX)
    taxDescriptions: Array<InteractiveFreeTextTypeU1>
    
}

export interface taxesTypeAttributes {
    
}

// hotel taxes, service charges and fees
export interface HotelTaxesServiceChargesFeesType_198727S {
    
    $attributes: HotelTaxesServiceChargesFeesType_198727SAttributes
    
    // This data element is used to idicate if the Tax or fee is included in the base amount
    includedInAmount: string
    
    // This data element is used to indicate if the amount of extra includes the tax or not. It is used in particular for &#34;extra rate override&#34; input: tax included by default.
    includesTax: Array<string>
    
    // This tag indicate if the tax or fee is per person or not
    perPerson: string
    
    // This data element is used to know if the tax or fee applies per stay, per period or per night.
    timeUnit: Array<string>
    
    // This data element is used to convey the category of the tax,fee...
    category: Array<string>
    
    // Predefined name of the Tax or Fee
    code: Array<string>
    
    // amount
    amount: Array<number>
    
    // ISO Currency code
    currencyCode: Array<string>
    
    // percentage
    percentage: Array<number>
    
    // Associated charge quantity
    chargeQuantity: Array<number>
    
    // Long name of the Tax or Fee
    longName: Array<string>
    
    // This composite is used to convey the information relative to the long name of the tax
    longNameDetails: Array<FreeTextDetailsType_276569C>
    
}

export interface HotelTaxesServiceChargesFeesType_198727SAttributes {
    
}


export interface arrivalFlightDetailsGrpType1 {
    
    $attributes: arrivalFlightDetailsGrpType1Attributes
    
    // This tag is used to flag the Arrival Flight Info
    arrivalFlightDetailsTag: OriginAndDestinationDetailsTypeU1
    
    // This group is used to convey the data passed to the /ARR- option
    arrivalFlightDetailsData: arrivalFlightDetailsDataType1
    
}

export interface arrivalFlightDetailsGrpType1Attributes {
    
}

// To convey first the origin and then final destination of a journey.
export interface OriginAndDestinationDetailsTypeU1 {
    
    $attributes: OriginAndDestinationDetailsTypeU1Attributes
    
    
    origin: Array<string>
    
}

export interface OriginAndDestinationDetailsTypeU1Attributes {
    
}


export interface arrivalFlightDetailsDataType1 {
    
    $attributes: arrivalFlightDetailsDataType1Attributes
    
    // Travel Product Information
    travelProductInformation: TravelProductInformationTypeU1
    
    // Additional transport details
    additionalTransportDetails: AdditionalTransportDetailsTypeU1
    
}

export interface arrivalFlightDetailsDataType1Attributes {
    
}

// To specify details related to a travel product.
export interface TravelProductInformationTypeU1 {
    
    $attributes: TravelProductInformationTypeU1Attributes
    
    
    flightDate: ProductDateAndTimeTypeU1
    
    
    boardPointDetails: Array<LocationTypeU1>
    
    
    productIdentification: ProductIdentificationDetailsTypeU1
    
}

export interface TravelProductInformationTypeU1Attributes {
    
}

// To specify first the beginning date and time followed by the ending date and time associated with a product or service.
export interface ProductDateAndTimeTypeU1 {
    
    $attributes: ProductDateAndTimeTypeU1Attributes
    
    
    arrivalTime: string
    
}

export interface ProductDateAndTimeTypeU1Attributes {
    
}

// To identify a location
export interface LocationTypeU1 {
    
    $attributes: LocationTypeU1Attributes
    
    
    code: string
    
}

export interface LocationTypeU1Attributes {
    
}

// Code, number or name to identify a specific product or service and a code to identify the level or type of product or service.
export interface ProductIdentificationDetailsTypeU1 {
    
    $attributes: ProductIdentificationDetailsTypeU1Attributes
    
    
    number: string
    
    
    idCharacteristic: number
    
}

export interface ProductIdentificationDetailsTypeU1Attributes {
    
}

// To convey additional information concerning a means of transport.
export interface AdditionalTransportDetailsTypeU1 {
    
    $attributes: AdditionalTransportDetailsTypeU1Attributes
    
    // Terminal Information
    terminalInformation: Array<TerminalInformationTypeU1>
    
}

export interface AdditionalTransportDetailsTypeU1Attributes {
    
}

// To specify departure or arrival information relative to a terminal.
export interface TerminalInformationTypeU1 {
    
    $attributes: TerminalInformationTypeU1Attributes
    
    // Arrival Terminal
    arrivalTerminal: string
    
}

export interface TerminalInformationTypeU1Attributes {
    
}

// Tariff information
export interface TariffInformationDetailsTypeU_276593C {
    
    $attributes: TariffInformationDetailsTypeU_276593CAttributes
    
    // Rate amount
    amount: number
    
    
    currency: Array<string>
    
    // Rate DLY or TTL indicator DY for Daily 3 for Total
    dailyTotalIndicator: Array<string>
    
    
    status: Array<string>
    
    // GR.1/TFF (RESRSP) or GR.2/TFF (RESREQ): Rate change indicator 3 for Price change Level 1/TFF: Not Used
    rateChangeIndicator: Array<string>
    
}

export interface TariffInformationDetailsTypeU_276593CAttributes {
    
}

// To specify tariff details relating to a service or product
export interface TariffInformationType_198746S {
    
    $attributes: TariffInformationType_198746SAttributes
    
    // This composite is used for the Rate information
    tariffInfo: Array<TariffInformationDetailsTypeU_276593C>
    
    // This composite is used for Associated charges
    associatedCharges: Array<AssociatedChargesInformationTypeU>
    
}

export interface TariffInformationType_198746SAttributes {
    
}


export interface Hotel_CompleteReservationDetailsType {
    
    $attributes: Hotel_CompleteReservationDetailsTypeAttributes
    
    
    retrievalKeyGroup: retrievalKeyGroupType
    
}

export interface Hotel_CompleteReservationDetailsTypeAttributes {
    
}


export interface retrievalKeyGroupType {
    
    $attributes: retrievalKeyGroupTypeAttributes
    
    
    retrievalKey: retrievalKeyType
    
    
    tattooID: tattooIDType
    
}

export interface retrievalKeyGroupTypeAttributes {
    
}


export interface retrievalKeyType {
    
    $attributes: retrievalKeyTypeAttributes
    
    
    reservation: Array<reservationType>
    
}

export interface retrievalKeyTypeAttributes {
    
}


export interface reservationType {
    
    $attributes: reservationTypeAttributes
    
    
    companyId: Array<string>
    
    
    controlNumber: string
    
    
    controlType: string
    
}

export interface reservationTypeAttributes {
    
}


export interface tattooIDType {
    
    $attributes: tattooIDTypeAttributes
    
    
    referenceDetails: referenceDetailsType2
    
}

export interface tattooIDTypeAttributes {
    
}


export interface referenceDetailsType2 {
    
    $attributes: referenceDetailsType2Attributes
    
    
    type: string
    
    
    value: string
    
}

export interface referenceDetailsType2Attributes {
    
}


export interface Hotel_CompleteReservationDetailsReplyType {
    
    $attributes: Hotel_CompleteReservationDetailsReplyTypeAttributes
    
    
    errorInformation: Array<errorInformationType1>
    
    
    retrievalKeyGroup: retrievalKeyGroupType1
    
    
    hotelSalesRequirementsSection: Array<hotelSalesRequirementsSectionType>
    
}

export interface Hotel_CompleteReservationDetailsReplyTypeAttributes {
    
}


export interface errorInformationType1 {
    
    $attributes: errorInformationType1Attributes
    
    
    messageErrorInformation: messageErrorInformationType
    
    
    errorDescription: Array<errorDescriptionType>
    
}

export interface errorInformationType1Attributes {
    
}


export interface messageErrorInformationType {
    
    $attributes: messageErrorInformationTypeAttributes
    
    
    errorDetails: errorDetailsType1
    
}

export interface messageErrorInformationTypeAttributes {
    
}


export interface errorDetailsType1 {
    
    $attributes: errorDetailsType1Attributes
    
    
    errorCode: string
    
    
    errorCategory: Array<string>
    
}

export interface errorDetailsType1Attributes {
    
}


export interface errorDescriptionType {
    
    $attributes: errorDescriptionTypeAttributes
    
    
    freeTextDetails: freeTextDetailsType
    
    
    freeText: Array<string>
    
}

export interface errorDescriptionTypeAttributes {
    
}


export interface freeTextDetailsType {
    
    $attributes: freeTextDetailsTypeAttributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
    
    status: Array<string>
    
    
    companyId: Array<string>
    
    
    language: Array<string>
    
    
    source: string
    
    
    encoding: string
    
}

export interface freeTextDetailsTypeAttributes {
    
}


export interface retrievalKeyGroupType1 {
    
    $attributes: retrievalKeyGroupType1Attributes
    
    
    retrievalKey: retrievalKeyType1
    
    
    tattooID: tattooIDType1
    
}

export interface retrievalKeyGroupType1Attributes {
    
}


export interface retrievalKeyType1 {
    
    $attributes: retrievalKeyType1Attributes
    
    
    reservation: Array<reservationType1>
    
}

export interface retrievalKeyType1Attributes {
    
}


export interface reservationType1 {
    
    $attributes: reservationType1Attributes
    
    
    companyId: Array<string>
    
    
    controlNumber: string
    
    
    controlType: string
    
}

export interface reservationType1Attributes {
    
}


export interface tattooIDType1 {
    
    $attributes: tattooIDType1Attributes
    
    
    referenceDetails: referenceDetailsType3
    
}

export interface tattooIDType1Attributes {
    
}


export interface referenceDetailsType3 {
    
    $attributes: referenceDetailsType3Attributes
    
    
    type: string
    
    
    value: string
    
}

export interface referenceDetailsType3Attributes {
    
}


export interface hotelSalesRequirementsSectionType {
    
    $attributes: hotelSalesRequirementsSectionTypeAttributes
    
    
    hotelPropertyInfo: hotelPropertyInfoType
    
    
    bookingPeriod: bookingPeriodType
    
    
    hotelChainInformation: hotelChainInformationType
    
    
    countryStateInformation: countryStateInformationType
    
    
    occupancyLevel: occupancyLevelType
    
    
    marketingText: Array<marketingTextType>
    
    
    hotelSalesRequCategorySection: Array<hotelSalesRequCategorySectionType>
    
}

export interface hotelSalesRequirementsSectionTypeAttributes {
    
}


export interface hotelPropertyInfoType {
    
    $attributes: hotelPropertyInfoTypeAttributes
    
    
    hotelReference: hotelReferenceType
    
    
    hotelName: Array<string>
    
}

export interface hotelPropertyInfoTypeAttributes {
    
}


export interface hotelReferenceType {
    
    $attributes: hotelReferenceTypeAttributes
    
    
    chainCode: string
    
    
    cityCode: string
    
    
    hotelCode: string
    
}

export interface hotelReferenceTypeAttributes {
    
}


export interface bookingPeriodType {
    
    $attributes: bookingPeriodTypeAttributes
    
    
    businessSemantic: string
    
    
    beginDateTime: beginDateTimeType
    
    
    endDateTime: endDateTimeType
    
}

export interface bookingPeriodTypeAttributes {
    
}


export interface beginDateTimeType {
    
    $attributes: beginDateTimeTypeAttributes
    
    
    year: string
    
    
    month: number
    
    
    day: number
    
}

export interface beginDateTimeTypeAttributes {
    
}


export interface endDateTimeType {
    
    $attributes: endDateTimeTypeAttributes
    
    
    year: string
    
    
    month: number
    
    
    day: number
    
}

export interface endDateTimeTypeAttributes {
    
}


export interface hotelChainInformationType {
    
    $attributes: hotelChainInformationTypeAttributes
    
    
    travelSector: string
    
    
    companyCodeContext: string
    
    
    companyCode: string
    
    
    companyName: string
    
    
    accessLevel: string
    
}

export interface hotelChainInformationTypeAttributes {
    
}


export interface countryStateInformationType {
    
    $attributes: countryStateInformationTypeAttributes
    
    
    countryCode: string
    
    
    regionDetails: Array<regionDetailsType>
    
}

export interface countryStateInformationTypeAttributes {
    
}


export interface regionDetailsType {
    
    $attributes: regionDetailsTypeAttributes
    
    
    code: string
    
    
    qualifier: string
    
}

export interface regionDetailsTypeAttributes {
    
}


export interface occupancyLevelType {
    
    $attributes: occupancyLevelTypeAttributes
    
    
    quantityDetails: quantityDetailsType2
    
}

export interface occupancyLevelTypeAttributes {
    
}


export interface quantityDetailsType2 {
    
    $attributes: quantityDetailsType2Attributes
    
    
    numberOfUnit: number
    
    
    unitQualifier: string
    
}

export interface quantityDetailsType2Attributes {
    
}


export interface marketingTextType {
    
    $attributes: marketingTextTypeAttributes
    
    
    freeTextDetails: freeTextDetailsType
    
    
    freeText: Array<string>
    
}

export interface marketingTextTypeAttributes {
    
}


export interface hotelSalesRequCategorySectionType {
    
    $attributes: hotelSalesRequCategorySectionTypeAttributes
    
    
    pricingCategory: pricingCategoryType
    
    
    infoMsgAndCancelPolicies: Array<infoMsgAndCancelPoliciesType>
    
    
    totalAmountInformation: Array<totalAmountInformationType>
    
    
    convertedTotalAmount: Array<convertedTotalAmountType>
    
    
    taxSection: Array<taxSectionType>
    
    
    otherInfoSection: Array<otherInfoSectionType>
    
    
    roomRateInfoSection: Array<roomRateInfoSectionType>
    
    
    bookingRequirementsSection: Array<bookingRequirementsSectionType>
    
    
    rulesSection: Array<rulesSectionType>
    
    
    additionalRulesFromSellGroup: Array<additionalRulesFromSellGroupType>
    
    
    rateInformationSection: Array<rateInformationSectionType>
    
    
    cancellationPoliciesSection: Array<cancellationPoliciesSectionType>
    
}

export interface hotelSalesRequCategorySectionTypeAttributes {
    
}


export interface pricingCategoryType {
    
    $attributes: pricingCategoryTypeAttributes
    
    
    itemDescriptionType: string
    
    
    itemDescription: itemDescriptionType
    
}

export interface pricingCategoryTypeAttributes {
    
}


export interface itemDescriptionType {
    
    $attributes: itemDescriptionTypeAttributes
    
    
    description: string
    
    
    language: string
    
}

export interface itemDescriptionTypeAttributes {
    
}


export interface infoMsgAndCancelPoliciesType {
    
    $attributes: infoMsgAndCancelPoliciesTypeAttributes
    
    
    freeTextDetails: freeTextDetailsType
    
    
    freeText: Array<string>
    
}

export interface infoMsgAndCancelPoliciesTypeAttributes {
    
}


export interface totalAmountInformationType {
    
    $attributes: totalAmountInformationTypeAttributes
    
    
    monetaryDetails: monetaryDetailsType1
    
}

export interface totalAmountInformationTypeAttributes {
    
}


export interface monetaryDetailsType1 {
    
    $attributes: monetaryDetailsType1Attributes
    
    
    typeQualifier: string
    
    
    amount: number
    
    
    currency: string
    
}

export interface monetaryDetailsType1Attributes {
    
}


export interface convertedTotalAmountType {
    
    $attributes: convertedTotalAmountTypeAttributes
    
    
    conversionRateDetails: conversionRateDetailsType2
    
}

export interface convertedTotalAmountTypeAttributes {
    
}


export interface conversionRateDetailsType2 {
    
    $attributes: conversionRateDetailsType2Attributes
    
    
    conversionType: string
    
    
    currency: string
    
    
    convertedValueAmount: number
    
}

export interface conversionRateDetailsType2Attributes {
    
}


export interface taxSectionType {
    
    $attributes: taxSectionTypeAttributes
    
    
    taxFeeInformation: taxFeeInformationType
    
    
    convertedTaxAmount: Array<convertedTaxAmountType>
    
    
    taxFeeValidity: Array<taxFeeValidityType>
    
    
    taxFeeDescription: Array<taxFeeDescriptionType>
    
}

export interface taxSectionTypeAttributes {
    
}


export interface taxFeeInformationType {
    
    $attributes: taxFeeInformationTypeAttributes
    
    
    includedInAmount: string
    
    
    perPerson: string
    
    
    timeUnit: Array<string>
    
    
    category: Array<string>
    
    
    code: Array<string>
    
    
    amount: Array<number>
    
    
    currencyCode: Array<string>
    
    
    percentage: Array<number>
    
    
    longName: Array<string>
    
    
    longNameDetails: Array<longNameDetailsType>
    
}

export interface taxFeeInformationTypeAttributes {
    
}


export interface longNameDetailsType {
    
    $attributes: longNameDetailsTypeAttributes
    
    
    textSubjectQualifier: string
    
    
    informationType: string
    
    
    language: Array<string>
    
    
    source: string
    
    
    encoding: string
    
}

export interface longNameDetailsTypeAttributes {
    
}


export interface convertedTaxAmountType {
    
    $attributes: convertedTaxAmountTypeAttributes
    
    
    conversionRateDetails: conversionRateDetailsType2
    
}

export interface convertedTaxAmountTypeAttributes {
    
}


export interface taxFeeValidityType {
    
    $attributes: taxFeeValidityTypeAttributes
    
    
    businessSemantic: string
    
    
    beginDateTime: beginDateTimeType
    
    
    endDateTime: endDateTimeType
    
}

export interface taxFeeValidityTypeAttributes {
    
}


export interface taxFeeDescriptionType {
    
    $attributes: taxFeeDescriptionTypeAttributes
    
    
    freeTextDetails: freeTextDetailsType
    
    
    freeText: Array<string>
    
}

export interface taxFeeDescriptionTypeAttributes {
    
}


export interface otherInfoSectionType {
    
    $attributes: otherInfoSectionTypeAttributes
    
    
    checkInOutTimeAndExpressInfo: checkInOutTimeAndExpressInfoType
    
    
    checkDescription: Array<checkDescriptionType>
    
}

export interface otherInfoSectionTypeAttributes {
    
}


export interface checkInOutTimeAndExpressInfoType {
    
    $attributes: checkInOutTimeAndExpressInfoTypeAttributes
    
    
    expressCheckIn: string
    
    
    expressCheckOut: string
    
    
    timeMode: Array<string>
    
    
    checkInTimeLimitation: Array<checkInTimeLimitationType>
    
    
    checkOutTimeLimitation: Array<checkOutTimeLimitationType>
    
}

export interface checkInOutTimeAndExpressInfoTypeAttributes {
    
}


export interface checkInTimeLimitationType {
    
    $attributes: checkInTimeLimitationTypeAttributes
    
    
    hour: number
    
    
    minutes: number
    
}

export interface checkInTimeLimitationTypeAttributes {
    
}


export interface checkOutTimeLimitationType {
    
    $attributes: checkOutTimeLimitationTypeAttributes
    
    
    hour: number
    
    
    minutes: number
    
}

export interface checkOutTimeLimitationTypeAttributes {
    
}


export interface checkDescriptionType {
    
    $attributes: checkDescriptionTypeAttributes
    
    
    freeTextDetails: freeTextDetailsType
    
    
    freeText: string
    
}

export interface checkDescriptionTypeAttributes {
    
}


export interface roomRateInfoSectionType {
    
    $attributes: roomRateInfoSectionTypeAttributes
    
    
    roomInformation: roomInformationType
    
    
    roomRateDescription: Array<roomRateDescriptionType>
    
}

export interface roomRateInfoSectionTypeAttributes {
    
}


export interface roomInformationType {
    
    $attributes: roomInformationTypeAttributes
    
    
    roomRateIdentifier: Array<roomRateIdentifierType>
    
    
    bookingCode: Array<string>
    
}

export interface roomInformationTypeAttributes {
    
}


export interface roomRateIdentifierType {
    
    $attributes: roomRateIdentifierTypeAttributes
    
    
    roomType: Array<string>
    
    
    ratePlanCode: Array<string>
    
}

export interface roomRateIdentifierTypeAttributes {
    
}


export interface roomRateDescriptionType {
    
    $attributes: roomRateDescriptionTypeAttributes
    
    
    freeTextDetails: freeTextDetailsType
    
    
    freeText: Array<string>
    
}

export interface roomRateDescriptionTypeAttributes {
    
}


export interface bookingRequirementsSectionType {
    
    $attributes: bookingRequirementsSectionTypeAttributes
    
    
    guaranteeDepositStatusInfo: guaranteeDepositStatusInfoType
    
    
    paymentInformation: Array<paymentInformationType>
    
    
    creditCardInformation: Array<creditCardInformationType>
    
    
    formOfPaymentDescription: Array<formOfPaymentDescriptionType>
    
}

export interface bookingRequirementsSectionTypeAttributes {
    
}


export interface guaranteeDepositStatusInfoType {
    
    $attributes: guaranteeDepositStatusInfoTypeAttributes
    
    
    statusDetails: statusDetailsType1
    
}

export interface guaranteeDepositStatusInfoTypeAttributes {
    
}


export interface statusDetailsType1 {
    
    $attributes: statusDetailsType1Attributes
    
    
    indicator: string
    
    
    action: string
    
}

export interface statusDetailsType1Attributes {
    
}


export interface paymentInformationType {
    
    $attributes: paymentInformationTypeAttributes
    
}

export interface paymentInformationTypeAttributes {
    
}


export interface creditCardInformationType {
    
    $attributes: creditCardInformationTypeAttributes
    
}

export interface creditCardInformationTypeAttributes {
    
}


export interface formOfPaymentDescriptionType {
    
    $attributes: formOfPaymentDescriptionTypeAttributes
    
    
    freeTextDetails: freeTextDetailsType
    
    
    freeText: Array<string>
    
}

export interface formOfPaymentDescriptionTypeAttributes {
    
}


export interface rulesSectionType {
    
    $attributes: rulesSectionTypeAttributes
    
    
    rulesInformation: rulesInformationType
    
    
    rulesDescription: Array<rulesDescriptionType>
    
}

export interface rulesSectionTypeAttributes {
    
}


export interface rulesInformationType {
    
    $attributes: rulesInformationTypeAttributes
    
    
    ruleDetails: ruleDetailsType
    
}

export interface rulesInformationTypeAttributes {
    
}


export interface ruleDetailsType {
    
    $attributes: ruleDetailsTypeAttributes
    
    
    type: string
    
    
    quantity: Array<number>
    
    
    quantityUnit: Array<string>
    
}

export interface ruleDetailsTypeAttributes {
    
}


export interface rulesDescriptionType {
    
    $attributes: rulesDescriptionTypeAttributes
    
    
    freeTextDetails: freeTextDetailsType
    
    
    freeText: string
    
}

export interface rulesDescriptionTypeAttributes {
    
}


export interface additionalRulesFromSellGroupType {
    
    $attributes: additionalRulesFromSellGroupTypeAttributes
    
    
    additionalSellRulesMarker: additionalSellRulesMarkerType
    
    
    additionalRulesFromSell: additionalRulesFromSellType
    
}

export interface additionalRulesFromSellGroupTypeAttributes {
    
}


export interface additionalSellRulesMarkerType {
    
    $attributes: additionalSellRulesMarkerTypeAttributes
    
}

export interface additionalSellRulesMarkerTypeAttributes {
    
}


export interface additionalRulesFromSellType {
    
    $attributes: additionalRulesFromSellTypeAttributes
    
    
    freeTextDetails: freeTextDetailsType
    
    
    freeText: Array<string>
    
}

export interface additionalRulesFromSellTypeAttributes {
    
}


export interface rateInformationSectionType {
    
    $attributes: rateInformationSectionTypeAttributes
    
    
    ratePlanInformation: ratePlanInformationType
    
    
    rateAmountInformation: rateAmountInformationType
    
    
    convertedMonetaryAmounts: Array<convertedMonetaryAmountsType>
    
    
    rateStatusInformation: Array<rateStatusInformationType>
    
    
    commissionSection: Array<commissionSectionType>
    
    
    rateChangeSection: Array<rateChangeSectionType>
    
}

export interface rateInformationSectionTypeAttributes {
    
}


export interface ratePlanInformationType {
    
    $attributes: ratePlanInformationTypeAttributes
    
    
    ratePlanCode: Array<string>
    
    
    ratePlanId: Array<string>
    
    
    ratePlanIdDetails: Array<ratePlanIdDetailsType>
    
}

export interface ratePlanInformationTypeAttributes {
    
}


export interface ratePlanIdDetailsType {
    
    $attributes: ratePlanIdDetailsTypeAttributes
    
    
    textSubjectQualifier: string
    
    
    informationType: string
    
    
    language: Array<string>
    
    
    source: string
    
    
    encoding: string
    
}

export interface ratePlanIdDetailsTypeAttributes {
    
}


export interface rateAmountInformationType {
    
    $attributes: rateAmountInformationTypeAttributes
    
    
    tariffInfo: tariffInfoType1
    
}

export interface rateAmountInformationTypeAttributes {
    
}


export interface tariffInfoType1 {
    
    $attributes: tariffInfoType1Attributes
    
    
    amount: number
    
    
    currency: string
    
    
    ratePlanIndicator: string
    
    
    rateChangeIndicator: Array<string>
    
    
    totalAmount: Array<number>
    
}

export interface tariffInfoType1Attributes {
    
}


export interface convertedMonetaryAmountsType {
    
    $attributes: convertedMonetaryAmountsTypeAttributes
    
}

export interface convertedMonetaryAmountsTypeAttributes {
    
}


export interface rateStatusInformationType {
    
    $attributes: rateStatusInformationTypeAttributes
    
}

export interface rateStatusInformationTypeAttributes {
    
}


export interface commissionSectionType {
    
    $attributes: commissionSectionTypeAttributes
    
    
    commissionInfo: commissionInfoType
    
    
    commissionConvertedAmnt: Array<commissionConvertedAmntType>
    
    
    commissionDescription: Array<commissionDescriptionType>
    
}

export interface commissionSectionTypeAttributes {
    
}


export interface commissionInfoType {
    
    $attributes: commissionInfoTypeAttributes
    
    
    commissionDetails: commissionDetailsType
    
}

export interface commissionInfoTypeAttributes {
    
}


export interface commissionDetailsType {
    
    $attributes: commissionDetailsTypeAttributes
    
    
    type: string
    
    
    amount: Array<number>
    
    
    currency: Array<string>
    
    
    rate: Array<number>
    
}

export interface commissionDetailsTypeAttributes {
    
}


export interface commissionConvertedAmntType {
    
    $attributes: commissionConvertedAmntTypeAttributes
    
    
    conversionRateDetails: conversionRateDetailsType2
    
}

export interface commissionConvertedAmntTypeAttributes {
    
}


export interface commissionDescriptionType {
    
    $attributes: commissionDescriptionTypeAttributes
    
    
    freeTextDetails: freeTextDetailsType
    
    
    freeText: Array<string>
    
}

export interface commissionDescriptionTypeAttributes {
    
}


export interface rateChangeSectionType {
    
    $attributes: rateChangeSectionTypeAttributes
    
    
    rateChangeAmountInformation: rateChangeAmountInformationType
    
    
    chgOfRateConvertedAmnt: Array<chgOfRateConvertedAmntType>
    
    
    rateChangePeriodInformation: Array<rateChangePeriodInformationType>
    
    
    rateChangeText: Array<rateChangeTextType>
    
}

export interface rateChangeSectionTypeAttributes {
    
}


export interface rateChangeAmountInformationType {
    
    $attributes: rateChangeAmountInformationTypeAttributes
    
    
    monetaryDetails: monetaryDetailsType1
    
}

export interface rateChangeAmountInformationTypeAttributes {
    
}


export interface chgOfRateConvertedAmntType {
    
    $attributes: chgOfRateConvertedAmntTypeAttributes
    
    
    conversionRateDetails: conversionRateDetailsType2
    
}

export interface chgOfRateConvertedAmntTypeAttributes {
    
}


export interface rateChangePeriodInformationType {
    
    $attributes: rateChangePeriodInformationTypeAttributes
    
    
    businessSemantic: string
    
    
    beginDateTime: beginDateTimeType
    
    
    endDateTime: endDateTimeType
    
}

export interface rateChangePeriodInformationTypeAttributes {
    
}


export interface rateChangeTextType {
    
    $attributes: rateChangeTextTypeAttributes
    
    
    freeTextDetails: freeTextDetailsType
    
    
    freeText: string
    
}

export interface rateChangeTextTypeAttributes {
    
}


export interface cancellationPoliciesSectionType {
    
    $attributes: cancellationPoliciesSectionTypeAttributes
    
    
    cancellationDateTime: cancellationDateTimeType
    
    
    cancellationFee: Array<cancellationFeeType>
    
    
    cancelConvertedFees: Array<cancelConvertedFeesType>
    
    
    cancellationNights: Array<cancellationNightsType>
    
}

export interface cancellationPoliciesSectionTypeAttributes {
    
}


export interface cancellationDateTimeType {
    
    $attributes: cancellationDateTimeTypeAttributes
    
    
    businessSemantic: string
    
    
    timeMode: Array<string>
    
    
    dateTime: dateTimeType
    
}

export interface cancellationDateTimeTypeAttributes {
    
}


export interface dateTimeType {
    
    $attributes: dateTimeTypeAttributes
    
    
    year: Array<string>
    
    
    month: Array<number>
    
    
    day: Array<number>
    
    
    hour: Array<number>
    
    
    minutes: Array<number>
    
}

export interface dateTimeTypeAttributes {
    
}


export interface cancellationFeeType {
    
    $attributes: cancellationFeeTypeAttributes
    
    
    monetaryDetails: monetaryDetailsType1
    
}

export interface cancellationFeeTypeAttributes {
    
}


export interface cancelConvertedFeesType {
    
    $attributes: cancelConvertedFeesTypeAttributes
    
    
    conversionRateDetails: conversionRateDetailsType2
    
}

export interface cancelConvertedFeesTypeAttributes {
    
}


export interface cancellationNightsType {
    
    $attributes: cancellationNightsTypeAttributes
    
    
    quantityDetails: quantityDetailsType2
    
}

export interface cancellationNightsTypeAttributes {
    
}


export interface Command_CrypticType {
    
    $attributes: Command_CrypticTypeAttributes
    
    
    messageAction: messageActionType
    
    
    numberOfUnits: Array<numberOfUnitsType1>
    
    
    intelligentWorkstationInfo: Array<intelligentWorkstationInfoType>
    
    
    longTextString: longTextStringType
    
}

export interface Command_CrypticTypeAttributes {
    
}


export interface messageActionType {
    
    $attributes: messageActionTypeAttributes
    
    
    messageFunctionDetails: messageFunctionDetailsType2
    
    
    responseType: Array<string>
    
}

export interface messageActionTypeAttributes {
    
}


export interface messageFunctionDetailsType2 {
    
    $attributes: messageFunctionDetailsType2Attributes
    
    
    businessFunction: Array<string>
    
    
    messageFunction: string
    
    
    additionalMessageFunction: Array<string>
    
}

export interface messageFunctionDetailsType2Attributes {
    
}


export interface numberOfUnitsType1 {
    
    $attributes: numberOfUnitsType1Attributes
    
    
    numberOfUnitsDetails1: numberOfUnitsDetails1Type
    
    
    numberOfUnitsDetails2: Array<numberOfUnitsDetails2Type>
    
}

export interface numberOfUnitsType1Attributes {
    
}


export interface numberOfUnitsDetails1Type {
    
    $attributes: numberOfUnitsDetails1TypeAttributes
    
    
    units: number
    
    
    unitsQualifier: Array<string>
    
}

export interface numberOfUnitsDetails1TypeAttributes {
    
}


export interface numberOfUnitsDetails2Type {
    
    $attributes: numberOfUnitsDetails2TypeAttributes
    
    
    units: Array<number>
    
    
    unitsQualifier: Array<string>
    
}

export interface numberOfUnitsDetails2TypeAttributes {
    
}


export interface intelligentWorkstationInfoType {
    
    $attributes: intelligentWorkstationInfoTypeAttributes
    
    
    companyIdentification: Array<string>
    
}

export interface intelligentWorkstationInfoTypeAttributes {
    
}


export interface longTextStringType {
    
    $attributes: longTextStringTypeAttributes
    
    
    textStringDetails: string
    
}

export interface longTextStringTypeAttributes {
    
}


export interface Command_CrypticReplyType {
    
    $attributes: Command_CrypticReplyTypeAttributes
    
    
    messageActionDetails: Array<messageActionDetailsType>
    
    
    longTextString: longTextStringType1
    
}

export interface Command_CrypticReplyTypeAttributes {
    
}


export interface messageActionDetailsType {
    
    $attributes: messageActionDetailsTypeAttributes
    
    
    messageFunctionDetails: messageFunctionDetailsType3
    
    
    responseType: Array<string>
    
}

export interface messageActionDetailsTypeAttributes {
    
}


export interface messageFunctionDetailsType3 {
    
    $attributes: messageFunctionDetailsType3Attributes
    
    
    businessFunction: Array<string>
    
    
    messageFunction: string
    
}

export interface messageFunctionDetailsType3Attributes {
    
}


export interface longTextStringType1 {
    
    $attributes: longTextStringType1Attributes
    
    
    textStringDetails: string
    
}

export interface longTextStringType1Attributes {
    
}


export interface Air_SellFromRecommendationType {
    
    $attributes: Air_SellFromRecommendationTypeAttributes
    
    // This will specify the action of the message.
    messageActionDetails: Array<MessageActionDetailsTypeI>
    
    // PNR recloc.
    recordLocator: Array<ReservationControlInformationTypeI2>
    
    // This group describes passenger&#39;s origin and destination of the journey
    itineraryDetails: Array<itineraryDetailsType>
    
}

export interface Air_SellFromRecommendationTypeAttributes {
    
}

// To specify the message type and business function.
export interface MessageActionDetailsTypeI {
    
    $attributes: MessageActionDetailsTypeIAttributes
    
    // This represents the message function details.
    messageFunctionDetails: Array<MessageFunctionBusinessDetailsTypeI>
    
}

export interface MessageActionDetailsTypeIAttributes {
    
}

// To indicate the type and function of a message or part of a message.
export interface MessageFunctionBusinessDetailsTypeI {
    
    $attributes: MessageFunctionBusinessDetailsTypeIAttributes
    
    // It gives information on what the message function is. The only valid value here is 183: Lowest fare across airline, flight, class criteria..
    messageFunction: Array<string>
    
    // Additional message function..
    additionalMessageFunction: Array<string>
    
}

export interface MessageFunctionBusinessDetailsTypeIAttributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI2 {
    
    $attributes: ReservationControlInformationTypeI2Attributes
    
    // Record locator information.
    reservation: Array<ReservationControlInformationDetailsTypeI2>
    
}

export interface ReservationControlInformationTypeI2Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI2 {
    
    $attributes: ReservationControlInformationDetailsTypeI2Attributes
    
    // Company ID.
    companyId: Array<string>
    
    // Control Number.
    controlNumber: Array<string>
    
    // Control Type.
    controlType: Array<string>
    
    // date.
    date: Array<string>
    
    // Time.
    time: Array<number>
    
}

export interface ReservationControlInformationDetailsTypeI2Attributes {
    
}


export interface itineraryDetailsType {
    
    $attributes: itineraryDetailsTypeAttributes
    
    // This will give the first departure city and the last arrival city for connected flights.
    originDestinationDetails: OriginAndDestinationDetailsTypeI
    
    // It will be used by master pricer to specify whether the ODI must be sold as is or if the algorithm should be used.
    message: Array<MessageActionDetailsTypeI>
    
    // Contains segment information.
    segmentInformation: Array<segmentInformationType>
    
}

export interface itineraryDetailsTypeAttributes {
    
}

// To convey the origin and destination of a journey.
export interface OriginAndDestinationDetailsTypeI {
    
    $attributes: OriginAndDestinationDetailsTypeIAttributes
    
    // ex: NCE
    origin: Array<string>
    
    // ex: CDG
    destination: Array<string>
    
}

export interface OriginAndDestinationDetailsTypeIAttributes {
    
}


export interface segmentInformationType {
    
    $attributes: segmentInformationTypeAttributes
    
    // This contain the flight details.
    travelProductInformation: TravelProductInformationTypeI2
    
    // This is the qualifier of the flight. It gives booking information.
    relatedproductInformation: RelatedProductInformationTypeI1
    
}

export interface segmentInformationTypeAttributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI2 {
    
    $attributes: TravelProductInformationTypeI2Attributes
    
    // Timing information.
    flightDate: ProductDateTimeTypeI2
    
    // Flight board point.
    boardPointDetails: LocationTypeI2
    
    // Flight off point.
    offpointDetails: LocationTypeI2
    
    // Airline code.
    companyDetails: CompanyIdentificationTypeI4
    
    // The contain the identity of the flight.
    flightIdentification: ProductIdentificationDetailsTypeI2
    
    // Gives information about the flight type.
    flightTypeDetails: Array<ProductTypeDetailsTypeI2>
    
    // N for non polling segment. P for polling segment.
    specialSegment: Array<string>
    
    // Information about a marriage.
    marriageDetails: Array<MarriageControlDetailsTypeI>
    
}

export interface TravelProductInformationTypeI2Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI2 {
    
    $attributes: ProductDateTimeTypeI2Attributes
    
    // Flight departure date.
    departureDate: Array<string>
    
    
    departureTime: Array<number>
    
    // Flight arrival date.
    arrivalDate: Array<string>
    
    // Flight arrival time.
    arrivalTime: Array<number>
    
    // Date discrepancy between departure date and arrival date.
    dateVariation: Array<number>
    
}

export interface ProductDateTimeTypeI2Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI2 {
    
    $attributes: LocationTypeI2Attributes
    
    // Location Id: ex: NCE
    trueLocationId: string
    
}

export interface LocationTypeI2Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI4 {
    
    $attributes: CompanyIdentificationTypeI4Attributes
    
    // Airline Code: EX: AF
    marketingCompany: string
    
}

export interface CompanyIdentificationTypeI4Attributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI2 {
    
    $attributes: ProductIdentificationDetailsTypeI2Attributes
    
    // This is the flight number. ex: 7713
    flightNumber: string
    
    // Class of service.
    bookingClass: string
    
    // Flight number suffix. ex: A
    operationalSuffix: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI2Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsTypeI2 {
    
    $attributes: ProductTypeDetailsTypeI2Attributes
    
    // The flight indicator gives further detail about the flight: Ex:ET.
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsTypeI2Attributes {
    
}

// To identify details concerning the marriage status of travel product.
export interface MarriageControlDetailsTypeI {
    
    $attributes: MarriageControlDetailsTypeIAttributes
    
    // Marriage type.
    relation: Array<string>
    
    // Marriage number.
    marriageIdentifier: Array<number>
    
    // Segment sequence within the marriage.
    lineNumber: Array<number>
    
}

export interface MarriageControlDetailsTypeIAttributes {
    
}

// To indicate quantity and action required in relation to a product.
export interface RelatedProductInformationTypeI1 {
    
    $attributes: RelatedProductInformationTypeI1Attributes
    
    // Number in party.
    quantity: number
    
    // Status code. It should be OX (cancel) or NN (sell).
    statusCode: Array<string>
    
}

export interface RelatedProductInformationTypeI1Attributes {
    
}


export interface Air_SellFromRecommendationReplyType {
    
    $attributes: Air_SellFromRecommendationReplyTypeAttributes
    
    // Indication on the message function and business.
    message: Array<MessageActionDetailsTypeI1>
    
    // ERC at message level. For general processing error.
    errorAtMessageLevel: Array<errorAtMessageLevelType>
    
    // itinerary Details.
    itineraryDetails: Array<itineraryDetailsType1>
    
}

export interface Air_SellFromRecommendationReplyTypeAttributes {
    
}

// To specify the message type and business function.
export interface MessageActionDetailsTypeI1 {
    
    $attributes: MessageActionDetailsTypeI1Attributes
    
    // This is the message function.
    messageFunctionDetails: Array<MessageFunctionBusinessDetailsTypeI1>
    
    // This is the response type.
    responseType: Array<string>
    
}

export interface MessageActionDetailsTypeI1Attributes {
    
}

// To indicate the type and function of a message or part of a message.
export interface MessageFunctionBusinessDetailsTypeI1 {
    
    $attributes: MessageFunctionBusinessDetailsTypeI1Attributes
    
    // This will be the business function. It will contain MP for Master Pricer if MSG is used at ODI level.
    businessFunction: Array<string>
    
    // This will give the message function. Master Pricer will have to define its own activation number. For MSG at ODI level, if it is used, it will contain ODI.
    messageFunction: Array<string>
    
    // Responsible Agency.
    responsibleAgency: Array<string>
    
    // This will be needed in case if in the future, master pricer will need to peform a more accurate algorithm.
    additionalMessageFunction: Array<string>
    
}

export interface MessageFunctionBusinessDetailsTypeI1Attributes {
    
}


export interface errorAtMessageLevelType {
    
    $attributes: errorAtMessageLevelTypeAttributes
    
    // Error coded.
    errorSegment: ApplicationErrorInformationType3
    
    // Information in free flow on the error.
    informationText: Array<InteractiveFreeTextTypeI>
    
}

export interface errorAtMessageLevelTypeAttributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType3 {
    
    $attributes: ApplicationErrorInformationType3Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType1
    
}

export interface ApplicationErrorInformationType3Attributes {
    
}


export interface ApplicationErrorDetailType1 {
    
    $attributes: ApplicationErrorDetailType1Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: string
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType1Attributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextTypeI {
    
    $attributes: InteractiveFreeTextTypeIAttributes
    
    // Info on the free text.
    freeTextQualification: Array<FreeTextQualificationTypeI2>
    
    // Free text itself.
    freeText: Array<string>
    
}

export interface InteractiveFreeTextTypeIAttributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationTypeI2 {
    
    $attributes: FreeTextQualificationTypeI2Attributes
    
    // text.
    textSubjectQualifier: string
    
    // Information Type.
    informationType: Array<string>
    
    // Status.
    status: Array<string>
    
    // Company ID.
    companyId: Array<string>
    
    // Language, coded.
    language: Array<string>
    
}

export interface FreeTextQualificationTypeI2Attributes {
    
}


export interface itineraryDetailsType1 {
    
    $attributes: itineraryDetailsType1Attributes
    
    // Origin/Destination pair.
    originDestination: OriginAndDestinationDetailsTypeI1
    
    // Error at ODi level.
    errorItinerarylevel: Array<errorItinerarylevelType>
    
    // Air information.
    segmentInformation: Array<segmentInformationType1>
    
}

export interface itineraryDetailsType1Attributes {
    
}

// To convey the origin and destination of a journey.
export interface OriginAndDestinationDetailsTypeI1 {
    
    $attributes: OriginAndDestinationDetailsTypeI1Attributes
    
    // Place/Location Identification.
    origin: Array<string>
    
    // Place/Location Identification.
    destination: Array<string>
    
}

export interface OriginAndDestinationDetailsTypeI1Attributes {
    
}


export interface errorItinerarylevelType {
    
    $attributes: errorItinerarylevelTypeAttributes
    
    // Error coded.
    errorSegment: ApplicationErrorInformationType3
    
    // Free flow information on the error.
    informationText: Array<InteractiveFreeTextTypeI>
    
}

export interface errorItinerarylevelTypeAttributes {
    
}


export interface segmentInformationType1 {
    
    $attributes: segmentInformationType1Attributes
    
    // Flight Details.
    flightDetails: TravelProductInformationTypeI3
    
    // Operational Information.
    apdSegment: Array<AdditionalProductDetailsTypeI2>
    
    // Action Details
    actionDetails: RelatedProductInformationTypeI2
    
    // Information appended by the airline on the flight.
    informationText: Array<InteractiveFreeTextTypeI>
    
    // Error at segment level.
    errorAtSegmentLevel: Array<errorAtSegmentLevelType>
    
}

export interface segmentInformationType1Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI3 {
    
    $attributes: TravelProductInformationTypeI3Attributes
    
    // Product Date/Time.
    flightDate: Array<ProductDateTimeTypeI3>
    
    // Location.
    boardPointDetails: Array<LocationTypeI3>
    
    // Location.
    offpointDetails: Array<LocationTypeI3>
    
    // Company Identification.
    companyDetails: Array<CompanyIdentificationTypeI5>
    
    // Product identification Details.
    flightIdentification: Array<ProductIdentificationDetailsTypeI3>
    
    // Product Type Details.
    flightTypeDetails: Array<ProductTypeDetailsTypeI3>
    
    // Processing Indicator. P for Polling, N for non Polling.
    specialSegment: Array<string>
    
    // Marriage Control Details.
    marriageDetails: Array<MarriageControlDetailsTypeI1>
    
}

export interface TravelProductInformationTypeI3Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI3 {
    
    $attributes: ProductDateTimeTypeI3Attributes
    
    // This is the departure date. ex: 010306
    departureDate: Array<string>
    
    // It contains the departure time. ex: 1245
    departureTime: Array<number>
    
    // It contains the arrival date. ex: 120306
    arrivalDate: Array<string>
    
    // It contains the arrival time. ex: 1300
    arrivalTime: Array<number>
    
    // This is the date discrepancy between departure and arrival date.
    dateVariation: Array<number>
    
}

export interface ProductDateTimeTypeI3Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI3 {
    
    $attributes: LocationTypeI3Attributes
    
    // This is the Board/Off point. ex: NCE
    trueLocationId: Array<string>
    
    
    trueLocation: Array<string>
    
}

export interface LocationTypeI3Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI5 {
    
    $attributes: CompanyIdentificationTypeI5Attributes
    
    // This will be the carrier code. ex: AF
    marketingCompany: Array<string>
    
    
    operatingCompany: Array<string>
    
    
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI5Attributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI3 {
    
    $attributes: ProductIdentificationDetailsTypeI3Attributes
    
    // Flight Number: ex 7713
    flightNumber: string
    
    // Booking class. Up to 2 characters. ex: C
    bookingClass: Array<string>
    
    // Operational suffix. Added to the flight number, it identifies uniquely the flight.
    operationalSuffix: Array<string>
    
    // Dominance indicator. Used for marriage.
    modifier: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI3Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsTypeI3 {
    
    $attributes: ProductTypeDetailsTypeI3Attributes
    
    // It gives some functional information on the flight. ETK candidate etc...
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsTypeI3Attributes {
    
}

// To identify details concerning the marriage status of travel product.
export interface MarriageControlDetailsTypeI1 {
    
    $attributes: MarriageControlDetailsTypeI1Attributes
    
    // Type of marriage.
    relation: Array<string>
    
    // Marriage number within the message.
    marriageIdentifier: Array<number>
    
    // Sequence number within the marriage.
    lineNumber: Array<number>
    
    
    otherRelation: Array<string>
    
    
    carrierCode: Array<string>
    
}

export interface MarriageControlDetailsTypeI1Attributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsTypeI2 {
    
    $attributes: AdditionalProductDetailsTypeI2Attributes
    
    // Details of the leg.
    legDetails: Array<AdditionalProductTypeI2>
    
    // Departure Terminal Info.
    departureStationInfo: Array<StationInformationTypeI2>
    
    // Arrival terminal info.
    arrivalStationInfo: Array<StationInformationTypeI2>
    
    // Facilities on board.
    facilitiesInformation: Array<ProductFacilitiesTypeI>
    
}

export interface AdditionalProductDetailsTypeI2Attributes {
    
}

// Additional details describing a specific means of transport.
export interface AdditionalProductTypeI2 {
    
    $attributes: AdditionalProductTypeI2Attributes
    
    // Equipment code.
    equipment: Array<string>
    
    // Number of stop if multileg.
    numberOfStops: Array<number>
    
    // Flight duration.
    duration: Array<number>
    
    
    percentage: Array<number>
    
    // Day of operation. (1 to 7)
    daysOfOperation: Array<string>
    
    
    dateTimePeriod: Array<string>
    
    
    complexingFlightIndicator: Array<string>
    
    
    locations: Array<string>
    
}

export interface AdditionalProductTypeI2Attributes {
    
}

// To specify departure/arrival information concerning a means of transport.
export interface StationInformationTypeI2 {
    
    $attributes: StationInformationTypeI2Attributes
    
    // Gate information.
    gateDescription: Array<string>
    
    // Terminal information.
    terminal: Array<string>
    
    
    concourse: Array<string>
    
}

export interface StationInformationTypeI2Attributes {
    
}

// Identification of facilities for a product or service by type or description.
export interface ProductFacilitiesTypeI {
    
    $attributes: ProductFacilitiesTypeIAttributes
    
    // Facility on board. Coded
    code: Array<string>
    
    // Description of the facility.
    description: Array<string>
    
    // Qualifier.
    qualifier: Array<string>
    
    // Extendion code for facility.
    extensionCode: Array<string>
    
}

export interface ProductFacilitiesTypeIAttributes {
    
}

// To indicate quantity and action required in relation to a product.
export interface RelatedProductInformationTypeI2 {
    
    $attributes: RelatedProductInformationTypeI2Attributes
    
    // Quantity.
    quantity: number
    
    // Status, Coded
    statusCode: Array<string>
    
}

export interface RelatedProductInformationTypeI2Attributes {
    
}


export interface errorAtSegmentLevelType {
    
    $attributes: errorAtSegmentLevelTypeAttributes
    
    // Error coded.
    errorSegment: ApplicationErrorInformationType3
    
    // Information on the error.
    informationText: Array<InteractiveFreeTextTypeI>
    
}

export interface errorAtSegmentLevelTypeAttributes {
    
}


export interface PNR_ReplyType {
    
    $attributes: PNR_ReplyTypeAttributes
    
    // specify general error
    generalErrorInfo: Array<ErrorGroupType_212789G>
    
    // PNR header
    pnrHeader: Array<pnrHeaderType>
    
    // specify the amadeus PNR record locator security information for different pnr elements .
    securityInformation: Array<ReservationSecurityInformationType_204487S>
    
    // specify a queue , that is an office , a queue number , a category number ,and a date range number or a date .This segment can be used in an output message.
    queueInformations: Array<QueueType>
    
    // specify the number of units required
    numberOfUnits: Array<NumberOfUnitsTypeI>
    
    // Conveys PNR special types
    pnrType: Array<CodedAttributeType6>
    
    // provide free form or coded long text information
    freetextData: Array<LongFreeTextType>
    
    // Conveys the Header tags of the PNR.
    pnrHeaderTag: Array<StatusType_186270S>
    
    // provide free from or coded text information
    freeFormText: Array<InteractiveFreeTextTypeI_136698S>
    
    // specify an amadeus PNR history data
    historyData: Array<PnrHistoryDataType>
    
    // Point of Sale Information at SBR level. Owner of the PNR.
    sbrPOSDetails: POSGroupType
    
    // Point of Sale Information at SBR level. Creator of the PNR.
    sbrCreationPosDetails: POSGroupType
    
    // Point of Sale Information at SBR level. Updator of the PNR.
    sbrUpdatorPosDetails: POSGroupType
    
    // Contains technical data associated to this PNR: --) Purge Date of the PNR --) enveloppe number at last EOT
    technicalData: Array<technicalDataType>
    
    // specify ll name elements
    travellerInfo: Array<travellerInfoType>
    
    // specify connected/non connected air segments
    originDestinationDetails: Array<originDestinationDetailsType>
    
    // specify the segment marriages and connections
    segmentGroupingInfo: Array<SegmentGroupingInformationType>
    
    // data elements
    dataElementsMaster: Array<dataElementsMasterType>
    
    // specify TST elements
    tstData: Array<tstDataType>
    
    
    pricingRecordGroup: Array<pricingRecordGroupType>
    
    // To convet the DCS Data
    dcsData: Array<dcsDataType>
    
}

export interface PNR_ReplyTypeAttributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType_212789G {
    
    $attributes: ErrorGroupType_212789GAttributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType_185486S
    
    // The desciption of warning or error.
    errorWarningDescription: FreeTextInformationType_185487S
    
}

export interface ErrorGroupType_212789GAttributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType_185486S {
    
    $attributes: ApplicationErrorInformationType_185486SAttributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType_260187C
    
}

export interface ApplicationErrorInformationType_185486SAttributes {
    
}


export interface ApplicationErrorDetailType_260187C {
    
    $attributes: ApplicationErrorDetailType_260187CAttributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: string
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: string
    
}

export interface ApplicationErrorDetailType_260187CAttributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType_185487S {
    
    $attributes: FreeTextInformationType_185487SAttributes
    
    
    freeTextDetails: FreeTextDetailsType_260188C
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType_185487SAttributes {
    
}


export interface FreeTextDetailsType_260188C {
    
    $attributes: FreeTextDetailsType_260188CAttributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
    
    language: Array<string>
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType_260188CAttributes {
    
}


export interface pnrHeaderType {
    
    $attributes: pnrHeaderTypeAttributes
    
    // specify the reference to a reservation
    reservationInfo: ReservationControlInformationType_197518S
    
    // provide specific reference identification
    referenceForRecordLocator: Array<ReferenceInfoType6>
    
}

export interface pnrHeaderTypeAttributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationType_197518S {
    
    $attributes: ReservationControlInformationType_197518SAttributes
    
    // Reservation information
    reservation: Array<ReservationControlInformationDetailsType_275213C>
    
}

export interface ReservationControlInformationType_197518SAttributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsType_275213C {
    
    $attributes: ReservationControlInformationDetailsType_275213CAttributes
    
    // 1A or Other airline record locator information Passive segment airline code
    companyId: Array<string>
    
    // 1. Record - 1A record locator or - OA record locator
    controlNumber: Array<string>
    
    // 1. Profile record locator information: Customer type: C for Corporate T for Traveler F for Frequent Flyer 2. or reservation number of the PNR: N for numeric identifier
    controlType: Array<string>
    
    // 1. RR element: Date 2. SP element: Date 3. PNR header/RP line: Date of last End of transaction
    date: Array<string>
    
    // 1. PNR header/RP line: time of last End of transaction
    time: Array<number>
    
}

export interface ReservationControlInformationDetailsType_275213CAttributes {
    
}

// To provide specific reference identification
export interface ReferenceInfoType6 {
    
    $attributes: ReferenceInfoType6Attributes
    
    // This composite is used to transmit association information
    reference: Array<ReferencingDetailsType_111975C>
    
}

export interface ReferenceInfoType6Attributes {
    
}


export interface ReferencingDetailsType_111975C {
    
    $attributes: ReferencingDetailsType_111975CAttributes
    
    // Amadeus codes are used here. PT for Passenger Tatoo // ST for Segment Tatoo //OT for Other element Tatoo //SS for Segment Tatoo+SubTatoo
    qualifier: string
    
    // reference number refers to a PNR segment/element that has this number in its related element reference segment in the same message (qualifier PT, SS, ST).
    number: string
    
}

export interface ReferencingDetailsType_111975CAttributes {
    
}

// To specify the Amadeus PNR Record Locator Security Information for RR, SP elements and PNR Header or RP line
export interface ReservationSecurityInformationType_204487S {
    
    $attributes: ReservationSecurityInformationType_204487SAttributes
    
    // Responsibility Information
    responsibilityInformation: Array<ResponsibilityInformationType>
    
    // Ticket Information
    queueingInformation: Array<TicketInformationType_5120C>
    
    // 1. PNR Header: Pseudo City Code (not in the CRT display) AGY for Travel agency EHD for First level Help Desk DAP for Data processing center / Amadeus Help Desk Nice SEC for Security administrator WZ for AIS security administrator
    cityCode: Array<string>
    
    // Second RP line information
    secondRpInformation: Array<SecondRpLineInformationType_283891C>
    
}

export interface ReservationSecurityInformationType_204487SAttributes {
    
}


export interface ResponsibilityInformationType {
    
    $attributes: ResponsibilityInformationTypeAttributes
    
    // Type of PNR element: - RR for Associated Cross Reference Record - SP for Split Party - RP for PNR Header line
    typeOfPnrElement: string
    
    // 1. RR element: 2. SP element: 3. PNR Header:Agent initials and duty code (eg: AASU)
    agentId: Array<string>
    
    // 1. RR element office that copied the PNR 2. SP element: office that split the PNR 3. PNR Header: office responsibility or - OA office (City code + OA code) which is 5 chars long
    officeId: Array<string>
    
    // ATA/IATA reference number assigned to a travel agent
    iataCode: Array<string>
    
}

export interface ResponsibilityInformationTypeAttributes {
    
}


export interface TicketInformationType_5120C {
    
    $attributes: TicketInformationType_5120CAttributes
    
    // 1. PNR Header: Amadeus Queuing Office Id
    queueingOfficeId: Array<string>
    
    // 1. PNR Header: OA city code
    location: Array<string>
    
}

export interface TicketInformationType_5120CAttributes {
    
}


export interface SecondRpLineInformationType_283891C {
    
    $attributes: SecondRpLineInformationType_283891CAttributes
    
    // Creation office
    creationOfficeId: string
    
    // Creation agent sine/queue category (eg: 1234AA)
    agentSignature: Array<string>
    
    // PNR creation date
    creationDate: string
    
    // ATA/IATA number assigned to a travel agent
    creatorIataCode: Array<string>
    
    // PNR creation time
    creationTime: Array<string>
    
}

export interface SecondRpLineInformationType_283891CAttributes {
    
}

// To specify a queue, that is: an office, a queue number, a category number and a date range number or a date. This segment can also be used in an output message.
export interface QueueType {
    
    $attributes: QueueTypeAttributes
    
    // Queue detail
    queueDetail: Array<QueueDetailsType>
    
    // Queue category detail
    categoryDetail: Array<GategoryType>
    
    // date range
    dateRange: Array<DateRangeType>
    
    // Other queue information
    informations: Array<OtherInformationType>
    
}

export interface QueueTypeAttributes {
    
}


export interface QueueDetailsType {
    
    $attributes: QueueDetailsTypeAttributes
    
    // A (first) queue number
    queueNum1: Array<number>
    
    // [2-7] characters
    queueName: Array<string>
    
}

export interface QueueDetailsTypeAttributes {
    
}


export interface GategoryType {
    
    $attributes: GategoryTypeAttributes
    
    // A (first) category number
    categoryNum1: Array<number>
    
    // [2-16] characters for Special [2-10] characters for Dual
    categoryName: Array<string>
    
}

export interface GategoryTypeAttributes {
    
}


export interface DateRangeType {
    
    $attributes: DateRangeTypeAttributes
    
    // In range [1-4]
    dateRangeNum: Array<number>
    
}

export interface DateRangeTypeAttributes {
    
}


export interface OtherInformationType {
    
    $attributes: OtherInformationTypeAttributes
    
    // Queue cycle complete indicator that may appear in Queue working response message. QCC for Queue cycle complete
    indicator: Array<string>
    
    // Indicates the type of Queue in a Queue working response message. PNR for PNR MSG for Message
    queueType: Array<string>
    
}

export interface OtherInformationTypeAttributes {
    
}

// To specify the number of units requires
export interface NumberOfUnitsTypeI {
    
    $attributes: NumberOfUnitsTypeIAttributes
    
    // Number of Units detail
    numberDetail: NumberOfUnitDetailsTypeI_2755C
    
}

export interface NumberOfUnitsTypeIAttributes {
    
}


export interface NumberOfUnitDetailsTypeI_2755C {
    
    $attributes: NumberOfUnitDetailsTypeI_2755CAttributes
    
    // PNR Header / Queue header / number of remaining items in Queue
    number: Array<number>
    
    // PNR for PNR
    qualifier: Array<string>
    
}

export interface NumberOfUnitDetailsTypeI_2755CAttributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType6 {
    
    $attributes: CodedAttributeType6Attributes
    
    
    attributeDetails: Array<CodedAttributeInformationType_142108C>
    
}

export interface CodedAttributeType6Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_142108C {
    
    $attributes: CodedAttributeInformationType_142108CAttributes
    
    // provides the attribute Type
    attributeType: string
    
}

export interface CodedAttributeInformationType_142108CAttributes {
    
}

// To provide free form or coded long text information
export interface LongFreeTextType {
    
    $attributes: LongFreeTextTypeAttributes
    
    // To specify the type of freetext
    freetextDetail: Array<FreeTextQualificationType2>
    
    // Long free text information.
    longFreetext: Array<string>
    
}

export interface LongFreeTextTypeAttributes {
    
}


export interface FreeTextQualificationType2 {
    
    $attributes: FreeTextQualificationType2Attributes
    
    // Identifies whether the free text is coded or not coded : 3 for Literal text
    subjectQualifier: string
    
    // Information type, coded. see code list
    type: Array<string>
    
    // Transmittable/non-transmittable indicator (S or X).
    status: Array<string>
    
    // Airline or system code.
    companyId: Array<string>
    
}

export interface FreeTextQualificationType2Attributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType_186270S {
    
    $attributes: StatusType_186270SAttributes
    
    // STATUS DETAILS
    statusInformation: Array<StatusDetailsType_260968C>
    
}

export interface StatusType_186270SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType_260968C {
    
    $attributes: StatusDetailsType_260968CAttributes
    
    // list of status/qualifiers Either His for Historical or Crt for Current
    indicator: Array<string>
    
    // Conveys any additional data necessary to qualify the indicator
    description: Array<string>
    
}

export interface StatusDetailsType_260968CAttributes {
    
}

// To provide free form or coded text information
export interface InteractiveFreeTextTypeI_136698S {
    
    $attributes: InteractiveFreeTextTypeI_136698SAttributes
    
    // Describes free text type
    freetextDetail: Array<FreeTextQualificationTypeI3>
    
    // One occurrence is supposed to represent a logical entity of free text (e.g. one line of text).
    text: Array<string>
    
}

export interface InteractiveFreeTextTypeI_136698SAttributes {
    
}


export interface FreeTextQualificationTypeI3 {
    
    $attributes: FreeTextQualificationTypeI3Attributes
    
    // Identifies whether the free text is coded or not coded 3 for Literal text
    subjectQualifier: string
    
    // Coded text, or specifies type of info Surface segment : 2 for Address or 5 for Telephone nature un known Cruise segment : P30 for Ship Name
    type: Array<string>
    
    // Company code
    companyId: Array<string>
    
    // ISO code for language of free text
    language: Array<string>
    
}

export interface FreeTextQualificationTypeI3Attributes {
    
}

// To specify an Amadeus PNR History Data
export interface PnrHistoryDataType {
    
    $attributes: PnrHistoryDataTypeAttributes
    
    // Reference to previous envelop It may not exist when we are on element creation case.
    previousRecord: Array<number>
    
    // Current envelop
    currentRecord: Array<number>
    
    // History element name ON, AS, RF... First char for type of action done, followed by a letter related to the element concerned.
    elementType: Array<string>
    
    // Free flow text (history data element not detailed) Max length put from 254 to 255 for the case of long history
    elementData: string
    
}

export interface PnrHistoryDataTypeAttributes {
    
}

// POS data
export interface POSGroupType {
    
    $attributes: POSGroupTypeAttributes
    
    // - Office ID owner of the SBR. - IATA Code - Agent type
    sbrUserIdentificationOwn: UserIdentificationType6
    
    // - Corporate Code - City Code
    sbrSystemDetails: Array<SystemDetailsInfoType_33158S>
    
    // Preferences - Country - Language - Currency
    sbrPreferences: Array<UserPreferencesType2>
    
}

export interface POSGroupTypeAttributes {
    
}

// This segment is used to identify a user.
export interface UserIdentificationType6 {
    
    $attributes: UserIdentificationType6Attributes
    
    // Originator Identification Details
    originIdentification: OriginatorIdentificationDetailsTypeI_170735C
    
    // Agent type (A, T, E)
    originatorTypeCode: Array<string>
    
}

export interface UserIdentificationType6Attributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI_170735C {
    
    $attributes: OriginatorIdentificationDetailsTypeI_170735CAttributes
    
    // IATA code
    originatorId: Array<number>
    
    // Office ID of the PNR owner.
    inHouseIdentification1: string
    
    // Amid of the owner of the SBR.
    inHouseIdentification2: Array<number>
    
}

export interface OriginatorIdentificationDetailsTypeI_170735CAttributes {
    
}

// Used to specify a system
export interface SystemDetailsInfoType_33158S {
    
    $attributes: SystemDetailsInfoType_33158SAttributes
    
    // POS airline
    deliveringSystem: SystemDetailsTypeI_57708C
    
}

export interface SystemDetailsInfoType_33158SAttributes {
    
}

// To identify by code or name and location the system that originates or delivers the message for a third party.
export interface SystemDetailsTypeI_57708C {
    
    $attributes: SystemDetailsTypeI_57708CAttributes
    
    // Corporate Code
    companyId: string
    
    // Pseudo City Code
    locationId: Array<string>
    
}

export interface SystemDetailsTypeI_57708CAttributes {
    
}

// Used to specify country, currency and language
export interface UserPreferencesType2 {
    
    $attributes: UserPreferencesType2Attributes
    
    // This composite contains details on user preferences : _ Country code _ Language code _ Currency code
    userPreferences: OriginatorDetailsTypeI2
    
}

export interface UserPreferencesType2Attributes {
    
}

// Characteristics of the originator of a request.
export interface OriginatorDetailsTypeI2 {
    
    $attributes: OriginatorDetailsTypeI2Attributes
    
    // Country code
    codedCountry: string
    
    // Currency code
    codedCurrency: Array<string>
    
    // Language code
    codedLanguage: Array<string>
    
}

export interface OriginatorDetailsTypeI2Attributes {
    
}


export interface technicalDataType {
    
    $attributes: technicalDataTypeAttributes
    
    // Contains the enveloppe number of the PNR, issue at last EOT.
    enveloppeNumberData: SequenceDetailsTypeU4
    
    // CS assumption on last transmitted envelope number
    lastTransmittedEnvelopeNumber: Array<PnrHistoryDataType_27157S>
    
    // Contains the Purge Date of the PNR at the time of the retrieval
    purgeDateData: Array<StructuredDateTimeInformationType_27086S>
    
    // Contains general information relative to the state of the PNR
    generalPNRInformation: Array<StatusTypeI_32775S>
    
}

export interface technicalDataTypeAttributes {
    
}

// To provide details relating to the sequence.
export interface SequenceDetailsTypeU4 {
    
    $attributes: SequenceDetailsTypeU4Attributes
    
    
    actionRequest: Array<string>
    
    
    sequenceDetails: SequenceInformationTypeU_24073C
    
}

export interface SequenceDetailsTypeU4Attributes {
    
}

// Identification of a sequence and source for sequencing.
export interface SequenceInformationTypeU_24073C {
    
    $attributes: SequenceInformationTypeU_24073CAttributes
    
    
    number: string
    
}

export interface SequenceInformationTypeU_24073CAttributes {
    
}

// To specify an Amadeus PNR History Data
export interface PnrHistoryDataType_27157S {
    
    $attributes: PnrHistoryDataType_27157SAttributes
    
    // Contains the last EOTed envelop number.
    currentRecord: Array<number>
    
}

export interface PnrHistoryDataType_27157SAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_27086S {
    
    $attributes: StructuredDateTimeInformationType_27086SAttributes
    
    // Convey date and/or time.
    dateTime: StructuredDateTimeType_16347C
    
}

export interface StructuredDateTimeInformationType_27086SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_16347C {
    
    $attributes: StructuredDateTimeType_16347CAttributes
    
    // Year number.
    year: number
    
    // Month number in the year ( begins to 1 )
    month: string
    
    // Day number in the month ( begins to 1 )
    day: string
    
}

export interface StructuredDateTimeType_16347CAttributes {
    
}

// To identify a status and related information.
export interface StatusTypeI_32775S {
    
    $attributes: StatusTypeI_32775SAttributes
    
    // Contains general indicators relative to the state of the PNR
    statusDetails: StatusDetailsTypeI_57035C
    
}

export interface StatusTypeI_32775SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI_57035C {
    
    $attributes: StatusDetailsTypeI_57035CAttributes
    
    // Indicator name.
    indicator: Array<string>
    
    // Contains &#34;MOD&#34; if the PNR has been modifed since it has been retrieved
    isPNRModifDuringTrans: Array<string>
    
}

export interface StatusDetailsTypeI_57035CAttributes {
    
}


export interface travellerInfoType {
    
    $attributes: travellerInfoTypeAttributes
    
    // specify the PNR segments/elements references and action to apply
    elementManagementPassenger: ElementManagementSegmentType2
    
    // This group contains passenger related information: - name - date of birth First repetition is usually for adult and second for related infant.
    passengerData: Array<passengerDataType>
    
    // This group contains passenger related information: - name - date of birth First repetition is usually for adult and second for related infant. This group is used to carry: - rich names - and/or multiple names (Native name(s)), Universal name, for a same passenger. - or name (rich or roman) with title separated from the firstname.
    enhancedPassengerData: Array<enhancedPassengerDataType>
    
    // Specify error at name level
    nameError: Array<ErrorGroupType_223552G>
    
}

export interface travellerInfoTypeAttributes {
    
}

// To specify the PNR segments/elements references and action to apply
export interface ElementManagementSegmentType2 {
    
    $attributes: ElementManagementSegmentType2Attributes
    
    // Action to perform (When a PNR segment/element is transmitted) . IF for Information only (Value by default, Code used in a Server response)
    status: Array<string>
    
    // Reference details
    reference: Array<ReferencingDetailsType_127526C>
    
    // PNR segment or element name
    segmentName: Array<string>
    
    // PNR segment/element &#39;line&#39; number attributed by the Server
    lineNumber: Array<number>
    
}

export interface ElementManagementSegmentType2Attributes {
    
}


export interface ReferencingDetailsType_127526C {
    
    $attributes: ReferencingDetailsType_127526CAttributes
    
    // Shopping Basket codes : CDS Shopping Basket Distribution record CRR Shopping Basket Reservation RecordCST Shopping Basket customer DOC Shopping Basket document FAR Shopping Basket fares and fees information FFY Shopping Basket frequent flyer information FOP Shopping Basket form of payment PRD Shopping Basket product RMK Shopping Basket remark SBK Shopping Basket (used in search results)
    qualifier: string
    
    // Number attributed by the Server to reference the shopping basket item.
    number: number
    
}

export interface ReferencingDetailsType_127526CAttributes {
    
}


export interface passengerDataType {
    
    $attributes: passengerDataTypeAttributes
    
    // specify traveler and personal details relating to a traveler
    travellerInformation: TravellerInformationType_185946S
    
    // In case of group, contains the group counters (Booked, Canceled, Split)
    groupCounters: Array<NumberOfUnitsType_76106S>
    
    // Inf/Child date of birth (DDMMYYYY). For instance 01122007
    dateOfBirth: Array<DateAndTimeInformationType_32722S>
    
}

export interface passengerDataTypeAttributes {
    
}

// To specify a traveler and personal details relating to the traveler
export interface TravellerInformationType_185946S {
    
    $attributes: TravellerInformationType_185946SAttributes
    
    // Traveller surname details
    traveller: Array<TravellerSurnameInformationType_260693C>
    
    // Occurrence one relates to the traveler. Occurrence 2 relates only to an infant accompanying the traveler for whom only the given name is present.
    passenger: Array<TravellerDetailsType_260694C>
    
}

export interface TravellerInformationType_185946SAttributes {
    
}


export interface TravellerSurnameInformationType_260693C {
    
    $attributes: TravellerSurnameInformationType_260693CAttributes
    
    // Traveler Last Name Group name
    surname: string
    
    // Passenger Qualifier used for groups and NCP.
    qualifier: Array<string>
    
    // 1 :one traveler with exceptions below. 2 :traveler accompanied by an infant for whom only the given name is present. n : total number of passengers of the group (assigned + unassigned)
    quantity: Array<number>
    
    // Staff type
    staffType: Array<string>
    
}

export interface TravellerSurnameInformationType_260693CAttributes {
    
}

// To identify the given/first name and the title of a traveller and the traveller type.
export interface TravellerDetailsType_260694C {
    
    $attributes: TravellerDetailsType_260694CAttributes
    
    // Traveler First Name
    firstName: Array<string>
    
    // Traveler Type using Amadeus codification.
    type: Array<string>
    
    // 1 code is used to mention that the traveler is accompanied by an infant with no seat.
    infantIndicator: Array<string>
    
    // Identification code, 2 cases: ID&lt;1 to 51 char free text) or CR&lt;1 to 40 char free text)
    identificationCode: Array<string>
    
}

export interface TravellerDetailsType_260694CAttributes {
    
}

// To specify the Group PNR counters
export interface NumberOfUnitsType_76106S {
    
    $attributes: NumberOfUnitsType_76106SAttributes
    
    // Number of Unit Details
    quantityDetails: Array<NumberOfUnitDetailsTypeI3>
    
}

export interface NumberOfUnitsType_76106SAttributes {
    
}

// Identification of number of units and its purpose.
export interface NumberOfUnitDetailsTypeI3 {
    
    $attributes: NumberOfUnitDetailsTypeI3Attributes
    
    // Group counter corresponding to passengers, and so value from 0 to 99.
    numberOfUnit: Array<number>
    
    
    unitQualifier: Array<string>
    
}

export interface NumberOfUnitDetailsTypeI3Attributes {
    
}

// To convey information regarding estimated or actual dates and times of operational events
export interface DateAndTimeInformationType_32722S {
    
    $attributes: DateAndTimeInformationType_32722SAttributes
    
    // DATE AND TIME DETAILS
    dateAndTimeDetails: Array<DateAndTimeDetailsTypeI_56946C>
    
}

export interface DateAndTimeInformationType_32722SAttributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeDetailsTypeI_56946C {
    
    $attributes: DateAndTimeDetailsTypeI_56946CAttributes
    
    
    qualifier: Array<string>
    
    // Inf/Child date of birth
    date: Array<string>
    
}

export interface DateAndTimeDetailsTypeI_56946CAttributes {
    
}


export interface enhancedPassengerDataType {
    
    $attributes: enhancedPassengerDataTypeAttributes
    
    // Specify traveler and personal details relating to a traveler. Will be filled imperatively if name is UTF-8 encoded.
    enhancedTravellerInformation: EnhancedTravellerInformationType2
    
    // In case of group, contains the group counters (Booked, Canceled, Split)
    groupCountersInEnhancedPaxData: Array<NumberOfUnitsType_76106S>
    
    // Inf/Child date of birth (DDMMYYYY). For instance 01122007
    dateOfBirthInEnhancedPaxData: Array<DateAndTimeInformationType_32722S>
    
}

export interface enhancedPassengerDataTypeAttributes {
    
}

// To specify traveler and personal details relating to one traveler having rich name and/or multiple names
export interface EnhancedTravellerInformationType2 {
    
    $attributes: EnhancedTravellerInformationType2Attributes
    
    // Traveller name information for 1 passenger. This concerns name attributes that are unique for a given passenger.
    travellerNameInfo: Array<TravellerNameInfoType2>
    
    // 5 possible types of names for 1 passenger only. These names could be Native names, Passport name or Romanization.
    otherPaxNamesDetails: Array<TravellerNameDetailsType2>
    
}

export interface EnhancedTravellerInformationType2Attributes {
    
}


export interface TravellerNameInfoType2 {
    
    $attributes: TravellerNameInfoType2Attributes
    
    // G for group.
    qualifier: Array<string>
    
    // 1 :one traveler with exceptions below. 2 :traveler accompanied by an infant. n : total number of passengers of the group (assigned + unassigned).
    quantity: Array<number>
    
    // Passenger type (PTC).
    type: Array<string>
    
    // Passenger type (PTC).
    otherType: Array<string>
    
    // 1 code is used to mention that the traveler is accompanied by an infant with no seat.
    infantIndicator: Array<string>
    
    // Identification code, 2 cases: ID&lt;1 to 51 char free text) or CR&lt;1 to 40 char free text).
    travellerIdentificationCode: Array<string>
    
    // Age of the passenger
    age: Array<number>
    
}

export interface TravellerNameInfoType2Attributes {
    
}

// To identify all the names in different alphabets associated to a same traveller
export interface TravellerNameDetailsType2 {
    
    $attributes: TravellerNameDetailsType2Attributes
    
    // Name type (Native name, Universal name, Romanized name...).
    nameType: Array<string>
    
    // Reference name: name that is considered as active in all PNR and subsequent flows.
    referenceName: Array<string>
    
    // Name that would be displayed depending on contextual data in a PNR display.
    displayedName: Array<string>
    
    // Romanization method used to get from a Native name a Romanized name.
    romanizationMethod: Array<string>
    
    // Passenger surname
    surname: Array<string>
    
    // Passenger firstname
    givenName: Array<string>
    
    // Passenger title. If the title is provided in this field it should not be provided along with the firstname in the givenName field.
    title: Array<string>
    
}

export interface TravellerNameDetailsType2Attributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType_223552G {
    
    $attributes: ErrorGroupType_223552GAttributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType_185486S
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType_185487S>
    
}

export interface ErrorGroupType_223552GAttributes {
    
}


export interface originDestinationDetailsType {
    
    $attributes: originDestinationDetailsTypeAttributes
    
    // convey origin and destination of a journey
    originDestination: OriginAndDestinationDetailsTypeI_3061S
    
    // specify all segments
    itineraryInfo: Array<itineraryInfoType>
    
    // This group contains extended content details.
    extendedContentGroup: Array<extendedContentGroupType>
    
}

export interface originDestinationDetailsTypeAttributes {
    
}

// To convey the origin and destination of a journey
export interface OriginAndDestinationDetailsTypeI_3061S {
    
    $attributes: OriginAndDestinationDetailsTypeI_3061SAttributes
    
    // Airport/city code of Origin In a Client request message, a non-blank ODI is used in an air sell request to advise that the following segments (TVL etc...) are connected. There is a maximum of 6 TVLs following a non-blank ODI.
    origin: Array<string>
    
    // Airport/city code of Destination
    destination: Array<string>
    
}

export interface OriginAndDestinationDetailsTypeI_3061SAttributes {
    
}


export interface itineraryInfoType {
    
    $attributes: itineraryInfoTypeAttributes
    
    // specify the PNR segments/elements references and action to apply
    elementManagementItinerary: ElementManagementSegmentType2
    
    // specify details related to a product
    travelProduct: Array<TravelProductInformationTypeI_193100S>
    
    // specify the message type and business function
    itineraryMessageAction: Array<MessageActionDetailsType>
    
    // specify a reference to a reservation
    itineraryReservationInfo: Array<ReservationControlInformationTypeI_196503S>
    
    // indicate quantity and action required in relation to a product
    relatedProduct: Array<RelatedProductInformationTypeI3>
    
    // Indicator at element level: - CGB (chargeable indicator) - TSA (Secure Flight indicator)
    elementsIndicators: Array<StatusType_150135S>
    
    // To Convey the Reason for Issuance Code (RFIC) and Reason For Issuance Sub code (RFISC)
    reasonForIssuanceCode: Array<PricingOrTicketingSubsequentType>
    
    // convey additional information concerning an airline flight
    flightDetail: Array<AdditionalProductDetailsTypeI3>
    
    // Contain the cabin class details
    cabinDetails: Array<CabinDetailsType>
    
    // specify details for making a selection
    selectionDetails: Array<SelectionDetailsTypeI_201122S>
    
    // provide free from or coded text information
    itineraryfreeFormText: Array<InteractiveFreeTextType2>
    
    // provide free form or coded long text information
    itineraryFreetext: Array<LongFreeTextType>
    
    // specify the details for hotel transaction
    hotelProduct: Array<HotelProductInformationType>
    
    // specify the Rate information
    rateInformations: Array<RateInformationType>
    
    // specify one option
    generalOption: Array<GeneralOptionType>
    
    // provide the ISO code of a country
    country: Array<CountryCodeListType1>
    
    // To specify details relating to tax(es).
    taxInformation: Array<TaxTypeI>
    
    // specify operating flight additional information
    customerTransactionData: Array<CustomerTransactionDataType>
    
    // Details of the yield data.
    yieldGroup: Array<yieldGroupType>
    
    
    legInfo: Array<legInfoType>
    
    // Group used to carry FLIX information associated to the segment
    flixInfo: Array<FLIXType>
    
    // Provide Date and Time Details relative to the Itinerary
    dateTimeDetails: Array<DateAndTimeInformationType4>
    
    // Contains data pertaining to LCC segments
    lccTypicalData: Array<lccTypicalDataType>
    
    // specify insurance information
    insuranceInformation: Array<insuranceInformationType>
    
    // This group handles all Insurance structured details.
    insuranceDetails: Array<InsuranceBusinessDataType>
    
    // This group contains all the new segments to be integrated in PNRACC in case of a PNR retrieval
    hotelReservationInfo: Array<hotelReservationInfoType>
    
    // car sell details
    typicalCarData: Array<typicalCarDataType>
    
    // Dedicated to convey the specific cruise sailing information. It is in fact the reflection of the cruise segment PNR content. An example of Amadeus PNR with 2 Cruise segments, one confirmed the other cancelled. RP/NYCP02001/NYCP02001 AA/SU 19AUG03/1423Z YYAA63 NYCP02001/0001AA/19AUG03 1.TEST/AAA MR 2 CRU PCL HK1 SJUSJU 18JAN2004-7 DAWN PRINCESS/CF-9VHJ2K/NM-TEST/AAA MR 3 CRU PCL HX1 XYZPKG 18MAY2004-7 CORAL PRINCESS/GP-ABCDEF/CX-654321/NM-TEST/AAA MR 4 AP 0494503434 5 TK OK19AUG/NYCP02001
    typicalCruiseData: Array<CruiseBusinessDataType>
    
    // Information pertaining to a rail segment
    railInfo: Array<TrainInformationType>
    
    // Marks separation between Rail Group and Tour Group, avoid Ambiguity with CPY segment.
    markerRailTour: DummySegmentTypeI4
    
    // Dedicated to convey the specific Tour information.
    tourInfo: Array<TourInformationType>
    
    // Information pertaining to a Ferry segment
    ferryLegInformation: Array<FerryBookingDescriptionType>
    
    // Specify error at segment level
    errorInfo: Array<ErrorGroupType_223552G>
    
    // provide specific reference identification
    referenceForSegment: Array<ReferenceInfoType6>
    
}

export interface itineraryInfoTypeAttributes {
    
}

// To specify details related to a product
export interface TravelProductInformationTypeI_193100S {
    
    $attributes: TravelProductInformationTypeI_193100SAttributes
    
    // To specify dates and times of the product
    product: Array<ProductDateTimeTypeI_270055C>
    
    // Boarding point detail
    boardpointDetail: Array<LocationTypeI_2784C>
    
    // Off Point details
    offpointDetail: Array<LocationTypeI_2784C>
    
    // Company identification
    companyDetail: Array<CompanyIdentificationTypeI_2785C>
    
    // Product identifications details
    productDetails: Array<ProductIdentificationDetailsTypeI_2786C>
    
    // Product Type details
    typeDetail: Array<ProductTypeDetailsTypeI_2787C>
    
    // AIR segment : to indicate an Informational Air segment : N for No action required.
    processingIndicator: Array<string>
    
}

export interface TravelProductInformationTypeI_193100SAttributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI_270055C {
    
    $attributes: ProductDateTimeTypeI_270055CAttributes
    
    // AIR segment : departure date ATX segment : requested date CAR segment : pick-up date CCR segment : pick-up date HHL segment : check-in date HTL segment : check-in date MIS segment : date for service requested SUR segment : date Trn Amtrak sgt: departure date Trn SNCF sgt: departure date TTO segment: departure date of the tour TUR segment: tour departure date INS element: departure date CRU segment: sailing departure date
    depDate: string
    
    // AIR segment : departure time SUR segment : pick-up time Trn Amtrak sgt: departure time Trn SNCF sgt: departure time
    depTime: Array<string>
    
    // AIR segment : arrival date CAR segment : drop-off date CCR segment : return date HHL segment : check-out date HTL segment : check-out date TTO segment: return date of the tour INS element: return date
    arrDate: Array<string>
    
    // AIR segment : arrival time Trn Amtrak sgt: arrival time Trn SNCF sgt: arrival time
    arrTime: Array<string>
    
    // AIR segment: day change indicator (1,2,-1) TRN Amtrak sgt: day change indicator (1,2,-1) TRN SNCF sgt: day change indicator (1,2,-1)
    dayChangeIndicator: Array<number>
    
}

export interface ProductDateTimeTypeI_270055CAttributes {
    
}


export interface LocationTypeI_2784C {
    
    $attributes: LocationTypeI_2784CAttributes
    
    // AIR segment : boarding point ATX segment : boarding point CAR segment : pick-up point city CCR segment : pick-up point city HHL segment : city code HTL segment : check-in city MIS segment : city code SUR segment : city/airport code Trn Amtrak sgt: board point city code Trn SNCF sgt: board point city code (RESARAIL code) TTO segment: departure location TUR segment: tour start city CRU segment: sailing departure port
    cityCode: string
    
    // TRN SNCF segment : board point city name.
    cityName: Array<string>
    
}

export interface LocationTypeI_2784CAttributes {
    
}


export interface CompanyIdentificationTypeI_2785C {
    
    $attributes: CompanyIdentificationTypeI_2785CAttributes
    
    // Company code
    identification: string
    
    // AIR segment : second airline code for joint flight number. Train Amtrack segment : system provider UIC code. Train SNCF segment : system provider UIC code. Tour segment : tour provider code.
    secondIdentification: Array<string>
    
    // Tour segment : source code.
    sourceCode: Array<string>
    
}

export interface CompanyIdentificationTypeI_2785CAttributes {
    
}


export interface ProductIdentificationDetailsTypeI_2786C {
    
    $attributes: ProductIdentificationDetailsTypeI_2786CAttributes
    
    // Flight number or OPEN - ARNK, car type, transportation type (refer to VGTVD transaction), train number, insurance provider
    identification: string
    
    // AIR segment : class of service TRN Amtrack segment : class of service (1 or 2 chars long). TRN SNCF segment : class of service.
    classOfService: Array<string>
    
    // AIR segment : flight number alpha suffix : A, B, C, D, E. SUR segment : departure code : A or D.
    subtype: Array<string>
    
    // AIR segment : N for Night class
    description: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI_2786CAttributes {
    
}


export interface ProductTypeDetailsTypeI_2787C {
    
    $attributes: ProductTypeDetailsTypeI_2787CAttributes
    
    // AIR segment : Electronic ticketing indicator : ET for Electronic ticket candidate SUR segment : transportation zone number Amtrack segment : Equipement code SNCF segment : train type (3 chars code)
    detail: Array<string>
    
}

export interface ProductTypeDetailsTypeI_2787CAttributes {
    
}

// To specify the message type and business function.
export interface MessageActionDetailsType {
    
    $attributes: MessageActionDetailsTypeAttributes
    
    
    business: MessageFunctionBusinessDetailsType
    
}

export interface MessageActionDetailsTypeAttributes {
    
}

// To indicate the type and function of a message or part of a message.
export interface MessageFunctionBusinessDetailsType {
    
    $attributes: MessageFunctionBusinessDetailsTypeAttributes
    
    
    function: string
    
}

export interface MessageFunctionBusinessDetailsTypeAttributes {
    
}

// To specify a reference to a reservation
export interface ReservationControlInformationTypeI_196503S {
    
    $attributes: ReservationControlInformationTypeI_196503SAttributes
    
    // Reservation Information
    reservation: Array<ReservationControlInformationDetailsTypeI3>
    
}

export interface ReservationControlInformationTypeI_196503SAttributes {
    
}


export interface ReservationControlInformationDetailsTypeI3 {
    
    $attributes: ReservationControlInformationDetailsTypeI3Attributes
    
    // - 1A or Other airline record locator information - Passive segment airline code
    companyId: Array<string>
    
    // - 1A record locator or - OA record locator
    controlNumber: Array<string>
    
    // PNR split type.
    controlType: Array<string>
    
    // 1. RR element: Date 2. SP element: Date 3. PNR header/RP line: Date of lastest End of transaction
    date: Array<string>
    
    // 1. PNR header/RP line: time of lastest End of transaction
    time: Array<string>
    
}

export interface ReservationControlInformationDetailsTypeI3Attributes {
    
}

// To indicate quantity and action required in relation to a product
export interface RelatedProductInformationTypeI3 {
    
    $attributes: RelatedProductInformationTypeI3Attributes
    
    // No quantity returned
    quantity: Array<number>
    
    // see code list
    status: Array<string>
    
}

export interface RelatedProductInformationTypeI3Attributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType_150135S {
    
    $attributes: StatusType_150135SAttributes
    
    // STATUS DETAILS
    statusInformation: StatusDetailsType_215781C
    
}

export interface StatusType_150135SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType_215781C {
    
    $attributes: StatusDetailsType_215781CAttributes
    
    // Indicator
    indicator: string
    
}

export interface StatusDetailsType_215781CAttributes {
    
}

// To convey additional information related to a ticket
export interface PricingOrTicketingSubsequentType {
    
    $attributes: PricingOrTicketingSubsequentTypeAttributes
    
    // Reason for issuance code.
    specialCondition: Array<string>
    
    // Reason for Issuance Sub code
    otherSpecialCondition: Array<string>
    
}

export interface PricingOrTicketingSubsequentTypeAttributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsTypeI3 {
    
    $attributes: AdditionalProductDetailsTypeI3Attributes
    
    
    productDetails: Array<AdditionalProductTypeI3>
    
    
    departureInformation: Array<StationInformationTypeI3>
    
    
    arrivalStationInfo: Array<StationInformationTypeI_119771C>
    
    
    mileageTimeDetails: Array<MileageTimeDetailsTypeI2>
    
    
    timeDetail: Array<TravellerTimeDetailsTypeI>
    
    
    facilities: Array<ProductFacilitiesTypeI1>
    
}

export interface AdditionalProductDetailsTypeI3Attributes {
    
}

// Additional details describing a specific means of transport.
export interface AdditionalProductTypeI3 {
    
    $attributes: AdditionalProductTypeI3Attributes
    
    
    equipment: Array<string>
    
    
    numOfStops: Array<number>
    
    
    duration: Array<string>
    
    
    weekDay: Array<number>
    
}

export interface AdditionalProductTypeI3Attributes {
    
}

// To specify departure/arrival information concerning a means of transport.
export interface StationInformationTypeI3 {
    
    $attributes: StationInformationTypeI3Attributes
    
    
    departTerminal: Array<string>
    
}

export interface StationInformationTypeI3Attributes {
    
}

// To specify departure/arrival information concerning a means of transport.
export interface StationInformationTypeI_119771C {
    
    $attributes: StationInformationTypeI_119771CAttributes
    
    
    terminal: Array<string>
    
}

export interface StationInformationTypeI_119771CAttributes {
    
}

// Information about the distance/duration of a trip.
export interface MileageTimeDetailsTypeI2 {
    
    $attributes: MileageTimeDetailsTypeI2Attributes
    
    
    flightLegMileage: Array<number>
    
    
    unitQualifier: Array<string>
    
}

export interface MileageTimeDetailsTypeI2Attributes {
    
}

// Dates and times relevant to a traveller.
export interface TravellerTimeDetailsTypeI {
    
    $attributes: TravellerTimeDetailsTypeIAttributes
    
    
    checkinTime: Array<string>
    
}

export interface TravellerTimeDetailsTypeIAttributes {
    
}

// Identification of facilities for a product or service by type or description.
export interface ProductFacilitiesTypeI1 {
    
    $attributes: ProductFacilitiesTypeI1Attributes
    
    
    entertainement: Array<string>
    
    // For meal, the meal codes follow the IATA meal code standard
    entertainementDescription: Array<string>
    
    
    productQualifier: Array<string>
    
    
    productExtensionCode: Array<string>
    
}

export interface ProductFacilitiesTypeI1Attributes {
    
}

// To specify the physical layout of a cabin class or cabin compartment of an aircraft.
export interface CabinDetailsType {
    
    $attributes: CabinDetailsTypeAttributes
    
    
    cabinDetails: Array<CabinClassDesignationType2>
    
}

export interface CabinDetailsTypeAttributes {
    
}

// CABIN CLASS DESIGNATION
export interface CabinClassDesignationType2 {
    
    $attributes: CabinClassDesignationType2Attributes
    
    // Designates the class of service on the means of transport in which the passenger will travel: - M for Economy - W for Economy Premium - C for Business (Club) - F for First - Y for Economy All
    classDesignator: Array<string>
    
}

export interface CabinClassDesignationType2Attributes {
    
}

// To specify the details for making a selection
export interface SelectionDetailsTypeI_201122S {
    
    $attributes: SelectionDetailsTypeI_201122SAttributes
    
    // Only the first occurrence of the composite is mandatory. Up to 10 occurrences of the composite.
    selection: Array<SelectionDetailsInformationTypeI3>
    
}

export interface SelectionDetailsTypeI_201122SAttributes {
    
}


export interface SelectionDetailsInformationTypeI3 {
    
    $attributes: SelectionDetailsInformationTypeI3Attributes
    
    // see code list
    option: string
    
    // CRU segment - occurrence 1 : Duration of the cruise (saling length) expressed in days.
    optionInformation: Array<string>
    
}

export interface SelectionDetailsInformationTypeI3Attributes {
    
}

// To provide free form or coded text information.
export interface InteractiveFreeTextType2 {
    
    $attributes: InteractiveFreeTextType2Attributes
    
    // Free text qualification
    freeTextQualification: Array<FreeTextQualificationTypeI_274593C>
    
    // Free text
    freeText: Array<string>
    
}

export interface InteractiveFreeTextType2Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationTypeI_274593C {
    
    $attributes: FreeTextQualificationTypeI_274593CAttributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
    
    status: Array<string>
    
    
    companyId: Array<string>
    
    
    language: Array<string>
    
}

export interface FreeTextQualificationTypeI_274593CAttributes {
    
}

// To specify the details for a hotel transaction
export interface HotelProductInformationType {
    
    $attributes: HotelProductInformationTypeAttributes
    
    // Property header details
    property: Array<PropertyHeaderDetailsType>
    
    // Room details
    hotelRoom: Array<RoomDetailsType>
    
    // Rate code
    negotiated: Array<RateCodeRestrictedType>
    
    // Other information
    otherHotelInfo: Array<OtherHotelInformationType>
    
}

export interface HotelProductInformationTypeAttributes {
    
}


export interface PropertyHeaderDetailsType {
    
    $attributes: PropertyHeaderDetailsTypeAttributes
    
    // 1. hotel Provider name
    providerName: Array<string>
    
    // 1. HHL segment:hotel Property Code (or ID) 2. HTL AY Direct Access segment: Property location
    code: Array<string>
    
    // 1. HHL segment:hotel Property name. 2. HTL AY Direct Access segment: Hotel name. Alphanumeric type due to possible numeric values in the names.
    name: Array<string>
    
}

export interface PropertyHeaderDetailsTypeAttributes {
    
}


export interface RoomDetailsType {
    
    $attributes: RoomDetailsTypeAttributes
    
    // 1. room Occupancy
    occupancy: Array<number>
    
    // room Type
    typeCode: Array<string>
    
}

export interface RoomDetailsTypeAttributes {
    
}


export interface RateCodeRestrictedType {
    
    $attributes: RateCodeRestrictedTypeAttributes
    
    // 1. HHL segment: hotel Rate code (an3) 2. For AY Direct Access segment: Rate type = MINR, MODR, MAXR, ADVR, DAYR, SRTE
    rateCode: Array<string>
    
}

export interface RateCodeRestrictedTypeAttributes {
    
}


export interface OtherHotelInformationType {
    
    $attributes: OtherHotelInformationTypeAttributes
    
    // Currency Code at Property 1. For AY Direct Access segment: Currency code
    currencyCode: Array<string>
    
}

export interface OtherHotelInformationTypeAttributes {
    
}

// To specify the rate information
export interface RateInformationType {
    
    $attributes: RateInformationTypeAttributes
    
    // Rate Price
    ratePrice: Array<RatePriceType>
    
    // Rate information
    rateInfo: Array<RateInformationDetailsType>
    
    // Rate indicator
    rateIndicator: Array<RateIndicatorsType>
    
}

export interface RateInformationTypeAttributes {
    
}


export interface RatePriceType {
    
    $attributes: RatePriceTypeAttributes
    
    // 1. Hotel segment: Rate value 2. Hotel AY Direct Access segment: Room rate (imbedded decimal point)
    rateAmount: Array<number>
    
}

export interface RatePriceTypeAttributes {
    
}


export interface RateInformationDetailsType {
    
    $attributes: RateInformationDetailsTypeAttributes
    
    // 1. Hotel segment: Total or daily indicator
    ratePlan: Array<string>
    
}

export interface RateInformationDetailsTypeAttributes {
    
}


export interface RateIndicatorsType {
    
    $attributes: RateIndicatorsTypeAttributes
    
    // 1. HTL AY Direct Access segment: Y for Yes (rate change)
    rateChangeIndicator: Array<string>
    
}

export interface RateIndicatorsTypeAttributes {
    
}

// To specify one option
export interface GeneralOptionType {
    
    $attributes: GeneralOptionTypeAttributes
    
    // ONLY ONE OCCURRENCE Each option is one segment
    optionDetail: GeneralOptionInformationType
    
}

export interface GeneralOptionTypeAttributes {
    
}

// To specify one option
export interface GeneralOptionInformationType {
    
    $attributes: GeneralOptionInformationTypeAttributes
    
    // Option type. hotel/car/cruise/train/insurance options type. CAR : ACD : Action Code for Display BCS : Billing Control System CWB : Car Warning Banner MKT : Marketing informations OS : Other Services informations HOTEL : ACD : Action code for Display BCS : Billing Control System TXT : Marketing text NAM : Hotel property name CNM : Hotel chain name MKT : Marketing informations CXL : Cancellation policy DES : Rate description PRI : Pricing information CRUISE : GPN : Group code. CXN : Booking cancellation number. CFN : Booking confirmation number. NME : Passenger&#39;s last name, first name and title.
    type: string
    
    // 1. Hotel segment: for Update option indicator Y for yes N for no
    updateIndicator: Array<string>
    
    // Free text
    freetext: Array<string>
    
}

export interface GeneralOptionInformationTypeAttributes {
    
}

// To provide the ISO code of a country
export interface CountryCodeListType1 {
    
    $attributes: CountryCodeListType1Attributes
    
    // ISO country code of the DESTINATION of the trip.
    destinationCountryCode: Array<string>
    
}

export interface CountryCodeListType1Attributes {
    
}

// To specify details relating to tax(es).
export interface TaxTypeI {
    
    $attributes: TaxTypeIAttributes
    
    // specify the tax details
    taxDetails: Array<TaxDetailsTypeI_12177C>
    
    
    DummyNET: string
    
}

export interface TaxTypeIAttributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsTypeI_12177C {
    
    $attributes: TaxDetailsTypeI_12177CAttributes
    
    // Tax Amount
    taxRate: Array<string>
    
    // See ISO 4217 codes
    currCode: Array<string>
    
    // Type of the tax
    taxType: Array<string>
    
}

export interface TaxDetailsTypeI_12177CAttributes {
    
}

// specify operating flight additional information
export interface CustomerTransactionDataType {
    
    $attributes: CustomerTransactionDataTypeAttributes
    
    // Point of sell details
    pos: PointOfSaleDataTypeI
    
    // flight suplementary data
    flight: OtherSegmentDataTypeI
    
    // CONNECTION NUMBER
    connection: Array<number>
    
    // Codeshare flight details
    codeShare: Array<CodeshareFlightDataTypeI>
    
}

export interface CustomerTransactionDataTypeAttributes {
    
}

// Point of sale information
export interface PointOfSaleDataTypeI {
    
    $attributes: PointOfSaleDataTypeIAttributes
    
    // POSINV Classification: - C for Country - R for CRS
    classification: string
    
    // Point of Sale CRS
    crs: Array<string>
    
    // Point of Sale Country Code
    pointOfSaleCountry: Array<string>
    
}

export interface PointOfSaleDataTypeIAttributes {
    
}

// provide additional flight information
export interface OtherSegmentDataTypeI {
    
    $attributes: OtherSegmentDataTypeIAttributes
    
    // Cabin Code
    cabin: string
    
    // Sub class number
    subclass: Array<number>
    
    // Flight type : - D for Domestic - I for International - L for Longhaul - S for Shorthaul
    flightType: Array<string>
    
    // Overbooking indicator
    overbooking: Array<string>
    
}

export interface OtherSegmentDataTypeIAttributes {
    
}

// provide codeshare information
export interface CodeshareFlightDataTypeI {
    
    $attributes: CodeshareFlightDataTypeIAttributes
    
    // Company identification
    airline: string
    
    // Product identification
    flightNumber: number
    
    // general indicator
    inventory: string
    
    // Characteristic identification
    sellingClass: string
    
    // Item characteristic
    type: string
    
    // Product identification characteristic
    suffix: Array<string>
    
    // 1 : codeshare cascading is successful 0 : codeshare cascading unsuccessful blank: n/s
    cascadingIndicator: Array<number>
    
}

export interface CodeshareFlightDataTypeIAttributes {
    
}


export interface yieldGroupType {
    
    $attributes: yieldGroupTypeAttributes
    
    // It contains some specific air segment&#39;s indicators data, not present in yieldDataGroup
    yieldData: ODKeyPerformanceDataType
    
    // Details of the yield data.
    yieldDataGroup: Array<ONDType>
    
}

export interface yieldGroupTypeAttributes {
    
}

// To specify yield data for an air segment
export interface ODKeyPerformanceDataType {
    
    $attributes: ODKeyPerformanceDataTypeAttributes
    
    // schedule change indicator -&#39;C&#39; or void
    scheduleChange: Array<string>
    
    // oversale data
    oversale: Array<OversaleDataType>
    
}

export interface ODKeyPerformanceDataTypeAttributes {
    
}

// provide oversale information
export interface OversaleDataType {
    
    $attributes: OversaleDataTypeAttributes
    
    // Bid price oversale number
    oversaleNumber: Array<number>
    
    // Oversale indicator F for Bid-Price Feed Oversale O for Bid-Price Oversale P for Pushed Minimum Oversale
    oversaleIndicator: Array<string>
    
}

export interface OversaleDataTypeAttributes {
    
}

// Convey OND informations
export interface ONDType {
    
    $attributes: ONDTypeAttributes
    
    // Yield informations: Adjusted Yield Segment Bid Price Effective Yield Revenue Loss OND Yield
    yieldInformations: MonetaryInformationType_76537S
    
    // Class code as defined in yield retrieved / Class combinaison of the yield retrieved
    classCombinaison: Array<ProductInformationTypeI_76271S>
    
    // Origin and Destination of the Yield
    ondyield: OriginAndDestinationDetailsTypeI_76268S
    
    // Origin And Destination of the Trip
    tripOnD: Array<OriginAndDestinationDetailsTypeI_76268S>
    
    
    pointOfCommencement: Array<PointOfCommencementTypeI>
    
}

export interface ONDTypeAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_76537S {
    
    $attributes: MonetaryInformationType_76537SAttributes
    
    // Yield info
    monetaryDetails: MonetaryInformationDetailsTypeI6
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsTypeI6>
    
}

export interface MonetaryInformationType_76537SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI6 {
    
    $attributes: MonetaryInformationDetailsTypeI6Attributes
    
    // Yield type
    typeQualifier: string
    
    // Amount of the Yield
    amount: Array<number>
    
}

export interface MonetaryInformationDetailsTypeI6Attributes {
    
}

// To specify details related to availability status or cabin configuration for a product.
export interface ProductInformationTypeI_76271S {
    
    $attributes: ProductInformationTypeI_76271SAttributes
    
    // Booking Class Details
    bookingClassDetails: Array<ProductDetailsTypeI>
    
}

export interface ProductInformationTypeI_76271SAttributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsTypeI {
    
    $attributes: ProductDetailsTypeIAttributes
    
    // Class combination
    designator: string
    
    // indicate availability status . coded or numeric
    availabilityStatus: Array<string>
    
}

export interface ProductDetailsTypeIAttributes {
    
}

// To convey the origin and destination of a journey.
export interface OriginAndDestinationDetailsTypeI_76268S {
    
    $attributes: OriginAndDestinationDetailsTypeI_76268SAttributes
    
    // Departure&#39;s city code:3 character ATA/IATA airport/city code
    origin: Array<string>
    
    // Arrival&#39;s city code:3 character ATA/IATA airport/city code
    destination: Array<string>
    
}

export interface OriginAndDestinationDetailsTypeI_76268SAttributes {
    
}

// To specify the point of commencement
export interface PointOfCommencementTypeI {
    
    $attributes: PointOfCommencementTypeIAttributes
    
    // Country code of the POC
    location: string
    
}

export interface PointOfCommencementTypeIAttributes {
    
}


export interface legInfoType {
    
    $attributes: legInfoTypeAttributes
    
    // Marks separation to avoid Ambiguity between TVL segments.
    markerLegInfo: FlightSegmentDetailsTypeI
    
    
    legTravelProduct: TravelProductInformationTypeI_99362S
    
    
    interactiveFreeText: Array<InteractiveFreeTextTypeI_99363S>
    
}

export interface legInfoTypeAttributes {
    
}

// To specify boarding information about the flight at the passenger&#39;s station of departure.
export interface FlightSegmentDetailsTypeI {
    
    $attributes: FlightSegmentDetailsTypeIAttributes
    
}

export interface FlightSegmentDetailsTypeIAttributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI_99362S {
    
    $attributes: TravelProductInformationTypeI_99362SAttributes
    
    
    flightDate: Array<ProductDateTimeTypeI4>
    
    
    boardPointDetails: Array<LocationTypeI4>
    
    
    offpointDetails: Array<LocationTypeI4>
    
    
    companyDetails: Array<CompanyIdentificationTypeI_148289C>
    
    
    flightIdentification: Array<ProductIdentificationDetailsTypeI4>
    
}

export interface TravelProductInformationTypeI_99362SAttributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI4 {
    
    $attributes: ProductDateTimeTypeI4Attributes
    
    
    departureDate: Array<string>
    
    
    departureTime: Array<string>
    
    
    arrivalDate: Array<string>
    
    
    arrivalTime: Array<string>
    
}

export interface ProductDateTimeTypeI4Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI4 {
    
    $attributes: LocationTypeI4Attributes
    
    
    trueLocationId: Array<string>
    
}

export interface LocationTypeI4Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI_148289C {
    
    $attributes: CompanyIdentificationTypeI_148289CAttributes
    
    
    operatingCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI_148289CAttributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI4 {
    
    $attributes: ProductIdentificationDetailsTypeI4Attributes
    
    
    flightNumber: string
    
}

export interface ProductIdentificationDetailsTypeI4Attributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextTypeI_99363S {
    
    $attributes: InteractiveFreeTextTypeI_99363SAttributes
    
    
    freeTextQualification: Array<FreeTextQualificationTypeI_148295C>
    
    
    freeText: Array<string>
    
}

export interface InteractiveFreeTextTypeI_99363SAttributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationTypeI_148295C {
    
    $attributes: FreeTextQualificationTypeI_148295CAttributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
    
    language: Array<string>
    
}

export interface FreeTextQualificationTypeI_148295CAttributes {
    
}

// Convey the FLIX information within the message
export interface FLIXType {
    
    $attributes: FLIXTypeAttributes
    
    // provides the Flix and Source Types. The Codes FX, LX or FD can be used to specify the Flix-Type. The codes USR or GUI can be used to specify the Data Source
    flixAndSourceTypes: ItemDescriptionType
    
    
    flixComment: Array<FreeTextInformationType_128813S>
    
    
    airportGroup: Array<airportGroupType>
    
}

export interface FLIXTypeAttributes {
    
}

// To describe an item in either an industry or free format.
export interface ItemDescriptionType {
    
    $attributes: ItemDescriptionTypeAttributes
    
    // Qualify the item being described
    itemCharacteristic: Array<string>
    
}

export interface ItemDescriptionTypeAttributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType_128813S {
    
    $attributes: FreeTextInformationType_128813SAttributes
    
    
    freeTextDetails: FreeTextDetailsType_187464C
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType_128813SAttributes {
    
}


export interface FreeTextDetailsType_187464C {
    
    $attributes: FreeTextDetailsType_187464CAttributes
    
    // To convey the type of freeflow.
    textSubjectQualifier: string
    
    // To convey the language for the freetext: ISO language code
    language: Array<string>
    
    // Text source Manual or System.
    source: string
    
    // Character set
    encoding: string
    
}

export interface FreeTextDetailsType_187464CAttributes {
    
}


export interface airportGroupType {
    
    $attributes: airportGroupTypeAttributes
    
    // Only used for Flix-LX or Flix-Disruption: provides the code of the Impacted Airport
    impactedAirport: TerminalTimeInformationTypeS
    
}

export interface airportGroupTypeAttributes {
    
}

// To provide information relating to service times and terminals used by a service.
export interface TerminalTimeInformationTypeS {
    
    $attributes: TerminalTimeInformationTypeSAttributes
    
    // LOCATION IDENTIFICATION
    locationDetails: Array<LocationIdentificationTypeS>
    
}

export interface TerminalTimeInformationTypeSAttributes {
    
}

// Identification of a location by code or name.
export interface LocationIdentificationTypeS {
    
    $attributes: LocationIdentificationTypeSAttributes
    
    // Station. See IATA Airline Coding directory. IATA 3 letter city/aircode code
    cityCode: string
    
}

export interface LocationIdentificationTypeSAttributes {
    
}

// To convey information regarding estimated or actual dates and times of operational events
export interface DateAndTimeInformationType4 {
    
    $attributes: DateAndTimeInformationType4Attributes
    
    // DATE AND TIME DETAILS
    dateAndTimeDetails: Array<DateAndTimeDetailsType4>
    
}

export interface DateAndTimeInformationType4Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeDetailsType4 {
    
    $attributes: DateAndTimeDetailsType4Attributes
    
    // Qualifier of the date and/or time given
    qualifier: string
    
    
    date: Array<string>
    
    
    time: Array<string>
    
}

export interface DateAndTimeDetailsType4Attributes {
    
}


export interface lccTypicalDataType {
    
    $attributes: lccTypicalDataTypeAttributes
    
    // Fare data obtained from D/A availabilty (mapped under PRXP20LCC structure)
    lccFareData: TariffInformationTypeI_28460S
    
    // Connection key tattoo if any
    lccConnectionData: Array<ItemReferencesAndVersionsType_6550S>
    
}

export interface lccTypicalDataTypeAttributes {
    
}

// To specify tariff details relating to a service or product.
export interface TariffInformationTypeI_28460S {
    
    $attributes: TariffInformationTypeI_28460SAttributes
    
    // This composite is used to convey the tariff information
    tariffInfo: Array<TariffInformationDetailsTypeI_50731C>
    
    // Additional rate type information
    rateInformation: Array<RateInformationTypeI_50732C>
    
}

export interface TariffInformationTypeI_28460SAttributes {
    
}

// To identify the rates or tariff details.
export interface TariffInformationDetailsTypeI_50731C {
    
    $attributes: TariffInformationDetailsTypeI_50731CAttributes
    
    // Fare Basis Code 
    fareBasisCode: Array<string>
    
    // Fare Base amount
    fareBaseAmount: Array<number>
    
    // This field is used to convey the currency
    currencyCode: Array<string>
    
}

export interface TariffInformationDetailsTypeI_50731CAttributes {
    
}

// To identify the rate or tariff categories and rate or tariff ranges.
export interface RateInformationTypeI_50732C {
    
    $attributes: RateInformationTypeI_50732CAttributes
    
    // Fare Group
    fareGroup: Array<string>
    
}

export interface RateInformationTypeI_50732CAttributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType_6550S {
    
    $attributes: ItemReferencesAndVersionsType_6550SAttributes
    
    // ID details
    iDSection: UniqueIdDescriptionType2
    
}

export interface ItemReferencesAndVersionsType_6550SAttributes {
    
}


export interface UniqueIdDescriptionType2 {
    
    $attributes: UniqueIdDescriptionType2Attributes
    
    // ID sequence number : envelope number
    iDSequenceNumber: number
    
    // ID qualifier: must be &#39;PNV&#39; as PNR Version Number
    iDQualifier: string
    
}

export interface UniqueIdDescriptionType2Attributes {
    
}


export interface insuranceInformationType {
    
    $attributes: insuranceInformationTypeAttributes
    
    // contain data related to each passenger
    insuranceName: InsuranceNameType
    
    // To specify monetary information
    insuranceMonetaryInformation: Array<MonetaryInformationTypeI_1689S>
    
    // Specify an Amadeus PNR Ticket element
    insurancePremiumInfo: Array<TravellerInsuranceInformationType>
    
    // provide traveller document information
    insuranceDocInfo: Array<TravellerDocumentInformationTypeU>
    
}

export interface insuranceInformationTypeAttributes {
    
}

// This segments contains data related to each of the passengers.
export interface InsuranceNameType {
    
    $attributes: InsuranceNameTypeAttributes
    
    // insurance traveller details
    insuranceTravelerDetails: Array<SpecificTravellerDetailsType2>
    
    // travelerperpax details
    travelerPerpaxDetails: Array<TravelerPerpaxDetailsType>
    
}

export interface InsuranceNameTypeAttributes {
    
}

// this is used to transmit the data concerning each of the passengers.
export interface SpecificTravellerDetailsType2 {
    
    $attributes: SpecificTravellerDetailsType2Attributes
    
    // passenger type indicator
    passengerType: string
    
    
    travellerSurname: Array<string>
    
    
    travellerGivenName: Array<string>
    
    // TravellerReferenceNumber
    travellerReferenceNumber: Array<string>
    
    // birthdate or age of passenger
    passengerBirthdate: Array<string>
    
}

export interface SpecificTravellerDetailsType2Attributes {
    
}

// used to identify if a mask is present and if dat is mandatory or not
export interface TravelerPerpaxDetailsType {
    
    $attributes: TravelerPerpaxDetailsTypeAttributes
    
    
    perpaxMask: string
    
    // perpax mask indicator (optional/mandatory)
    perpaxMaskIndicator: string
    
}

export interface TravelerPerpaxDetailsTypeAttributes {
    
}

// MONETARY INFORMATION
export interface MonetaryInformationTypeI_1689S {
    
    $attributes: MonetaryInformationTypeI_1689SAttributes
    
    // To specify monetary information
    information: Array<MonetaryInformationDetailsTypeI_4220C>
    
}

export interface MonetaryInformationTypeI_1689SAttributes {
    
}

// MONETARY INFORMATION
export interface MonetaryInformationDetailsTypeI_4220C {
    
    $attributes: MonetaryInformationDetailsTypeI_4220CAttributes
    
    // Monetary amount qualifier : - NP : Net Premium - PR : Premium - CV : Coverage - TV : Travel Value - SAV : Saving Amount
    qualifier: string
    
    // Amount
    amount: number
    
    // Eg: USD,FRF,EUR...
    currencyCode: string
    
}

export interface MonetaryInformationDetailsTypeI_4220CAttributes {
    
}

// Traveller insurance information
export interface TravellerInsuranceInformationType {
    
    $attributes: TravellerInsuranceInformationTypeAttributes
    
    // currency of manual premium
    currency: Array<string>
    
    // manual total premium for this traveller
    amount: Array<number>
    
    // supplementary info
    supplementaryInformation: Array<string>
    
    // gender - male or female
    sexCode: Array<string>
    
    // Credit card details
    creditCardDetails: Array<CreditCardType>
    
    // currency of the total premium ,
    totalPremiumCurrency: Array<string>
    
    // calculated total premium , all taxes included for this traveller
    totalPremium: Array<number>
    
    // for future use
    futureCurrency: Array<string>
    
    // for future use
    futureAmount: Array<number>
    
    // Reduction Code
    fareType: Array<string>
    
    // Beneficiary Name
    travelerName: Array<string>
    
}

export interface TravellerInsuranceInformationTypeAttributes {
    
}

// credit card
export interface CreditCardType {
    
    $attributes: CreditCardTypeAttributes
    
    // credit card company code
    creditCardCompany: string
    
    // credit card number
    creditCardNumber: Array<string>
    
    // expiration date
    expirationDate: Array<string>
    
}

export interface CreditCardTypeAttributes {
    
}

// DOC INFO
export interface TravellerDocumentInformationTypeU {
    
    $attributes: TravellerDocumentInformationTypeUAttributes
    
    
    documentInformation: DocumentInformationTypeU
    
    
    datesOfValidity: Array<ValidityDatesTypeU>
    
}

export interface TravellerDocumentInformationTypeUAttributes {
    
}


export interface DocumentInformationTypeU {
    
    $attributes: DocumentInformationTypeUAttributes
    
    // Document type being provided: PP: Passport DL: Driving License NI: National Id. card ID: Local Id. Document
    typeOfDocument: string
    
    // Document Number
    documentNumber: string
    
    // Country code where document has been issued
    countryOfIssue: Array<string>
    
}

export interface DocumentInformationTypeUAttributes {
    
}


export interface ValidityDatesTypeU {
    
    $attributes: ValidityDatesTypeUAttributes
    
    // Date the document was issued (YYYYMMDD)
    issueDate: Array<string>
    
    // Date document expires (YYYYMMDD)
    expirationDate: Array<string>
    
}

export interface ValidityDatesTypeUAttributes {
    
}

// insurance booked data
export interface InsuranceBusinessDataType {
    
    $attributes: InsuranceBusinessDataTypeAttributes
    
    // To convey the provider code and country. Can be empty in case preferences have been set up.
    providerProductDetails: InsuranceProductDetailsType_20773S
    
    // provides details about the substitute name or the nanny name.
    substiteName: Array<TravellerInformationTypeI>
    
    // Amount that is added to the total premium in case an extrareference is specified.
    extraPremium: Array<MonetaryInformationTypeI6>
    
    // To convey the products and it&#39;s directly related data.
    productSection: Array<productSectionType>
    
    // contains the different amounts (net premium/taxes/total premium)
    planCostInfo: Array<TariffInformationTypeI_22057S>
    
    // Provides details about the type of plan beeing booked.
    planTypeDetails: Array<planTypeDetailsType>
    
    // To specify remarks and an emergency contact (phone or name)
    contactDetails: Array<contactDetailsType>
    
    // To specify the address of the subscriber.
    subscriberAddressSection: Array<subscriberAddressSectionType>
    
    // This is used to convey the different coverages and it&#39;s values.
    coverageDetails: Array<coverageDetailsType>
    
    // to specify a commission.
    comissionAmount: Array<CommissionInformationType1>
    
    // To convey a structered FOP element.
    insuranceFopSection: Array<insuranceFopSectionType>
    
    // To specify a number which means that the insurance is in a confirmed status.
    confirmationNumber: Array<ReservationControlInformationTypeI3>
    
    // Used to specify the necesary data for pricing
    productKnowledge: Array<ActionDetailsTypeI>
    
    // to specify to which passenger the insurance is associated: if omitted then it&#39;s for all the names in the PNR. The repetition factor is 198 because we can have 99 passengers in a PNR each of them an infant.
    passengerDetails: Array<passengerDetailsType>
    
    // To convey information if the document has been printed or not.
    printInformation: Array<DocumentInformationDetailsTypeI>
    
}

export interface InsuranceBusinessDataTypeAttributes {
    
}

// Product Details
export interface InsuranceProductDetailsType_20773S {
    
    $attributes: InsuranceProductDetailsType_20773SAttributes
    
    // This data element is used to convey the company code of a non-air company
    companyCode: Array<string>
    
    // To identify the countrycode from the provider.
    countryCode: Array<string>
    
    // Authorization number provided by ht insurance company
    extraReference: Array<string>
    
}

export interface InsuranceProductDetailsType_20773SAttributes {
    
}

// To specify a traveler(s) and personal details relating to the traveler(s).
export interface TravellerInformationTypeI {
    
    $attributes: TravellerInformationTypeIAttributes
    
    // to specify the last name and the type of person (if it&#39;s a nanny or a substitute)
    paxDetails: TravellerSurnameInformationTypeI_18003C
    
    // Only used to put the firstname
    otherPaxDetails: Array<TravellerDetailsTypeI_18004C>
    
}

export interface TravellerInformationTypeIAttributes {
    
}

// Identification of the surname of a traveller, the type of traveller, number of travellers per surname and the action to be taken.
export interface TravellerSurnameInformationTypeI_18003C {
    
    $attributes: TravellerSurnameInformationTypeI_18003CAttributes
    
    // last name
    surname: string
    
    // to specify the type of person
    type: Array<string>
    
}

export interface TravellerSurnameInformationTypeI_18003CAttributes {
    
}

// To identify the given/first name and the title of a traveller and the traveller type.
export interface TravellerDetailsTypeI_18004C {
    
    $attributes: TravellerDetailsTypeI_18004CAttributes
    
    // firstname
    givenName: string
    
}

export interface TravellerDetailsTypeI_18004CAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI6 {
    
    $attributes: MonetaryInformationTypeI6Attributes
    
    // Total Trip value in a given currency
    monetaryDetails: MonetaryInformationDetailsTypeI_17849C
    
    // Base Trip value in a given currency
    otherMonetaryDetails: Array<MonetaryInformationDetailsTypeI_17849C>
    
}

export interface MonetaryInformationTypeI6Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI_17849C {
    
    $attributes: MonetaryInformationDetailsTypeI_17849CAttributes
    
    // Indicates amount is Fare amount
    typeQualifier: string
    
    // Used to specify an amount of money
    amount: Array<string>
    
    // currency in which the amount is expressed
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI_17849CAttributes {
    
}


export interface productSectionType {
    
    $attributes: productSectionTypeAttributes
    
    // To convey the products or the tariffcodes together with description and amounts.
    productCode: InsuranceProductDetailsType
    
    // To convey the information the provider estimates important on a given product.
    informationLines: Array<FreeTextInformationType_128667S>
    
}

export interface productSectionTypeAttributes {
    
}

// Product Details
export interface InsuranceProductDetailsType {
    
    $attributes: InsuranceProductDetailsTypeAttributes
    
    // This data element is used to convey the company code of a non-air company
    companyCode: Array<string>
    
    // To identify the countrycode from the provider.
    countryCode: Array<string>
    
    // This composite contains the code of the insurance elements.
    productDetails: Array<ProviderInformationType>
    
    // contains the extensions for the main insurance product
    extensionIdentification: Array<ProviderInformationType>
    
    // tariff code info. tariff code and tariff familly code.
    tariffCodeDetails: Array<TariffcodeType>
    
}

export interface InsuranceProductDetailsTypeAttributes {
    
}

// convey product data
export interface ProviderInformationType {
    
    $attributes: ProviderInformationTypeAttributes
    
    // productcode
    code: Array<string>
    
    // Product name
    name: Array<string>
    
    // Product Family Code
    productFamilyCode: Array<string>
    
}

export interface ProviderInformationTypeAttributes {
    
}


export interface TariffcodeType {
    
    $attributes: TariffcodeTypeAttributes
    
    // To convey the Tariff code.
    tariffCode: Array<string>
    
    // to convey a description of the type of tariff.
    tariffCodeType: Array<string>
    
}

export interface TariffcodeTypeAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_128667S {
    
    $attributes: FreeTextInformationType_128667SAttributes
    
    // To convey the type of the freeflow text.
    freeTextDetails: FreeTextDetailsType_187464C
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType_128667SAttributes {
    
}

// To specify tariff details relating to a service or product.
export interface TariffInformationTypeI_22057S {
    
    $attributes: TariffInformationTypeI_22057SAttributes
    
    // total price and net premium
    tariffInfo: Array<TariffInformationDetailsTypeI_39533C>
    
    // to specify the taxes and their values and converted values into other currencies if specified.
    chargeDetails: Array<AssociatedChargesInformationTypeI_39535C>
    
}

export interface TariffInformationTypeI_22057SAttributes {
    
}

// To identify the rates or tariff details.
export interface TariffInformationDetailsTypeI_39533C {
    
    $attributes: TariffInformationDetailsTypeI_39533CAttributes
    
    // Net premium
    amount: Array<number>
    
    // currency of the total price and net premium i.e in EUR/ USD
    currency: Array<string>
    
    // general indicator
    amountType: Array<string>
    
    // Total amount of the insurance element.
    totalAmount: Array<number>
    
}

export interface TariffInformationDetailsTypeI_39533CAttributes {
    
}

// Identification of the additional charges that are associated to a product or service.
export interface AssociatedChargesInformationTypeI_39535C {
    
    $attributes: AssociatedChargesInformationTypeI_39535CAttributes
    
    // To specify the type of tax, the type of converted amount. It is coded on our side if not specifued by provider.
    type: Array<string>
    
    // to specify the tax in a foreign currency.
    amount: Array<number>
    
    // Tax name
    description: Array<string>
    
    // foreign currency.
    currency: Array<string>
    
}

export interface AssociatedChargesInformationTypeI_39535CAttributes {
    
}


export interface planTypeDetailsType {
    
    $attributes: planTypeDetailsTypeAttributes
    
    // Provides information about the type of plan being quoted/booked
    planType: InsuranceProviderAndProductsType
    
    // to specify the value of the trip.
    travelValue: Array<MonetaryInformationTypeI6>
    
}

export interface planTypeDetailsTypeAttributes {
    
}

// contains information about the total price plan
export interface InsuranceProviderAndProductsType {
    
    $attributes: InsuranceProviderAndProductsTypeAttributes
    
    // Type of trip (package. leisure etc...)
    tripType: Array<string>
    
    // Code of the operator who provides the TOUR.
    tourOperator: Array<string>
    
    // To specify the countries involved in the Travel assistance element.
    countryInfo: Array<CountrydescriptionType>
    
}

export interface InsuranceProviderAndProductsTypeAttributes {
    
}

// To identify the countries
export interface CountrydescriptionType {
    
    $attributes: CountrydescriptionTypeAttributes
    
    // To specify the destination zone.
    geographicalZone: Array<string>
    
    // To specify the countries but in a coded way. up to 198 repetitions as we can have 99 segments in the PNR
    countryCode: Array<string>
    
}

export interface CountrydescriptionTypeAttributes {
    
}


export interface contactDetailsType {
    
    $attributes: contactDetailsTypeAttributes
    
    // data to add some comments on the insurance element
    miscelaneous: MiscellaneousRemarksType_12240S
    
    // Used to specify a phone number as an emergency contact
    phoneNumber: Array<PhoneAndEmailAddressType_32298S>
    
    // to specify the name of a person in case of an emergeny
    contactName: Array<TravellerInformationTypeI>
    
}

export interface contactDetailsTypeAttributes {
    
}

// To specify miscellaneous, confidential, quality control and invoice remarks, as well as departure comments, applicable to Acceptance, Boarding, Baggage....
export interface MiscellaneousRemarksType_12240S {
    
    $attributes: MiscellaneousRemarksType_12240SAttributes
    
    // miscellaneous remarks
    remarkDetails: Array<MiscellaneousRemarkType_18076C>
    
}

export interface MiscellaneousRemarksType_12240SAttributes {
    
}

// Miscellaneous remarks
export interface MiscellaneousRemarkType_18076C {
    
    $attributes: MiscellaneousRemarkType_18076CAttributes
    
    // RC for confidential remark RI for invoice remark RM for miscellaneous remark RQ for quality control remark . ACC for Acceptance . BGG for Baggage . BPP for Boarding Pass Printing . GT for Gate . GNL for General
    type: string
    
    // Free text and message sequence numbers of the remarks.
    freetext: Array<string>
    
}

export interface MiscellaneousRemarkType_18076CAttributes {
    
}

// To specify a phone or email address
export interface PhoneAndEmailAddressType_32298S {
    
    $attributes: PhoneAndEmailAddressType_32298SAttributes
    
    // Phone or Email contact type
    phoneOrEmailType: string
    
    // Structured telephone number
    telephoneNumber: Array<StructuredTelephoneNumberType_187460C>
    
    // Email address
    emailAddress: Array<string>
    
}

export interface PhoneAndEmailAddressType_32298SAttributes {
    
}


export interface StructuredTelephoneNumberType_187460C {
    
    $attributes: StructuredTelephoneNumberType_187460CAttributes
    
    // International dial code
    internationalDialCode: Array<string>
    
    // Local prefix code
    localPrefixCode: Array<string>
    
    // Area code
    areaCode: Array<string>
    
    // Telephone number
    telephoneNumber: string
    
}

export interface StructuredTelephoneNumberType_187460CAttributes {
    
}


export interface subscriberAddressSectionType {
    
    $attributes: subscriberAddressSectionTypeAttributes
    
    // This segment is used to convey the contact name
    nameDetails: NameTypeU2
    
    // to specify the address of the subscriber
    addressInfo: Array<AddressTypeU>
    
    // Used to specify a phone number
    phoneNumber: Array<PhoneAndEmailAddressType_32298S>
    
}

export interface subscriberAddressSectionTypeAttributes {
    
}

// To identify the name of a person or entity.
export interface NameTypeU2 {
    
    $attributes: NameTypeU2Attributes
    
    // Used to specify the name field in the address field.
    nameInformation: NameInformationTypeU2
    
}

export interface NameTypeU2Attributes {
    
}

// To identify the type of name, the actual name or a code to identify the name, and the status of the name
export interface NameInformationTypeU2 {
    
    $attributes: NameInformationTypeU2Attributes
    
    // to convey to who the address applies
    qualifier: string
    
    // Company name
    name: Array<string>
    
    // Insuree name
    identifier: Array<string>
    
}

export interface NameInformationTypeU2Attributes {
    
}

// To specify an address
export interface AddressTypeU {
    
    $attributes: AddressTypeUAttributes
    
    // to specify the information of the address
    addressDetails: Array<AddressDetailsTypeU_17987C>
    
    // city name of the given address
    city: Array<string>
    
    // zip code of the given address
    zipCode: Array<string>
    
    // To convey a sub-entity within a country : region, states..
    regionDetails: Array<CountrySubEntityDetailsTypeU2>
    
    // to specify the countryname
    locationDetails: Array<LocationIdentificationTypeU2>
    
}

export interface AddressTypeUAttributes {
    
}

// To specify the details of an address.
export interface AddressDetailsTypeU_17987C {
    
    $attributes: AddressDetailsTypeU_17987CAttributes
    
    // To specify what kind of address we have
    format: string
    
    // Address
    line1: string
    
    // Address
    line2: Array<string>
    
    // PO Box
    line4: Array<string>
    
}

export interface AddressDetailsTypeU_17987CAttributes {
    
}

// To specify a part of a country (eg county or part of a city).
export interface CountrySubEntityDetailsTypeU2 {
    
    $attributes: CountrySubEntityDetailsTypeU2Attributes
    
    // 84: state
    qualifier: string
    
    // Region or State of the given address
    name: string
    
}

export interface CountrySubEntityDetailsTypeU2Attributes {
    
}

// Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name
export interface LocationIdentificationTypeU2 {
    
    $attributes: LocationIdentificationTypeU2Attributes
    
    // 162: country
    qualifier: string
    
    // Country name
    name: string
    
}

export interface LocationIdentificationTypeU2Attributes {
    
}


export interface coverageDetailsType {
    
    $attributes: coverageDetailsTypeAttributes
    
    // To specify the details of the insurance policy.
    policyDetails: InsurancePolicyType
    
    // This group is used to describe the coverage conditions details.
    coverageInfo: Array<coverageInfoType>
    
    // To specifie the covered persons: here it conveys the NB/NM and ON options
    coveredPassenger: Array<TravellerInformationTypeI_128676S>
    
    // starting date and end date
    coverageDates: Array<StructuredPeriodInformationType4>
    
    // Details of the subscription: date and time.
    subscriptionDetails: Array<StructuredDateTimeInformationType1>
    
    // To convey the details of the insurance seller.
    agentReferenceDetails: Array<UserIdentificationType_128677S>
    
}

export interface coverageDetailsTypeAttributes {
    
}

// Insurance Policy Details
export interface InsurancePolicyType {
    
    $attributes: InsurancePolicyTypeAttributes
    
    // to specify a discount for the insuree like if it&#39;s a family etc..
    fareDiscount: Array<string>
    
}

export interface InsurancePolicyTypeAttributes {
    
}


export interface coverageInfoType {
    
    $attributes: coverageInfoTypeAttributes
    
    // For codelist 415Z, only values CP, CV, CM may apply here
    coverage: InsuranceCoverageType_15875S
    
    // Values and currency of the different coverages amounts.
    coverageValues: Array<MonetaryInformationTypeI6>
    
}

export interface coverageInfoTypeAttributes {
    
}

// coverage conditions
export interface InsuranceCoverageType_15875S {
    
    $attributes: InsuranceCoverageType_15875SAttributes
    
    // Indicate type of amount (eg. Medical Coverage, Trip Value, etc)
    coverageIndicator: Array<string>
    
}

export interface InsuranceCoverageType_15875SAttributes {
    
}

// To specify a traveler(s) and personal details relating to the traveler(s).
export interface TravellerInformationTypeI_128676S {
    
    $attributes: TravellerInformationTypeI_128676SAttributes
    
    // to specify the last name and the type of person (if it&#39;s a nanny or a substitute)
    paxDetails: TravellerSurnameInformationTypeI_18003C
    
    // Other name info
    otherPaxDetails: Array<TravellerDetailsTypeI_187478C>
    
}

export interface TravellerInformationTypeI_128676SAttributes {
    
}

// To identify the given/first name and the title of a traveller and the traveller type.
export interface TravellerDetailsTypeI_187478C {
    
    $attributes: TravellerDetailsTypeI_187478CAttributes
    
    // firstname
    givenName: string
    
    // Title (Mr, Mrs)
    title: Array<string>
    
}

export interface TravellerDetailsTypeI_187478CAttributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType4 {
    
    $attributes: StructuredPeriodInformationType4Attributes
    
    // Convey the begin date/time of a period.
    beginDateTime: Array<StructuredDateTimeType_17997C>
    
    // Convey the end date/time of a period.
    endDateTime: Array<StructuredDateTimeType_17997C>
    
}

export interface StructuredPeriodInformationType4Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_17997C {
    
    $attributes: StructuredDateTimeType_17997CAttributes
    
    // Year number. The format is a little long for short term usage but it can be reduced by implementation if required.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
}

export interface StructuredDateTimeType_17997CAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType1 {
    
    $attributes: StructuredDateTimeInformationType1Attributes
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType_187474C>
    
}

export interface StructuredDateTimeInformationType1Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_187474C {
    
    $attributes: StructuredDateTimeType_187474CAttributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
}

export interface StructuredDateTimeType_187474CAttributes {
    
}

// This segment is used to identify a user.
export interface UserIdentificationType_128677S {
    
    $attributes: UserIdentificationType_128677SAttributes
    
    // contains the client reference/signature.
    originator: Array<string>
    
}

export interface UserIdentificationType_128677SAttributes {
    
}

// To specify information about a commission.
export interface CommissionInformationType1 {
    
    $attributes: CommissionInformationType1Attributes
    
    // Commission details
    commissionDetails: CommissionDetailsType_187454C
    
}

export interface CommissionInformationType1Attributes {
    
}

// To specify the commission conditions, amount, currency, party paying and any related free text.
export interface CommissionDetailsType_187454C {
    
    $attributes: CommissionDetailsType_187454CAttributes
    
    // Commission type : &#39;NEW&#39; --) New commission &#39;OLD&#39; --) Old Commission &#39;XLP&#39; --) Commission on cancellation Penalty &#39;FMA&#39; --) Airline Commission A &#39;FMB&#39; --) Airline Commission B
    type: string
    
    // Commission amount
    amount: Array<number>
    
    
    currency: Array<string>
    
    // Commission percentage
    rate: Array<number>
    
    // Deal number
    dealNumber: Array<number>
    
}

export interface CommissionDetailsType_187454CAttributes {
    
}


export interface insuranceFopSectionType {
    
    $attributes: insuranceFopSectionTypeAttributes
    
    // To convey the form of payment
    formOfPaymentSection: FormOfPaymentTypeI_16862S
    
    // To provide form of payment extended data
    fopExtendedData: Array<StatusTypeI_13270S>
    
}

export interface insuranceFopSectionTypeAttributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentTypeI_16862S {
    
    $attributes: FormOfPaymentTypeI_16862SAttributes
    
    // Description of the form of paiement
    formOfPayment: Array<FormOfPaymentDetailsTypeI_20667C>
    
    
    otherFormOfPayment: Array<FormOfPaymentDetailsTypeI_20667C>
    
}

export interface FormOfPaymentTypeI_16862SAttributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsTypeI_20667C {
    
    $attributes: FormOfPaymentDetailsTypeI_20667CAttributes
    
    // Reporting code
    type: string
    
    // Currency code per form of payment
    indicator: Array<string>
    
    // Form of payment amount
    amount: Array<number>
    
    // Vendor code of the credit card. ex: VI
    vendorCode: Array<string>
    
    // Account number
    creditCardNumber: Array<string>
    
    // Expiration date
    expiryDate: Array<string>
    
    // Approval code
    approvalCode: Array<string>
    
    // Source of approval code
    sourceOfApproval: Array<string>
    
    // Authorised amount
    authorisedAmount: Array<number>
    
    // Address verification code
    addressVerification: Array<string>
    
    // Customer file reference
    customerAccount: Array<string>
    
    // Extended payment code
    extendedPayment: Array<string>
    
    // not used
    fopFreeText: Array<string>
    
    // Credit card corporate contract
    membershipStatus: Array<string>
    
    // Credit card transaction information
    transactionInfo: Array<string>
    
}

export interface FormOfPaymentDetailsTypeI_20667CAttributes {
    
}

// To identify a status and related information.
export interface StatusTypeI_13270S {
    
    $attributes: StatusTypeI_13270SAttributes
    
    // Provides information on the type of fop.
    statusDetails: StatusDetailsTypeI_20684C
    
    
    otherStatusDetails: Array<StatusDetailsTypeI_20684C>
    
}

export interface StatusTypeI_13270SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI_20684C {
    
    $attributes: StatusDetailsTypeI_20684CAttributes
    
    // Coded identifying type of Information
    indicator: Array<string>
    
    // Data information upon qualifier.
    description: Array<string>
    
}

export interface StatusDetailsTypeI_20684CAttributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI3 {
    
    $attributes: ReservationControlInformationTypeI3Attributes
    
    // To specify the confirmation number in case the booking was succesfull
    reservation: Array<ReservationControlInformationDetailsTypeI_18446C>
    
}

export interface ReservationControlInformationTypeI3Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI_18446C {
    
    $attributes: ReservationControlInformationDetailsTypeI_18446CAttributes
    
    // this is used to specify the confirmation number meaning that the booking was succesfull.
    controlNumber: Array<string>
    
}

export interface ReservationControlInformationDetailsTypeI_18446CAttributes {
    
}

// To specify the action that should be taken on a selected reference number.
export interface ActionDetailsTypeI {
    
    $attributes: ActionDetailsTypeIAttributes
    
    // Contains the details about the product knowledge
    numberOfItemsDetails: Array<ProcessingInformationTypeI>
    
}

export interface ActionDetailsTypeIAttributes {
    
}

// To identify the action to be taken and the selection criteria.
export interface ProcessingInformationTypeI {
    
    $attributes: ProcessingInformationTypeIAttributes
    
    // Identifies the element we are talking about
    actionQualifier: Array<string>
    
    // Used to qualifie the element with an indicator.
    referenceQualifier: Array<string>
    
}

export interface ProcessingInformationTypeIAttributes {
    
}


export interface passengerDetailsType {
    
    $attributes: passengerDetailsTypeAttributes
    
    // to specify to which passenger the insurance is associated: if omitted then it&#39;s for all the names in the PNR.
    passengerAssociation: ReferenceInformationType2
    
    // product knowledge indicator
    perPaxProdKnowledge: Array<ActionDetailsTypeI>
    
    // To specify the birthdate of the insuree.
    dateOfBirthInfo: Array<StructuredDateTimeInformationType_128682S>
    
    // to specify the name /age of the insuree
    passengerFeatures: Array<TravellerInformationType>
    
    // to specify a remark for the insuree
    insureeRemark: Array<MiscellaneousRemarksType2>
    
    // To specify the details concerning the documentation and the age of the insuree.
    travelerDocInfo: Array<PassengerDocumentDetailsType>
    
    // fare discount code used per Pax
    policyDetails: Array<InsurancePolicyType>
    
    // Details per insuree of the travel cost
    travelerValueDetails: Array<travelerValueDetailsType>
    
    // to convey for each tariff code and passenger the premium for this tariff.
    premiumPerTariffPerPax: Array<premiumPerTariffPerPaxType>
    
    // To convey the premium perpax
    premiumPerpaxInfo: Array<TariffInformationTypeI_22057S>
    
    // The Individual passenger reservation information
    voucherNumber: Array<ReservationControlInformationTypeU_31804S>
    
}

export interface passengerDetailsTypeAttributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInformationType2 {
    
    $attributes: ReferenceInformationType2Attributes
    
    // Used to specify the passenger association and the data per passanger.
    referenceDetails: Array<ReferencingDetailsTypeI_17164C>
    
}

export interface ReferenceInformationType2Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_17164C {
    
    $attributes: ReferencingDetailsTypeI_17164CAttributes
    
    // to specify the segment association
    type: Array<string>
    
    // used to identify the segment(s) from which we want to extract the data.
    value: string
    
}

export interface ReferencingDetailsTypeI_17164CAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_128682S {
    
    $attributes: StructuredDateTimeInformationType_128682SAttributes
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType_17997C>
    
}

export interface StructuredDateTimeInformationType_128682SAttributes {
    
}

// To specify a traveler and personal details relating to the traveler
export interface TravellerInformationType {
    
    $attributes: TravellerInformationTypeAttributes
    
    // to specify the last name, age and gender.
    paxDetails: Array<TravellerSurnameInformationType_187485C>
    
    // to provide the first name
    otherPaxDetails: Array<TravellerDetailsTypeI_18004C>
    
}

export interface TravellerInformationTypeAttributes {
    
}


export interface TravellerSurnameInformationType_187485C {
    
    $attributes: TravellerSurnameInformationType_187485CAttributes
    
    // Passenger name
    surname: Array<string>
    
    // Customer type: A=adult C=child IN = infant
    type: Array<string>
    
    // to indicate if it&#39;s a man or a female.
    gender: Array<string>
    
}

export interface TravellerSurnameInformationType_187485CAttributes {
    
}

// To specify miscellaneous, confidential, quality control and invoice remarks, as well as departure comments, applicable to Acceptance, Boarding, Baggage....
export interface MiscellaneousRemarksType2 {
    
    $attributes: MiscellaneousRemarksType2Attributes
    
    // miscellaneous remarks
    remarkDetails: Array<MiscellaneousRemarkType_187480C>
    
}

export interface MiscellaneousRemarksType2Attributes {
    
}

// Miscellaneous remarks
export interface MiscellaneousRemarkType_187480C {
    
    $attributes: MiscellaneousRemarkType_187480CAttributes
    
    // RC for confidential remark RI for invoice remark RM for miscellaneous remark RQ for quality control remark . ACC for Acceptance . BGG for Baggage . BPP for Boarding Pass Printing . GT for Gate . GNL for General
    type: string
    
    // Free text and message sequence numbers of the remarks.
    freetext: Array<string>
    
}

export interface MiscellaneousRemarkType_187480CAttributes {
    
}

// Used to specify the details of the documentation of the insuree.
export interface PassengerDocumentDetailsType {
    
    $attributes: PassengerDocumentDetailsTypeAttributes
    
    // Used to convey the age of the insuree
    birthDate: Array<string>
    
    // Details on the document (visa, passport...)
    documentDetails: Array<DocumentDetailsType>
    
}

export interface PassengerDocumentDetailsTypeAttributes {
    
}


export interface DocumentDetailsType {
    
    $attributes: DocumentDetailsTypeAttributes
    
    // Document type: PT for passport, VS for visa.
    type: string
    
    // Passport number.
    number: string
    
    // Country where the document has been issued.
    countryOfIssue: Array<string>
    
    // Expiry date of the document. YYYYMMDD
    expiryDate: Array<string>
    
    // Date of issue of the document. YYYYMMDD
    issueDate: Array<string>
    
}

export interface DocumentDetailsTypeAttributes {
    
}


export interface travelerValueDetailsType {
    
    $attributes: travelerValueDetailsTypeAttributes
    
    // For codelist 415Z, only TV value may apply here
    travelCost: InsuranceCoverageType_15875S
    
    // to specify the amount/currency per insuree
    travelAmount: Array<MonetaryInformationTypeI6>
    
}

export interface travelerValueDetailsTypeAttributes {
    
}


export interface premiumPerTariffPerPaxType {
    
    $attributes: premiumPerTariffPerPaxTypeAttributes
    
    // To convey the tariffcode information per passenger.
    tariffCodeInfo: InsuranceProductDetailsType_128684S
    
    // to specify the amount/currency per passenger and tariff code.
    tariffCodePerPaxAmount: Array<MonetaryInformationTypeI6>
    
}

export interface premiumPerTariffPerPaxTypeAttributes {
    
}

// Product Details
export interface InsuranceProductDetailsType_128684S {
    
    $attributes: InsuranceProductDetailsType_128684SAttributes
    
    // tariff code info. tariff code and tariff familly code.
    tariffCodeDetails: Array<TariffcodeType>
    
}

export interface InsuranceProductDetailsType_128684SAttributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeU_31804S {
    
    $attributes: ReservationControlInformationTypeU_31804SAttributes
    
    // The reference to the Provider Database
    referenceDetails: ReservationControlInformationDetailsTypeU_55378C
    
}

export interface ReservationControlInformationTypeU_31804SAttributes {
    
}

// To specify information about a reservation such as identification, date and time, and reasons of modifications.
export interface ReservationControlInformationDetailsTypeU_55378C {
    
    $attributes: ReservationControlInformationDetailsTypeU_55378CAttributes
    
    // The individual Passenger confirmation number in the Provider database.
    value: string
    
}

export interface ReservationControlInformationDetailsTypeU_55378CAttributes {
    
}

// To specify information concerning a document.
export interface DocumentInformationDetailsTypeI {
    
    $attributes: DocumentInformationDetailsTypeIAttributes
    
    // To convey the printing results.
    documentDetails: DocumentDetailsTypeI
    
}

export interface DocumentInformationDetailsTypeIAttributes {
    
}

// Identification of document by number, status and date.
export interface DocumentDetailsTypeI {
    
    $attributes: DocumentDetailsTypeIAttributes
    
    // To convey the document number
    number: Array<string>
    
    // To convey if the document has been printed
    status: string
    
    // To convey the date of the impression.
    date: Array<string>
    
}

export interface DocumentDetailsTypeIAttributes {
    
}


export interface hotelReservationInfoType {
    
    $attributes: hotelReservationInfoTypeAttributes
    
    // This segment is used to convey the hotel property information.
    hotelPropertyInfo: HotelPropertyType2
    
    // This segment is used to convey the hotel chain code and name.
    companyIdentification: CompanyInformationType2
    
    // This segment is used to convey the dates.
    requestedDates: StructuredPeriodInformationType_185758S
    
    // This group is used to convey the room /rate details.
    roomRateDetails: Array<roomRateDetailsType2>
    
    // This segment is used to convey the confirmation number or the cancellation number. control type (9958) is: - 2 for Confirmation reference - X for cancellation reference - O for on request reference
    cancelOrConfirmNbr: Array<ReservationControlInformationTypeI_196503S>
    
    // indicate the roomstay index in case of groups
    roomstayIndex: Array<ItemNumberTypeU_33258S>
    
    // This segment is used to convey the booking source.
    bookingSource: UserIdentificationType_21014S
    
    // This segment is used to convey the billable information
    billableInfo: Array<BillableInformationTypeU2>
    
    // This segment is used to convey the customer reference number
    customerInfo: Array<ConsumerReferenceInformationTypeI2>
    
    // This segment is used to convey the frequent traveler number.
    frequentTravellerInfo: Array<FrequentTravellerIdentificationCodeType_38226S>
    
    // This group is used for the guarantee or the deposit
    guaranteeOrDeposit: Array<guaranteeOrDepositType2>
    
    // This segment is used to convey additional information which are entered by the agent and stored on the hotel booking.
    textOptions: Array<MiscellaneousRemarksType_36733S>
    
    // This segment is used to convey the saving amount/percentage information.
    savingAmountInfo: Array<MonetaryInformationTypeI_1689S>
    
    // This segment is used to convey the fax or the E-Mail to receive the written confirmation
    writtenConfirmationContact: Array<ContactInformationTypeU>
    
    // This segment is used to convey the name and address of the party to recieve the written confirmation
    writtenConfirmationInfo: Array<NameAndAddressBatchTypeU>
    
    // documentInformationDetails
    documentInformationDetails: Array<DocumentInformationDetailsTypeI_9936S>
    
    // Arrival Flight Details
    arrivalFlightDetails: Array<arrivalFlightDetailsType>
    
    // This segment is used to convey specific hotel booking indicators
    bookingIndicator: Array<StatusType_99582S>
    
}

export interface hotelReservationInfoTypeAttributes {
    
}

// This segment is used to convey the Hotel Property information
export interface HotelPropertyType2 {
    
    $attributes: HotelPropertyType2Attributes
    
    // This composite is used to convey the hotel identifier.
    hotelReference: HotelUniqueIdType2
    
    // This composite is used to convey the hotel name
    hotelName: string
    
    // This data element is used to indicates if the hotel is compliant with the fire safety rules.
    fireSafetyIndicator: Array<string>
    
}

export interface HotelPropertyType2Attributes {
    
}


export interface HotelUniqueIdType2 {
    
    $attributes: HotelUniqueIdType2Attributes
    
    // To convey the chain code in the property ID
    chainCode: string
    
    // To convey the city code in the hotel Id
    cityCode: string
    
    // To convey the property code in the Hotel Id
    hotelCode: string
    
}

export interface HotelUniqueIdType2Attributes {
    
}

// This segment is used to convey the non-air company information
export interface CompanyInformationType2 {
    
    $attributes: CompanyInformationType2Attributes
    
    // Qualify the company code, to identify the industry business it belongs.
    travelSector: string
    
    // This data element is used to convey the context in which the code applies. The hotel chain code are managed by Amadeus.
    companyCodeContext: Array<string>
    
    // This data element is used to convey the company code of a non-air company
    companyCode: string
    
    // This data element is used to convey the company name of a non-air company
    companyName: Array<string>
    
    // This data element is used to convey the type of access the non-air company has with Amadeus.
    accessLevel: Array<string>
    
}

export interface CompanyInformationType2Attributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType_185758S {
    
    $attributes: StructuredPeriodInformationType_185758SAttributes
    
    // This data element can be used to provide the semantic of the information provided.
    businessSemantic: Array<string>
    
    // Indicate the time is expressed in local time mode.
    timeMode: Array<string>
    
    // Convey the begin date/time of a period.
    beginDateTime: StructuredDateTimeType_260494C
    
    // Convey the end date/time of a period.
    endDateTime: StructuredDateTimeType_187544C
    
}

export interface StructuredPeriodInformationType_185758SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_260494C {
    
    $attributes: StructuredDateTimeType_260494CAttributes
    
    // Year number. The format is a little long for short term usage but it can be reduced by implementation if required.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
}

export interface StructuredDateTimeType_260494CAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_187544C {
    
    $attributes: StructuredDateTimeType_187544CAttributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
}

export interface StructuredDateTimeType_187544CAttributes {
    
}


export interface roomRateDetailsType2 {
    
    $attributes: roomRateDetailsType2Attributes
    
    // This segment is used to convey the room information.
    roomInformation: HotelRoomType2
    
    // This group is used to conveys list of children
    children: Array<ChildrenGroupType>
    
    // This segment is used to convey the tariff/rate details.
    tariffDetails: TariffInformationTypeI2
    
    // This segment is used to convey the rate code indicator.
    rateCodeIndicator: Array<RuleInformationTypeU1>
    
}

export interface roomRateDetailsType2Attributes {
    
}

// This segment is used to convey the hotel room information
export interface HotelRoomType2 {
    
    $attributes: HotelRoomType2Attributes
    
    // This composite is used to convey the room rate identifier.
    roomRateIdentifier: Array<HotelRoomRateInformationType1>
    
    // This data element is used to convey the booking code.
    bookingCode: Array<string>
    
    // This composite is used to convey the occupancy level of the hotel room.
    guestCountDetails: NumberOfUnitDetailsTypeI_18670C
    
    // This data element is used to convey the override room type (non-Amadeus room types).
    roomTypeOverride: Array<string>
    
}

export interface HotelRoomType2Attributes {
    
}


export interface HotelRoomRateInformationType1 {
    
    $attributes: HotelRoomRateInformationType1Attributes
    
    // This data element is used to convey the room type
    roomType: Array<string>
    
    // This data element is used to convey the hotel rate code
    ratePlanCode: Array<string>
    
    // This data element is used to convey the hotel rate category code
    rateCategoryCode: Array<string>
    
    // This data element is used to indicate if the rate code is a qualified rate code or not.
    rateQualifiedIndic: Array<string>
    
}

export interface HotelRoomRateInformationType1Attributes {
    
}

// Identification of number of units and its purpose.
export interface NumberOfUnitDetailsTypeI_18670C {
    
    $attributes: NumberOfUnitDetailsTypeI_18670CAttributes
    
    // This data element is used to convey the occupancy level of the room
    numberOfUnit: number
    
    // This data element is used to indicate the occupancy is the number of Adults in the room.
    unitQualifier: string
    
}

export interface NumberOfUnitDetailsTypeI_18670CAttributes {
    
}

// Chidren group
export interface ChildrenGroupType {
    
    $attributes: ChildrenGroupTypeAttributes
    
    // This segment is used to convey age for a child.
    age: QuantityTypeI_65488S
    
    // This segment is used to convey the passenger association
    referenceForPassenger: Array<ReferenceInformationType_65487S>
    
}

export interface ChildrenGroupTypeAttributes {
    
}

// To specify a pertinent quantity.
export interface QuantityTypeI_65488S {
    
    $attributes: QuantityTypeI_65488SAttributes
    
    // This composite is used to convey the quantity details
    quantityDetails: QuantityDetailsTypeI2
    
}

export interface QuantityTypeI_65488SAttributes {
    
}

// Quantity information in a transaction, qualified when relevant.
export interface QuantityDetailsTypeI2 {
    
    $attributes: QuantityDetailsTypeI2Attributes
    
    // A for age
    qualifier: string
    
    // Age = number of years(default) or monthes.
    value: number
    
}

export interface QuantityDetailsTypeI2Attributes {
    
}

// Used to convey the passenger references.
export interface ReferenceInformationType_65487S {
    
    $attributes: ReferenceInformationType_65487SAttributes
    
    // Used to convey the passenger tatoo or display number.
    passengerReference: ReferencingDetailsTypeI2
    
}

export interface ReferenceInformationType_65487SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI2 {
    
    $attributes: ReferencingDetailsTypeI2Attributes
    
    // Qualifier of the type of reference.
    type: string
    
    // Value of the association reference
    value: string
    
}

export interface ReferencingDetailsTypeI2Attributes {
    
}

// To specify tariff details relating to a service or product.
export interface TariffInformationTypeI2 {
    
    $attributes: TariffInformationTypeI2Attributes
    
    // This composite is used to convey the tariff information
    tariffInfo: TariffInformationDetailsTypeI2
    
    // Additional rate type information
    rateInformation: Array<RateInformationTypeI>
    
    // This composite is used to convey all the extra charge information.
    chargeDetails: Array<AssociatedChargesInformationTypeI2>
    
}

export interface TariffInformationTypeI2Attributes {
    
}

// To identify the rates or tariff details.
export interface TariffInformationDetailsTypeI2 {
    
    $attributes: TariffInformationDetailsTypeI2Attributes
    
    // A unique rate product identifier.
    rateType: Array<string>
    
    // This field is used to convey the amount.
    amount: Array<number>
    
    // This field is used to convey the currency
    currency: Array<string>
    
    // This data element is used to convey the rate plan (Daily or total indicator).
    ratePlanIndicator: Array<string>
    
    // This data element is used to convey the rate amount type.
    amountType: Array<string>
    
    // This data element is used to specify the fact that a rate change occurs during the period of the stay. If the is a change the value is * (for YES)
    rateChangeIndicator: Array<string>
    
}

export interface TariffInformationDetailsTypeI2Attributes {
    
}

// To identify the rate or tariff categories and rate or tariff ranges.
export interface RateInformationTypeI {
    
    $attributes: RateInformationTypeIAttributes
    
    // Rate Category.
    category: Array<string>
    
}

export interface RateInformationTypeIAttributes {
    
}

// Identification of the additional charges that are associated to a product or service.
export interface AssociatedChargesInformationTypeI2 {
    
    $attributes: AssociatedChargesInformationTypeI2Attributes
    
    // This data element is used to identify the type of charge entered in the other fields.
    type: Array<string>
    
    // This data element is used to convey the amount of the supplementary charge.
    amount: Array<number>
    
    // To qualify the amount, can be - UNL (for unlimited mileage) when used for free mileage - 3 (for included in base rate) - 4 (for not included in base rate)
    description: Array<string>
    
    // This data element is used to specify the number of charge needed.
    numberInParty: Array<number>
    
    // This data element is used to convey the currency
    currency: Array<string>
    
    // This data element is used to convey the voucher text (in case of voucher).
    comment: Array<string>
    
}

export interface AssociatedChargesInformationTypeI2Attributes {
    
}

// To specify rule information and rule status.
export interface RuleInformationTypeU1 {
    
    $attributes: RuleInformationTypeU1Attributes
    
    // This composite is used to convey the rules details.
    ruleDetails: RuleDetailsTypeU1
    
    // This composite is used to indicate that the rule have been entered manually by the agent.
    ruleStatusDetails: Array<RuleStatusTypeU>
    
}

export interface RuleInformationTypeU1Attributes {
    
}

// To indicate the coded rule, a number and it&#39;s relation to the rule, a start day of service, a monetary amount associated to the rule, and additional information associated with the rule
export interface RuleDetailsTypeU1 {
    
    $attributes: RuleDetailsTypeU1Attributes
    
    // This data element is used to identify the type of rule (see data mapping).
    type: string
    
    // This data element is used to convey the afternoon time which is the maximum time to check-in. ex. if equal to 1, it means that the room is kept until 1PM.
    quantity: number
    
    // This data element is used to specify that the Maximim check-in time is given in hours.
    quantityUnit: string
    
}

export interface RuleDetailsTypeU1Attributes {
    
}

// To specify the status of the rule
export interface RuleStatusTypeU {
    
    $attributes: RuleStatusTypeUAttributes
    
    // This data element specifies the rule concerned by this information.
    statusType: string
    
    // This data element is used to indicate that the condition have been entered manually by the travel agent and is not coming from the supplier data.
    processIndicator: Array<string>
    
}

export interface RuleStatusTypeUAttributes {
    
}

// To specify an item number
export interface ItemNumberTypeU_33258S {
    
    $attributes: ItemNumberTypeU_33258SAttributes
    
    // leg number - idicate with leg is the first one, the second one, etc.
    itemNumberDetails: ItemNumberIdentificationTypeU
    
}

export interface ItemNumberTypeU_33258SAttributes {
    
}

// Goods identification for a specified source. Goods identification for a specified source. Goods identification for a specified source. Goods identification for a specified source
export interface ItemNumberIdentificationTypeU {
    
    $attributes: ItemNumberIdentificationTypeUAttributes
    
    // leg number
    number: string
    
}

export interface ItemNumberIdentificationTypeUAttributes {
    
}

// This segment is used to identify a user.
export interface UserIdentificationType_21014S {
    
    $attributes: UserIdentificationType_21014SAttributes
    
    // Originator Identification Details
    originIdentification: OriginatorIdentificationDetailsTypeI_37406C
    
}

export interface UserIdentificationType_21014SAttributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI_37406C {
    
    $attributes: OriginatorIdentificationDetailsTypeI_37406CAttributes
    
    // This data element is used to convey the bouking source.
    originatorId: number
    
}

export interface OriginatorIdentificationDetailsTypeI_37406CAttributes {
    
}

// To provide billable information for a claim or encounter.
export interface BillableInformationTypeU2 {
    
    $attributes: BillableInformationTypeU2Attributes
    
    // This composite is used to convey the billable information.
    billingInfo: Array<DiagnosisTypeU2>
    
}

export interface BillableInformationTypeU2Attributes {
    
}

// To identify the diagnosis and its type
export interface DiagnosisTypeU2 {
    
    $attributes: DiagnosisTypeU2Attributes
    
    // This data element can convey either an agency accounting or a billing number.
    billingDetails: string
    
    // This data element is used to specify the type of billable information that could be found in this segment
    billingQualifier: string
    
}

export interface DiagnosisTypeU2Attributes {
    
}

// To specify consumer reference information.
export interface ConsumerReferenceInformationTypeI2 {
    
    $attributes: ConsumerReferenceInformationTypeI2Attributes
    
    // Consumer reference information
    customerReferences: Array<ConsumerReferenceIdentificationTypeI4>
    
}

export interface ConsumerReferenceInformationTypeI2Attributes {
    
}

// Identification of consumer references by type, company, number and reference to a traveller.
export interface ConsumerReferenceIdentificationTypeI4 {
    
    $attributes: ConsumerReferenceIdentificationTypeI4Attributes
    
    // Indicator - 1 for ID (customer number) - CD for CD (customer discount number)
    referenceQualifier: string
    
    // Either the ID or CD number
    referenceNumber: string
    
}

export interface ConsumerReferenceIdentificationTypeI4Attributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType_38226S {
    
    $attributes: FrequentTravellerIdentificationCodeType_38226SAttributes
    
    // Airline Frequent Traveller Info
    airlineFrequentTraveler: FrequentTravellerIdentificationType6
    
    // Alliance Frequent Traveller Info
    allianceFrequentTraveler: Array<FrequentTravellerIdentificationType_64816C>
    
}

export interface FrequentTravellerIdentificationCodeType_38226SAttributes {
    
}


export interface FrequentTravellerIdentificationType6 {
    
    $attributes: FrequentTravellerIdentificationType6Attributes
    
    // Carrier where the FQTV is registered.
    company: string
    
    // Frequent Traveller Reference Number
    membershipNumber: string
    
    // To specify a Tier linked to the FQTV
    tierLevel: Array<string>
    
    // To specify the Priority of the FQTV.
    priorityCode: Array<string>
    
    // Full Text Tier description ex: EMERALD, SAPPHIRE
    tierDescription: Array<string>
    
}

export interface FrequentTravellerIdentificationType6Attributes {
    
}


export interface FrequentTravellerIdentificationType_64816C {
    
    $attributes: FrequentTravellerIdentificationType_64816CAttributes
    
    // To specify a Tier linked to the FQTV
    tierLevel: Array<string>
    
    // To specify the Priority of the FQTV.
    priorityCode: Array<string>
    
    // Full Text Tier description ex: EMERALD, SAPPHIRE
    tierDescription: Array<string>
    
    // Alliance name
    companyCode: string
    
}

export interface FrequentTravellerIdentificationType_64816CAttributes {
    
}


export interface guaranteeOrDepositType2 {
    
    $attributes: guaranteeOrDepositType2Attributes
    
    // This segment is used to convey the guarantee or deposit information
    paymentInfo: PaymentInformationTypeI2
    
    // This segment is used to convey the credit card information.
    creditCardInfo: Array<FormOfPaymentTypeI_29553S>
    
}

export interface guaranteeOrDepositType2Attributes {
    
}

// To specify information concerning the payment.
export interface PaymentInformationTypeI2 {
    
    $attributes: PaymentInformationTypeI2Attributes
    
    // This composite is used to convey the payment information
    paymentDetails: PaymentDetailsTypeI2
    
}

export interface PaymentInformationTypeI2Attributes {
    
}

// To identify the method, type, amount, currency and due date of payment.
export interface PaymentDetailsTypeI2 {
    
    $attributes: PaymentDetailsTypeI2Attributes
    
    // To convey the guarantee /deposit form
    formOfPaymentCode: string
    
    // This data element is used to idicates if it is a guarantee or a deposit
    paymentType: string
    
    // This data element is used to identify the type of service to be paid, in our case it will always be 3 for hotel
    serviceToPay: string
    
    // This data element is used to convey the guarantee or the deposit reference.
    referenceNumber: Array<string>
    
}

export interface PaymentDetailsTypeI2Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentTypeI_29553S {
    
    $attributes: FormOfPaymentTypeI_29553SAttributes
    
    // FOP details
    formOfPayment: Array<FormOfPaymentDetailsTypeI3>
    
}

export interface FormOfPaymentTypeI_29553SAttributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsTypeI3 {
    
    $attributes: FormOfPaymentDetailsTypeI3Attributes
    
    // Fop type (Cash, Credit card...)
    type: string
    
    
    indicator: Array<string>
    
    // Credit card vendor code
    vendorCode: Array<string>
    
    // Credit card number
    creditCardNumber: Array<string>
    
    // expiry date (MMYY)
    expiryDate: Array<string>
    
    // FOP purpose
    extendedPayment: Array<string>
    
    // Unstructured fop layout (used for Voucher print purpose or guarantee details).
    fopFreeText: Array<string>
    
}

export interface FormOfPaymentDetailsTypeI3Attributes {
    
}

// To specify miscellaneous, confidential, quality control and invoice remarks, as well as departure comments, applicable to Acceptance, Boarding, Baggage....
export interface MiscellaneousRemarksType_36733S {
    
    $attributes: MiscellaneousRemarksType_36733SAttributes
    
    // miscellaneous remarks
    remarkDetails: Array<MiscellaneousRemarkType2>
    
}

export interface MiscellaneousRemarksType_36733SAttributes {
    
}

// Miscellaneous remarks
export interface MiscellaneousRemarkType2 {
    
    $attributes: MiscellaneousRemarkType2Attributes
    
    // This data element is used to convey the type of the remark. (see data mapping to view the codes)
    type: string
    
    // Free text and message sequence numbers of the remarks.
    freetext: Array<string>
    
    // This data element is used to convey the business function
    businessFunction: Array<string>
    
    // language used for the free text.
    language: Array<string>
    
    // Indicates if it has been manually entered by an agent or system generated.
    source: Array<string>
    
    // Coded identification of the character encoding used in the interchange
    encoding: Array<string>
    
}

export interface MiscellaneousRemarkType2Attributes {
    
}

// To specify contact communication numbers and names.
export interface ContactInformationTypeU {
    
    $attributes: ContactInformationTypeUAttributes
    
    // This composite is used to convey the E-mail address or FAX number to be used when a written confirmation is needed.
    contactInformation: Array<ContactInformationDetailsTypeU>
    
}

export interface ContactInformationTypeUAttributes {
    
}

// To specify communication number, type of number, to whom the number belongs and a related reference number.
export interface ContactInformationDetailsTypeU {
    
    $attributes: ContactInformationDetailsTypeUAttributes
    
    // W for party to receive Written confirmation
    partyQualifier: string
    
    // FAX number or E-Mail address
    comAddress: string
    
    // type of medium
    comChannelQualifier: string
    
}

export interface ContactInformationDetailsTypeUAttributes {
    
}

// To specify the name/address and their related function, either by C082 only and/or unstructured by C058 or structured by C080 thru 3207.
export interface NameAndAddressBatchTypeU {
    
    $attributes: NameAndAddressBatchTypeUAttributes
    
    // W for party to revieve written confirmation
    partyQualifier: string
    
    // This composite is used to convey the address
    addressDetails: Array<NameAndAddressDetailsTypeU>
    
    // This composite is used to convey the party name
    partyNameDetails: Array<PartyNameBatchTypeU>
    
}

export interface NameAndAddressBatchTypeUAttributes {
    
}

// Unstructured name and address: one to five lines.
export interface NameAndAddressDetailsTypeU {
    
    $attributes: NameAndAddressDetailsTypeUAttributes
    
    // Address line 1
    line1: string
    
    // address line 2
    line2: Array<string>
    
}

export interface NameAndAddressDetailsTypeUAttributes {
    
}

// Identification of a transaction party by name, one to five lines. Party name may be formatted.
export interface PartyNameBatchTypeU {
    
    $attributes: PartyNameBatchTypeUAttributes
    
    // name
    name1: string
    
}

export interface PartyNameBatchTypeUAttributes {
    
}

// To specify information concerning a document.
export interface DocumentInformationDetailsTypeI_9936S {
    
    $attributes: DocumentInformationDetailsTypeI_9936SAttributes
    
    // documentDetails
    documentDetails: DocumentDetailsTypeI_19732C
    
}

export interface DocumentInformationDetailsTypeI_9936SAttributes {
    
}

// Identification of document by number, status and date.
export interface DocumentDetailsTypeI_19732C {
    
    $attributes: DocumentDetailsTypeI_19732CAttributes
    
    // documentNumber
    number: Array<number>
    
    // Status Code
    status: string
    
}

export interface DocumentDetailsTypeI_19732CAttributes {
    
}


export interface arrivalFlightDetailsType {
    
    $attributes: arrivalFlightDetailsTypeAttributes
    
    // Travel Product Information
    travelProductInformation: TravelProductInformationTypeI_193102S
    
    // Additional Transport Details
    additionalTransportDetails: AdditionalTransportDetailsTypeU2
    
}

export interface arrivalFlightDetailsTypeAttributes {
    
}

// To specify details related to a product
export interface TravelProductInformationTypeI_193102S {
    
    $attributes: TravelProductInformationTypeI_193102SAttributes
    
    // To specify dates and times of the product
    product: Array<ProductDateTimeTypeI_270056C>
    
    // Boarding point detail
    boardpointDetail: Array<LocationTypeI_2784C>
    
    // Off Point details
    offpointDetail: Array<LocationTypeI_2784C>
    
    // Company identification
    companyDetail: Array<CompanyIdentificationTypeI_2785C>
    
    // Product identifications details
    productDetails: Array<ProductIdentificationDetailsTypeI_2786C>
    
    // Product Type details
    typeDetail: Array<ProductTypeDetailsTypeI_2787C>
    
    // AIR segment : to indicate an Informational Air segment : N for No action required.
    processingIndicator: Array<string>
    
}

export interface TravelProductInformationTypeI_193102SAttributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI_270056C {
    
    $attributes: ProductDateTimeTypeI_270056CAttributes
    
    // AIR segment : departure date ATX segment : requested date CAR segment : pick-up date CCR segment : pick-up date HHL segment : check-in date HTL segment : check-in date MIS segment : date for service requested SUR segment : date Trn Amtrak sgt: departure date Trn SNCF sgt: departure date TTO segment: departure date of the tour TUR segment: tour departure date INS element: departure date CRU segment: sailing departure date
    depDate: Array<string>
    
    // AIR segment : departure time SUR segment : pick-up time Trn Amtrak sgt: departure time Trn SNCF sgt: departure time
    depTime: Array<string>
    
    // AIR segment : arrival date CAR segment : drop-off date CCR segment : return date HHL segment : check-out date HTL segment : check-out date TTO segment: return date of the tour INS element: return date
    arrDate: Array<string>
    
    // AIR segment : arrival time between 0000 and 2400 (included) Trn Amtrak sgt: arrival time Trn SNCF sgt: arrival time
    arrTime: string
    
    // AIR segment: day change indicator (1,2,-1) TRN Amtrak sgt: day change indicator (1,2,-1) TRN SNCF sgt: day change indicator (1,2,-1)
    dayChangeIndicator: Array<number>
    
}

export interface ProductDateTimeTypeI_270056CAttributes {
    
}

// To convey additional information concerning a means of transport.
export interface AdditionalTransportDetailsTypeU2 {
    
    $attributes: AdditionalTransportDetailsTypeU2Attributes
    
    // Terminal Information
    terminalInformation: Array<TerminalInformationTypeU2>
    
}

export interface AdditionalTransportDetailsTypeU2Attributes {
    
}

// To specify departure or arrival information relative to a terminal.
export interface TerminalInformationTypeU2 {
    
    $attributes: TerminalInformationTypeU2Attributes
    
    // Arrival Terminal
    arrivalTerminal: string
    
}

export interface TerminalInformationTypeU2Attributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType_99582S {
    
    $attributes: StatusType_99582SAttributes
    
    // STATUS DETAILS
    statusInformation: Array<StatusDetailsType_148479C>
    
}

export interface StatusType_99582SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType_148479C {
    
    $attributes: StatusDetailsType_148479CAttributes
    
    // list of status/qualifiers Either His for Historical or Crt for Current
    indicator: Array<string>
    
}

export interface StatusDetailsType_148479CAttributes {
    
}


export interface typicalCarDataType {
    
    $attributes: typicalCarDataTypeAttributes
    
    // Vehicle information - vehicle type (SIPP code), - vehicle special equipments - vehicle details
    vehicleInformation: VehicleInformationType_136709S
    
    // Additional vehicle info
    additionalInfo: Array<FreeTextInformationType_136708S>
    
    // Voucher Print Acknowledgement.
    voucherPrintAck: Array<ReferenceInformationTypeI_136704S>
    
    // CAR provider code
    companyIdentification: CompanyInformationType2
    
    // Car AVL pickup and dropoff location parameters (for Amadeus and Provider locations). Used as well to transport the Collection and Delivery place information.
    locationInfo: Array<PlaceLocationIdentificationTypeU_136699S>
    
    // This group is used to carry Delivery and Collection information in a structured way. This group is exclusive with LOC segment which have 2 repetitions to carry unstructured Delivery and Collection information.
    deliveryAndCollection: Array<deliveryAndCollectionType>
    
    // Pickup and dropoff dates and times.
    pickupDropoffTimes: StructuredPeriodInformationType_136705S
    
    // Cancellation or Confirmation number.
    cancelOrConfirmNbr: Array<ReservationControlInformationTypeI_196506S>
    
    // Rate Code Information Group
    rateCodeGroup: Array<rateCodeGroupType>
    
    // Frequent flyer number.
    fFlyerNbr: Array<FrequentTravellerIdentificationCodeType6>
    
    // Customer information ID and CD numbers
    customerInfo: Array<ConsumerReferenceInformationTypeI2>
    
    // This segments is used to convey: 1)General Rate information (identifier, plan, category) and Unstructured RB/RQ/RG 2) Structured rate quoted (RQ) or guaranted (RG) 3) Structured base rate (RB) 4) Estimated total information 5) Drop amount data 6) Voucher coupon print references (VV) 7) Rate Override (RO) 8) Modification fee indicator 9) Cancellation fee indicator 10) prepayment
    rateInfo: Array<TariffInformationTypeI_136706S>
    
    // This group is used to convey the error or warning code for RTSVCC group
    errorWarning: Array<errorWarningType>
    
    // RTSVCC group
    rulesPoliciesGroup: Array<rulesPoliciesGroupType>
    
    // - Form of payment (FP) - Form of guarantee (G)
    payment: Array<FormOfPaymentTypeI3>
    
    // - Billing reference number (contains conpany data to be built) - Billing mumber (number included in the billing) - Agency account
    billingData: Array<BillableInformationTypeU2>
    
    // The booking source
    bookingSource: Array<AdditionalBusinessSourceInformationType>
    
    // Tour code
    inclusiveTour: Array<TourInformationTypeI>
    
    // Contains: 1) up to 6 lines of marketing text sent by the car provider. 2) up to 3 lines of Other services messages (advertisments).
    marketingInfo: Array<InteractiveFreeTextTypeI_136698S>
    
    // This segment is used to convey the supplementary informations (SI). e.g: &#34;Customer arriving after agency closure hour. Car keys waiting at the hotel reception located next to the agency&#34;.
    supleInfo: Array<MiscellaneousRemarksType_136700S>
    
    // This segment is used to convey distances. 1) Intercity distance. Distance between the Pickup and the Dropoff cities. Information returned by the Car provider for customer notification purpose. 2) Estimated distance Distance that is going to be runned during the rental period.
    estimatedDistance: Array<QuantityTypeI2>
    
    // Booking agent name
    agentInformation: Array<NameTypeU_136701S>
    
    // Tracking Option (TK)
    trackingOpt: Array<AgreementIdentificationTypeU>
    
    // Electronic Voucher Number
    electronicVoucherNumber: Array<TicketNumberTypeI2>
    
    // E-mail
    customerEmail: Array<CommunicationContactTypeU>
    
    // This mandatory segment marks the end of the CAR data group. It specifies also if the booking is leisure or not.
    attribute: AttributeType_136691S
    
}

export interface typicalCarDataTypeAttributes {
    
}

// This segment is used to convey the vehicle information
export interface VehicleInformationType_136709S {
    
    $attributes: VehicleInformationType_136709SAttributes
    
    // This composite is used to convey the vehicle type
    vehicleCharacteristic: VehicleTypeOptionType_198208C
    
    // This data element is used to convey the equipment codes.
    vehSpecialEquipment: Array<string>
    
    // To indicate vehicle details: -Number of doors -Number of seats -Max Number of doors -Max Number of seats -Number of bags -Volume of the boots
    vehicleInfo: Array<QuantityDetailsTypeI_187593C>
    
    // Free text type
    freeTextDetails: Array<FreeTextDetailsType_198207C>
    
    // Description or Example of the Car
    carModel: Array<string>
    
}

export interface VehicleInformationType_136709SAttributes {
    
}

// contains vehicle information
export interface VehicleTypeOptionType_198208C {
    
    $attributes: VehicleTypeOptionType_198208CAttributes
    
    // This data element is used to convey the owner of the type code.
    vehicleTypeOwner: string
    
    // This data element is used to convey the SIPP code(s) selection criteria.
    vehicleRentalPrefType: Array<string>
    
}

export interface VehicleTypeOptionType_198208CAttributes {
    
}

// Quantity information in a transaction, qualified when relevant.
export interface QuantityDetailsTypeI_187593C {
    
    $attributes: QuantityDetailsTypeI_187593CAttributes
    
    // Precise the kind of Car information detailed: -NOD Number of Doors -MOD Maximum number of Doors -NOS Number of Seats -MOD Number of Seats -NOB Number of Bags -VOB Volume of Boots
    qualifier: string
    
    // Value number corresponding to the qualifier type.
    value: number
    
    // Used to define the unit when applicable (for the Volume of the boots) - DM3 - FT3
    unit: Array<string>
    
}

export interface QuantityDetailsTypeI_187593CAttributes {
    
}

// to store free text
export interface FreeTextDetailsType_198207C {
    
    $attributes: FreeTextDetailsType_198207CAttributes
    
    // Text qualifier - 3 for literal text
    textSubjectQualifier: string
    
    // Information type
    informationType: Array<string>
    
    // 1A for Amadeus
    companyId: Array<string>
    
    // ISO language code
    language: Array<string>
    
    // Text source Manual or System
    source: string
    
    // Character set
    encoding: string
    
}

export interface FreeTextDetailsType_198207CAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_136708S {
    
    $attributes: FreeTextInformationType_136708SAttributes
    
    // Free text type
    freeTextDetails: FreeTextDetailsType_198207C
    
    // Free text
    freeText: Array<string>
    
}

export interface FreeTextInformationType_136708SAttributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInformationTypeI_136704S {
    
    $attributes: ReferenceInformationTypeI_136704SAttributes
    
    // Use to convey the reference details
    referenceDetails: ReferencingDetailsTypeI_198199C
    
}

export interface ReferenceInformationTypeI_136704SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_198199C {
    
    $attributes: ReferencingDetailsTypeI_198199CAttributes
    
    // Reference qualifier Amadeus codes : OT for Other element(non name, non segment) Tatoo PT for Passenger Tatoo ST for Segment Tatoo SS for Segment Tatoo+SubTatoo
    type: Array<string>
    
    // Reference number Number attributed by the Server to reference the PNR segment/element Limited to the time the PNR is worked (First retrieve - End of Transaction)
    value: Array<string>
    
}

export interface ReferencingDetailsTypeI_198199CAttributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationTypeU_136699S {
    
    $attributes: PlaceLocationIdentificationTypeU_136699SAttributes
    
    // location code qualifier
    locationType: string
    
    // location text
    locationDescription: LocationIdentificationBatchTypeU
    
    // Associated airport/City code. Present if the pickup location is not an airport/city code.
    firstLocationDetails: Array<RelatedLocationOneIdentificationTypeU_198193C>
    
}

export interface PlaceLocationIdentificationTypeU_136699SAttributes {
    
}

// Identification of a location by code or name
export interface LocationIdentificationBatchTypeU {
    
    $attributes: LocationIdentificationBatchTypeUAttributes
    
    // Set to: IATA to indicate IATA location code 1A to indicate a 1A location CPY to indicate a Car provider location
    code: Array<string>
    
    // Location extended name for - Amadeus location type - Provider location type (followed by an *) - Free text for collection option. - Free text for delivery option.
    name: Array<string>
    
}

export interface LocationIdentificationBatchTypeUAttributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationTypeU_198193C {
    
    $attributes: RelatedLocationOneIdentificationTypeU_198193CAttributes
    
    // Assiciated airport code.
    code: Array<string>
    
    // Associated airport code qualifier.
    qualifier: Array<string>
    
    // Set to IA to indicate that the associated location code is a IATA airport or city code.
    agency: Array<string>
    
}

export interface RelatedLocationOneIdentificationTypeU_198193CAttributes {
    
}


export interface deliveryAndCollectionType {
    
    $attributes: deliveryAndCollectionTypeAttributes
    
    // This Segment is used to Delivery and Collection information: Format 1- (Home Collection): - Address - City - State - Country - Zip Code Format 2- (Site Collection): - Site Ref Id - Site Name
    addressDeliveryCollection: AddressTypeU_136710S
    
    // This segment is used to carry phone number associated to a Delivery / Collection address
    phoneNumber: PhoneAndEmailAddressType_136711S
    
}

export interface deliveryAndCollectionTypeAttributes {
    
}

// To specify an address
export interface AddressTypeU_136710S {
    
    $attributes: AddressTypeU_136710SAttributes
    
    // Address Type
    addressUsageDetails: AddressUsageTypeU_198212C
    
    // Format 1 - Home Delivery/Collection
    addressDetails: Array<AddressDetailsTypeU_198210C>
    
    // City name
    city: Array<string>
    
    // Postal Code
    zipCode: Array<string>
    
    // Country code
    countryCode: Array<string>
    
    // To convey a sub-entity within a country : region, states..
    regionDetails: Array<CountrySubEntityDetailsTypeU_198213C>
    
    // Format 2 - Site Delivery/Collection
    locationDetails: Array<LocationIdentificationTypeU_198211C>
    
}

export interface AddressTypeU_136710SAttributes {
    
}

// To describe the usage of an address
export interface AddressUsageTypeU_198212C {
    
    $attributes: AddressUsageTypeU_198212CAttributes
    
    // Address Type: - DEL for Delivery - COL for Collection
    purpose: string
    
}

export interface AddressUsageTypeU_198212CAttributes {
    
}

// To specify the details of an address.
export interface AddressDetailsTypeU_198210C {
    
    $attributes: AddressDetailsTypeU_198210CAttributes
    
    // Address format
    format: string
    
    // Address Field in free flow text
    line1: string
    
}

export interface AddressDetailsTypeU_198210CAttributes {
    
}

// To specify a part of a country (eg county or part of a city).
export interface CountrySubEntityDetailsTypeU_198213C {
    
    $attributes: CountrySubEntityDetailsTypeU_198213CAttributes
    
    // State Code. Mandatory if CountryCode is US, CA, AU.
    code: string
    
}

export interface CountrySubEntityDetailsTypeU_198213CAttributes {
    
}

// Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name
export interface LocationIdentificationTypeU_198211C {
    
    $attributes: LocationIdentificationTypeU_198211CAttributes
    
    // Identification of the site
    code: string
    
    // Site name
    name: Array<string>
    
}

export interface LocationIdentificationTypeU_198211CAttributes {
    
}

// To specify a phone or email address
export interface PhoneAndEmailAddressType_136711S {
    
    $attributes: PhoneAndEmailAddressType_136711SAttributes
    
    // Phone or Email contact type
    phoneOrEmailType: string
    
    // Structured telephone number
    telephoneNumberDetails: StructuredTelephoneNumberType_198214C
    
}

export interface PhoneAndEmailAddressType_136711SAttributes {
    
}


export interface StructuredTelephoneNumberType_198214C {
    
    $attributes: StructuredTelephoneNumberType_198214CAttributes
    
    // Telephone number
    telephoneNumber: string
    
}

export interface StructuredTelephoneNumberType_198214CAttributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType_136705S {
    
    $attributes: StructuredPeriodInformationType_136705SAttributes
    
    // DDT Drop-off Date and Time OCH Opening and Closing hours PDT Pickup Date and Time PKT Early and Late Pickup time RTT Early and Late Return time
    businessSemantic: Array<string>
    
    // Indicate if the time is expressed in UTC or in local time mode ( Codes U and L ). In the last case, the time zone information can be provided in the composite C89K.
    timeMode: Array<string>
    
    // Convey the begin date/time of a period.
    beginDateTime: StructuredDateTimeType_198200C
    
    // Convey the end date/time of a period.
    endDateTime: StructuredDateTimeType_198200C
    
}

export interface StructuredPeriodInformationType_136705SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_198200C {
    
    $attributes: StructuredDateTimeType_198200CAttributes
    
    // Year number. The format is a little long for short term usage but it can be reduced by implementation if required.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: Array<number>
    
    // Day number in the month ( begins to 1 )
    day: Array<number>
    
    // Hour between 0 and 23
    hour: Array<number>
    
    // Minutes between 0 and 59
    minutes: Array<number>
    
}

export interface StructuredDateTimeType_198200CAttributes {
    
}

// To specify a reference to a reservation
export interface ReservationControlInformationTypeI_196506S {
    
    $attributes: ReservationControlInformationTypeI_196506SAttributes
    
    // Reservation Information
    reservation: Array<ReservationControlInformationDetailsTypeI_274237C>
    
}

export interface ReservationControlInformationTypeI_196506SAttributes {
    
}


export interface ReservationControlInformationDetailsTypeI_274237C {
    
    $attributes: ReservationControlInformationDetailsTypeI_274237CAttributes
    
    // - 1A or Other airline record locator information - Passive segment airline code
    companyId: Array<string>
    
    // - 1A record locator or - OA record locator
    controlNumber: Array<string>
    
    // PNR split type.
    controlType: Array<string>
    
    // 1. RR element: Date 2. SP element: Date 3. PNR header/RP line: Date of lastest End of transaction
    date: Array<string>
    
    // 1. PNR header/RP line: time of lastest End of transaction
    time: Array<number>
    
}

export interface ReservationControlInformationDetailsTypeI_274237CAttributes {
    
}


export interface rateCodeGroupType {
    
    $attributes: rateCodeGroupTypeAttributes
    
    // Rate code
    rateCodeInfo: FareQualifierDetailsTypeI
    
    // Additional Rate Code Information
    additionalInfo: Array<FreeTextInformationType_136708S>
    
}

export interface rateCodeGroupTypeAttributes {
    
}

// To specify the details which qualify a fare
export interface FareQualifierDetailsTypeI {
    
    $attributes: FareQualifierDetailsTypeIAttributes
    
    // Rate Code Information
    fareCategories: FareCategoryCodesTypeI2
    
}

export interface FareQualifierDetailsTypeIAttributes {
    
}

// To designate non-system specific combinations of fare types.
export interface FareCategoryCodesTypeI2 {
    
    $attributes: FareCategoryCodesTypeI2Attributes
    
    // Rate Code (code set list not used)
    fareType: string
    
}

export interface FareCategoryCodesTypeI2Attributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType6 {
    
    $attributes: FrequentTravellerIdentificationCodeType6Attributes
    
    // Frequent Traveller Info
    airlineFrequentTraveler: FrequentTravellerIdentificationType_198190C
    
}

export interface FrequentTravellerIdentificationCodeType6Attributes {
    
}


export interface FrequentTravellerIdentificationType_198190C {
    
    $attributes: FrequentTravellerIdentificationType_198190CAttributes
    
    // Carrier where the FQTV is registered.
    company: string
    
    // Frequent Traveller Reference Number
    membershipNumber: string
    
}

export interface FrequentTravellerIdentificationType_198190CAttributes {
    
}

// To specify tariff details relating to a service or product.
export interface TariffInformationTypeI_136706S {
    
    $attributes: TariffInformationTypeI_136706SAttributes
    
    // This composite is used to convey the tariff information
    tariffInfo: TariffInformationDetailsTypeI2
    
    // Additional rate type information
    rateInformation: Array<RateInformationTypeI_198204C>
    
    // This composite is used to convey all the extra charge information.
    chargeDetails: Array<AssociatedChargesInformationTypeI_187653C>
    
}

export interface TariffInformationTypeI_136706SAttributes {
    
}

// To identify the rate or tariff categories and rate or tariff ranges.
export interface RateInformationTypeI_198204C {
    
    $attributes: RateInformationTypeI_198204CAttributes
    
    // Rate Category 002 Inclusive 006 Convention 007 Corporate 009 Government 011 Package 019 Association 020 Business 021 Consortium 022 Credential 023 Industry 024 Standard G General
    category: string
    
}

export interface RateInformationTypeI_198204CAttributes {
    
}

// Identification of the additional charges that are associated to a product or service.
export interface AssociatedChargesInformationTypeI_187653C {
    
    $attributes: AssociatedChargesInformationTypeI_187653CAttributes
    
    // This data element is used to identify the type of charge entered.
    type: Array<string>
    
    // Amount of the given charge.
    amount: Array<number>
    
    // To qualify the amount, can be - 3 (for included in base rate) - 4 (for not included in base rate) - UNL (for unlimited mileage) when used for free mileage
    description: Array<string>
    
    // Quantity of free mileage
    numberInParty: Array<number>
    
    // Unit: - K Kilometer - M Miles
    periodType: Array<string>
    
    // Currency of the given charge.
    currency: Array<string>
    
    // Unstructured RG,RG and RQ rates.
    comment: Array<string>
    
}

export interface AssociatedChargesInformationTypeI_187653CAttributes {
    
}


export interface errorWarningType {
    
    $attributes: errorWarningTypeAttributes
    
    // Error/warning
    applicationError: ApplicationErrorInformationType4
    
    // Error or Warning freetext
    errorFreeText: Array<FreeTextInformationType_136708S>
    
}

export interface errorWarningTypeAttributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType4 {
    
    $attributes: ApplicationErrorInformationType4Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType_198235C
    
}

export interface ApplicationErrorInformationType4Attributes {
    
}


export interface ApplicationErrorDetailType_198235C {
    
    $attributes: ApplicationErrorDetailType_198235CAttributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType_198235CAttributes {
    
}


export interface rulesPoliciesGroupType {
    
    $attributes: rulesPoliciesGroupTypeAttributes
    
    // Dummy segment to mark the beginning of the group
    dummy1: DummySegmentTypeI4
    
    // Present only if information is linked to a seamless availability
    sourceLevel: Array<SelectionDetailsTypeI1>
    
    // Used to convey remarks corresponding to rule information.
    remarks: Array<FreeTextInformationType_136708S>
    
    // Tax, Coverage, Coupon or Surcharge group
    taxCovSurchargeGroup: Array<taxCovSurchargeGroupType>
    
    // Other rule information group: - Pickup Information (7) - Advance Payment Information - Policy Information - Deposit Information - Advance Booking Information - Guarantee Information - One way information
    otherRulesGroup: Array<otherRulesGroupType>
    
    // Pickup and Drop-off location information
    pickupDropoffLocation: Array<pickupDropoffLocationType>
    
    // Special equipment details: - option age range (RNG) - up to 5 periods tariffs + 1 main info (TFF) - 2 lines supplementary info
    specialEquipmentDetails: Array<specialEquipmentDetailsType>
    
}

export interface rulesPoliciesGroupTypeAttributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI4 {
    
    $attributes: DummySegmentTypeI4Attributes
    
}

export interface DummySegmentTypeI4Attributes {
    
}

// To specify the details for making a selection.
export interface SelectionDetailsTypeI1 {
    
    $attributes: SelectionDetailsTypeI1Attributes
    
    // Booking access type requested
    selectionDetails: SelectionDetailsInformationTypeI_198215C
    
}

export interface SelectionDetailsTypeI1Attributes {
    
}

// To specify a selected option and associated information.
export interface SelectionDetailsInformationTypeI_198215C {
    
    $attributes: SelectionDetailsInformationTypeI_198215CAttributes
    
    // - P6 for seamless availability
    option: string
    
}

export interface SelectionDetailsInformationTypeI_198215CAttributes {
    
}


export interface taxCovSurchargeGroupType {
    
    $attributes: taxCovSurchargeGroupTypeAttributes
    
    // This segment is used to convey Tax, Coverage, Coupon, Surcharge or Delivery and collection information (If period associated to the surcharge, tariff and period definition conveyed in group 6)
    taxSurchargeCoverageInfo: TariffInformationTypeI_136714S
    
    // Additional information for Tax, Surcharge or Coverage section
    additionalInfo: Array<FreeTextInformationType_136708S>
    
    // The new Surcharge/Coverage format allows up to 5 periods items for Surcharges and up to 10 periods items for Coverages.
    surchargePeriods: Array<surchargePeriodsType>
    
}

export interface taxCovSurchargeGroupTypeAttributes {
    
}

// To specify tariff details relating to a service or product.
export interface TariffInformationTypeI_136714S {
    
    $attributes: TariffInformationTypeI_136714SAttributes
    
    // tariff conversion indicator associated to the charge
    tariffInfo: Array<TariffInformationDetailsTypeI_198216C>
    
    // Tax, Surcharge, Coverage, Coupon details Repetition are used to carry: - General Info (estimated + name...) - Tariff per day / Max - Tariff per weekend / Max - Tariff per week / Max - Tariff per month / Max - Tariff per rental / Max - Excess amount - Liability amount
    chargeDetails: Array<AssociatedChargesInformationTypeI_198218C>
    
}

export interface TariffInformationTypeI_136714SAttributes {
    
}

// To identify the rates or tariff details.
export interface TariffInformationDetailsTypeI_198216C {
    
    $attributes: TariffInformationDetailsTypeI_198216CAttributes
    
    // CNV for converted Rate
    rateChangeIndicator: string
    
}

export interface TariffInformationDetailsTypeI_198216CAttributes {
    
}

// Identification of the additional charges that are associated to a product or service.
export interface AssociatedChargesInformationTypeI_198218C {
    
    $attributes: AssociatedChargesInformationTypeI_198218CAttributes
    
    // - 045 Tax - 108 Surchage - COV Coverage - CPN Coupon
    type: string
    
    // Policy amount (coupon amount)
    amount: Array<number>
    
    // Qualifier: The possible values are: - IES included in Estimated Total - IBR included in Base Rate - OPT Optional - MAN Mandatory - NBR Not Included in Base Rate - ITX Policy amount Includes Tax - NTX Policy amount Not Includes Tax
    description: Array<string>
    
    // Maximum days
    numberInParty: Array<number>
    
    // 001 per day 002 per week 003 per month 004 per rental 012 tax percentage 013 no coupon value available
    periodType: Array<string>
    
    // Policy amount currency
    currency: Array<string>
    
    // Policy name
    comment: Array<string>
    
}

export interface AssociatedChargesInformationTypeI_198218CAttributes {
    
}


export interface surchargePeriodsType {
    
    $attributes: surchargePeriodsTypeAttributes
    
    // tariff period/distance validity in number of days, weeks, months, km, miles.
    period: RangeDetailsTypeI
    
    // This segment is used to convey Tax, Coverage, Coupon, Surcharge or Delivery and collection information
    surchargePeriodTariff: TariffInformationTypeI_136719S
    
    // This segment conveys the Unit Qualifier for maximum range of associated RNG.
    maximumUnitQualifier: Array<MeasurementsBatchTypeU>
    
}

export interface surchargePeriodsTypeAttributes {
    
}

// To identify a range.
export interface RangeDetailsTypeI {
    
    $attributes: RangeDetailsTypeIAttributes
    
    // 701 for range definition
    rangeQualifier: string
    
    // Range definition
    rangeDetails: RangeTypeI
    
}

export interface RangeDetailsTypeIAttributes {
    
}

// Range minimum and maximum limits.
export interface RangeTypeI {
    
    $attributes: RangeTypeIAttributes
    
    // Duration qualifier: - DAY Duration in days - WE Duration in weeks - MTH Duration in months - G Kilometers - M Mileage - A Age
    dataType: string
    
    // Base of the Range
    min: number
    
    // Top of the Range
    max: number
    
}

export interface RangeTypeIAttributes {
    
}

// To specify tariff details relating to a service or product.
export interface TariffInformationTypeI_136719S {
    
    $attributes: TariffInformationTypeI_136719SAttributes
    
    // tariff conversion indicator associated to the charge
    tariffInfo: Array<TariffInformationDetailsTypeI_198216C>
    
    // Tax, Surcharge, Coverage, Coupon details
    chargeDetails: Array<AssociatedChargesInformationTypeI_198218C>
    
}

export interface TariffInformationTypeI_136719SAttributes {
    
}

// To specify physical measurements, including dimension tolerances, weights and counts.
export interface MeasurementsBatchTypeU {
    
    $attributes: MeasurementsBatchTypeUAttributes
    
    // Measurement qualifier (maximum unit qualifier).
    measurementQualifier: string
    
    // Unit Qualifer for the range value.
    valueRange: ValueRangeTypeU
    
}

export interface MeasurementsBatchTypeUAttributes {
    
}

// Measurement value and relevant minimum and maximum values of the measurement range.
export interface ValueRangeTypeU {
    
    $attributes: ValueRangeTypeUAttributes
    
    // Unit Qualifier for maximum range gives in previous RNG: DAY: Duration in days G: Kilometers M: Mileage MTH: Durarion in Months WE: Duration in weeks
    measureUnitQualifier: string
    
}

export interface ValueRangeTypeUAttributes {
    
}


export interface otherRulesGroupType {
    
    $attributes: otherRulesGroupTypeAttributes
    
    // Used to convey the following type of information: - Pickup Information - Advance Payment Information - Policy Information - Deposit Information - Advance Booking Information - Guarantee Information - One Way Information
    otherRules: RuleInformationTypeU_136720S
    
    // Used to convey date/time Information (only used for Pickup and Guarantee rules)
    dateTimeInfo: Array<StructuredPeriodInformationType_136705S>
    
}

export interface otherRulesGroupTypeAttributes {
    
}

// To specify rule information and rule status.
export interface RuleInformationTypeU_136720S {
    
    $attributes: RuleInformationTypeU_136720SAttributes
    
    // Rule details
    ruleDetails: Array<RuleDetailsTypeU_198224C>
    
    // Associated Rule Text
    ruleText: Array<RuleTextTypeU_198225C>
    
}

export interface RuleInformationTypeU_136720SAttributes {
    
}

// To indicate the coded rule, a number and it&#39;s relation to the rule, a start day of service, a monetary amount associated to the rule, and additional information associated with the rule
export interface RuleDetailsTypeU_198224C {
    
    $attributes: RuleDetailsTypeU_198224CAttributes
    
    // Coded rule type
    type: string
    
    // quantity (if applicable)
    quantity: Array<number>
    
    // DAY for Day HOR for Hour (if applicable)
    quantityUnit: Array<string>
    
    // Deposit Information: - BRE Before Rental - AFT After Booking Pickup Information - MAX Maximum Days Rental - MIN Minimum Days Rental One Way Information: - 009 for One Way Allowed - 005 for One Way not Allowed - 006 for Restricted One Way Allowed
    qualifier: Array<string>
    
    // Day of the week (Monday=1, Sunday=7)
    daysOfOperation: Array<string>
    
    // Rule amount (if applicable)
    amount: Array<number>
    
    // Rule currency amount (if applicable)
    currency: Array<string>
    
}

export interface RuleDetailsTypeU_198224CAttributes {
    
}

// To specify the text rule
export interface RuleTextTypeU_198225C {
    
    $attributes: RuleTextTypeU_198225CAttributes
    
    // Coded rule type
    textType: string
    
    // Rule Information
    freeText: Array<string>
    
}

export interface RuleTextTypeU_198225CAttributes {
    
}


export interface pickupDropoffLocationType {
    
    $attributes: pickupDropoffLocationTypeAttributes
    
    // Car AVL pickup and dropoff location parameters (for Amadeus and Provider locations). Used as well to transport the Collection and Delivery place information.
    locationInfo: PlaceLocationIdentificationTypeU_136722S
    
    // Location Address
    address: Array<AddressTypeU_136721S>
    
    // Location opening hours
    openingHours: Array<StructuredPeriodInformationType_136724S>
    
    // Phone / Fax number
    phone: Array<PhoneAndEmailAddressType_136723S>
    
}

export interface pickupDropoffLocationTypeAttributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationTypeU_136722S {
    
    $attributes: PlaceLocationIdentificationTypeU_136722SAttributes
    
    // Used to differenciate the pickup location (176) from the Dropoff location (DOL)
    locationType: string
    
    // Pickup or dropoff location details
    locationDescription: Array<LocationIdentificationBatchTypeU_198230C>
    
}

export interface PlaceLocationIdentificationTypeU_136722SAttributes {
    
}

// Identification of a location by code or name
export interface LocationIdentificationBatchTypeU_198230C {
    
    $attributes: LocationIdentificationBatchTypeU_198230CAttributes
    
    // Location Code &#34;1A&#34; to indicate Amadeus location type &#34;CPY&#34; to indicate a Provider location type
    code: Array<string>
    
    // Location extended name for Amadeus location type and Provider location type (followed by an *)
    name: Array<string>
    
}

export interface LocationIdentificationBatchTypeU_198230CAttributes {
    
}

// To specify an address
export interface AddressTypeU_136721S {
    
    $attributes: AddressTypeU_136721SAttributes
    
    // Location address
    addressDetails: AddressDetailsTypeU_187664C
    
    // City Name
    city: Array<string>
    
    // Postal Code
    zipCode: Array<string>
    
    // Country code
    countryCode: Array<string>
    
    // To convey a sub-entity within a country : region, states..
    regionDetails: Array<CountrySubEntityDetailsTypeU_187667C>
    
}

export interface AddressTypeU_136721SAttributes {
    
}

// To specify the details of an address.
export interface AddressDetailsTypeU_187664C {
    
    $attributes: AddressDetailsTypeU_187664CAttributes
    
    // Define if the address is structured or not - 5 for unstructured
    format: string
    
    // First address line.
    line1: string
    
    // Second address line.
    line2: Array<string>
    
}

export interface AddressDetailsTypeU_187664CAttributes {
    
}

// To specify a part of a country (eg county or part of a city).
export interface CountrySubEntityDetailsTypeU_187667C {
    
    $attributes: CountrySubEntityDetailsTypeU_187667CAttributes
    
    // Used to convey State Code.
    code: Array<string>
    
}

export interface CountrySubEntityDetailsTypeU_187667CAttributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType_136724S {
    
    $attributes: StructuredPeriodInformationType_136724SAttributes
    
    // DDT Drop-off Date and Time OCH Opening and Closing hours PDT Pickup Date and Time PKT Early and Late Pickup time RTT Early and Late Return time
    businessSemantic: Array<string>
    
    // Indicate if the time is expressed in UTC or in local time mode ( Codes U and L ). In the last case, the time zone information can be provided in the composite C89K.
    timeMode: Array<string>
    
    // Convey the begin date/time of a period.
    beginDateTime: StructuredDateTimeType_198234C
    
    // Convey the end date/time of a period.
    endDateTime: StructuredDateTimeType_198234C
    
    // It is used with a period to give a restriction for days impacted. It permits for example to indicate on which days, a flight operates.
    frequency: FrequencyType_198201C
    
}

export interface StructuredPeriodInformationType_136724SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_198234C {
    
    $attributes: StructuredDateTimeType_198234CAttributes
    
    // Hour between 0 and 23
    hour: number
    
    // Minutes between 0 and 59
    minutes: number
    
}

export interface StructuredDateTimeType_198234CAttributes {
    
}

// Give the days of the week involved for a period
export interface FrequencyType_198201C {
    
    $attributes: FrequencyType_198201CAttributes
    
    // Indicate if the sequence number represents days of the week or days of the month.
    qualifier: string
    
    // Used to represent days of the week or days of the month. For week : 1 is monday and 7 is sunday. For month : 1 is the first day of the month.
    value: string
    
}

export interface FrequencyType_198201CAttributes {
    
}

// To specify a phone or email address
export interface PhoneAndEmailAddressType_136723S {
    
    $attributes: PhoneAndEmailAddressType_136723SAttributes
    
    // - PHO phone number - FAX fax number - MAI
    phoneOrEmailType: string
    
    // Email address
    emailAddress: string
    
}

export interface PhoneAndEmailAddressType_136723SAttributes {
    
}


export interface specialEquipmentDetailsType {
    
    $attributes: specialEquipmentDetailsTypeAttributes
    
    // DUM used to remove ambiguity between TFFs
    dummy2: DummySegmentTypeI4
    
    // This group allow to associate 5 period range to tariff information (TFF_2 =) TFF_6). The first TFF can not be associated to a period range, as it describes general information.
    rangePeriod: Array<rangePeriodType>
    
    // Additional special equipment information
    additionalInfo: Array<FreeTextInformationType_136715S>
    
    // First TFF occurence convey main data: - 013 spec. equipment code - Qualifier (Included / Optional) - Spec. equipment name Up to 5 next occurences convey tarrif periods. - 013 spec. equipment code - converted indicator - amount/currency - period (/day, /weekend, /week, /month, /rental) - max amount / currency
    specialEquipmentTariff: Array<TariffInformationTypeI_136714S>
    
}

export interface specialEquipmentDetailsTypeAttributes {
    
}


export interface rangePeriodType {
    
    $attributes: rangePeriodTypeAttributes
    
    // define age period validity associted to the special equipment
    agePeriod: RangeDetailsTypeI
    
    // This segment conveys the Unit Qualifier for maximum range of associated RNG.
    maximumUnitQualifier: Array<MeasurementsBatchTypeU>
    
}

export interface rangePeriodTypeAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_136715S {
    
    $attributes: FreeTextInformationType_136715SAttributes
    
    // Free text type
    freeTextDetails: FreeTextDetailsType_198207C
    
    // 1 or 2 lines of free text
    freeText: Array<string>
    
}

export interface FreeTextInformationType_136715SAttributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentTypeI3 {
    
    $attributes: FormOfPaymentTypeI3Attributes
    
    // Fop details
    formOfPayment: Array<FormOfPaymentDetailsTypeI_198189C>
    
}

export interface FormOfPaymentTypeI3Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsTypeI_198189C {
    
    $attributes: FormOfPaymentDetailsTypeI_198189CAttributes
    
    // Fop type (Cash, Credit card...)
    type: string
    
    // Credit card vendor code
    vendorCode: Array<string>
    
    // Credit card number
    creditCardNumber: Array<string>
    
    // expiry date (MMYY)
    expiryDate: Array<string>
    
    // FOP purpose
    extendedPayment: Array<string>
    
    // Unstructured fop layout (used for Voucher print purpose or guarantee details).
    fopFreeText: Array<string>
    
}

export interface FormOfPaymentDetailsTypeI_198189CAttributes {
    
}

// To specify ownership and creator of a PNR
export interface AdditionalBusinessSourceInformationType {
    
    $attributes: AdditionalBusinessSourceInformationTypeAttributes
    
    // ORIGINATOR DETAILS
    originatorDetails: OriginatorIdentificationDetailsTypeI_198179C
    
}

export interface AdditionalBusinessSourceInformationTypeAttributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI_198179C {
    
    $attributes: OriginatorIdentificationDetailsTypeI_198179CAttributes
    
    // Agency Iata code
    originatorId: string
    
}

export interface OriginatorIdentificationDetailsTypeI_198179CAttributes {
    
}

// To convey information concerning a tour.
export interface TourInformationTypeI {
    
    $attributes: TourInformationTypeIAttributes
    
    // Tour code
    tourInformationDetails: TourDetailsTypeI_198183C
    
}

export interface TourInformationTypeIAttributes {
    
}

// To provide details of a tour by code, name of the tour provider, length, number of stops, room occupancy and number of rooms.
export interface TourDetailsTypeI_198183C {
    
    $attributes: TourDetailsTypeI_198183CAttributes
    
    // Inclusive tour number
    tourCode: string
    
}

export interface TourDetailsTypeI_198183CAttributes {
    
}

// To specify miscellaneous, confidential, quality control and invoice remarks, as well as departure comments, applicable to Acceptance, Boarding, Baggage....
export interface MiscellaneousRemarksType_136700S {
    
    $attributes: MiscellaneousRemarksType_136700SAttributes
    
    // miscellaneous remarks
    remarkDetails: Array<MiscellaneousRemarkType_198195C>
    
}

export interface MiscellaneousRemarksType_136700SAttributes {
    
}

// Miscellaneous remarks
export interface MiscellaneousRemarkType_198195C {
    
    $attributes: MiscellaneousRemarkType_198195CAttributes
    
    // This data element is used to convey the type of the remark. (see data mapping to view the codes)
    type: string
    
    // Free text and message sequence numbers of the remarks.
    freetext: Array<string>
    
    // This data element is used to convey the business function
    businessFunction: Array<string>
    
    // language used for the free text.
    language: Array<string>
    
    // Indicates if it has been manually entered by an agent or system generated.
    source: Array<string>
    
    // Coded identification of the character encoding used in the interchange
    encoding: Array<string>
    
}

export interface MiscellaneousRemarkType_198195CAttributes {
    
}

// To specify a pertinent quantity.
export interface QuantityTypeI2 {
    
    $attributes: QuantityTypeI2Attributes
    
    // Estinated distance details
    quantityDetails: QuantityDetailsTypeI_142179C
    
}

export interface QuantityTypeI2Attributes {
    
}

// Quantity information in a transaction, qualified when relevant.
export interface QuantityDetailsTypeI_142179C {
    
    $attributes: QuantityDetailsTypeI_142179CAttributes
    
    // it will be L for Life time period
    qualifier: string
    
    // duration expressed in Seconds during the consumer has to do the payment
    value: number
    
    // SEC for duration in seconds
    unit: string
    
}

export interface QuantityDetailsTypeI_142179CAttributes {
    
}

// To identify the name of a person or entity.
export interface NameTypeU_136701S {
    
    $attributes: NameTypeU_136701SAttributes
    
    // Name information
    nameInformation: NameInformationTypeU_198196C
    
}

export interface NameTypeU_136701SAttributes {
    
}

// To identify the type of name, the actual name or a code to identify the name, and the status of the name
export interface NameInformationTypeU_198196C {
    
    $attributes: NameInformationTypeU_198196CAttributes
    
    // name qualifier
    qualifier: string
    
    // name
    name: string
    
}

export interface NameInformationTypeU_198196CAttributes {
    
}

// To specify the agreement details.
export interface AgreementIdentificationTypeU {
    
    $attributes: AgreementIdentificationTypeUAttributes
    
    // Agreement identification
    agreementDetails: Array<AgreementTypeIdentificationTypeU>
    
}

export interface AgreementIdentificationTypeUAttributes {
    
}

// Identification of specific agreement type by code or name.
export interface AgreementTypeIdentificationTypeU {
    
    $attributes: AgreementTypeIdentificationTypeUAttributes
    
    // - TK for Tracking option
    code: string
    
    // Agreement description
    description: string
    
}

export interface AgreementTypeIdentificationTypeUAttributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberTypeI2 {
    
    $attributes: TicketNumberTypeI2Attributes
    
    // documentDetails
    documentDetails: TicketNumberDetailsTypeI_198206C
    
}

export interface TicketNumberTypeI2Attributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsTypeI_198206C {
    
    $attributes: TicketNumberDetailsTypeI_198206CAttributes
    
    // eVoucher number
    number: string
    
}

export interface TicketNumberDetailsTypeI_198206CAttributes {
    
}

// email
export interface CommunicationContactTypeU {
    
    $attributes: CommunicationContactTypeUAttributes
    
    // Customer contact
    contact: CommunicationContactDetailsTypeU
    
}

export interface CommunicationContactTypeUAttributes {
    
}

// Communication number of a department or employee in a specified channel.
export interface CommunicationContactDetailsTypeU {
    
    $attributes: CommunicationContactDetailsTypeUAttributes
    
    // Email
    email: string
    
    // Contact qualifier. EM for Electronic mail
    contactQualifier: string
    
}

export interface CommunicationContactDetailsTypeUAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_136691S {
    
    $attributes: AttributeType_136691SAttributes
    
    // Specify which attribute is described in E003. BAT for booking attribute
    criteriaSetType: string
    
    // Details for the attribute type. LEI:Y for leisure booking CLP:Y for clip booking
    criteriaDetails: Array<AttributeInformationTypeU_198185C>
    
}

export interface AttributeType_136691SAttributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU_198185C {
    
    $attributes: AttributeInformationTypeU_198185CAttributes
    
    // the attribute type LEI for leisure booking CLP for clip booking
    attributeType: string
    
    // Not Used
    attributeDescription: Array<string>
    
}

export interface AttributeInformationTypeU_198185CAttributes {
    
}

// cruise business data
export interface CruiseBusinessDataType {
    
    $attributes: CruiseBusinessDataTypeAttributes
    
    // Details of sailing ship for the sailing trip. Each cruise provider has a ship name table in the Amadeus system. This table is used for converting ship codes in ship names and vice-versa. Since both information are stored in the Cruise segment of the PNR, no DB access is necessary for the PNRACC processing.
    sailingShipInformation: ShipIdentificationType_8952S
    
    // Details of the cruise line provider for the sailing trip.
    sailingProviderInformation: CompanyInformationType_8953S
    
    // Details of embarkation and disembarkation ports for the sailing trip. The codes sent by the cruise providers can be non-Iata codes.
    sailingPortsInformation: PlaceLocationIdentificationTypeU_8954S
    
    // Details of the departure and arrival dates of the sailing trip. The cruise segment in the PNR actually stores the departure date and the duration length in days. For the PNRACC 4.1 process, the arrival date is re-calculated.
    sailingDateInformation: StructuredPeriodInformationType_8955S
    
    // Details of passengers for the sailing trip. For a cruise booking, the passenger names elements from the PNR can be different from the passengers in the cruise segment. They are identical at booking creation time. But the cruise providers allow adding passenger name(s) to an existing booking. That is not possible in an Amadeus PNR. Therefore, the name information had to be stored in the cruise segment itself.
    passengerInfo: Array<TravellerInformationTypeI_8956S>
    
    // Booking information, including confirmation and cancellation number, and a flag telling where the booking has been originally created.
    bookingDetails: Array<bookingDetailsType>
    
    // Booking Date.
    bookingDate: StructuredDateTimeInformationType_20645S
    
    // Details of the sailing group code for the sailing trip.
    sailingGroupInformation: Array<ItemReferencesAndVersionsType_9271S>
    
}

export interface CruiseBusinessDataTypeAttributes {
    
}

// To provide details on the sailing ship
export interface ShipIdentificationType_8952S {
    
    $attributes: ShipIdentificationType_8952SAttributes
    
    // Detailed information for the sailing ship.
    shipDetails: ShipIdentificationDetailsType
    
}

export interface ShipIdentificationType_8952SAttributes {
    
}


export interface ShipIdentificationDetailsType {
    
    $attributes: ShipIdentificationDetailsTypeAttributes
    
    // Used to convey the ship code as in the Cruise specific database ship&#39;s table.
    code: string
    
    // Used to convey the ship name as in the Cruise specific database ship&#39;s table.
    name: Array<string>
    
    // Used to convey the cruise line provider code for the sailing ship.
    cruiseLineCode: string
    
}

export interface ShipIdentificationDetailsTypeAttributes {
    
}

// This segment is used to convey the non-air company information
export interface CompanyInformationType_8953S {
    
    $attributes: CompanyInformationType_8953SAttributes
    
    // This data element is used to qualify the company code, to identify the industry business it belongs.
    travelSector: string
    
    // This data element is used to convey the context in which the code applies
    companyCodeContext: string
    
    // This data element is used to convey the company code of a non-air company
    companyCode: string
    
    // This data element is used to convey the company name of a non-air company
    companyName: string
    
}

export interface CompanyInformationType_8953SAttributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationTypeU_8954S {
    
    $attributes: PlaceLocationIdentificationTypeU_8954SAttributes
    
    // Details of the embarkation port.
    firstLocationDetails: RelatedLocationOneIdentificationTypeU
    
    // Details of the disembarkation port.
    secondLocationDetails: RelatedLocationTwoIdentificationTypeU
    
}

export interface PlaceLocationIdentificationTypeU_8954SAttributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationTypeU {
    
    $attributes: RelatedLocationOneIdentificationTypeUAttributes
    
    // Conveys the embarkation port code.
    code: string
    
}

export interface RelatedLocationOneIdentificationTypeUAttributes {
    
}

// Identification of second related location by code or name.
export interface RelatedLocationTwoIdentificationTypeU {
    
    $attributes: RelatedLocationTwoIdentificationTypeUAttributes
    
    // Conveys the disembarkation port code.
    code: string
    
}

export interface RelatedLocationTwoIdentificationTypeUAttributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType_8955S {
    
    $attributes: StructuredPeriodInformationType_8955SAttributes
    
    // Convey the begin date/time of a period.
    beginDateTime: StructuredDateTimeType_16347C
    
    // Convey the end date/time of a period.
    endDateTime: StructuredDateTimeType_16347C
    
}

export interface StructuredPeriodInformationType_8955SAttributes {
    
}

// To specify a traveler(s) and personal details relating to the traveler(s).
export interface TravellerInformationTypeI_8956S {
    
    $attributes: TravellerInformationTypeI_8956SAttributes
    
    // Passenger last name details.
    paxDetails: TravellerSurnameInformationTypeI
    
    // Passnger first name details.
    otherPaxDetails: Array<TravellerDetailsTypeI>
    
}

export interface TravellerInformationTypeI_8956SAttributes {
    
}

// Identification of the surname of a traveller, the type of traveller, number of travellers per surname and the action to be taken.
export interface TravellerSurnameInformationTypeI {
    
    $attributes: TravellerSurnameInformationTypeIAttributes
    
    // Conveys passenger last name.
    surname: string
    
}

export interface TravellerSurnameInformationTypeIAttributes {
    
}

// To identify the given/first name and the title of a traveller and the traveller type.
export interface TravellerDetailsTypeI {
    
    $attributes: TravellerDetailsTypeIAttributes
    
    // Conveys passenger first name.
    givenName: Array<string>
    
    
    title: Array<string>
    
}

export interface TravellerDetailsTypeIAttributes {
    
}


export interface bookingDetailsType {
    
    $attributes: bookingDetailsTypeAttributes
    
    // Details of the booking references for the sailing trip. These references are returned by the cruise provider at booking creation time or at booking cancellation time. Note that as re-instate of a cruise booking is possible even several days after cancellation. Therefore, when a cruise booking is cancelled, the segment is kept in the PNR and the status updated to HX.
    cruiseBookingReferenceInfo: ReservationControlInformationTypeI_8957S
    
    // Company in which the booking is created: Amadeus or external.
    bookingCompany: Array<CompanyInformationType_26258S>
    
}

export interface bookingDetailsTypeAttributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI_8957S {
    
    $attributes: ReservationControlInformationTypeI_8957SAttributes
    
    // Cruise booking reference.
    reservation: Array<ReservationControlInformationDetailsTypeI_16352C>
    
}

export interface ReservationControlInformationTypeI_8957SAttributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI_16352C {
    
    $attributes: ReservationControlInformationDetailsTypeI_16352CAttributes
    
    // Conveys the booking number.
    controlNumber: string
    
    // Conveys the booking number qualifier.
    controlType: string
    
}

export interface ReservationControlInformationDetailsTypeI_16352CAttributes {
    
}

// This segment is used to convey the company information
export interface CompanyInformationType_26258S {
    
    $attributes: CompanyInformationType_26258SAttributes
    
    // This data element is used to qualify the company code, to identify the industry business it belongs.
    travelSector: Array<string>
    
    // This data element is used to convey the context in which the code applies
    companyCodeContext: Array<string>
    
    // This data element is used to convey the company code of a company
    companyCode: string
    
    // This data element is used to convey the company name of a company
    companyName: Array<string>
    
}

export interface CompanyInformationType_26258SAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_20645S {
    
    $attributes: StructuredDateTimeInformationType_20645SAttributes
    
    // Convey date and/or time.
    dateTime: StructuredDateTimeType_36777C
    
}

export interface StructuredDateTimeInformationType_20645SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_36777C {
    
    $attributes: StructuredDateTimeType_36777CAttributes
    
    // Year number.
    year: number
    
    // Month number in the year ( begins to 1 )
    month: string
    
    // Day number in the month ( begins to 1 )
    day: string
    
}

export interface StructuredDateTimeType_36777CAttributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType_9271S {
    
    $attributes: ItemReferencesAndVersionsType_9271SAttributes
    
    // Defines the type of reference used: GPN : group code
    referenceType: string
    
    // The value of the reference.
    uniqueReference: string
    
}

export interface ItemReferencesAndVersionsType_9271SAttributes {
    
}

// Group together rail segment business data
export interface TrainInformationType {
    
    $attributes: TrainInformationTypeAttributes
    
    // Information pertaining to the rail company
    companyInfo: CompanyInformationType_19450S
    
    // Indicates whether or not the reservation can be modified directly in the Amadeus system
    updatePermission: Array<StatusTypeI_20923S>
    
    // train number, equipment code, departure and arrival dates and times.
    tripDetails: TrainDataType_48813G
    
    // indicate that the train segment is open.
    openSegment: Array<StatusTypeI_196879S>
    
    // Journey direction: outward, return, single
    journeyDirection: Array<TravelItineraryInformationTypeI_129342S>
    
    // Rail provider segment tattoo reference
    providerTattoo: Array<ItemReferencesAndVersionsType_20992S>
    
    // SVC / Service information
    serviceInfo: Array<FreeTextInformationType_20551S>
    
    // Information pertaining to the class of service including number of seats
    classInfo: ClassConfigurationDetailsType_20530S
    
    // Accommodation (room/compartment) details.
    accommodationInfo: Array<AccommodationAllocationInformationTypeU>
    
    // Coach information
    coachInfo: Array<CoachProductInformationType>
    
    // Reservation Mandatory, Advised, Possible, Not Possible
    reservableStatus: Array<QuantityAndActionTypeU_32609S>
    
}

export interface TrainInformationTypeAttributes {
    
}

// This segment is used to convey the company information
export interface CompanyInformationType_19450S {
    
    $attributes: CompanyInformationType_19450SAttributes
    
    // This data element is used to convey the company code
    companyCode: string
    
    // This data element is used to convey the UIC code
    companyNumericCode: Array<number>
    
}

export interface CompanyInformationType_19450SAttributes {
    
}

// To identify a status and related information.
export interface StatusTypeI_20923S {
    
    $attributes: StatusTypeI_20923SAttributes
    
    // Status information
    statusDetails: StatusDetailsTypeI_37285C
    
}

export interface StatusTypeI_20923SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI_37285C {
    
    $attributes: StatusDetailsTypeI_37285CAttributes
    
    // Indicates of the reservation is modifiable directly in the 1A system
    indicator: Array<string>
    
}

export interface StatusDetailsTypeI_37285CAttributes {
    
}

// Group together train business data
export interface TrainDataType_48813G {
    
    $attributes: TrainDataType_48813GAttributes
    
    // Information pertaining to the train product
    trainProductInfo: TrainProductInformationType
    
    // Trip dates and times
    tripDateTime: Array<StructuredDateTimeInformationType_129285S>
    
    // Departure station location
    depLocation: PlaceLocationIdentificationTypeU_32347S
    
    // Arrival station location
    arrLocation: PlaceLocationIdentificationTypeU_32347S
    
    // Rail leg (train number, train provider, departure/arrival locations and dates, reservable status)
    railLeg: Array<RailLegDataType_48811G>
    
}

export interface TrainDataType_48813GAttributes {
    
}

// Train Product Information
export interface TrainProductInformationType {
    
    $attributes: TrainProductInformationTypeAttributes
    
    // Train Details
    trainDetails: Array<TrainDetailsType>
    
    // Transportation mode (BUS, SHIP, TRAIN, TGV etc)
    type: Array<string>
    
}

export interface TrainProductInformationTypeAttributes {
    
}


export interface TrainDetailsType {
    
    $attributes: TrainDetailsTypeAttributes
    
    // Train company code
    code: Array<string>
    
    // Train Number
    number: Array<string>
    
}

export interface TrainDetailsTypeAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_129285S {
    
    $attributes: StructuredDateTimeInformationType_129285SAttributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - Impacted period - Departure date - Estimated arrival date and time
    businessSemantic: Array<string>
    
    // Departure or arrival date and time.
    dateTime: StructuredDateTimeType_188350C
    
}

export interface StructuredDateTimeInformationType_129285SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_188350C {
    
    $attributes: StructuredDateTimeType_188350CAttributes
    
    // Year number.
    year: string
    
    // Month number in the year ( begins to 1 )
    month: string
    
    // Day number in the month ( begins to 1 )
    day: string
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
}

export interface StructuredDateTimeType_188350CAttributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationTypeU_32347S {
    
    $attributes: PlaceLocationIdentificationTypeU_32347SAttributes
    
    // Type of location
    locationType: string
    
    // Railway station location details.
    locationDescription: LocationIdentificationBatchTypeU_56454C
    
    // Railway station country details.
    firstLocationDetails: Array<RelatedLocationOneIdentificationTypeU_56455C>
    
}

export interface PlaceLocationIdentificationTypeU_32347SAttributes {
    
}

// Identification of a location by code or name
export interface LocationIdentificationBatchTypeU_56454C {
    
    $attributes: LocationIdentificationBatchTypeU_56454CAttributes
    
    // Railway station location code
    code: string
    
    // Code type
    qualifier: string
    
    // Location name
    name: Array<string>
    
}

export interface LocationIdentificationBatchTypeU_56454CAttributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationTypeU_56455C {
    
    $attributes: RelatedLocationOneIdentificationTypeU_56455CAttributes
    
    // Railway station country code
    code: string
    
    // Code type
    qualifier: string
    
}

export interface RelatedLocationOneIdentificationTypeU_56455CAttributes {
    
}

// contains the data of a rail leg
export interface RailLegDataType_48811G {
    
    $attributes: RailLegDataType_48811GAttributes
    
    // Information pertaining to the train product
    trainProductInfo: TrainProductInformationType_32331S
    
    // Reservation Mandatory, Advised, Possible, Not Possible
    reservableStatus: Array<QuantityAndActionTypeU_32609S>
    
    // Leg departure and arrival dates and times
    legDateTime: Array<StructuredDateTimeInformationType_129285S>
    
    // Departure station location
    depLocation: PlaceLocationIdentificationTypeU_32347S
    
    // Arrival station location
    arrLocation: PlaceLocationIdentificationTypeU_32347S
    
    // leg reference: leg order within the itinerary
    legReference: ItemNumberTypeU_33258S
    
}

export interface RailLegDataType_48811GAttributes {
    
}

// Train Product Information
export interface TrainProductInformationType_32331S {
    
    $attributes: TrainProductInformationType_32331SAttributes
    
    // Rail Company
    railCompany: string
    
    // Train Details
    trainDetails: Array<TrainDetailsType>
    
    // Train Equipment Type (TGV,TGD,TGN...)
    type: string
    
}

export interface TrainProductInformationType_32331SAttributes {
    
}

// To indicate quantity and action required in relation to a product.
export interface QuantityAndActionTypeU_32609S {
    
    $attributes: QuantityAndActionTypeU_32609SAttributes
    
    // accommodation status
    accoStatus: QuantityAndActionDetailsTypeU_56796C
    
}

export interface QuantityAndActionTypeU_32609SAttributes {
    
}

// To specify quantity and action required for a product or service
export interface QuantityAndActionDetailsTypeU_56796C {
    
    $attributes: QuantityAndActionDetailsTypeU_56796CAttributes
    
    // accommodation reservation mandatoty, optionnal, advised, not possible
    statusCode: string
    
}

export interface QuantityAndActionDetailsTypeU_56796CAttributes {
    
}

// To identify a status and related information.
export interface StatusTypeI_196879S {
    
    $attributes: StatusTypeI_196879SAttributes
    
    // Indicators related to PNR element.
    statusDetails: StatusDetailsTypeI_148341C
    
}

export interface StatusTypeI_196879SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI_148341C {
    
    $attributes: StatusDetailsTypeI_148341CAttributes
    
    // Indicator name.
    indicator: string
    
}

export interface StatusDetailsTypeI_148341CAttributes {
    
}

// To specify a segment of an itinerary and related details.
export interface TravelItineraryInformationTypeI_129342S {
    
    $attributes: TravelItineraryInformationTypeI_129342SAttributes
    
    // direction of travel indicator (outward, return, single)
    movementType: string
    
}

export interface TravelItineraryInformationTypeI_129342SAttributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType_20992S {
    
    $attributes: ItemReferencesAndVersionsType_20992SAttributes
    
    // qualifies the type of the reference used. Code set to define
    referenceType: string
    
    // The value of the reference
    uniqueReference: string
    
}

export interface ItemReferencesAndVersionsType_20992SAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_20551S {
    
    $attributes: FreeTextInformationType_20551SAttributes
    
    // Text attributes
    freeTextDetails: FreeTextDetailsType4
    
    // SVCs / Service Information (Amtrak). 63 characters maximum length, and a maximum of 5 lines per train segment.
    freeText: Array<string>
    
}

export interface FreeTextInformationType_20551SAttributes {
    
}


export interface FreeTextDetailsType4 {
    
    $attributes: FreeTextDetailsType4Attributes
    
    // Qualifier of the free text
    textSubjectQualifier: string
    
    // Source: - M (for Manual) if the free text comes from GUI or live agent entry, - S (default value) if the free text comes from another system
    source: string
    
    // Encoding: - 1 for ASCII 7 bit (no national characters)
    encoding: string
    
}

export interface FreeTextDetailsType4Attributes {
    
}

// This segment give the class configuration for a train
export interface ClassConfigurationDetailsType_20530S {
    
    $attributes: ClassConfigurationDetailsType_20530SAttributes
    
    // Class Details -Class Group -Sub Class -number of seats
    classDetails: ClassDetailsType_36634C
    
}

export interface ClassConfigurationDetailsType_20530SAttributes {
    
}


export interface ClassDetailsType_36634C {
    
    $attributes: ClassDetailsType_36634CAttributes
    
    // Class Group : A-First Class, Seat B-Second Class, Seat C-First Class, Berth D-Second Class, Berth F-Binded Seat V-First Class, Sleeping-car W-Second Class, Sleeping-car
    code: Array<string>
    
    // Rail class code.
    bookingClass: Array<string>
    
    // Number of Free Seats
    numberOfSeats: number
    
}

export interface ClassDetailsType_36634CAttributes {
    
}

// To specify the references, the type and the characteristic of accommodations allocated as a result of a reservation request.
export interface AccommodationAllocationInformationTypeU {
    
    $attributes: AccommodationAllocationInformationTypeUAttributes
    
    // Allocated accommodation
    accommAllocation: AccommodationAllocationInformationDetailsTypeU
    
}

export interface AccommodationAllocationInformationTypeUAttributes {
    
}

// To specify references, type and characteristics of accommodations allocated.
export interface AccommodationAllocationInformationDetailsTypeU {
    
    $attributes: AccommodationAllocationInformationDetailsTypeUAttributes
    
    // Accommodation (room/compartment) number
    referenceId: string
    
    // Accommodation (room/compartment) code
    code: Array<string>
    
}

export interface AccommodationAllocationInformationDetailsTypeUAttributes {
    
}

// Coach Product Information
export interface CoachProductInformationType {
    
    $attributes: CoachProductInformationTypeAttributes
    
    // Coach Product Details
    coachDetails: Array<ReferencingDetailsTypeI_36941C>
    
    // Coach Equipment Qualifier
    equipmentCode: Array<string>
    
}

export interface CoachProductInformationTypeAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_36941C {
    
    $attributes: ReferencingDetailsTypeI_36941CAttributes
    
    // Coach Number
    value: string
    
}

export interface ReferencingDetailsTypeI_36941CAttributes {
    
}

// Conveys tour booking information
export interface TourInformationType {
    
    $attributes: TourInformationTypeAttributes
    
    // Conveys summary information of the booking (such as departure/arrival location or date of the booking, the booking type ...). The providerName data of the composite E988 DOES NOT conveys the Tour Operator&#39;s name. Providers&#39; name and code are stored in CPYs.
    bookingSummaryInfo: TravelProductInformationTypeU_25428S
    
    // Conveys information about the booking duration
    bookingDurationInfo: Array<QuantityType_25433S>
    
    // Conveys staying location information
    stayingInfo: Array<PlaceLocationIdentificationTypeU_25436S>
    
    // Conveys the tour description (name and description)
    tourDescriptionInfo: Array<AdditionalProductDetailsTypeU>
    
    // Conveys booking reference and unique key in the provider system
    bookingReferenceInfo: Array<ReservationControlInformationTypeU>
    
    // Conveys the status of the booking or of the ticket and the number in party. The composite E958 is M2: -One instance can be the booking&#39;s status -The other can be the TKOK status
    statusInfo: QuantityAndActionTypeU_25425S
    
    // Indicates whether an insurance is included in the tour booking.
    insuranceIndication: Array<InsuranceCoverageType_25483S>
    
    // Conveys passenger information when there is a desynchronization between the PNR passengers and tour passengers (Tour Server). A Tour Server booking can contain its own passenger names. Tour Server&#39;s specifications specify a maximum of 99 passengers. If a Tour booking conveys its passengers in TIF, then there is no Pax assoc (no REF used for Pax assoc). BUT, when there is no TIF (for example in Tour Distribution), there may be a Pax assoc between product and PNR pax, and/or booking and PNR&#39;s pax. Then REFs are used
    passengerInfo: Array<TravellerInformationType_25441S>
    
    // Conveys the booking expiration information (only the expiration date is needed).
    expireInfo: Array<StructuredDateTimeInformationType_25444S>
    
    // Conveys description information (Remark booking description). For the remarks we can have 2 lines of text that is why the 101C composite is repeted 2 times.
    bookingDescriptionInfo: Array<FreeTextInformationType_25445S>
    
    // Conveys information about the targeted system provider (TS for Tour source, TG for Royal Orchid Holiday ...). The only information conveyd is the code of the provider whose system has the master Tour booking. Example: the Tour Operator ROH provides its products throw the TG (Thai Airways) system: TRA conveys TG, one CPY conveys ROH.
    systemProviderInfo: Array<TransportIdentifierType_25440S>
    
    // Conveys information about the tour operator (name, code ...)
    tourOperatorInfo: Array<CompanyInformationType_25420S>
    
    // Bokking source (/BS)
    bookingSource: Array<UserIdentificationType_25447S>
    
    // Conveys the passenger association for the booking
    passengerAssocation: Array<ReferenceInfoType_25422S>
    
    // Conveys tour payment information such as the detailed price of the booking, the commisssion, the deposit information ...
    tourAccountDetails: Array<TourAccountDetailsType>
    
    // Conveys information about the booked products (arrival/departure information, product identification, meal plan information, occupation ...)
    tourProductDetails: Array<TourServiceDetailsType>
    
}

export interface TourInformationTypeAttributes {
    
}

// To specify details related to a travel product.
export interface TravelProductInformationTypeU_25428S {
    
    $attributes: TravelProductInformationTypeU_25428SAttributes
    
    // Conveys information about the departure/ arrival date and time.
    dateTimeInformation: Array<ProductDateAndTimeTypeU_46325C>
    
    // Conveys the departure/arrival/staying location information
    locationInformation: Array<LocationTypeU_46324C>
    
    // Conveys information about the provider of the product
    companyInformation: Array<CompanyIdentificationTypeU>
    
    // Conveys details about the product
    productDetails: ProductIdentificationDetailsTypeU_46327C
    
}

export interface TravelProductInformationTypeU_25428SAttributes {
    
}

// To specify first the beginning date and time followed by the ending date and time associated with a product or service.
export interface ProductDateAndTimeTypeU_46325C {
    
    $attributes: ProductDateAndTimeTypeU_46325CAttributes
    
    // Conveys departure date
    departureDate: string
    
    // Conveys departure time
    departureTime: Array<string>
    
    // Conveys arrival date
    arrivalDate: Array<string>
    
    // Conveys arrival time
    arrivalTime: Array<string>
    
}

export interface ProductDateAndTimeTypeU_46325CAttributes {
    
}

// To identify a location
export interface LocationTypeU_46324C {
    
    $attributes: LocationTypeU_46324CAttributes
    
    // city code
    code: string
    
    // city name
    name: Array<string>
    
    // country code
    country: Array<string>
    
    // location qualifier for the repetition (departure location, arrival location ...)
    qualifier: string
    
}

export interface LocationTypeU_46324CAttributes {
    
}

// To identify the company and any associated companies.
export interface CompanyIdentificationTypeU {
    
    $attributes: CompanyIdentificationTypeUAttributes
    
    // Conveys the provider name
    providerName: string
    
}

export interface CompanyIdentificationTypeUAttributes {
    
}

// Code, number or name to identify a specific product or service and a code to identify the level or type of product or service.
export interface ProductIdentificationDetailsTypeU_46327C {
    
    $attributes: ProductIdentificationDetailsTypeU_46327CAttributes
    
    // Conveys the product code
    code: Array<string>
    
    // Conveys the product type (accomodation, vehicule, transportation, cruise ...)
    type: string
    
    // Conveys the subType of a product (Chalet or Villa for accomodation, Transfert or ticket for supplementary services ...)
    subType: Array<string>
    
    // Conveys the product description
    description: Array<string>
    
}

export interface ProductIdentificationDetailsTypeU_46327CAttributes {
    
}

// To specify a pertinent quantity.
export interface QuantityType_25433S {
    
    $attributes: QuantityType_25433SAttributes
    
    // To specify an appropriate quantity.
    quantityDetails: QuantityDetailsTypeI_46334C
    
}

export interface QuantityType_25433SAttributes {
    
}

// Quantity information in a transaction, qualified when relevant.
export interface QuantityDetailsTypeI_46334C {
    
    $attributes: QuantityDetailsTypeI_46334CAttributes
    
    // Quantity qualifier
    qualifier: string
    
    // Quantity value
    value: number
    
    // Quantity unit
    unit: string
    
}

export interface QuantityDetailsTypeI_46334CAttributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationTypeU_25436S {
    
    $attributes: PlaceLocationIdentificationTypeU_25436SAttributes
    
    // location type (place of arrival, place of departure or staying)
    locationType: string
    
    // city information
    locationDescription: LocationIdentificationBatchTypeU_46344C
    
    // country description
    firstLocationDetails: Array<RelatedLocationOneIdentificationTypeU_46345C>
    
}

export interface PlaceLocationIdentificationTypeU_25436SAttributes {
    
}

// Identification of a location by code or name
export interface LocationIdentificationBatchTypeU_46344C {
    
    $attributes: LocationIdentificationBatchTypeU_46344CAttributes
    
    // location code
    code: string
    
    // location qualifier (city, country ...)
    qualifier: string
    
    // location name
    name: Array<string>
    
}

export interface LocationIdentificationBatchTypeU_46344CAttributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationTypeU_46345C {
    
    $attributes: RelatedLocationOneIdentificationTypeU_46345CAttributes
    
    // location code
    code: string
    
    // location qualifier
    qualifier: string
    
}

export interface RelatedLocationOneIdentificationTypeU_46345CAttributes {
    
}

// To specify additional details including the types of product data, the actual data, the number available, and the charges for usage.
export interface AdditionalProductDetailsTypeU {
    
    $attributes: AdditionalProductDetailsTypeUAttributes
    
    // Conveys the product area (TOU)
    productArea: string
    
    // The general product description
    productDetails: ProductDataInformationTypeU
    
}

export interface AdditionalProductDetailsTypeUAttributes {
    
}

// To specify the product data in coded or text form, the number available, and the charge for usage
export interface ProductDataInformationTypeU {
    
    $attributes: ProductDataInformationTypeUAttributes
    
    // Tour product category (StandAlone, Package, Supplementary service ...)
    productCategory: string
    
    // Conveys the product code
    productCode: Array<string>
    
    // Set to 1 if the product is an addOn.
    addOnIndicator: Array<number>
    
    // The product description
    productDescription: Array<string>
    
}

export interface ProductDataInformationTypeUAttributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeU {
    
    $attributes: ReservationControlInformationTypeUAttributes
    
    // Conveys the reservation control Id
    reservationControlId: ReservationControlInformationDetailsTypeU
    
}

export interface ReservationControlInformationTypeUAttributes {
    
}

// To specify information about a reservation such as identification, date and time, and reasons of modifications.
export interface ReservationControlInformationDetailsTypeU {
    
    $attributes: ReservationControlInformationDetailsTypeUAttributes
    
    // Conveys the tour operator code
    tourOperatorCode: Array<string>
    
    // Conveys the reservation control number qualifier
    reservationControlNumberQual: string
    
    // Conveys the reservation control number. Can have up to 32 chars. for Tour Server
    reservationControlNumber: string
    
}

export interface ReservationControlInformationDetailsTypeUAttributes {
    
}

// To indicate quantity and action required in relation to a product.
export interface QuantityAndActionTypeU_25425S {
    
    $attributes: QuantityAndActionTypeU_25425SAttributes
    
    // Conveys quantity and status information
    quantityActionDetails: Array<QuantityAndActionDetailsTypeU_46321C>
    
}

export interface QuantityAndActionTypeU_25425SAttributes {
    
}

// To specify quantity and action required for a product or service
export interface QuantityAndActionDetailsTypeU_46321C {
    
    $attributes: QuantityAndActionDetailsTypeU_46321CAttributes
    
    // Quantity information
    quantity: Array<number>
    
    // Conveys the status code (HK, GK ...) of a booking, a product or a ticket
    statusCode: string
    
}

export interface QuantityAndActionDetailsTypeU_46321CAttributes {
    
}

// coverage conditions
export interface InsuranceCoverageType_25483S {
    
    $attributes: InsuranceCoverageType_25483SAttributes
    
    // to indicate which coverage we are talking about.
    coverageIndicator: string
    
}

export interface InsuranceCoverageType_25483SAttributes {
    
}

// To specify a traveler and personal details relating to the traveler
export interface TravellerInformationType_25441S {
    
    $attributes: TravellerInformationType_25441SAttributes
    
    // passenger details
    paxDetails: TravellerSurnameInformationType_46353C
    
    // other passenger details
    otherPaxDetails: TravellerDetailsTypeI_46354C
    
}

export interface TravellerInformationType_25441SAttributes {
    
}


export interface TravellerSurnameInformationType_46353C {
    
    $attributes: TravellerSurnameInformationType_46353CAttributes
    
    // Passenger name
    surname: string
    
}

export interface TravellerSurnameInformationType_46353CAttributes {
    
}

// To identify the given/first name and the title of a traveller and the traveller type.
export interface TravellerDetailsTypeI_46354C {
    
    $attributes: TravellerDetailsTypeI_46354CAttributes
    
    // Passenger lastName
    givenName: string
    
    // passenger title
    title: Array<string>
    
}

export interface TravellerDetailsTypeI_46354CAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_25444S {
    
    $attributes: StructuredDateTimeInformationType_25444SAttributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - Impacted period - Departure date - Estimated arrival date and time
    businessSemantic: string
    
    // Convey date and/or time.
    dateTime: StructuredDateTimeType_187528C
    
}

export interface StructuredDateTimeInformationType_25444SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_187528C {
    
    $attributes: StructuredDateTimeType_187528CAttributes
    
    // Year number.
    year: string
    
    // Month number in the year ( begins to 1 )
    month: string
    
    // Day number in the month ( begins to 1 )
    day: string
    
}

export interface StructuredDateTimeType_187528CAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_25445S {
    
    $attributes: FreeTextInformationType_25445SAttributes
    
    // booking description details
    freeTextDetails: FreeTextDetailsType_46357C
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType_25445SAttributes {
    
}


export interface FreeTextDetailsType_46357C {
    
    $attributes: FreeTextDetailsType_46357CAttributes
    
    // booking description subject qualifier
    textSubjectQualifier: string
    
    // booking information type
    informationType: string
    
    // booking desscription source
    source: string
    
    // booking description encoding information
    encoding: string
    
}

export interface FreeTextDetailsType_46357CAttributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType_25440S {
    
    $attributes: TransportIdentifierType_25440SAttributes
    
    // Targeted provider system information
    companyIdentification: CompanyIdentificationTypeI_46351C
    
}

export interface TransportIdentifierType_25440SAttributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI_46351C {
    
    $attributes: CompanyIdentificationTypeI_46351CAttributes
    
    // Targeted provider system code
    operatingCompany: string
    
}

export interface CompanyIdentificationTypeI_46351CAttributes {
    
}

// This segment is used to convey the company information
export interface CompanyInformationType_25420S {
    
    $attributes: CompanyInformationType_25420SAttributes
    
    // This data element is used to qualify the company code, to identify the industry business it belongs.
    travelSector: string
    
    // This data element is used to convey the company code of a company
    companyCode: string
    
    // This data element is used to convey the company name of a company
    companyName: Array<string>
    
}

export interface CompanyInformationType_25420SAttributes {
    
}

// This segment is used to identify a user.
export interface UserIdentificationType_25447S {
    
    $attributes: UserIdentificationType_25447SAttributes
    
    // Originator Identification Details
    originIdentification: Array<OriginatorIdentificationDetailsTypeI_46358C>
    
    // Booking source or [agent numeric sign] + [agent initial] + [duty code]
    originator: string
    
}

export interface UserIdentificationType_25447SAttributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI_46358C {
    
    $attributes: OriginatorIdentificationDetailsTypeI_46358CAttributes
    
    // Origin OficeID
    inHouseIdentification1: Array<string>
    
    // Target OfficeID
    inHouseIdentification2: Array<string>
    
}

export interface OriginatorIdentificationDetailsTypeI_46358CAttributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_25422S {
    
    $attributes: ReferenceInfoType_25422SAttributes
    
    // REFERENCING DETAILS
    referenceDetails: ReferencingDetailsTypeI_46317C
    
}

export interface ReferenceInfoType_25422SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_46317C {
    
    $attributes: ReferencingDetailsTypeI_46317CAttributes
    
    // Qualify the type of reference: passenger or product
    type: string
    
    // Passenger tatoo or Product sequence number
    value: string
    
}

export interface ReferencingDetailsTypeI_46317CAttributes {
    
}

// To transport Tour account details
export interface TourAccountDetailsType {
    
    $attributes: TourAccountDetailsTypeAttributes
    
    // Total price of the Tours. The segment can be repeated in case the total price is written in more than one currency. This trigger is M20 and not M1, but there is no grammar problem with that. There would be a problem if the group TURP was repeated, but this is not and shall never be the case.
    tourTotalPrices: Array<TariffInformationTypeU_25419S>
    
    // The remaining amount to pay, for each Tour Operator
    remainingAmountsDetails: Array<remainingAmountsDetailsType>
    
    // All tour products (accomodation, transport, insurance...) prices and additional price elements such as airport tax and fees. We can have 99 descriptions of prices about products. And we can have 2 additional prices&#39; descriptions, about other fees and taxes not linked to a product. This gives a max of 101 prices&#39; description.
    tourDetailedPriceInfo: Array<tourDetailedPriceInfoType>
    
    // Payments done by Tour Operator
    paymentInformation: Array<paymentInformationType1>
    
}

export interface TourAccountDetailsTypeAttributes {
    
}

// To specify tariff details relating to a service or product.
export interface TariffInformationTypeU_25419S {
    
    $attributes: TariffInformationTypeU_25419SAttributes
    
    // Information about the tariffs of a Tour: tour price, product price, additional price
    tariffInformation: Array<TariffInformationDetailsTypeU_46314C>
    
    // This composite is used to describe the commissions on the tariff
    associatedChargesInformation: Array<AssociatedChargesInformationTypeU1>
    
}

export interface TariffInformationTypeU_25419SAttributes {
    
}

// To identify the rates or tariff details.
export interface TariffInformationDetailsTypeU_46314C {
    
    $attributes: TariffInformationDetailsTypeU_46314CAttributes
    
    // A unique rate product identifier: - PRODUCT = tariff for a product - TOUR = price of the tour - TAXFEE = tax or fee - REMAIN = remaining amount
    rateIdentifier: string
    
    // unitary amount for the tariff
    unitaryAmount: number
    
    // currency code used for the tariff
    currencyCode: Array<string>
    
    // To qualify and get information on the tariff: cancellation charge, tax amount, total amount, no amount of insurance...
    tariffQualifier: string
    
    // Total Amount for the tariff, set if quantity is present
    totalAmount: Array<number>
    
    // quantity for the tariff, when tariff is detailed with a quantity x unitaryAmount and totalPrice
    quantity: Array<number>
    
    // value is codeset 65 if amount is negative. For Tour, the remaining amount to pay can be negative if the price of the tour has changed
    tariffStatus: Array<string>
    
}

export interface TariffInformationDetailsTypeU_46314CAttributes {
    
}

// Identification of the additional charges that are associated to a product or service.
export interface AssociatedChargesInformationTypeU1 {
    
    $attributes: AssociatedChargesInformationTypeU1Attributes
    
    // Qualify the associated charge. For Tour, only &#34;employee&#34; is used to define a commission
    chargeUnitCode: string
    
    // Value of the associated charge
    amount: number
    
    // Commission&#39;s percentage
    percentage: number
    
}

export interface AssociatedChargesInformationTypeU1Attributes {
    
}


export interface remainingAmountsDetailsType {
    
    $attributes: remainingAmountsDetailsTypeAttributes
    
    // The Tour Operator code
    providerCode: CompanyInformationType_25420S
    
    // The remaining amount to pay
    remainingAmount: TariffInformationTypeU_25419S
    
}

export interface remainingAmountsDetailsTypeAttributes {
    
}


export interface tourDetailedPriceInfoType {
    
    $attributes: tourDetailedPriceInfoTypeAttributes
    
    // dummy segment
    markerSpecificRead: DummySegmentTypeI4
    
    // Identifier of the product
    productId: Array<ReferenceInfoType_25422S>
    
    // Price of a product or tax or fee to pay for a product
    productPrice: TariffInformationTypeU_25419S
    
}

export interface tourDetailedPriceInfoTypeAttributes {
    
}


export interface paymentInformationType1 {
    
    $attributes: paymentInformationType1Attributes
    
    // Deposit details: amount, currency, date, purpose and payment method information
    payment: PaymentInformationTypeU
    
    // The Tour Operator code
    operatorCode: Array<CompanyInformationType_25420S>
    
}

export interface paymentInformationType1Attributes {
    
}

// To specify information concerning the payment.
export interface PaymentInformationTypeU {
    
    $attributes: PaymentInformationTypeUAttributes
    
    // Tour deposit details
    paymentDetails: PaymentDetailsTypeU
    
    // Credit card name, number and exp. date
    creditCardInformation: Array<CreditCardInformationTypeU>
    
}

export interface PaymentInformationTypeUAttributes {
    
}

// To identify the method, type, amount, currency and due date of payment.
export interface PaymentDetailsTypeU {
    
    $attributes: PaymentDetailsTypeUAttributes
    
    // Identify the mode of payment: - CASH - CC for credit card
    methodCode: Array<string>
    
    // Purpose of the payment: - DEPO for deposit - FINA for final payment
    purposeCode: string
    
    // Amount paid
    amount: Array<number>
    
    // Currency used for the payment
    currencyCode: Array<string>
    
    // date of the payment
    date: Array<string>
    
}

export interface PaymentDetailsTypeUAttributes {
    
}

// To identify the relevant information of a credit card and relate it to a traveller.
export interface CreditCardInformationTypeU {
    
    $attributes: CreditCardInformationTypeUAttributes
    
    // Credit card name
    name: string
    
    // Credit card number
    cardNumber: number
    
    // Credit card Expire date
    expireDate: string
    
}

export interface CreditCardInformationTypeUAttributes {
    
}

// Convey tour product details
export interface TourServiceDetailsType {
    
    $attributes: TourServiceDetailsTypeAttributes
    
    // Conveys the product sequence number which is the product place in the booking. This information locally identifies the product in the Tour booking.
    sequenceNumberInfo: ItemNumberTypeU
    
    // Conveys information about the product status and the product quantity (number in party or number of service)
    statusQuantityInfo: Array<QuantityAndActionTypeU_25425S>
    
    // Conveys general Tour product information.
    productInfo: AdditionalProductDetailsTypeU
    
    // Conveys product confirmation number.
    confirmationInfo: Array<ReservationControlInformationTypeU>
    
    // Passenger association at product (package / standalone) level.
    passengerAssociation: Array<ReferenceInfoType_25422S>
    
    // Conveys the service details which composes a tour product. If the product is a package this group can be repeted.
    serviceDetails: Array<serviceDetailsType>
    
}

export interface TourServiceDetailsTypeAttributes {
    
}

// To specify an item number
export interface ItemNumberTypeU {
    
    $attributes: ItemNumberTypeUAttributes
    
    // Provides information about the product place in the tour booking. It locally identifies the product in the booking.
    itemIdentification: ItemNumberIdentificationTypeU_46320C
    
}

export interface ItemNumberTypeUAttributes {
    
}

// Goods identification for a specified source. Goods identification for a specified source. Goods identification for a specified source. Goods identification for a specified source
export interface ItemNumberIdentificationTypeU_46320C {
    
    $attributes: ItemNumberIdentificationTypeU_46320CAttributes
    
    // The place of the product in the Tour booking.
    itemID: number
    
    // It qualifies the item ID type.
    itemIDQualifier: string
    
}

export interface ItemNumberIdentificationTypeU_46320CAttributes {
    
}


export interface serviceDetailsType {
    
    $attributes: serviceDetailsTypeAttributes
    
    // Conveys general service information such as departure/arrival information, service code, service description, service type ...
    serviceInfo: TravelProductInformationTypeU_25428S
    
    // Conveys duration information (number of day, night ...)
    serviceDurationInfo: Array<QuantityType_25433S>
    
    // Conveys information about booked rooms
    accomodationDetails: Array<accomodationDetailsType>
    
    // Conveys vehicule details
    vehiculeDetails: Array<vehiculeDetailsType>
    
    // Conveys transportation details. We store in the repetitions the legs (or connections) or this transportation. Tour Server specifications specify a max of 99 legs for cruises and flight.
    transportationDetails: Array<transportationDetailsType>
    
    // Billing Collection Statistic at Tour Product level
    productBCSDetails: Array<productBCSDetailsType>
    
}

export interface serviceDetailsTypeAttributes {
    
}


export interface accomodationDetailsType {
    
    $attributes: accomodationDetailsTypeAttributes
    
    // Conveys room information
    roomInfo: HotelRoomType_25429S
    
    // Passenger association at accomodation room level
    passengerAssociation: Array<ReferenceInfoType_25422S>
    
    // Conveys room meal plan information
    roomMealPlanInfo: DiningInformationType
    
    // Conveys room occupancy information (room min or max occupancy)
    occupancynInfo: Array<RangeDetailsTypeU>
    
}

export interface accomodationDetailsTypeAttributes {
    
}

// This segment is used to convey the hotel room information
export interface HotelRoomType_25429S {
    
    $attributes: HotelRoomType_25429SAttributes
    
    // This composite is used to convey the room type
    roomRateIdentifier: HotelRoomRateInformationType_46329C
    
    // This data element is used to convey the booking code.
    bookingCode: Array<string>
    
    // This composite is used to convey the occupancy level of the hotel room.
    guestCountDetails: Array<NumberOfUnitDetailsTypeI_46330C>
    
    // This data element is used to convey the override room type (non-Amadeus room types).
    roomTypeOverride: Array<string>
    
}

export interface HotelRoomType_25429SAttributes {
    
}


export interface HotelRoomRateInformationType_46329C {
    
    $attributes: HotelRoomRateInformationType_46329CAttributes
    
    // This data element is used to convey the room type.
    roomType: string
    
}

export interface HotelRoomRateInformationType_46329CAttributes {
    
}

// Identification of number of units and its purpose.
export interface NumberOfUnitDetailsTypeI_46330C {
    
    $attributes: NumberOfUnitDetailsTypeI_46330CAttributes
    
    // occupation of the room
    numberOfUnit: number
    
    // unit qualifier
    unitQualifier: string
    
}

export interface NumberOfUnitDetailsTypeI_46330CAttributes {
    
}

// To specify dining preferences
export interface DiningInformationType {
    
    $attributes: DiningInformationTypeAttributes
    
    // Conveys dining information
    diningIdentification: DiningIdentificationType
    
}

export interface DiningInformationTypeAttributes {
    
}

// To convey the dining features
export interface DiningIdentificationType {
    
    $attributes: DiningIdentificationTypeAttributes
    
    // meal plan information (HALFBOARD, BREAKFAST ...)
    diningDescription: string
    
}

export interface DiningIdentificationTypeAttributes {
    
}

// To identify a range.
export interface RangeDetailsTypeU {
    
    $attributes: RangeDetailsTypeUAttributes
    
    // Range qualifier
    rangeQualifier: string
    
    // Range details
    rangeDetails: RangeTypeU
    
}

export interface RangeDetailsTypeUAttributes {
    
}

// Range minimum and maximum limits.
export interface RangeTypeU {
    
    $attributes: RangeTypeUAttributes
    
    // Range data type
    dataType: string
    
    // min Occupancy
    minOccupancy: Array<number>
    
    // Occupancy maximum
    maxOccupancy: number
    
}

export interface RangeTypeUAttributes {
    
}


export interface vehiculeDetailsType {
    
    $attributes: vehiculeDetailsTypeAttributes
    
    // Conveys vehicule information (such as the vehicule occupancy)
    vehiculeInfo: VehicleTypeU_25502S
    
}

export interface vehiculeDetailsTypeAttributes {
    
}

// To convey information about a vehicle.
export interface VehicleTypeU_25502S {
    
    $attributes: VehicleTypeU_25502SAttributes
    
    // Describe the vehicule
    vehiculeDescription: VehicleInformationTypeU_46439C
    
}

export interface VehicleTypeU_25502SAttributes {
    
}

// To identify a vehicle by make or model and vehicle identification number.
export interface VehicleInformationTypeU_46439C {
    
    $attributes: VehicleInformationTypeU_46439CAttributes
    
    // Conveys the occupancy of a vehicule
    occupancy: number
    
}

export interface VehicleInformationTypeU_46439CAttributes {
    
}


export interface transportationDetailsType {
    
    $attributes: transportationDetailsTypeAttributes
    
    // Departure location information. The composite C517 conveys city information and the C519 the country information.
    departureInfo: PlaceLocationIdentificationTypeU_25436S
    
    // Arrival location information. The composite C517 conveys city information and the C519 the country information.
    arrivalInfo: PlaceLocationIdentificationTypeU_25436S
    
    // Conveys transportation information
    transportationInfo: TravelProductInformationTypeI_25434S
    
    // Conveys duration information (number of day, night ...)
    transportationDuration: Array<QuantityType_25433S>
    
    // Conveys transportation equipment information
    equipmentInfo: Array<EquipmentDetailsTypeU>
    
    // Conveys transportation meal plan information
    transportationMealPlanInfo: Array<DiningInformationType>
    
}

export interface transportationDetailsTypeAttributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI_25434S {
    
    $attributes: TravelProductInformationTypeI_25434SAttributes
    
    // flight date information
    flightDate: ProductDateTimeTypeI_46338C
    
    // carrier details
    companyDetails: CompanyIdentificationTypeI_46335C
    
    // flight information
    flightIdentification: ProductIdentificationDetailsTypeI_46336C
    
    // connection sequence information
    flightTypeDetails: Array<ProductTypeDetailsTypeI_46337C>
    
}

export interface TravelProductInformationTypeI_25434SAttributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI_46338C {
    
    $attributes: ProductDateTimeTypeI_46338CAttributes
    
    // flight departure date
    departureDate: string
    
    // flight departure time
    departureTime: string
    
    // flight arrival date
    arrivalDate: Array<string>
    
    // flight arrival time
    arrivalTime: string
    
}

export interface ProductDateTimeTypeI_46338CAttributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI_46335C {
    
    $attributes: CompanyIdentificationTypeI_46335CAttributes
    
    // carrier details
    marketingCompany: string
    
}

export interface CompanyIdentificationTypeI_46335CAttributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI_46336C {
    
    $attributes: ProductIdentificationDetailsTypeI_46336CAttributes
    
    // flight number or transportation code
    flightNumber: string
    
    // booking class
    bookingClass: string
    
}

export interface ProductIdentificationDetailsTypeI_46336CAttributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsTypeI_46337C {
    
    $attributes: ProductTypeDetailsTypeI_46337CAttributes
    
    // sequence indicator for connection
    flightIndicator: string
    
}

export interface ProductTypeDetailsTypeI_46337CAttributes {
    
}

// To identify a unit of equipment.
export interface EquipmentDetailsTypeU {
    
    $attributes: EquipmentDetailsTypeUAttributes
    
    // equipment type
    type: string
    
    // equipment details
    sizeTypeDetails: EquipmentTypeAndSizeTypeU
    
}

export interface EquipmentDetailsTypeUAttributes {
    
}

// Code and or name identifying size and type of equipment. Code preferred.
export interface EquipmentTypeAndSizeTypeU {
    
    $attributes: EquipmentTypeAndSizeTypeUAttributes
    
    // equipment description
    description: string
    
}

export interface EquipmentTypeAndSizeTypeUAttributes {
    
}


export interface productBCSDetailsType {
    
    $attributes: productBCSDetailsTypeAttributes
    
    // BCS Agent sign, office and target office ids
    agentIdentification: UserIdentificationType_25447S
    
    // BCS distribution channel
    distributionChannelData: SystemDetailsInfoType_25482S
    
}

export interface productBCSDetailsTypeAttributes {
    
}

// Used to specify a system
export interface SystemDetailsInfoType_25482S {
    
    $attributes: SystemDetailsInfoType_25482SAttributes
    
    // BCS distribution channel
    cascadingSystem: SystemDetailsTypeI_46415C
    
}

export interface SystemDetailsInfoType_25482SAttributes {
    
}

// To identify by code or name and location the system that originates or delivers the message for a third party.
export interface SystemDetailsTypeI_46415C {
    
    $attributes: SystemDetailsTypeI_46415CAttributes
    
    // contains the distribution channel data. It is the concatenation of &#34;DCD&#34; + [access type] + [product] + [sub-product] access type, product and sub-product are represented on 3 chars.
    companyId: string
    
}

export interface SystemDetailsTypeI_46415CAttributes {
    
}

// theFerryLeg
export interface FerryBookingDescriptionType {
    
    $attributes: FerryBookingDescriptionTypeAttributes
    
    // This segment is used to identify the ferry target provider for the message and is leading the description group for the ferry provider booking.
    ferryProviderInformation: CompanyInformationType_20151S
    
    // This group describes the ferry booking itinerary. It contains the ferry sailing leg information.
    itineraryInfoGroup: FerryLegDescriptionType_36378G
    
    // This group describes the accomodation (hotel) package attached to the booking.
    accomodationPackageInfoGroup: Array<FerryAccomodationPackageDescriptionType_39395G>
    
    // This segment conveys the ferry booking number information.
    bookingNumberInformation: ReservationControlInformationTypeI_20153S
    
}

export interface FerryBookingDescriptionTypeAttributes {
    
}

// This segment is used to convey the company information
export interface CompanyInformationType_20151S {
    
    $attributes: CompanyInformationType_20151SAttributes
    
    // This element is used to qualify the company code, to identify the industry business it belongs. For Ferry, the codes are mutually agreed between Amadeus and the Ferry providers and are only valid within the Amadeus Ferry application.
    travelSector: Array<string>
    
    // This data element is used to convey the company code of a company. For Ferry, the list of providers is not fixed. The providers implemented actually are: Baleria BAL Brittany ferries BRI Color Lines COL Comarit COM Corsica ferries CSF Grandi Navi Veloci GNV Hoverspeed HOV Moby Lines MBL Seafrance SEA Smyril Line SMY SNCM SNC Stena Line STE TT Line TTL
    companyCode: string
    
    // This data element is used to convey the company name of a company
    companyName: Array<string>
    
}

export interface CompanyInformationType_20151SAttributes {
    
}


export interface FerryLegDescriptionType_36378G {
    
    $attributes: FerryLegDescriptionType_36378GAttributes
    
    // Conveys the sailing details for an itinerary leg.
    sailingDetails: TravelProductInformationTypeU_24954S
    
    // Conveys the ship code and ship name.
    shipDescription: Array<ShipIdentificationType_24553S>
    
    // This segment conveys the check-in time for the ferry sailing leg to which it is attached.
    sailingLegCheckInInformation: Array<StructuredDateTimeInformationType_21109S>
    
    // Conveys the list of passengers associated to the ferry leg.
    passengerAssociation: Array<ReferenceInformationTypeI_25132S>
    
    // Conveys the price information per leg per passenger.
    priceInfoGroup: Array<priceInfoGroupType>
    
    // This group describes the list of vehicles attached to the linked sailing leg.
    vehicleInfoGroup: Array<vehicleInfoGroupType>
    
    // This segment describes the on-board service(s) in the linked sailing leg.
    serviceInfoGroup: Array<serviceInfoGroupType>
    
    // This group is used to describe the animals linked to the ferry booking.
    animalInfoGroup: Array<animalInfoGroupType>
    
}

export interface FerryLegDescriptionType_36378GAttributes {
    
}

// To specify details related to a travel product.
export interface TravelProductInformationTypeU_24954S {
    
    $attributes: TravelProductInformationTypeU_24954SAttributes
    
    // Conveys the departure and arrival date time descriptions. If absent, then the leg status may be considered as open information.
    itineraryDateTimeInfo: Array<ProductDateAndTimeTypeU_45634C>
    
    // Conveys and itinerary leg embarkation and the disembarkation ports descriptions
    boardPortDetails: Array<LocationTypeU_45633C>
    
    // Internal reference for the leg.
    lineNumber: string
    
}

export interface TravelProductInformationTypeU_24954SAttributes {
    
}

// To specify first the beginning date and time followed by the ending date and time associated with a product or service.
export interface ProductDateAndTimeTypeU_45634C {
    
    $attributes: ProductDateAndTimeTypeU_45634CAttributes
    
    // Convey the begin date of a period. Format is ddmmyyyy.
    departureDate: string
    
    // Convey the begin time of a period. Format is hhmm.
    departureTime: Array<string>
    
    // Convey the end date of a period. Format is ddmmyyyy.
    arrivalDate: Array<string>
    
    // Convey the end time of a period. Format is hhmm.
    arrivalTime: Array<string>
    
}

export interface ProductDateAndTimeTypeU_45634CAttributes {
    
}

// To identify a location
export interface LocationTypeU_45633C {
    
    $attributes: LocationTypeU_45633CAttributes
    
    // Port code.
    code: string
    
    // Port name.
    name: string
    
    // Port codes are non-standard and specific to the Amadeus ferry business.
    qualifier: Array<string>
    
}

export interface LocationTypeU_45633CAttributes {
    
}

// To provide details on the sailing ship
export interface ShipIdentificationType_24553S {
    
    $attributes: ShipIdentificationType_24553SAttributes
    
    // Detailed information for the sailing ship.
    shipDetails: ShipIdentificationDetailsType_45069C
    
}

export interface ShipIdentificationType_24553SAttributes {
    
}


export interface ShipIdentificationDetailsType_45069C {
    
    $attributes: ShipIdentificationDetailsType_45069CAttributes
    
    // Used to convey the ship name.
    name: Array<string>
    
}

export interface ShipIdentificationDetailsType_45069CAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_21109S {
    
    $attributes: StructuredDateTimeInformationType_21109SAttributes
    
    // Convey date and/or time.
    dateTime: StructuredDateTimeType_35730C
    
}

export interface StructuredDateTimeInformationType_21109SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_35730C {
    
    $attributes: StructuredDateTimeType_35730CAttributes
    
    // Hour between 0 and 23
    hour: string
    
    // Minutes between 0 and 59
    minutes: string
    
}

export interface StructuredDateTimeType_35730CAttributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInformationTypeI_25132S {
    
    $attributes: ReferenceInformationTypeI_25132SAttributes
    
    // Conveys the passenger reference.
    referenceDetails: Array<ReferencingDetailsTypeI_45901C>
    
}

export interface ReferenceInformationTypeI_25132SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_45901C {
    
    $attributes: ReferencingDetailsTypeI_45901CAttributes
    
    // Qualifies the type of reference used.
    type: Array<string>
    
    // Conveys the passenger sequence number.
    value: string
    
}

export interface ReferencingDetailsTypeI_45901CAttributes {
    
}


export interface priceInfoGroupType {
    
    $attributes: priceInfoGroupTypeAttributes
    
    // This segment conveys the route price information for the passenger it is linked to.
    routePriceInformation: TariffInformationTypeU_129133S
    
    // This segment describes the passenger category type.
    passengerCategoryType: AttributeTypeU2
    
    // This segment is used to convey the number of passengers to which the price applies.
    numberOfPassengers: NumberOfUnitsType_20156S
    
}

export interface priceInfoGroupTypeAttributes {
    
}

// To specify tariff details relating to a service or product.
export interface TariffInformationTypeU_129133S {
    
    $attributes: TariffInformationTypeU_129133SAttributes
    
    
    priceDetails: TariffInformationDetailsTypeU_188166C
    
}

export interface TariffInformationTypeU_129133SAttributes {
    
}

// To identify the rates or tariff details.
export interface TariffInformationDetailsTypeU_188166C {
    
    $attributes: TariffInformationDetailsTypeU_188166CAttributes
    
    
    priceAmount: Array<number>
    
    
    currencyCode: Array<string>
    
    
    priceQualifier: string
    
}

export interface TariffInformationDetailsTypeU_188166CAttributes {
    
}

// To convey the Ferry passenger type.
export interface AttributeTypeU2 {
    
    $attributes: AttributeTypeU2Attributes
    
    // provides the function of the attribute
    attributeFunction: string
    
    // provides details for the Attribute
    attributeDetails: AttributeInformationTypeU_188164C
    
}

export interface AttributeTypeU2Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU_188164C {
    
    $attributes: AttributeInformationTypeU_188164CAttributes
    
    // The list of possible values is: ADT Adult CHD Child FDC Diplomatic corps FEU Disabled FFM Family FFR Free FIR Inter rail FJO Journalist FSL School pupil INF Infant MIL Military NAT Nato official REC Child resident
    attributeType: string
    
}

export interface AttributeInformationTypeU_188164CAttributes {
    
}

// To specify the number of units required
export interface NumberOfUnitsType_20156S {
    
    $attributes: NumberOfUnitsType_20156SAttributes
    
    // Number of Unit Details
    quantityDetails: NumberOfUnitDetailsTypeI_35712C
    
}

export interface NumberOfUnitsType_20156SAttributes {
    
}

// Identification of number of units and its purpose.
export interface NumberOfUnitDetailsTypeI_35712C {
    
    $attributes: NumberOfUnitDetailsTypeI_35712CAttributes
    
    // Number of units.
    numberOfUnit: number
    
}

export interface NumberOfUnitDetailsTypeI_35712CAttributes {
    
}


export interface vehicleInfoGroupType {
    
    $attributes: vehicleInfoGroupTypeAttributes
    
    // This segment conveys the description of a vehicle.
    vehicleInformation: VehicleTypeU
    
    // This segment is used to convey the number of bicycles associated to a ferry booking. Note: this segment is ignored if the vehicule description is not &#34;bicycle&#34;.
    numberOfBicycles: Array<NumberOfUnitsType_20156S>
    
    // This segment holds the price per vehicle.
    vehicleRoutePrice: Array<TariffInformationTypeU_129133S>
    
}

export interface vehicleInfoGroupTypeAttributes {
    
}

// To convey information about a vehicle.
export interface VehicleTypeU {
    
    $attributes: VehicleTypeUAttributes
    
    
    category: string
    
    
    vehicleDetails: Array<VehicleInformationTypeU>
    
}

export interface VehicleTypeUAttributes {
    
}

// To identify a vehicle by make or model and vehicle identification number.
export interface VehicleInformationTypeU {
    
    $attributes: VehicleInformationTypeUAttributes
    
    
    makeAndModel: Array<string>
    
}

export interface VehicleInformationTypeUAttributes {
    
}


export interface serviceInfoGroupType {
    
    $attributes: serviceInfoGroupTypeAttributes
    
    // This segment describes the on-board service.
    serviceInformation: AttributeTypeU_20529S
    
    // This segment conveys the number of services of the attached service.
    numberOfServices: Array<NumberOfUnitsType_20156S>
    
    // This segment conveys the price per unit of the attached service.
    serviceRoutePrice: Array<TariffInformationTypeU_129133S>
    
}

export interface serviceInfoGroupTypeAttributes {
    
}

// To convey the service information.
export interface AttributeTypeU_20529S {
    
    $attributes: AttributeTypeU_20529SAttributes
    
    // Describes the service type.
    attributeFunction: string
    
    // Service details.
    attributeDetails: AttributeInformationTypeU_36633C
    
}

export interface AttributeTypeU_20529SAttributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU_36633C {
    
    $attributes: AttributeInformationTypeU_36633CAttributes
    
    // This element is used to convey the service code of the service group of the ferry booking. The list of possible values depends of the Ferry provider.
    attributeType: string
    
}

export interface AttributeInformationTypeU_36633CAttributes {
    
}


export interface animalInfoGroupType {
    
    $attributes: animalInfoGroupTypeAttributes
    
    // This segment conveys the type of animal.
    animalInformation: SpecificDataInformationTypeI
    
    // This segment conveys the price per animal of the same type.
    animalRoutePrice: Array<TariffInformationTypeU_129133S>
    
}

export interface animalInfoGroupTypeAttributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationTypeI {
    
    $attributes: SpecificDataInformationTypeIAttributes
    
    
    dataTypeInformation: DataTypeInformationTypeI
    
    
    dataInformation: DataInformationTypeI_188173C
    
}

export interface SpecificDataInformationTypeIAttributes {
    
}

// To identify the type of data to be sent and to qualify the data when required.
export interface DataTypeInformationTypeI {
    
    $attributes: DataTypeInformationTypeIAttributes
    
    // carrier fee type ex T01 , R01
    type: string
    
}

export interface DataTypeInformationTypeIAttributes {
    
}

// To identify specific data and a quantity related to the data.
export interface DataInformationTypeI_188173C {
    
    $attributes: DataInformationTypeI_188173CAttributes
    
    // Animal type
    indicator: string
    
    // Number of animals of the specified category.
    value: Array<number>
    
}

export interface DataInformationTypeI_188173CAttributes {
    
}


export interface FerryAccomodationPackageDescriptionType_39395G {
    
    $attributes: FerryAccomodationPackageDescriptionType_39395GAttributes
    
    // This segment conveys the package code.
    packageCode: ProductInformationTypeI_20557S
    
    // This segment conveys the hotel code the of the accomodation package to which it is attached.
    hotelInformation: Array<HotelPropertyType_26378S>
    
    // This segment conveys the check-in date and time for the accomodation package to which it is attached.
    hotelCheckInInformation: Array<StructuredDateTimeInformationType_24436S>
    
    // This segment is used to convey the hotel area code information.
    areaCodeInfo: Array<PlaceLocationIdentificationTypeU_24573S>
    
    // This segment is used to give the number of nights spent in the accomodation package to which it is attached.
    numberOfNights: Array<NumberOfUnitsType_20156S>
    
    // This segment is used to convey the price of the accomodation to which it is attached.
    hotelItemPrice: Array<TariffInformationTypeU_129133S>
    
    // This segment is used to give details about the rooms (if any) lined to the accomodation package.
    roomInfoGroup: Array<roomInfoGroupType>
    
}

export interface FerryAccomodationPackageDescriptionType_39395GAttributes {
    
}

// To specify details related to availability status or cabin configuration for a product.
export interface ProductInformationTypeI_20557S {
    
    $attributes: ProductInformationTypeI_20557SAttributes
    
    // Conveys the package details.
    bookingClassDetails: ProductDetailsTypeI_36664C
    
}

export interface ProductInformationTypeI_20557SAttributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsTypeI_36664C {
    
    $attributes: ProductDetailsTypeI_36664CAttributes
    
    // Conveys the package code.
    designator: string
    
}

export interface ProductDetailsTypeI_36664CAttributes {
    
}

// This segment is used to convey the Hotel Property information
export interface HotelPropertyType_26378S {
    
    $attributes: HotelPropertyType_26378SAttributes
    
    // This composite is used to convey the hotel identification details.
    hotelReference: HotelUniqueIdType_47769C
    
}

export interface HotelPropertyType_26378SAttributes {
    
}


export interface HotelUniqueIdType_47769C {
    
    $attributes: HotelUniqueIdType_47769CAttributes
    
    // This element is used to convey the hotel code. The list of possible values is different for each Ferry provider.
    hotelCode: string
    
}

export interface HotelUniqueIdType_47769CAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_24436S {
    
    $attributes: StructuredDateTimeInformationType_24436SAttributes
    
    // Convey date and/or time.
    dateTime: StructuredDateTimeType_187528C
    
}

export interface StructuredDateTimeInformationType_24436SAttributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationTypeU_24573S {
    
    $attributes: PlaceLocationIdentificationTypeU_24573SAttributes
    
    // Location type qualifier (ZZZ-Mutually defined for Ferry).
    locationType: string
    
    // Hotel location details.
    firstLocationDetails: RelatedLocationOneIdentificationTypeU_188145C
    
}

export interface PlaceLocationIdentificationTypeU_24573SAttributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationTypeU_188145C {
    
    $attributes: RelatedLocationOneIdentificationTypeU_188145CAttributes
    
    
    code: string
    
}

export interface RelatedLocationOneIdentificationTypeU_188145CAttributes {
    
}


export interface roomInfoGroupType {
    
    $attributes: roomInfoGroupTypeAttributes
    
    // This segment is used to describe the room to which it is attached.
    roomDetailsInformation: HotelRoomType_129126S
    
    // This segment is used to convey the number of instances of the room to which it is attached.
    numberOfRooms: Array<NumberOfUnitsType_20156S>
    
}

export interface roomInfoGroupTypeAttributes {
    
}

// This segment is used to convey the hotel room information
export interface HotelRoomType_129126S {
    
    $attributes: HotelRoomType_129126SAttributes
    
    // This data element is used to convey the override room type (non-Amadeus room types).
    roomTypeOverride: string
    
}

export interface HotelRoomType_129126SAttributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI_20153S {
    
    $attributes: ReservationControlInformationTypeI_20153SAttributes
    
    // Provides details of the Ferry booking number. The booking number is a unique reference per provider per booking in the provider system. As such, it is stored in the PNR in all the legs of the same booking and it is used in the Ferry PNR indexing.
    reservation: ReservationControlInformationDetailsTypeI_35709C
    
}

export interface ReservationControlInformationTypeI_20153SAttributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI_35709C {
    
    $attributes: ReservationControlInformationDetailsTypeI_35709CAttributes
    
    // This element conveys the booking number which is used as a booking reference by the Ferry provider.
    controlNumber: string
    
}

export interface ReservationControlInformationDetailsTypeI_35709CAttributes {
    
}


export interface extendedContentGroupType {
    
    $attributes: extendedContentGroupTypeAttributes
    
    // Segment used to specify the type of EC product, the tatoo type and tattoo number of the EC. It also specifies if the EC was manually created or automatically generated from PNR elements.
    easyContentIdentification: ExtendedContentType
    
    // Specify provider information: name, code, profile reference.
    providerDetails: CompanyInformationType_130639S
    
    // Specify the creation date of the EC in Amadeus system.
    creationDate: StructuredDateTimeInformationType_128728S
    
    // Used to associate EC to a passenger of the PNR.
    paxRef: Array<ReferenceInformationType_129701S>
    
    // Used to associate EC to PNR elements: - Manual Auxiliary segments - Remarks - MIS segments - Ghost segments
    associationReference: Array<ReferenceInfoType_129703S>
    
    // Provide description of the EC
    productDescription: Array<FreeTextInformationType_128778S>
    
    // Provide information about the number in party or the product quantity.
    quantityStatus: Array<RelatedProductInformationType>
    
    // Specify Confirmation Number and/or Cancellation Number
    confirmOrCancelNbr: Array<ReservationControlInformationType1>
    
    // To specify the booking channel
    bookingChannel: Array<SelectionDetailsType4>
    
    // EC Air details
    airInfos: Array<airInfosType>
    
    // EC rail details
    railInfos: Array<railInfosType>
    
    // This group is used for following EC product types: - Tickets - Courses - Visits
    eventInfos: Array<eventInfosType>
    
    // EC Hotel details
    hotelInfos: Array<hotelInfosType>
    
    // EC Taxi details
    taxiInfos: Array<taxiInfosType>
    
    // EC Insurance details
    insuranceInfos: Array<insuranceInfosType>
    
    // EC Ferry details
    ferryInfos: Array<ExtendedContentFerryLegDescriptionType>
    
    // Marker used to avoid ambiguity.
    marker: DummySegmentTypeI4
    
    // EC Car details
    carInfos: Array<carInfosType>
    
    // EC Cruise Details
    cruiseInfos: Array<CruiseExtendedContentType>
    
    // This group is used for following EC product types: - Vaccine - Guide - Goodies - Book - Brochure - Visa - Restaurant - Food - Miscellaneous
    docsGoodiesMisInfos: Array<docsGoodiesMisInfosType>
    
}

export interface extendedContentGroupTypeAttributes {
    
}


export interface ExtendedContentType {
    
    $attributes: ExtendedContentTypeAttributes
    
    // Specify if the EC is created manually or automatically generated from existing PNR elements (e.g. RM, SUR, MIS)
    ecOrigin: number
    
    
    reference: Array<ReferencingDetailsType_188870C>
    
    // Specify the EC product type (Air, Train, Car, etc...)
    productType: string
    
    // PNR segment/element &#39;line&#39; number attributed by the Server
    lineNumber: Array<number>
    
}

export interface ExtendedContentTypeAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_188870C {
    
    $attributes: ReferencingDetailsType_188870CAttributes
    
    
    type: string
    
    
    value: number
    
}

export interface ReferencingDetailsType_188870CAttributes {
    
}

// This segment is used to convey the company information
export interface CompanyInformationType_130639S {
    
    $attributes: CompanyInformationType_130639SAttributes
    
    // This data element is used to convey the company code of a company
    companyCode: Array<string>
    
    // This data element is used to convey the company name of a company
    companyName: Array<string>
    
    // This data element is used to convey the long company code of a company
    companyLongName: Array<string>
    
    // This data element is used to convey the numeric company code
    profileReference: Array<string>
    
}

export interface CompanyInformationType_130639SAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_128728S {
    
    $attributes: StructuredDateTimeInformationType_128728SAttributes
    
    
    businessSemantic: Array<string>
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType_187544C>
    
}

export interface StructuredDateTimeInformationType_128728SAttributes {
    
}

// Used to convey the passenger references.
export interface ReferenceInformationType_129701S {
    
    $attributes: ReferenceInformationType_129701SAttributes
    
    // Used to convey the passenger tatoo or display number.
    passengerReference: Array<ReferencingDetailsType_188873C>
    
}

export interface ReferenceInformationType_129701SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_188873C {
    
    $attributes: ReferencingDetailsType_188873CAttributes
    
    
    type: Array<string>
    
    
    value: Array<number>
    
}

export interface ReferencingDetailsType_188873CAttributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType_129703S {
    
    $attributes: ReferenceInfoType_129703SAttributes
    
    
    referenceDetails: Array<ReferencingDetailsType_188873C>
    
}

export interface ReferenceInfoType_129703SAttributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType_128778S {
    
    $attributes: FreeTextInformationType_128778SAttributes
    
    
    freeTextDetails: FreeTextDetailsType_187464C
    
    // Free text and message sequence numbers of the remarks.
    freeText: string
    
}

export interface FreeTextInformationType_128778SAttributes {
    
}

// To indicate quantity and action required in relation to a product.
export interface RelatedProductInformationType {
    
    $attributes: RelatedProductInformationTypeAttributes
    
    
    quantity: Array<number>
    
    // EC product status code
    statusCode: Array<string>
    
}

export interface RelatedProductInformationTypeAttributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationType1 {
    
    $attributes: ReservationControlInformationType1Attributes
    
    // Confirmation and/or Cancellation number
    reservation: Array<ReservationControlInformationDetailsType>
    
}

export interface ReservationControlInformationType1Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsType {
    
    $attributes: ReservationControlInformationDetailsTypeAttributes
    
    // Confirmation and/or Cancellation number
    controlNumber: Array<string>
    
    // Confirmation or Cancellation reference
    controlType: Array<string>
    
}

export interface ReservationControlInformationDetailsTypeAttributes {
    
}

// To specify the details for making a selection.
export interface SelectionDetailsType4 {
    
    $attributes: SelectionDetailsType4Attributes
    
    // Provides information about how the EC was booked.
    bookingChannel: Array<SelectionDetailsInformationTypeU>
    
}

export interface SelectionDetailsType4Attributes {
    
}

// To specify a selected option and associated information
export interface SelectionDetailsInformationTypeU {
    
    $attributes: SelectionDetailsInformationTypeUAttributes
    
    
    option: string
    
    
    optionInformation: Array<string>
    
}

export interface SelectionDetailsInformationTypeUAttributes {
    
}


export interface airInfosType {
    
    $attributes: airInfosTypeAttributes
    
    // Segment details
    segmentDetails: TravelProductInformationType
    
    
    additionalProductDetails: Array<AdditionalProductDetailsType4>
    
    // Baggage info
    baggage: Array<TravellerBaggageDetailsType>
    
    // Specify the ticketing number
    ticketingNumber: Array<TicketNumberType>
    
    // Specify ticket issuance date
    issuanceDate: Array<StructuredDateTimeInformationType_128728S>
    
}

export interface airInfosTypeAttributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationType {
    
    $attributes: TravelProductInformationTypeAttributes
    
    // EC date and time
    productDate: ProductDateTimeTypeI_186908C
    
    
    boardPointDetails: LocationTypeI_186910C
    
    
    offpointDetails: LocationTypeI_186910C
    
    
    companyDetails: Array<CompanyIdentificationTypeI_186905C>
    
    // Product identifications details
    flightIdentification: Array<ProductIdentificationDetailsType_186906C>
    
}

export interface TravelProductInformationTypeAttributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI_186908C {
    
    $attributes: ProductDateTimeTypeI_186908CAttributes
    
    // Format is DDMMYY
    departureDate: string
    
    // Format is HHMM
    departureTime: Array<string>
    
    // Format is DDMMYY
    arrivalDate: string
    
    // Format is HHMM
    arrivalTime: Array<string>
    
}

export interface ProductDateTimeTypeI_186908CAttributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI_186910C {
    
    $attributes: LocationTypeI_186910CAttributes
    
    // City code
    trueLocationId: string
    
    // City name
    trueLocation: Array<string>
    
}

export interface LocationTypeI_186910CAttributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI_186905C {
    
    $attributes: CompanyIdentificationTypeI_186905CAttributes
    
    
    companyCode: Array<string>
    
    
    companyName: Array<string>
    
}

export interface CompanyIdentificationTypeI_186905CAttributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsType_186906C {
    
    $attributes: ProductIdentificationDetailsType_186906CAttributes
    
    // Flight number, transportation number
    identificationNbr: Array<string>
    
    
    bookingClass: Array<string>
    
}

export interface ProductIdentificationDetailsType_186906CAttributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsType4 {
    
    $attributes: AdditionalProductDetailsType4Attributes
    
    
    productDetails: Array<AdditionalProductType>
    
    
    departureStationInfo: Array<StationInformationType>
    
    
    arrivalStationInfo: Array<StationInformationType>
    
    
    mileageDetails: Array<MileageTimeDetailsType>
    
    
    travellerTimeDetails: Array<TravellerTimeDetailsType>
    
    // additional information on equipment
    equipmentInformation: Array<ProductFacilitiesType4>
    
}

export interface AdditionalProductDetailsType4Attributes {
    
}

// Additional details describing a specific means of transport.
export interface AdditionalProductType {
    
    $attributes: AdditionalProductTypeAttributes
    
    
    equipment: Array<string>
    
    
    numberOfStops: Array<number>
    
    // Day of the week = 1 (Monday) to 7
    weekDay: Array<number>
    
}

export interface AdditionalProductTypeAttributes {
    
}

// To specify departure/arrival information concerning a means of transport.
export interface StationInformationType {
    
    $attributes: StationInformationTypeAttributes
    
    
    terminal: Array<string>
    
}

export interface StationInformationTypeAttributes {
    
}

// Information about the distance/duration of a trip.
export interface MileageTimeDetailsType {
    
    $attributes: MileageTimeDetailsTypeAttributes
    
    
    mileage: Array<number>
    
    // Mileage unit
    unitQualifier: Array<string>
    
}

export interface MileageTimeDetailsTypeAttributes {
    
}

// Dates and times relevant to a traveller.
export interface TravellerTimeDetailsType {
    
    $attributes: TravellerTimeDetailsTypeAttributes
    
    // Check in time: Format is HHMM
    checkInDateTime: Array<string>
    
}

export interface TravellerTimeDetailsTypeAttributes {
    
}


export interface ProductFacilitiesType4 {
    
    $attributes: ProductFacilitiesType4Attributes
    
    // Additional details on the equipment
    equipmentDescription: Array<string>
    
}

export interface ProductFacilitiesType4Attributes {
    
}

// To specify the baggage details, including number of bags and serial numbers.
export interface TravellerBaggageDetailsType {
    
    $attributes: TravellerBaggageDetailsTypeAttributes
    
    // convey bagagge details
    baggageDetails: BaggageDetailsType2
    
}

export interface TravellerBaggageDetailsTypeAttributes {
    
}

// To specify the number and weight of baggage.
export interface BaggageDetailsType2 {
    
    $attributes: BaggageDetailsType2Attributes
    
    // Number of pieces or weight
    freeAllowance: Array<number>
    
    // Measurement
    measurement: Array<number>
    
    // Nature of the free allowance ( Number of pieces or weight)
    quantityCode: Array<string>
    
    
    unitQualifier: Array<string>
    
    // Process indicator
    processIndicator: Array<string>
    
}

export interface BaggageDetailsType2Attributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberType {
    
    $attributes: TicketNumberTypeAttributes
    
    
    documentDetails: TicketNumberDetailsType
    
}

export interface TicketNumberTypeAttributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsType {
    
    $attributes: TicketNumberDetailsTypeAttributes
    
    // provides ticket number
    number: Array<number>
    
    
    type: Array<string>
    
    
    numberOfBooklets: Array<number>
    
    
    dataIndicator: Array<string>
    
}

export interface TicketNumberDetailsTypeAttributes {
    
}


export interface railInfosType {
    
    $attributes: railInfosTypeAttributes
    
    // Journey direction: outward, return, single
    journeyDuration: TravelItineraryInformationTypeI_129342S
    
    // Spare for two-level tree of key values: List of key1, [list of [key2, value]]
    keyValueTree: Array<CodedAttributeType_129339S>
    
    // Indicates whether or not the reservation can be modified directly in the Amadeus system
    updatePermission: Array<StatusType4>
    
    // train number, equipment code, departure and arrival dates and times.
    tripDetails: Array<TrainDataType>
    
    // Rail provider segment tattoo reference
    providerTattoo: Array<ItemReferencesAndVersionsType_129358S>
    
    // Information pertaining to the class of service including number of seats
    classInfo: ClassConfigurationDetailsType
    
    // indicate that the train segment is open.
    openSegment: Array<StatusTypeS>
    
    // Reservation Mandatory, Advised, Possible, Not Possible
    reservableStatus: Array<QuantityAndActionTypeU>
    
}

export interface railInfosTypeAttributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_129339S {
    
    $attributes: CodedAttributeType_129339SAttributes
    
    // provides the function of the attribute
    attributeFunction: Array<string>
    
    // provides details for the Attribute
    attributeDetails: Array<CodedAttributeInformationType_188409C>
    
}

export interface CodedAttributeType_129339SAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_188409C {
    
    $attributes: CodedAttributeInformationType_188409CAttributes
    
    // provides the attribute Type
    attributeType: string
    
    // provides a description for the attribute
    attributeDescription: Array<string>
    
    
    language: Array<string>
    
    
    encoding: Array<string>
    
    
    source: Array<string>
    
}

export interface CodedAttributeInformationType_188409CAttributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType4 {
    
    $attributes: StatusType4Attributes
    
    // STATUS DETAILS
    statusInformation: StatusDetailsType_148479C
    
}

export interface StatusType4Attributes {
    
}


export interface TrainDataType {
    
    $attributes: TrainDataTypeAttributes
    
    // Information pertaining to the train product
    trainProductInfo: TrainProductInformationType
    
    // Trip dates and times
    tripDateTime: Array<StructuredDateTimeInformationType_129285S>
    
    // Arrival?Departure station location
    location: Array<PlaceLocationIdentificationType_129295S>
    
    // Rail leg (train number, train provider, departure/arrival locations and dates, reservable status)
    railLeg: Array<RailLegDataType>
    
}

export interface TrainDataTypeAttributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType_129295S {
    
    $attributes: PlaceLocationIdentificationType_129295SAttributes
    
    // Type of location
    locationType: string
    
    // Railway station location details.
    locationDescription: Array<LocationIdentificationBatchType_188360C>
    
    // Railway station country details.
    firstLocationDetails: Array<RelatedLocationOneIdentificationType_188361C>
    
}

export interface PlaceLocationIdentificationType_129295SAttributes {
    
}

// Identification of a location by code or name
export interface LocationIdentificationBatchType_188360C {
    
    $attributes: LocationIdentificationBatchType_188360CAttributes
    
    // Railway station location code
    code: Array<string>
    
    // Code type
    qualifier: string
    
    // Location name
    name: Array<string>
    
}

export interface LocationIdentificationBatchType_188360CAttributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationType_188361C {
    
    $attributes: RelatedLocationOneIdentificationType_188361CAttributes
    
    // Railway station country code
    code: string
    
    // Code type
    qualifier: string
    
}

export interface RelatedLocationOneIdentificationType_188361CAttributes {
    
}

// contains the data of a rail leg
export interface RailLegDataType {
    
    $attributes: RailLegDataTypeAttributes
    
    // Information pertaining to the train product
    trainProductInfo: TrainProductInformationType
    
    // Reservation Mandatory, Advised, Possible, Not Possible
    reservableStatus: Array<QuantityAndActionTypeU_32609S>
    
    // Leg departure and arrival dates and times
    legDateTime: Array<StructuredDateTimeInformationType_129285S>
    
    // Departure/Arrival station location
    location: Array<PlaceLocationIdentificationType_129295S>
    
    // leg reference: leg order within the itinerary
    legReference: Array<ItemNumberTypeU_33258S>
    
}

export interface RailLegDataTypeAttributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType_129358S {
    
    $attributes: ItemReferencesAndVersionsType_129358SAttributes
    
    // Rail provider segment tattoo reference
    referenceType: string
    
    // The value of the reference
    uniqueReference: number
    
}

export interface ItemReferencesAndVersionsType_129358SAttributes {
    
}

// This segment give the class configuration for a train
export interface ClassConfigurationDetailsType {
    
    $attributes: ClassConfigurationDetailsTypeAttributes
    
    // Class Details -Class Group -Sub Class -Posting
    classDetails: Array<ClassDetailsType>
    
}

export interface ClassConfigurationDetailsTypeAttributes {
    
}


export interface ClassDetailsType {
    
    $attributes: ClassDetailsTypeAttributes
    
    // Class Group : A-First Class, Seat B-Second Class, Seat C-First Class, Berth D-Second Class, Berth F-Binded Seat V-First Class, Sleeping-car W-Second Class, Sleeping-car
    code: Array<string>
    
    // Rail class code.
    bookingClass: Array<string>
    
    // Number of Free Seats
    numberOfSeats: Array<number>
    
}

export interface ClassDetailsTypeAttributes {
    
}

// To identify a status and related information
export interface StatusTypeS {
    
    $attributes: StatusTypeSAttributes
    
    // indicates an open segment
    statusDetails: StatusDetailsTypeS
    
}

export interface StatusTypeSAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status
export interface StatusDetailsTypeS {
    
    $attributes: StatusDetailsTypeSAttributes
    
    // indicates an open segment
    indicator: string
    
}

export interface StatusDetailsTypeSAttributes {
    
}

// To indicate quantity and action required in relation to a product.
export interface QuantityAndActionTypeU {
    
    $attributes: QuantityAndActionTypeUAttributes
    
    // accommodation status
    accoStatus: QuantityAndActionDetailsTypeU
    
}

export interface QuantityAndActionTypeUAttributes {
    
}

// To specify quantity and action required for a product or service
export interface QuantityAndActionDetailsTypeU {
    
    $attributes: QuantityAndActionDetailsTypeUAttributes
    
    // accommodation reservation mandatoty, optionnal, advised, not possible
    statusCode: Array<string>
    
}

export interface QuantityAndActionDetailsTypeUAttributes {
    
}


export interface eventInfosType {
    
    $attributes: eventInfosTypeAttributes
    
    // Address of the event location
    eventAddress: AddressType_129098S
    
    // Specify the ticket number
    ticketNumber: Array<TicketNumberType>
    
    
    eventName: Array<FreeTextInformationType_128778S>
    
    // Specify the event date and the ticket validity date
    eventDate: Array<StructuredDateTimeInformationType_128779S>
    
    // Event seat info
    seatDetails: Array<SeatSelectionDetailsTypeI>
    
}

export interface eventInfosTypeAttributes {
    
}

// To specify an address
export interface AddressType_129098S {
    
    $attributes: AddressType_129098SAttributes
    
    
    addressUsageDetails: Array<AddressUsageTypeU>
    
    
    addressDetails: Array<AddressDetailsTypeU2>
    
    // City name.
    city: Array<string>
    
    // postal identification code.
    zipCode: Array<string>
    
    // Country code
    countryCode: Array<string>
    
    // To convey a sub-entity within a country : region, states..
    regionDetails: Array<CountrySubEntityDetailsTypeU_188109C>
    
    
    locationDetails: Array<LocationIdentificationTypeU_188107C>
    
}

export interface AddressType_129098SAttributes {
    
}

// To describe the usage of an address
export interface AddressUsageTypeU {
    
    $attributes: AddressUsageTypeUAttributes
    
    
    purpose: Array<string>
    
    
    type: Array<string>
    
    
    status: Array<string>
    
}

export interface AddressUsageTypeUAttributes {
    
}

// To specify the details of an address.
export interface AddressDetailsTypeU2 {
    
    $attributes: AddressDetailsTypeU2Attributes
    
    // Address Format . Will be 5 unstructured
    format: string
    
    // Address Text. Any of the following address lines may start with a tag: Door number- Street- ExternalNumber- InternalNumber- County- Neighbourhood- State-
    line1: string
    
    
    line2: Array<string>
    
    
    line3: Array<string>
    
    
    line4: Array<string>
    
    
    line5: Array<string>
    
    
    line6: Array<string>
    
}

export interface AddressDetailsTypeU2Attributes {
    
}

// To specify a part of a country (eg county or part of a city).
export interface CountrySubEntityDetailsTypeU_188109C {
    
    $attributes: CountrySubEntityDetailsTypeU_188109CAttributes
    
    
    code: Array<string>
    
    
    qualifier: Array<string>
    
    
    agency: Array<string>
    
    
    name: Array<string>
    
}

export interface CountrySubEntityDetailsTypeU_188109CAttributes {
    
}

// Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name
export interface LocationIdentificationTypeU_188107C {
    
    $attributes: LocationIdentificationTypeU_188107CAttributes
    
    
    iataLocCode: Array<string>
    
    
    name: Array<string>
    
}

export interface LocationIdentificationTypeU_188107CAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_128779S {
    
    $attributes: StructuredDateTimeInformationType_128779SAttributes
    
    
    businessSemantic: Array<string>
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType_187547C>
    
    // Reference : IATA SSIM Appendix F If it is not provided, the time is considered to be given in UTC.
    timeZoneInfo: Array<TimeZoneIinformationType>
    
}

export interface StructuredDateTimeInformationType_128779SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_187547C {
    
    $attributes: StructuredDateTimeType_187547CAttributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<number>
    
}

export interface StructuredDateTimeType_187547CAttributes {
    
}

// Specify in which time zone, the information is provided
export interface TimeZoneIinformationType {
    
    $attributes: TimeZoneIinformationTypeAttributes
    
    // ISO country Code See SSIM appendix F
    countryCode: string
    
    // Time zone code. See SSIM appendix F.
    code: Array<number>
    
    // Time zone suffix to complete the time zone code when necessary. See SSIM appendix F.
    suffix: Array<string>
    
}

export interface TimeZoneIinformationTypeAttributes {
    
}

// To specify details concerning seat selection and the associated security and processing information.
export interface SeatSelectionDetailsTypeI {
    
    $attributes: SeatSelectionDetailsTypeIAttributes
    
    
    specificSeatDetails: Array<SpecificSeatDetailsTypeI>
    
    
    noSmokingIndicator: Array<string>
    
    
    seatCharacteristicDetails: Array<SeatCharacteristicDetailsTypeI>
    
    
    seatRangeDetails: Array<SeatRangeDetailsTypeI>
    
    
    classDesignator: Array<string>
    
    
    cabinClass: Array<number>
    
}

export interface SeatSelectionDetailsTypeIAttributes {
    
}

// Identification of specific seats on a means of transport.
export interface SpecificSeatDetailsTypeI {
    
    $attributes: SpecificSeatDetailsTypeIAttributes
    
    
    seat: Array<string>
    
}

export interface SpecificSeatDetailsTypeIAttributes {
    
}

// Identification of the characteristics of a seat on a means of transport.
export interface SeatCharacteristicDetailsTypeI {
    
    $attributes: SeatCharacteristicDetailsTypeIAttributes
    
    
    characteristics: Array<string>
    
}

export interface SeatCharacteristicDetailsTypeIAttributes {
    
}

// To specify the range of seats on a means of transport.
export interface SeatRangeDetailsTypeI {
    
    $attributes: SeatRangeDetailsTypeIAttributes
    
    
    seatRow: number
    
    
    maximumRange: Array<number>
    
    
    seatColumn: Array<string>
    
}

export interface SeatRangeDetailsTypeIAttributes {
    
}


export interface hotelInfosType {
    
    $attributes: hotelInfosTypeAttributes
    
    // This segment is used to convey the hotel property information.
    hotelPropertyInfo: HotelPropertyType_129118S
    
    // This segment conveys pricing information : - Policy indicator Possible values : D Deposit policy indicator G Guarantee policy indicator H Hold time policy indicator - Breakfast indicator Possible values : B Breakfast included E Breakfast excluded U Breakfast inclusion unknown
    pricingIndicator: Array<ProductIdentificationType2>
    
    // This segment is used to convey the hotel chain code and name.
    companyIdentification: Array<CompanyInformationType2>
    
    // This segment conveys a list of main amenities available at the hotel
    amenities: Array<HotelProductInformationType_95637S>
    
    // This segment is used to convey the dates.
    requestedDates: StructuredPeriodInformationType_36738S
    
    // This group is used to convey the room /rate details.
    roomRateDetails: Array<roomRateDetailsType2>
    
    // This segment is used to convey the confirmation number or the cancellation number. control type (9958) is: - 2 for Confirmation reference - X for cancellation reference
    cancelOrConfirmNbr: Array<ReservationControlInformationTypeI_36736S>
    
    // This segment is used to convey the booking source.
    bookingSource: Array<UserIdentificationType_21014S>
    
    // This segment is used to convey the billable information
    billableInfo: Array<BillableInformationTypeU2>
    
    // This segment is used to convey the customer reference number
    customerInfo: Array<ConsumerReferenceInformationTypeI2>
    
    // This segment is used to convey the frequent traveler number.
    frequentTravellerInfo: Array<FrequentTravellerIdentificationCodeType_36731S>
    
    // This group is used for the guarantee or the deposit
    guaranteeOrDeposit: Array<guaranteeOrDepositType2>
    
    // This segment conveys RTSVCH and some special options.
    specialOptions: Array<FreeTextInformationType_36740S>
    
    // This segment is used to convey additional information which are entered by the agent and stored on the hotel booking.
    textOptions: Array<MiscellaneousRemarksType_36733S>
    
    // This segment conveys the rating of the hotel.
    hotelRating: Array<AwardsType>
    
    // This segment is used to convey the commission information
    commissionInfo: Array<CommissionInformationType_95008S>
    
    // This segment is used to convey the saving amount/percentage information.
    savingAmountInfo: Array<MonetaryInformationTypeI_1689S>
    
    // This segment is used to convey the fax or the E-Mail to receive the written confirmation
    writtenConfirmationContact: Array<ContactInformationTypeU>
    
    // This segment conveys the hotel address
    hotelAddress: Array<AddressType_129172S>
    
    // This segment is used to convey the name and address of the party to receive the written confirmation
    writtenConfirmationInfo: Array<NameAndAddressBatchTypeU>
    
    // This group is used to convey the Arrival Flight Details
    arrivalFlightDetails: Array<arrivalFlightDetailsType>
    
    // This segment conveys diverse booking indicators.
    bookingIndicators: Array<StatusType_95218S>
    
}

export interface hotelInfosTypeAttributes {
    
}

// This segment is used to convey the Hotel Property information
export interface HotelPropertyType_129118S {
    
    $attributes: HotelPropertyType_129118SAttributes
    
    // Hotel identification
    hotelReference: Array<HotelUniqueIdType_188138C>
    
    // This composite is used to convey the hotel name
    hotelName: Array<string>
    
    // This data element is used to indicates if the hotel is compliant with the fire safety rules.
    fireSafetyIndicator: Array<string>
    
}

export interface HotelPropertyType_129118SAttributes {
    
}


export interface HotelUniqueIdType_188138C {
    
    $attributes: HotelUniqueIdType_188138CAttributes
    
    // To convey the chain code in the property ID
    chainCode: Array<string>
    
    // To convey the city code in the hotel Id
    cityCode: Array<string>
    
    // To convey the property code in the Hotel Id
    hotelCode: Array<string>
    
}

export interface HotelUniqueIdType_188138CAttributes {
    
}

// To identify a product.
export interface ProductIdentificationType2 {
    
    $attributes: ProductIdentificationType2Attributes
    
    
    productData: Array<ProductIdentificationDetailsType>
    
}

export interface ProductIdentificationType2Attributes {
    
}

// Code, number or name to identify a specific product or service and a code to identify the level or type of product or service.
export interface ProductIdentificationDetailsType {
    
    $attributes: ProductIdentificationDetailsTypeAttributes
    
    
    productIdCharacteristic: string
    
    
    description1: Array<string>
    
    
    description2: Array<string>
    
    
    name: Array<string>
    
}

export interface ProductIdentificationDetailsTypeAttributes {
    
}

// To specify the details for a hotel transaction.
export interface HotelProductInformationType_95637S {
    
    $attributes: HotelProductInformationType_95637SAttributes
    
    // PAP preferred amenities codes.
    preferredAmenities: HotelFacilityType
    
}

export interface HotelProductInformationType_95637SAttributes {
    
}

// HOTEL FACILITY
export interface HotelFacilityType {
    
    $attributes: HotelFacilityTypeAttributes
    
    // Hotel Facility code(s) (/FF- option)
    facilityCode: Array<string>
    
}

export interface HotelFacilityTypeAttributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType_36738S {
    
    $attributes: StructuredPeriodInformationType_36738SAttributes
    
    // This data element can be used to provide the semantic of the information provided.
    businessSemantic: Array<string>
    
    // Indicate the time is expressed in local time mode.
    timeMode: Array<string>
    
    // Convey the begin date/time of a period.
    beginDateTime: StructuredDateTimeType_62852C
    
    // Convey the end date/time of a period.
    endDateTime: StructuredDateTimeType_62852C
    
}

export interface StructuredPeriodInformationType_36738SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_62852C {
    
    $attributes: StructuredDateTimeType_62852CAttributes
    
    // Year number. The format is a little long for short term usage but it can be reduced by implementation if required.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: Array<number>
    
    // Day number in the month ( begins to 1 )
    day: Array<number>
    
    // Hour between 0 and 23
    hour: Array<number>
    
    // Minutes between 0 and 59
    minutes: Array<number>
    
}

export interface StructuredDateTimeType_62852CAttributes {
    
}

// To specify a reference to a reservation
export interface ReservationControlInformationTypeI_36736S {
    
    $attributes: ReservationControlInformationTypeI_36736SAttributes
    
    // Reservation Information
    reservation: Array<ReservationControlInformationDetailsTypeI_62850C>
    
}

export interface ReservationControlInformationTypeI_36736SAttributes {
    
}


export interface ReservationControlInformationDetailsTypeI_62850C {
    
    $attributes: ReservationControlInformationDetailsTypeI_62850CAttributes
    
    // 1A or Other airline record locator information Passive segment airline code
    companyId: Array<string>
    
    // 1. Record - 1A record locator or - OA record locator
    controlNumber: Array<string>
    
    // 1. Profile record locator information: Customer type: C for Corporate T for Traveler F for Frequent Flyer
    controlType: Array<string>
    
    // 1. RR element: Date 2. SP element: Date 3. PNR header/RP line: Date of last End of transaction
    date: Array<number>
    
    // 1. PNR header/RP line: time of last End of transaction
    time: Array<number>
    
}

export interface ReservationControlInformationDetailsTypeI_62850CAttributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType_36731S {
    
    $attributes: FrequentTravellerIdentificationCodeType_36731SAttributes
    
    // Airline Frequent Traveller Info
    airlineFrequentTraveler: FrequentTravellerIdentificationType6
    
    // Alliance Frequent Traveller Info
    allianceFrequentTraveler: Array<FrequentTravellerIdentificationType_62841C>
    
}

export interface FrequentTravellerIdentificationCodeType_36731SAttributes {
    
}


export interface FrequentTravellerIdentificationType_62841C {
    
    $attributes: FrequentTravellerIdentificationType_62841CAttributes
    
    // To specify a Tier linked to the FQTV
    tierLevel: Array<string>
    
    // To specify the Priority of the FQTV.
    priorityCode: Array<string>
    
    // Full Text Tier description ex: EMERALD, SAPPHIRE
    tierDescription: Array<string>
    
    // Alliance name
    companyCode: string
    
}

export interface FrequentTravellerIdentificationType_62841CAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_36740S {
    
    $attributes: FreeTextInformationType_36740SAttributes
    
    // This composite is used to convey all the free text information
    freeTextDetails: FreeTextDetailsType_62856C
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType_36740SAttributes {
    
}


export interface FreeTextDetailsType_62856C {
    
    $attributes: FreeTextDetailsType_62856CAttributes
    
    // Text qualifier
    textSubjectQualifier: string
    
    // This field is used to convey the type of information that can be carried in this segment
    informationType: string
    
    
    status: Array<string>
    
}

export interface FreeTextDetailsType_62856CAttributes {
    
}

// a collection of Award elements.
export interface AwardsType {
    
    $attributes: AwardsTypeAttributes
    
    // provides detailed information regarding each award program used by this hotel.
    award: AwardType
    
}

export interface AwardsTypeAttributes {
    
}

// Provides detailed information regarding each award program used by this hotel.
export interface AwardType {
    
    $attributes: AwardTypeAttributes
    
    // The name of the award or ratings provider.
    provider: Array<string>
    
    // The actual award or rating received by the hotel facility.
    rating: Array<string>
    
}

export interface AwardTypeAttributes {
    
}

// To specify information about a commission.
export interface CommissionInformationType_95008S {
    
    $attributes: CommissionInformationType_95008SAttributes
    
    // Commission details
    commissionDetails: CommissionDetailsType1
    
}

export interface CommissionInformationType_95008SAttributes {
    
}

// To specify the commission conditions, amount, currency, party paying and any related free text.
export interface CommissionDetailsType1 {
    
    $attributes: CommissionDetailsType1Attributes
    
    // Commission type : &#39;NEW&#39; --) New commission &#39;OLD&#39; --) Old Commission &#39;XLP&#39; --) Commission on cancellation Penalty &#39;FMA&#39; --) Airline Commission A &#39;FMB&#39; --) Airline Commission B
    type: string
    
    // Commission amount
    amount: Array<number>
    
    
    currency: Array<string>
    
    // Commission percentage
    rate: Array<number>
    
}

export interface CommissionDetailsType1Attributes {
    
}

// To specify an address
export interface AddressType_129172S {
    
    $attributes: AddressType_129172SAttributes
    
    
    addressDetails: Array<AddressDetailsTypeU2>
    
    // City name.
    city: Array<string>
    
    // postal identification code.
    zipCode: Array<string>
    
    // Country code
    countryCode: Array<string>
    
    
    locationDetails: Array<LocationIdentificationTypeU_188218C>
    
}

export interface AddressType_129172SAttributes {
    
}

// Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name
export interface LocationIdentificationTypeU_188218C {
    
    $attributes: LocationIdentificationTypeU_188218CAttributes
    
    
    code: Array<string>
    
    
    qualifier: Array<string>
    
    
    agency: Array<string>
    
    
    name: Array<string>
    
}

export interface LocationIdentificationTypeU_188218CAttributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType_95218S {
    
    $attributes: StatusType_95218SAttributes
    
    // The Security Status. This may contain the allowed Permission to View a data field.
    statusDetails: Array<StatusDetailsType_142998C>
    
}

export interface StatusType_95218SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType_142998C {
    
    $attributes: StatusDetailsType_142998CAttributes
    
    // Status qualifier
    indicator: Array<string>
    
    // Status value
    action: string
    
    // To specify the type of the status designated by 1245.
    type: Array<string>
    
}

export interface StatusDetailsType_142998CAttributes {
    
}


export interface taxiInfosType {
    
    $attributes: taxiInfosTypeAttributes
    
    
    pickUpDropOffDateTime: StructuredPeriodInformationType_128780S
    
    
    additionalProductDetails: Array<AdditionalProductDetailsType4>
    
    // Address of the event location
    eventAddress: Array<AddressType_129098S>
    
    // Baggage info
    baggage: Array<TravellerBaggageDetailsType>
    
}

export interface taxiInfosTypeAttributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType_128780S {
    
    $attributes: StructuredPeriodInformationType_128780SAttributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - Impacted period - Departure date - Estimated arrival date and time
    businessSemantic: Array<string>
    
    // Indicate if the time is expressed in UTC or in local time mode ( Codes U and L ). In the last case, the time zone information can be provided in the composite C89K.
    timeMode: Array<string>
    
    // Convey the begin date/time of a period.
    beginDateTime: Array<StructuredDateTimeType_187547C>
    
    // Convey the end date/time of a period.
    endDateTime: Array<StructuredDateTimeType_187547C>
    
    // It is used with a period to give a restriction for days impacted. It permits for example to indicate on which days, a flight operates.
    frequency: Array<FrequencyType2>
    
    // Reference : IATA SSIM Appendix F If it is not provided, the time is considered to be given in UTC.
    timeZoneInfo: Array<TimeZoneIinformationType>
    
}

export interface StructuredPeriodInformationType_128780SAttributes {
    
}

// Give the days of the week involved for a period
export interface FrequencyType2 {
    
    $attributes: FrequencyType2Attributes
    
    // Indicate if the sequence number represents days of the week or days of the month.
    qualifier: string
    
    // Used to represent days of the week or days of the month. For week : 1 is monday and 7 is sunday. For month : 1 is the first day of the month.
    value: Array<string>
    
}

export interface FrequencyType2Attributes {
    
}


export interface insuranceInfosType {
    
    $attributes: insuranceInfosTypeAttributes
    
    
    insuranceProductDetailsType: InsuranceProductDetailsType_129160S
    
    // provider phone contact
    providerPhoneContact: Array<PhoneAndEmailAddressType2>
    
    // Marketing Lines (MKT) used by ticketing and provider contact lines (CTC).
    infoLines: Array<FreeTextInformationType_128665S>
    
    // provides details about the substitute name or the nanny name.
    substiteName: Array<TravellerInformationTypeI>
    
    // Amount that is added to the total premium in case an extrareference is specified.
    extraPremium: Array<MonetaryInformationTypeI6>
    
    // To convey the products and it&#39;s directly related data.
    productSection: Array<productSectionType>
    
    // contains the different amounts (net premium/taxes/total premium)
    planCostInfo: Array<TariffInformationTypeI_22057S>
    
    // Provides details about the type of plan beeing booked.
    planTypeDetails: Array<planTypeDetailsType>
    
    // To specify remarks and an emergency contact (phone or name)
    contactDetails: Array<contactDetailsType>
    
    // To specify the address of the subscriber.
    subscriberAddressSection: Array<subscriberAddressSectionType>
    
    // This is used to convey the different coverages and it&#39;s values.
    coverageDetails: Array<coverageDetailsType>
    
    // to specify a commission.
    comissionAmount: Array<CommissionInformationType1>
    
    // Used to specify the necesary data for pricing
    productKnowledge: Array<ActionDetailsTypeI>
    
    // to specify to which passenger the insurance is associated: if omitted then it&#39;s for all the names in the PNR. The repetition factor is 198 because we can have 99 passengers in a PNR each of them an infant.
    passengerDetails: Array<passengerDetailsType>
    
    // To convey information if the document has been printed or not.
    printInformation: Array<DocumentInformationDetailsTypeI>
    
    
    longFreeTextType: Array<LongFreeTextType_128687S>
    
}

export interface insuranceInfosTypeAttributes {
    
}

// Product Details
export interface InsuranceProductDetailsType_129160S {
    
    $attributes: InsuranceProductDetailsType_129160SAttributes
    
    // This data element is used to convey the company code of a non-air company
    companyCode: Array<string>
    
    // To identify the countrycode from the provider.
    countryCode: Array<string>
    
    // This composite contains the code of the insurance elements.
    productDetails: Array<ProviderInformationType_188200C>
    
    // contains the extensions for the main insurance product
    extensionIdentification: Array<ProviderInformationType_188200C>
    
    // Authorization number provided by ht insurance company
    extraReference: Array<string>
    
    
    tariffCodeDetails: Array<TariffcodeType>
    
}

export interface InsuranceProductDetailsType_129160SAttributes {
    
}


export interface ProviderInformationType_188200C {
    
    $attributes: ProviderInformationType_188200CAttributes
    
    // productcode
    code: Array<string>
    
    
    name: Array<string>
    
    // Product Famili Code
    productFamilyCode: Array<string>
    
    // To contain Insurance plan type
    producttype: Array<string>
    
}

export interface ProviderInformationType_188200CAttributes {
    
}

// To specify a phone or email address
export interface PhoneAndEmailAddressType2 {
    
    $attributes: PhoneAndEmailAddressType2Attributes
    
    // Phone or Email contact type
    phoneOrEmailType: string
    
    // Structured telephone number
    telephoneNumber: Array<StructuredTelephoneNumberType_187460C>
    
}

export interface PhoneAndEmailAddressType2Attributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_128665S {
    
    $attributes: FreeTextInformationType_128665SAttributes
    
    // Text attribute description
    freeTextDetails: FreeTextDetailsType_187464C
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType_128665SAttributes {
    
}

// To provide free form or coded long text information
export interface LongFreeTextType_128687S {
    
    $attributes: LongFreeTextType_128687SAttributes
    
    // To specify the type of freetext
    freetextDetail: Array<FreeTextQualificationType_187488C>
    
    // Long free text information.
    longFreetext: Array<string>
    
}

export interface LongFreeTextType_128687SAttributes {
    
}


export interface FreeTextQualificationType_187488C {
    
    $attributes: FreeTextQualificationType_187488CAttributes
    
    // Identifies whether the free text is coded or not coded : 3 for Literal text
    subjectQualifier: string
    
}

export interface FreeTextQualificationType_187488CAttributes {
    
}

// conveys the extended content for ferry
export interface ExtendedContentFerryLegDescriptionType {
    
    $attributes: ExtendedContentFerryLegDescriptionTypeAttributes
    
    // conveys the cabin description information
    cabinDescription: CabinDescriptionType
    
    // conveys the information about the distance and mileage of the ferry leg
    mileageInfo: Array<QuantityType>
    
    // conveys the information about the ticket related to the ferry trip
    ticketInfogroup: Array<ticketInfogroupType>
    
    // This group describes the ferry booking itinerary. It contains the list of all the sailing legs attached to the booking.
    itineraryInfoGroup: Array<FerryLegDescriptionType>
    
    // This group describes the accomodation (hotel) package attached to the booking.
    accomodationPackageInfoGroup: Array<FerryAccomodationPackageDescriptionType>
    
}

export interface ExtendedContentFerryLegDescriptionTypeAttributes {
    
}

// To describe a Cabin in a ship
export interface CabinDescriptionType {
    
    $attributes: CabinDescriptionTypeAttributes
    
    
    cabinDetails: Array<CabinIdentificationType2>
    
    
    cabinDescription: Array<CabinDescriptionDetailsType>
    
    
    deckPlanName: Array<DeckType>
    
    // Status of the cabin
    cabinStatus: Array<string>
    
}

export interface CabinDescriptionTypeAttributes {
    
}

// To identify a cabin
export interface CabinIdentificationType2 {
    
    $attributes: CabinIdentificationType2Attributes
    
    
    cabinNbr: string
    
}

export interface CabinIdentificationType2Attributes {
    
}

// To specify cabin features
export interface CabinDescriptionDetailsType {
    
    $attributes: CabinDescriptionDetailsTypeAttributes
    
    
    positionInShip: Array<string>
    
    
    cabinSide: Array<string>
    
    
    categoryLocation: Array<string>
    
    
    maxOccupancy: Array<number>
    
}

export interface CabinDescriptionDetailsTypeAttributes {
    
}

// To specify a deck
export interface DeckType {
    
    $attributes: DeckTypeAttributes
    
    
    deckId: Array<string>
    
    
    deckCode: Array<string>
    
}

export interface DeckTypeAttributes {
    
}

// To specify a pertinent quantity.
export interface QuantityType {
    
    $attributes: QuantityTypeAttributes
    
    // To specify an appropriate quantity.
    quantityDetails: Array<QuantityDetailsType>
    
}

export interface QuantityTypeAttributes {
    
}

// Quantity information in a transaction, qualified when relevant.
export interface QuantityDetailsType {
    
    $attributes: QuantityDetailsTypeAttributes
    
    
    qualifier: Array<string>
    
    
    value: Array<number>
    
    
    unit: Array<string>
    
}

export interface QuantityDetailsTypeAttributes {
    
}


export interface ticketInfogroupType {
    
    $attributes: ticketInfogroupTypeAttributes
    
    
    ticketNumber: TicketNumberType_128754S
    
    // This segment conveys the ticket issuance date
    dateInfo: Array<StructuredDateTimeInformationType_128730S>
    
}

export interface ticketInfogroupTypeAttributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberType_128754S {
    
    $attributes: TicketNumberType_128754SAttributes
    
    
    documentDetails: TicketNumberDetailsType_187589C
    
}

export interface TicketNumberType_128754SAttributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsType_187589C {
    
    $attributes: TicketNumberDetailsType_187589CAttributes
    
    // provides ticket number
    number: Array<number>
    
}

export interface TicketNumberDetailsType_187589CAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_128730S {
    
    $attributes: StructuredDateTimeInformationType_128730SAttributes
    
    // Indicate if the time is expressed in UTC or in local time mode ( Codes U and L ).
    timeMode: Array<string>
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType_187547C>
    
}

export interface StructuredDateTimeInformationType_128730SAttributes {
    
}


export interface FerryLegDescriptionType {
    
    $attributes: FerryLegDescriptionTypeAttributes
    
    // Conveys the sailing details for an itinerary leg.
    sailingDetails: TravelProductInformationTypeU2
    
    // Conveys the ship code and ship name.
    shipDescription: Array<ShipIdentificationType>
    
    // This segment conveys the check-in time for the ferry sailing leg to which it is attached.
    sailingLegCheckInInformation: Array<StructuredDateTimeInformationType_129128S>
    
    // Conveys the list of passengers associated to the ferry leg.
    passengerAssociation: Array<ReferenceInformationTypeI_129127S>
    
    // Conveys the price information per leg per passenger.
    priceInfoGroup: Array<priceInfoGroupType>
    
    // This group describes the list of vehicles attached to the linked sailing leg.
    vehicleInfoGroup: Array<vehicleInfoGroupType>
    
    // This segment describes the on-board service(s) in the linked sailing leg.
    serviceInfoGroup: Array<serviceInfoGroupType>
    
    // This group is used to describe the animals linked to the ferry booking.
    animalInfoGroup: Array<animalInfoGroupType>
    
}

export interface FerryLegDescriptionTypeAttributes {
    
}

// To specify details related to a travel product.
export interface TravelProductInformationTypeU2 {
    
    $attributes: TravelProductInformationTypeU2Attributes
    
    
    flightDate: Array<ProductDateAndTimeTypeU2>
    
    
    boardPointDetails: Array<LocationTypeU2>
    
    
    lineNumber: Array<string>
    
}

export interface TravelProductInformationTypeU2Attributes {
    
}

// To specify first the beginning date and time followed by the ending date and time associated with a product or service.
export interface ProductDateAndTimeTypeU2 {
    
    $attributes: ProductDateAndTimeTypeU2Attributes
    
    
    departureDate: Array<string>
    
    
    departureTime: Array<string>
    
    
    arrivalDate: Array<string>
    
    
    arrivalTime: Array<string>
    
}

export interface ProductDateAndTimeTypeU2Attributes {
    
}

// To identify a location
export interface LocationTypeU2 {
    
    $attributes: LocationTypeU2Attributes
    
    
    code: Array<string>
    
    
    name: Array<string>
    
    
    qualifier: Array<string>
    
}

export interface LocationTypeU2Attributes {
    
}

// To provide details on the sailing ship
export interface ShipIdentificationType {
    
    $attributes: ShipIdentificationTypeAttributes
    
    // Detailed information for the sailing ship.
    shipDetails: ShipIdentificationDetailsType_187530C
    
}

export interface ShipIdentificationTypeAttributes {
    
}


export interface ShipIdentificationDetailsType_187530C {
    
    $attributes: ShipIdentificationDetailsType_187530CAttributes
    
    // Used to convey the ship code as in the Cruise specific database ship&#39;s table.
    code: Array<string>
    
    // Used to convey the ship name as in the Cruise specific database ship&#39;s table.
    name: Array<string>
    
    // Used to convey the cruise line provider code for the sailing ship.
    cruiseLineCode: Array<string>
    
}

export interface ShipIdentificationDetailsType_187530CAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_129128S {
    
    $attributes: StructuredDateTimeInformationType_129128SAttributes
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType_188156C>
    
}

export interface StructuredDateTimeInformationType_129128SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_188156C {
    
    $attributes: StructuredDateTimeType_188156CAttributes
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
}

export interface StructuredDateTimeType_188156CAttributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInformationTypeI_129127S {
    
    $attributes: ReferenceInformationTypeI_129127SAttributes
    
    
    referenceDetails: Array<ReferencingDetailsTypeI_188155C>
    
}

export interface ReferenceInformationTypeI_129127SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_188155C {
    
    $attributes: ReferencingDetailsTypeI_188155CAttributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
}

export interface ReferencingDetailsTypeI_188155CAttributes {
    
}


export interface FerryAccomodationPackageDescriptionType {
    
    $attributes: FerryAccomodationPackageDescriptionTypeAttributes
    
    // This segment conveys the package code.
    packageCode: ProductInformationTypeI
    
    // This segment conveys the hotel code the of the accomodation package to which it is attached.
    hotelInformation: Array<HotelPropertyType_129121S>
    
    // This segment conveys the check-in date and time for the accomodation package to which it is attached.
    hotelCheckInInformation: Array<StructuredDateTimeInformationType_128682S>
    
    // This segment is used to convey the hotel area code information.
    areaCodeInfo: Array<PlaceLocationIdentificationTypeU>
    
    // This segment is used to give the number of nights spent in the accomodation package to which it is attached.
    numberOfNights: Array<NumberOfUnitsType_129120S>
    
    // This segment is used to convey the price of the accomodation to which it is attached.
    hotelItemPrice: Array<TariffInformationTypeU>
    
    // This segment is used to give details about the rooms (if any) lined to the accomodation package.
    roomInfoGroup: Array<roomInfoGroupType>
    
}

export interface FerryAccomodationPackageDescriptionTypeAttributes {
    
}

// To specify details related to availability status or cabin configuration for a product.
export interface ProductInformationTypeI {
    
    $attributes: ProductInformationTypeIAttributes
    
    // Conveys the package details.
    bookingClassDetails: ProductDetailsTypeI_188147C
    
}

export interface ProductInformationTypeIAttributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsTypeI_188147C {
    
    $attributes: ProductDetailsTypeI_188147CAttributes
    
    
    designator: string
    
}

export interface ProductDetailsTypeI_188147CAttributes {
    
}

// This segment is used to convey the Hotel Property information
export interface HotelPropertyType_129121S {
    
    $attributes: HotelPropertyType_129121SAttributes
    
    // This composite is used to convey the hotel identifier.
    hotelReference: Array<HotelUniqueIdType_188143C>
    
}

export interface HotelPropertyType_129121SAttributes {
    
}


export interface HotelUniqueIdType_188143C {
    
    $attributes: HotelUniqueIdType_188143CAttributes
    
    // To convey the chain code in the property ID
    chainCode: string
    
    // To convey the city code in the hotel Id
    cityCode: string
    
    // To convey the property code in the Hotel Id
    hotelCode: string
    
}

export interface HotelUniqueIdType_188143CAttributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationTypeU {
    
    $attributes: PlaceLocationIdentificationTypeUAttributes
    
    
    locationType: string
    
    
    firstLocationDetails: Array<RelatedLocationOneIdentificationTypeU_188145C>
    
}

export interface PlaceLocationIdentificationTypeUAttributes {
    
}

// To specify the number of units required
export interface NumberOfUnitsType_129120S {
    
    $attributes: NumberOfUnitsType_129120SAttributes
    
    // Number of Unit Details
    quantityDetails: NumberOfUnitDetailsType_188142C
    
}

export interface NumberOfUnitsType_129120SAttributes {
    
}

// Identification of number of units and its purpose.
export interface NumberOfUnitDetailsType_188142C {
    
    $attributes: NumberOfUnitDetailsType_188142CAttributes
    
    
    numberOfUnit: number
    
}

export interface NumberOfUnitDetailsType_188142CAttributes {
    
}

// To specify tariff details relating to a service or product.
export interface TariffInformationTypeU {
    
    $attributes: TariffInformationTypeUAttributes
    
    
    priceDetails: TariffInformationDetailsTypeU_188150C
    
}

export interface TariffInformationTypeUAttributes {
    
}

// To identify the rates or tariff details.
export interface TariffInformationDetailsTypeU_188150C {
    
    $attributes: TariffInformationDetailsTypeU_188150CAttributes
    
    
    priceAmount: Array<number>
    
    
    currencyCode: Array<string>
    
    
    priceQualifier: Array<string>
    
}

export interface TariffInformationDetailsTypeU_188150CAttributes {
    
}


export interface carInfosType {
    
    $attributes: carInfosTypeAttributes
    
    // Vehicle information - vehicle type (SIPP code), - vehicle special equipments - vehicle details (Car make model, Number of doors,...)
    vehicleInformation: VehicleInformationType
    
    // Pick-up and Drop-off locations information
    pickupDropoffLocations: Array<pickupDropoffLocationsType>
    
    // This segment is used to convey the pick-up and drop-off dates and times of the rental.
    pickupDropoffTimes: StructuredPeriodInformationType_128769S
    
    // Rate Code Information Group
    rateCodeGroup: Array<rateCodeGroupType>
    
    // Customer information: Id, CD and PC numbers.
    customerInfo: Array<ConsumerReferenceInformationType2>
    
    // This segments is used to convey: 1)General Rate information (identifier, plan, category) and Unstructured RB/RQ/RG 2) Structured rate quoted (RQ) or guaranted (RG) 3) Structured base rate (RB) 4) Estimated total information 5) Drop amount data 6) Voucher coupon print references (VV) 7) Rate Override (RO) 8) Modification fee indicator 9) Cancellation fee indicator 10) prepayment
    rateInfo: Array<TariffInformationTypeI_128793S>
    
    // Information on the number of drivers associated to the Car rental.
    numberOfDrivers: NumberOfUnitsType2
    
    // Conveys all Rate details information.
    rateDetails: Array<rateDetailsType>
    
    // Used to convey any key/value information that is not defined in other structured segments.
    otherInformation: Array<AttributeType6>
    
}

export interface carInfosTypeAttributes {
    
}

// This segment is used to convey the vehicle information
export interface VehicleInformationType {
    
    $attributes: VehicleInformationTypeAttributes
    
    // This composite is used to convey the vehicle type.
    vehicleCharacteristic: Array<VehicleTypeOptionType>
    
    // This data element is used to convey the equipment codes.
    vehSpecialEquipment: Array<string>
    
    // To indicate vehicle details: -Number of doors -Number of seats -Max Number of doors -Max Number of seats -Number of bags -Volume of the boots
    vehicleInfo: Array<QuantityDetailsTypeI_187593C>
    
    // Free Text
    freeTextDetails: Array<FreeTextDetailsType_187592C>
    
    // Description or example of Car Make Model.
    carModel: Array<string>
    
}

export interface VehicleInformationTypeAttributes {
    
}


export interface VehicleTypeOptionType {
    
    $attributes: VehicleTypeOptionTypeAttributes
    
    // This data element is used to convey the owner of the type code. - ACR for ACRISS
    vehicleTypeOwner: Array<string>
    
    // This data element is used to convey the SIPP code(s) selection criteria.
    vehicleRentalPrefType: Array<string>
    
}

export interface VehicleTypeOptionTypeAttributes {
    
}


export interface FreeTextDetailsType_187592C {
    
    $attributes: FreeTextDetailsType_187592CAttributes
    
    // Qualifies the type of text returned - 3 for Literal Text
    textSubjectQualifier: string
    
    // Type of information sent in the free flow text: - MK - Marketing Text - OS - Other Services Message - SI - Supplementary Information
    informationType: Array<string>
    
    // Attached the text returned to a code. Use &#34;1A&#34; for Amadeus
    companyId: Array<string>
    
    // Specify the language in which the free flow text is sent. Language should be an ISO language code
    language: Array<string>
    
    // Specify the source of the text: - manual - system
    source: string
    
    // Precise the character set used for the free flow text.
    encoding: string
    
}

export interface FreeTextDetailsType_187592CAttributes {
    
}


export interface pickupDropoffLocationsType {
    
    $attributes: pickupDropoffLocationsTypeAttributes
    
    // Car pickup and dropoff location parameters (for Amadeus and Provider locations).
    locationInfo: PlaceLocationIdentificationType_128800S
    
    // Location address.
    address: Array<AddressType5>
    
    // Phone or Fax number.
    phone: Array<PhoneAndEmailAddressType_128774S>
    
}

export interface pickupDropoffLocationsTypeAttributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType_128800S {
    
    $attributes: PlaceLocationIdentificationType_128800SAttributes
    
    // Indicates the kind of location for which information is given: - 176 Pick-up - DOL Drop-off - 117 Collection - 7 Delivery
    locationType: string
    
    // Details on the location (location code and possibly part of the address).
    locationDescription: Array<LocationIdentificationBatchType_187661C>
    
    // Associated airport/City code. Present if the pickup location is not an airport/city code.
    firstLocationDetails: Array<RelatedLocationOneIdentificationType>
    
}

export interface PlaceLocationIdentificationType_128800SAttributes {
    
}

// Identification of a location by code or name
export interface LocationIdentificationBatchType_187661C {
    
    $attributes: LocationIdentificationBatchType_187661CAttributes
    
    // Set to: - IATA to indicate IATA location code - 1A to indicate a 1A location - CPY to indicate a Car provider location
    code: Array<string>
    
    // Location extended name for - Amadeus location type - Provider location type (followed by an *) - Free text for collection option. - Free text for delivery option.
    name: Array<string>
    
}

export interface LocationIdentificationBatchType_187661CAttributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationType {
    
    $attributes: RelatedLocationOneIdentificationTypeAttributes
    
    // Associated airport code.
    code: Array<string>
    
    // Associated airport code qualifier.
    qualifier: Array<string>
    
    // Set to IA to indicate that the associated location code is a IATA airport or city code.
    agency: Array<string>
    
}

export interface RelatedLocationOneIdentificationTypeAttributes {
    
}

// To specify an address
export interface AddressType5 {
    
    $attributes: AddressType5Attributes
    
    // Location Address information.
    addressDetails: Array<AddressDetailsTypeU_187664C>
    
    // City name.
    city: Array<string>
    
    // Zip code (postal identification code).
    zipCode: Array<string>
    
    // Country code.
    countryCode: Array<string>
    
    // To convey a sub-entity within a country : region, states..
    regionDetails: Array<CountrySubEntityDetailsTypeU_187667C>
    
}

export interface AddressType5Attributes {
    
}

// To specify a phone or email address
export interface PhoneAndEmailAddressType_128774S {
    
    $attributes: PhoneAndEmailAddressType_128774SAttributes
    
    // Allows to choose whether information sent is : - 3 a phone number - FAX a fax number
    phoneOrEmailType: string
    
    // Structured telephone or fax number
    telephoneNumberDetails: Array<StructuredTelephoneNumberType_187626C>
    
}

export interface PhoneAndEmailAddressType_128774SAttributes {
    
}

// Convey structured phone information
export interface StructuredTelephoneNumberType_187626C {
    
    $attributes: StructuredTelephoneNumberType_187626CAttributes
    
    // Telephone or Fax number
    telephoneNumber: string
    
}

export interface StructuredTelephoneNumberType_187626CAttributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType_128769S {
    
    $attributes: StructuredPeriodInformationType_128769SAttributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - BED Beginning and Ending dates - DDT Drop-off Date and Time - OCH Opening and Closing hours - PDA Pick-up and Drop-off Date and Time - PDT Pickup Date and Time - PKT Early and Late Pickup time - RTT Early and Late Return time
    businessSemantic: Array<string>
    
    // Indicate if the time is expressed in UTC or in local time mode ( Codes U and L ). In the last case, the time zone information can be provided in the composite C89K.
    timeMode: Array<string>
    
    // Convey the begin date/time of a period.
    beginDateTime: Array<StructuredDateTimeType_187544C>
    
    // Convey the end date/time of a period.
    endDateTime: Array<StructuredDateTimeType_187544C>
    
}

export interface StructuredPeriodInformationType_128769SAttributes {
    
}

// To specify consumer reference information.
export interface ConsumerReferenceInformationType2 {
    
    $attributes: ConsumerReferenceInformationType2Attributes
    
    // Customer references
    customerReferences: Array<ConsumerReferenceIdentificationType>
    
}

export interface ConsumerReferenceInformationType2Attributes {
    
}

// Identification of consumer references by type, company, number and reference to a traveller.
export interface ConsumerReferenceIdentificationType {
    
    $attributes: ConsumerReferenceIdentificationTypeAttributes
    
    // Kind of customer reference - 1 Customer IDentification number (ID) - CD Corporate Discount number (CD) - PC Promotional Code number (PC)
    referenceQualifier: string
    
    // Value corresponding to the customer reference qualifier (ID value, CD value, PC value).
    referenceNumber: Array<string>
    
}

export interface ConsumerReferenceIdentificationTypeAttributes {
    
}

// To specify tariff details relating to a service or product.
export interface TariffInformationTypeI_128793S {
    
    $attributes: TariffInformationTypeI_128793SAttributes
    
    // Used to convey all types of Tariff information.
    tariffInfo: Array<TariffInformationDetailsTypeI2>
    
    // additional Rate information.
    rateInformation: Array<RateInformationTypeI>
    
    // Allows to convey all additional charges information.
    chargeDetails: Array<AssociatedChargesInformationTypeI_187653C>
    
}

export interface TariffInformationTypeI_128793SAttributes {
    
}

// To specify the number of units required
export interface NumberOfUnitsType2 {
    
    $attributes: NumberOfUnitsType2Attributes
    
    // Information on the elements we want to count.
    quantityDetails: Array<NumberOfUnitDetailsType2>
    
}

export interface NumberOfUnitsType2Attributes {
    
}

// Identification of number of units and its purpose.
export interface NumberOfUnitDetailsType2 {
    
    $attributes: NumberOfUnitDetailsType2Attributes
    
    // Number of elements of type &#34;unitQualifier&#34;.
    numberOfUnit: Array<number>
    
    // Allows to indicate the kind of information we are counting: - DRI number of drivers
    unitQualifier: Array<string>
    
}

export interface NumberOfUnitDetailsType2Attributes {
    
}


export interface rateDetailsType {
    
    $attributes: rateDetailsTypeAttributes
    
    // This segment is used to convey Tax, Coverage, Coupon, Surcharge or Delivery and collection information (If period associated to the surcharge, tariff and period definition conveyed in group 6)
    taxSurchargeCoverageInfo: TariffInformationTypeI_128883S
    
    // Used to convey the following type of information: - Pickup Information - Advance Payment Information - Policy Information - Deposit Information - Advance Booking Information - Guarantee Information - One Way Information
    otherRules: Array<RuleInformationTypeU_128789S>
    
}

export interface rateDetailsTypeAttributes {
    
}

// To specify tariff details relating to a service or product.
export interface TariffInformationTypeI_128883S {
    
    $attributes: TariffInformationTypeI_128883SAttributes
    
    // tariff conversion indicator associated to the charge
    tariffInfo: Array<TariffInformationDetailsTypeI_187784C>
    
    // Tax, Surcharge, Coverage, Coupon details Repetition are used to carry: - General Info (estimated + name...) - Tariff per day / Max - Tariff per weekend / Max - Tariff per week / Max - Tariff per month / Max - Tariff per rental / Max - Excess amount - Liability amount
    chargeDetails: Array<AssociatedChargesInformationTypeI_187653C>
    
}

export interface TariffInformationTypeI_128883SAttributes {
    
}

// To identify the rates or tariff details.
export interface TariffInformationDetailsTypeI_187784C {
    
    $attributes: TariffInformationDetailsTypeI_187784CAttributes
    
    // CNV for converted Rate
    rateChangeIndicator: Array<string>
    
}

export interface TariffInformationDetailsTypeI_187784CAttributes {
    
}

// To specify rule information and rule status.
export interface RuleInformationTypeU_128789S {
    
    $attributes: RuleInformationTypeU_128789SAttributes
    
    // Detailed information on the rule.
    ruleDetails: Array<RuleDetailsTypeU_187647C>
    
    // Associated rule text.
    ruleText: Array<RuleTextTypeU>
    
}

export interface RuleInformationTypeU_128789SAttributes {
    
}

// To indicate the coded rule, a number and it&#39;s relation to the rule, a start day of service, a monetary amount associated to the rule, and additional information associated with the rule
export interface RuleDetailsTypeU_187647C {
    
    $attributes: RuleDetailsTypeU_187647CAttributes
    
    // Code to define the kind of rule. - ADB Advance Booking Information - ADP Advance Payment Information - DEP Deposit Information - GUA Guarantee Information - OWI One Way Information - PCK Pick-up Rules - POL Policy Information
    type: string
    
    // Quantity (if applicable)
    quantity: Array<number>
    
    // Unit if applicable - DAY for Day - HOR for Hour
    quantityUnit: Array<string>
    
    // Deposit Information: - BRE Before Rental - AFT After Booking Pickup Information - MAX Maximum Days Rental - MIN Minimum Days Rental One Way Information: - 009 for One Way Allowed - 005 for One Way not Allowed - 006 for Restricted One Way Allowed
    qualifier: Array<string>
    
    // Day of the week (Monday=1, Sunday=7) associated to the rule.
    daysOfOperation: Array<string>
    
    // Rule amount (if applicable)
    amount: Array<number>
    
    // Rule currency (if applicable)
    currency: Array<string>
    
}

export interface RuleDetailsTypeU_187647CAttributes {
    
}

// To specify the text rule
export interface RuleTextTypeU {
    
    $attributes: RuleTextTypeUAttributes
    
    // Code to define the kind of rule. - ADB Advance Booking Information - ADP Advance Payment Information - DEP Deposit Information - GUA Guarantee Information - OWI One Way Information - PCK Pick-up Rules - POL Policy Information
    textType: string
    
    // Rule text.
    freeText: Array<string>
    
}

export interface RuleTextTypeUAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType6 {
    
    $attributes: AttributeType6Attributes
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU_142127C>
    
}

export interface AttributeType6Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU_142127C {
    
    $attributes: AttributeInformationTypeU_142127CAttributes
    
    // Type of the authorization data. Some of the possible types are: 25: (AUT) Context (Credit Mutuel) 26: (ATN) Customer instruction (Barclays) 27: (ATN) Cryptogram computation method (Credit Mutuel) 28: (AUT) Modified securisation mode (Credit Mutuel) 29: (ATN) Electronic commerce transaction type (Credit Mutuel) E: (ATN) Result of the secured payment VADS (Credit Mutuel) MID: (AUT) Merchant ID
    attributeType: string
    
    // value of the data
    attributeDescription: Array<string>
    
}

export interface AttributeInformationTypeU_142127CAttributes {
    
}

// cruise Extended Content
export interface CruiseExtendedContentType {
    
    $attributes: CruiseExtendedContentTypeAttributes
    
    // Details of sailing ship for the sailing trip.
    sailingShipInformation: ShipIdentificationType
    
    // sailing informations: date and check in time
    sailingdetails: sailingdetailsType
    
    // Details of embarkation and disembarkation ports for the sailing trip. The codes sent by the cruise providers can be non-Iata codes.
    sailingPortsInformation: PlaceLocationIdentificationType_128824S
    
    // Details of the identifier of the sailing trip such as the cruisevoyage number
    cruiseNumber: Array<ItemReferencesAndVersionsType6>
    
    // conveys the details about the cabin
    cabinDescription: Array<CabinDescriptionType>
    
    // Booking Date.
    bookingDate: Array<StructuredDateTimeInformationType_128714S>
    
    // Group related to the ticket
    ticketdetailsgroup: Array<ticketdetailsgroupType>
    
}

export interface CruiseExtendedContentTypeAttributes {
    
}


export interface sailingdetailsType {
    
    $attributes: sailingdetailsTypeAttributes
    
    // Details of the departure and arrival dates of the sailing trip.
    sailingDateInformation: StructuredPeriodInformationType_128716S
    
    // Sailing Check In time
    checkintimeInfo: Array<StructuredDateTimeInformationType_128714S>
    
}

export interface sailingdetailsTypeAttributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType_128716S {
    
    $attributes: StructuredPeriodInformationType_128716SAttributes
    
    // Convey the departure date/time of the sailing
    beginDateTime: StructuredDateTimeType_187528C
    
    // Convey the arrival date/time of the sailing
    endDateTime: StructuredDateTimeType_187528C
    
}

export interface StructuredPeriodInformationType_128716SAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_128714S {
    
    $attributes: StructuredDateTimeInformationType_128714SAttributes
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType_187528C>
    
}

export interface StructuredDateTimeInformationType_128714SAttributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType_128824S {
    
    $attributes: PlaceLocationIdentificationType_128824SAttributes
    
    
    locationType: string
    
    
    firstLocationDetails: Array<RelatedLocationOneIdentificationType_187710C>
    
    
    secondLocationDetails: Array<RelatedLocationTwoIdentificationType>
    
}

export interface PlaceLocationIdentificationType_128824SAttributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationType_187710C {
    
    $attributes: RelatedLocationOneIdentificationType_187710CAttributes
    
    
    code: Array<string>
    
    
    name: Array<string>
    
}

export interface RelatedLocationOneIdentificationType_187710CAttributes {
    
}

// Identification of second related location by code or name.
export interface RelatedLocationTwoIdentificationType {
    
    $attributes: RelatedLocationTwoIdentificationTypeAttributes
    
    
    code: Array<string>
    
    
    name: Array<string>
    
}

export interface RelatedLocationTwoIdentificationTypeAttributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType6 {
    
    $attributes: ItemReferencesAndVersionsType6Attributes
    
    
    referenceType: Array<string>
    
    
    uniqueReference: Array<number>
    
}

export interface ItemReferencesAndVersionsType6Attributes {
    
}


export interface ticketdetailsgroupType {
    
    $attributes: ticketdetailsgroupTypeAttributes
    
    
    ticketNumber: TicketNumberType_128754S
    
    // Issuance Date of the ticket.
    ticketIssuancedate: Array<StructuredDateTimeInformationType_128714S>
    
}

export interface ticketdetailsgroupTypeAttributes {
    
}


export interface docsGoodiesMisInfosType {
    
    $attributes: docsGoodiesMisInfosTypeAttributes
    
    
    coverageDates: StructuredPeriodInformationType_128780S
    
    // Specify: - The visa title or - The document name or - The goodies type (cap, tee-shirt,...)
    docTitle: FreeTextInformationType_128778S
    
    // Specify location details - the destination for a visa - the address for restaurant, food and miscellaneous product types
    addressInformation: Array<AddressType_129098S>
    
    
    subscriptionDate: Array<StructuredDateTimeInformationType_128779S>
    
    // - Visa Type - Visa Purpose - Visa Process Type
    visaDetails: Array<FreeTextInformationType_129102S>
    
}

export interface docsGoodiesMisInfosTypeAttributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType_129102S {
    
    $attributes: FreeTextInformationType_129102SAttributes
    
    
    freeTextDetails: FreeTextDetailsType_187592C
    
    // Free text and message sequence numbers of the remarks.
    freeText: string
    
}

export interface FreeTextInformationType_129102SAttributes {
    
}

// To specify the segment marriages and connections
export interface SegmentGroupingInformationType {
    
    $attributes: SegmentGroupingInformationTypeAttributes
    
    // Type of segment grouping: Mxx for Marriage (see codeset) CNX for Connection
    groupingCode: string
    
    // transmit the list of segments participating in one marriage or segments that are connected.
    marriageDetail: Array<ReferencingDetailsType_2780C>
    
}

export interface SegmentGroupingInformationTypeAttributes {
    
}


export interface ReferencingDetailsType_2780C {
    
    $attributes: ReferencingDetailsType_2780CAttributes
    
    // Amadeus codes are used here. D for Dominant segment in a marriage N for Non dominant segment in a marriage
    marriageQualifier: Array<string>
    
    // Tatoo number of the segment
    tatooNum: string
    
}

export interface ReferencingDetailsType_2780CAttributes {
    
}


export interface dataElementsMasterType {
    
    $attributes: dataElementsMasterTypeAttributes
    
    // marker
    marker2: DummySegmentTypeI4
    
    // specify all others elements
    dataElementsIndiv: Array<dataElementsIndivType>
    
}

export interface dataElementsMasterTypeAttributes {
    
}


export interface dataElementsIndivType {
    
    $attributes: dataElementsIndivTypeAttributes
    
    // specify the PNR segments/elements references and action to apply
    elementManagementData: ElementManagementSegmentType2
    
    // specify the amadeus PNR individual security element
    pnrSecurity: Array<IndividualPnrSecurityInformationType>
    
    // Specify the amadeus accounting information
    accounting: Array<AccountingInformationElementType>
    
    // specify miscellaneous, confidential, quality control and invoice remarks
    miscellaneousRemarks: Array<MiscellaneousRemarksType_211S>
    
    // Extended Remark with Unicode content.
    extendedRemark: Array<ExtendedRemarkType>
    
    // specify special request or services information relating to a traveller
    serviceRequest: Array<SpecialRequirementsDetailsTypeI>
    
    // Seat info for pax
    seatPaxInfo: Array<seatPaxInfoType>
    
    // To Convey the Reason for Issuance Code (RFIC) and Reason For Issuance Sub code (RFISC)
    reasonForIssuanceCode: Array<PricingOrTicketingSubsequentType_195222S>
    
    // Rail Seat Preferences
    railSeatPreferences: Array<RailSeatPreferencesType>
    
    // Group specific for the UK rail seat elements.
    cityPair: Array<cityPairType>
    
    // Group specific for the rail seat elements.
    railSeatDetails: Array<railSeatDetailsType>
    
    // provide date and time details relative to flight movements
    dateAndTimeInformation: Array<DateAndTimeInformationTypeI2>
    
    // Details of SSR FQT content (Frequent Flyer Data)
    frequentFlyerInformationGroup: Array<FrequentFlyerInformationGroupType>
    
    // specify an amadeus PNR ticket element
    ticketElement: Array<TicketElementType>
    
    // reference records
    referencedRecord: Array<referencedRecordType>
    
    // option element
    optionElement: Array<OptionElementType>
    
    // provide free form or coded long text information
    otherDataFreetext: Array<LongFreeTextType>
    
    // specify the way data are mapped for the structured addresses
    structuredAddress: Array<StructuredAddressType>
    
    // To specify the monetary information
    monetaryInformation: Array<MonetaryInformationTypeI_1689S>
    
    // Specify error at element level
    elementErrorInformation: Array<ErrorGroupType_223552G>
    
    // Contains MCO-relative data
    mcoRecord: Array<mcoRecordType>
    
    // Group Total Price
    totalPrice: Array<TotalPriceType>
    
    // Indicators at element level
    elementsIndicators: Array<StatusTypeI_196879S>
    
    // Conveys Point of Sale information (last Updator) at element level. Used to convey the Timestsamp of Structured Remarks.
    eltPosDetails: Array<POSGroupType_150634G>
    
    // To specify access level of an entity (office) to the element.
    accessLevel: Array<ExtendedOwnershipSecurityDetailsType>
    
    // provide specific reference identification
    referenceForDataElement: Array<ReferenceInfoType6>
    
    // Carries a Form of Payment in structured way.
    structuredFop: Array<FOPRepresentationType2>
    
    // To convey details of the pack of service
    ssrPackageInformation: Array<SSRPackInformation>
    
}

export interface dataElementsIndivTypeAttributes {
    
}

// To specify the Amadeus PNR Individual Security element
export interface IndividualPnrSecurityInformationType {
    
    $attributes: IndividualPnrSecurityInformationTypeAttributes
    
    // Returned before End of transaction when retrieving a PNR security element
    security: Array<IndividualSecurityType_3194C>
    
    // Returned when retrieving a PNR
    securityInfo: Array<SecurityInformationType>
    
    // Code as in the display: G for Amadeus Global Core Office Identification I for IATA number P for Pseudo-Office Identification Default is G.
    indicator: Array<string>
    
}

export interface IndividualPnrSecurityInformationTypeAttributes {
    
}


export interface IndividualSecurityType_3194C {
    
    $attributes: IndividualSecurityType_3194CAttributes
    
    // Type of receiver G: Amadeus Global Core Office Id with possible wild card chars &#39;*&#39; to mask some part(s) of it// I:IATA nb or &#39;*&#39; for all, no wild card char //P:Pseudo-Office Id or &#39;*&#39; for all, no wild card char.
    identification: string
    
    // R for Read B for Both read and write N for None
    accessMode: string
    
}

export interface IndividualSecurityType_3194CAttributes {
    
}


export interface SecurityInformationType {
    
    $attributes: SecurityInformationTypeAttributes
    
    // Date of creation
    creationDate: string
    
    // Agent initials and duty code as in Originator informations (eg: AASU)
    agentCode: string
    
    // Office Id of creation/update
    officeId: Array<string>
    
}

export interface SecurityInformationTypeAttributes {
    
}

// To specify the Amadeus Accounting Information element (AI element).
export interface AccountingInformationElementType {
    
    $attributes: AccountingInformationElementTypeAttributes
    
    // One of these 4 data elements is mandatory , but non in particular
    account: Array<AccountingElementType>
    
    // Number of units qualifier
    accountNumberOfUnits: Array<string>
    
}

export interface AccountingInformationElementTypeAttributes {
    
}

// ACCOUNTING ELEMENT
export interface AccountingElementType {
    
    $attributes: AccountingElementTypeAttributes
    
    // Account number
    number: Array<string>
    
    // Cost Number
    costNumber: Array<string>
    
    // IATA company number
    companyNumber: Array<string>
    
    // Client Reference Number
    clientReference: Array<string>
    
    
    gSTTaxDetails: Array<string>
    
}

export interface AccountingElementTypeAttributes {
    
}

// To specify miscellaneous, confidential, quality control and invoice remarks.
export interface MiscellaneousRemarksType_211S {
    
    $attributes: MiscellaneousRemarksType_211SAttributes
    
    // Miscellaneous remqrks
    remarks: Array<MiscellaneousRemarkType_151C>
    
    // For confidential remark RC
    individualSecurity: Array<IndividualSecurityType>
    
}

export interface MiscellaneousRemarksType_211SAttributes {
    
}

// Miscellaneous remarks
export interface MiscellaneousRemarkType_151C {
    
    $attributes: MiscellaneousRemarkType_151CAttributes
    
    // RC for confidential remark RI for invoice remark RM for miscellaneous remark RQ for quality control remark
    type: string
    
    // This is the 3rd character (x) of the remark title RIx or RMx, or 2 letter code for RMxx, conditional for RM, not applicable for RC and RQ
    category: Array<string>
    
    // Free text and message sequence numbers of the remarks.
    freetext: Array<string>
    
    // Provider type (element RIA): 1 for Air provider 2 for Car provider (CCR) 3 for Hotel Provider (HHL) M for Miscellaneous
    providerType: Array<string>
    
}

export interface MiscellaneousRemarkType_151CAttributes {
    
}


export interface IndividualSecurityType {
    
    $attributes: IndividualSecurityTypeAttributes
    
    // office Id
    office: string
    
    // R for Read B for Both read and write N for None
    accessMode: string
    
    // - F for Family identifier
    officeIdentifier: Array<string>
    
}

export interface IndividualSecurityTypeAttributes {
    
}

// To convey a structured remark
export interface ExtendedRemarkType {
    
    $attributes: ExtendedRemarkTypeAttributes
    
    // To convey a Structured Remark with Unicode content.
    structuredRemark: Array<MiscellaneousRemarkType_210666C>
    
}

export interface ExtendedRemarkTypeAttributes {
    
}

// Miscellaneous remarks
export interface MiscellaneousRemarkType_210666C {
    
    $attributes: MiscellaneousRemarkType_210666CAttributes
    
    // RIF for Invoice Remark RII for Itineray and Invoice Remark RIR for Itinerary Remark RIZ for Mini-Itinerary Remark RM for General Remark
    type: string
    
    // Category of the remark
    category: Array<string>
    
    // Free text of the remark.
    freetext: string
    
    // Specify if the remark is not displayable to the user due to non supported Unicode characters (NAV: Not Available)
    status: Array<string>
    
    // To specify if the remark is in Unicode or ASCII.
    encoding: Array<string>
    
}

export interface MiscellaneousRemarkType_210666CAttributes {
    
}

// To specify special request or services information relating to a traveler
export interface SpecialRequirementsDetailsTypeI {
    
    $attributes: SpecialRequirementsDetailsTypeIAttributes
    
    // Special requirements type details
    ssr: SpecialRequirementsTypeDetailsTypeI
    
    // Group seat SSR cannot ask for specific seats but only smoking and/or non-smoking (see Group seat SSR). the maximum repetitions here are 9 seats (1 per passenger of non-group PNR).
    ssrb: Array<SpecialRequirementsDataDetailsTypeI>
    
}

export interface SpecialRequirementsDetailsTypeIAttributes {
    
}


export interface SpecialRequirementsTypeDetailsTypeI {
    
    $attributes: SpecialRequirementsTypeDetailsTypeIAttributes
    
    // ATA/IATA defined Special Service Requirement code. (refer to IATA AIRIMP documentation)
    type: Array<string>
    
    // Use defined code or an ATA/IATA defined action code (See AIRIMP 7.1.2/7.1.3/7.1.4/8.14.1 (as bilaterally agreed), SIPP 105.170.1.1).
    status: Array<string>
    
    // Number of services requested
    quantity: Array<number>
    
    // Airline code or YY
    companyId: Array<string>
    
    // Seat Special service request or Frequent Flyer SSR.
    indicator: Array<string>
    
    // 1. Seat SSR Processing indicator, coded PS for Partial segment indicator
    processingIndicator: Array<string>
    
    // Board point
    boardpoint: Array<string>
    
    // Off point
    offpoint: Array<string>
    
    // Free flow of the SSR that can be up to 127 chars long, therefore split on two 4440 (70 + 57)
    freeText: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsTypeIAttributes {
    
}


export interface SpecialRequirementsDataDetailsTypeI {
    
    $attributes: SpecialRequirementsDataDetailsTypeIAttributes
    
    // Seat number + row (seat SSR) Number of seats (Group seat SSR)
    data: Array<string>
    
    // Refers a Traveller / Reference number for association purpose
    crossRef: Array<string>
    
    // 3 occurrences may be used for in Amadeus seat SSR to indicate: 1. Smoking/no smoking 2. 1st area preference 3. 2nd area preference or passenger type
    seatType: Array<string>
    
}

export interface SpecialRequirementsDataDetailsTypeIAttributes {
    
}


export interface seatPaxInfoType {
    
    $attributes: seatPaxInfoTypeAttributes
    
    // details of the seat at pax level
    seatPaxDetails: SeatRequestParametersTypeI
    
    // seat indicator at pax level
    seatPaxIndicator: Array<StatusTypeI_196879S>
    
    // ref to pax tattoo
    crossRef: ReferenceInfoType_6074S
    
}

export interface seatPaxInfoTypeAttributes {
    
}

// To specify the selection criteria for a seat map request.
export interface SeatRequestParametersTypeI {
    
    $attributes: SeatRequestParametersTypeIAttributes
    
    // Details of the seat
    genericDetails: Array<GenericDetailsTypeI>
    
}

export interface SeatRequestParametersTypeIAttributes {
    
}

// To identify the type of seat requested.
export interface GenericDetailsTypeI {
    
    $attributes: GenericDetailsTypeIAttributes
    
    // Seat Characteristic
    seatCharacteristic: Array<string>
    
}

export interface GenericDetailsTypeIAttributes {
    
}

// To provide specific reference identification
export interface ReferenceInfoType_6074S {
    
    $attributes: ReferenceInfoType_6074SAttributes
    
    // This composite is used to transmit association information
    reference: Array<ReferencingDetailsType6>
    
}

export interface ReferenceInfoType_6074SAttributes {
    
}


export interface ReferencingDetailsType6 {
    
    $attributes: ReferencingDetailsType6Attributes
    
    // Amadeus codes are used here. PT for Passenger Tatoo // ST for Segment Tatoo //OT for Other element Tatoo //SS for Segment Tatoo+SubTatoo
    qualifier: string
    
    // reference number refers to a PNR segment/element that has this number in its related element reference segment in the same message (qualifier PT, SS, ST).
    number: string
    
}

export interface ReferencingDetailsType6Attributes {
    
}

// To convey additional information related to a ticket
export interface PricingOrTicketingSubsequentType_195222S {
    
    $attributes: PricingOrTicketingSubsequentType_195222SAttributes
    
    // Item Number
    itemNumber: Array<string>
    
    // RFIC Reason For Issuance Code
    specialCondition: Array<string>
    
    // RFISC Reason For Issuance Sub Code
    otherSpecialCondition: Array<string>
    
}

export interface PricingOrTicketingSubsequentType_195222SAttributes {
    
}

// Description of the rail advanced seat request
export interface RailSeatPreferencesType {
    
    $attributes: RailSeatPreferencesTypeAttributes
    
    // Selection of the type of seat request.
    seatRequestFunction: Array<string>
    
    // Seat smoking zone indicator.
    smokingIndicator: Array<string>
    
    // Seat class details.
    classDetails: Array<ClassDetailsType_52782C>
    
    // Seat configuration details.
    seatConfiguration: Array<RailSeatConfigurationType>
    
    
    sleeperDescription: Array<RailSleeperDescriptionType>
    
}

export interface RailSeatPreferencesTypeAttributes {
    
}


export interface ClassDetailsType_52782C {
    
    $attributes: ClassDetailsType_52782CAttributes
    
    // For the booking class code.
    code: Array<string>
    
    
    bookingClass: Array<string>
    
}

export interface ClassDetailsType_52782CAttributes {
    
}


export interface RailSeatConfigurationType {
    
    $attributes: RailSeatConfigurationTypeAttributes
    
    // Seat space.
    seatSpace: Array<string>
    
    // Coach type.
    coachType: Array<string>
    
    // Seat equipment.
    seatEquipment: Array<string>
    
    // Seat position.
    seatPosition: Array<string>
    
    // Seat direction.
    seatDirection: Array<string>
    
    // Seat deck.
    seatDeck: Array<string>
    
    // Special passenger information.
    specialPassengerType: Array<string>
    
}

export interface RailSeatConfigurationTypeAttributes {
    
}


export interface RailSleeperDescriptionType {
    
    $attributes: RailSleeperDescriptionTypeAttributes
    
    // Berth deck
    berthDeck: Array<string>
    
    // Cabin position
    cabinPosition: Array<string>
    
    // Cabin share type
    cabinShareType: Array<string>
    
    // Cabin occupancy
    cabinOccupancy: Array<string>
    
}

export interface RailSleeperDescriptionTypeAttributes {
    
}


export interface cityPairType {
    
    $attributes: cityPairTypeAttributes
    
    // Departure station location
    depLocation: PlaceLocationIdentificationTypeU_35293S
    
    // Arrival station location
    arrLocation: PlaceLocationIdentificationTypeU_35293S
    
}

export interface cityPairTypeAttributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationTypeU_35293S {
    
    $attributes: PlaceLocationIdentificationTypeU_35293SAttributes
    
    // Type of location
    locationType: string
    
    // Railway station location details.
    locationDescription: LocationIdentificationBatchTypeU_60738C
    
    // Railway station country details.
    firstLocationDetails: Array<RelatedLocationOneIdentificationTypeU_56455C>
    
}

export interface PlaceLocationIdentificationTypeU_35293SAttributes {
    
}

// Identification of a location by code or name
export interface LocationIdentificationBatchTypeU_60738C {
    
    $attributes: LocationIdentificationBatchTypeU_60738CAttributes
    
    // Railway station location code
    code: string
    
    // Code type
    qualifier: string
    
}

export interface LocationIdentificationBatchTypeU_60738CAttributes {
    
}


export interface railSeatDetailsType {
    
    $attributes: railSeatDetailsTypeAttributes
    
    // Used to convey specific seat details relative to Train for a specific request or the &#34;near-to&#34; seat details for a &#34;next-to&#34; request.
    railSeatReferenceInformation: RailSeatReferenceInformationType
    
    // Rail Seat Denomination
    railSeatDenomination: Array<FreeTextInformationType_29860S>
    
}

export interface railSeatDetailsTypeAttributes {
    
}

// To convey full reference for a rail seat.
export interface RailSeatReferenceInformationType {
    
    $attributes: RailSeatReferenceInformationTypeAttributes
    
    // Rail seat reference information.
    railSeatReferenceDetails: Array<SeatReferenceInformationType>
    
}

export interface RailSeatReferenceInformationTypeAttributes {
    
}


export interface SeatReferenceInformationType {
    
    $attributes: SeatReferenceInformationTypeAttributes
    
    // Coach number.
    coachNumber: Array<string>
    
    // Deck number.
    deckNumber: Array<string>
    
    // Seat number.
    seatNumber: Array<string>
    
}

export interface SeatReferenceInformationTypeAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_29860S {
    
    $attributes: FreeTextInformationType_29860SAttributes
    
    // Free text information.
    freeTextDetails: FreeTextDetailsType_187464C
    
    // Free text and message sequence numbers of the remarks.
    freeText: string
    
}

export interface FreeTextInformationType_29860SAttributes {
    
}

// To provide date and time details relative to flight movements
export interface DateAndTimeInformationTypeI2 {
    
    $attributes: DateAndTimeInformationTypeI2Attributes
    
    // Date and Time details for flight movements
    dateAndTime: DateAndTimeDetailsTypeI_171497C
    
}

export interface DateAndTimeInformationTypeI2Attributes {
    
}


export interface DateAndTimeDetailsTypeI_171497C {
    
    $attributes: DateAndTimeDetailsTypeI_171497CAttributes
    
    // Seat SSR : Date of change of gauge. Group seat SSR : Date of change of gauge. MCO element : Date.
    firstDate: string
    
    // MCO element : ARC carrier code code.
    movementType: Array<string>
    
    // MCO element : ARC city code.
    locationIdentification: Array<string>
    
}

export interface DateAndTimeDetailsTypeI_171497CAttributes {
    
}

// Content of SSR FQT elements
export interface FrequentFlyerInformationGroupType {
    
    $attributes: FrequentFlyerInformationGroupTypeAttributes
    
    // To specify frequent traveller information
    frequentTravellerInfo: FrequentTravellerIdentificationCodeType_74327S
    
    // Promotion code used to compute redemption/upgrade price in miles, when applicable
    discountInformation: Array<DiscountInformationType>
    
    // Original booking class
    bookingClassInformation: Array<ProductInformationType2>
    
}

export interface FrequentFlyerInformationGroupTypeAttributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType_74327S {
    
    $attributes: FrequentTravellerIdentificationCodeType_74327SAttributes
    
    // FREQUENT TRAVELER IDENTIFICATION
    frequentTraveler: FrequentTravellerIdentificationTypeI
    
    // PRIORITY DETAILS
    priorityDetails: Array<PriorityDetailsType>
    
    // Specify the redemption information
    redemptionInformation: Array<ProductAccountDetailsTypeI>
    
}

export interface FrequentTravellerIdentificationCodeType_74327SAttributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationTypeI {
    
    $attributes: FrequentTravellerIdentificationTypeIAttributes
    
    // Airline code
    company: string
    
    // Frequent traveler number
    membershipNumber: string
    
    // Provide airline customer value of the frequent traveller.
    customerValue: Array<number>
    
}

export interface FrequentTravellerIdentificationTypeIAttributes {
    
}

// To specify information such as priority code and tier details
export interface PriorityDetailsType {
    
    $attributes: PriorityDetailsTypeAttributes
    
    // 1 : airline 2 : alliance
    qualifier: string
    
    // Priority code
    priorityCode: Array<string>
    
    // Tier level
    tierLevel: Array<string>
    
    // Tier description
    tierDescription: Array<string>
    
}

export interface PriorityDetailsTypeAttributes {
    
}

// To specify frequent traveller card information.
export interface ProductAccountDetailsTypeI {
    
    $attributes: ProductAccountDetailsTypeIAttributes
    
    // the award code returned by loyalty system in booking time and send to loyalty system in ticketing time.
    category: Array<string>
    
    // Contains the old class of the segment before the upgrade.
    sequenceNumber: Array<string>
    
    // certificate number
    versionNumber: Array<string>
    
    // Fake Tier level received by TTY in.
    rateClass: Array<string>
    
    // stock control number
    approvalCode: Array<string>
    
}

export interface ProductAccountDetailsTypeIAttributes {
    
}

// To specify main information about the discount.
export interface DiscountInformationType {
    
    $attributes: DiscountInformationTypeAttributes
    
    // Contains the discount code
    discountDetails: DiscountInformationDetailsType
    
}

export interface DiscountInformationTypeAttributes {
    
}

// To specify the reason for, amount, the company granting, and a number related to the reason for a discount.
export interface DiscountInformationDetailsType {
    
    $attributes: DiscountInformationDetailsTypeAttributes
    
    // Promotion code used to define redemption/upgrade price in miles
    discountCode: string
    
}

export interface DiscountInformationDetailsTypeAttributes {
    
}

// To specify details related to routing status of a product.
export interface ProductInformationType2 {
    
    $attributes: ProductInformationType2Attributes
    
    // Booking class
    bookingClassDetails: ProductDetailsType2
    
}

export interface ProductInformationType2Attributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsType2 {
    
    $attributes: ProductDetailsType2Attributes
    
    // Booking class
    designator: string
    
    // Determine if the class is an original claas or an upgrade class
    option: Array<string>
    
}

export interface ProductDetailsType2Attributes {
    
}

// To specify an Amadeus PNR Ticket element
export interface TicketElementType {
    
    $attributes: TicketElementTypeAttributes
    
    // Passenger type PAX for Passenger INF for Infant not occupying a seat
    passengerType: Array<string>
    
    // Ticket information
    ticket: TicketInformationType
    
    // Print options (//print options after double slash)
    printOptions: Array<string>
    
}

export interface TicketElementTypeAttributes {
    
}


export interface TicketInformationType {
    
    $attributes: TicketInformationTypeAttributes
    
    // Ticketing type TL, OK, DO, IN, MA, TR, AT, PT, XL, ST, SS
    indicator: string
    
    // Ticketing date
    date: Array<string>
    
    // Ticketing time
    time: Array<string>
    
    // Office Id
    officeId: Array<string>
    
    // Free flow text
    freetext: Array<string>
    
    // Air France flag (e.g. //TELEPAYE for MINITEL)
    transactionFlag: Array<string>
    
    // Electronic ticketing flag + airline code (e.g. //ETLH) ET for Electronic ticket candidate
    electronicTicketFlag: Array<string>
    
    // Airline code
    airlineCode: Array<string>
    
    // Queue number
    queueNumber: Array<string>
    
    // Category number
    queueCategory: Array<string>
    
    // SITA addresses
    sitaAddress: Array<string>
    
}

export interface TicketInformationTypeAttributes {
    
}


export interface referencedRecordType {
    
    $attributes: referencedRecordTypeAttributes
    
    // specify a reference to a reservation
    referencedReservationInfo: ReservationControlInformationTypeI_196503S
    
    // specify the amadeus PNR record locator security information for different pnr elements .
    securityInformation: ReservationSecurityInformationType
    
}

export interface referencedRecordTypeAttributes {
    
}

// To specify the Amadeus PNR Record Locator Security Information for RR, SP elements and PNR Header or RP line
export interface ReservationSecurityInformationType {
    
    $attributes: ReservationSecurityInformationTypeAttributes
    
    // Responsibility Information
    responsibilityInformation: Array<ResponsibilityInformationType_6835C>
    
    // Ticket Information
    queueingInformation: Array<TicketInformationType_5120C>
    
    // 1. PNR Header: Pseudo City Code (not in the CRT display) AGY for Travel agency EHD for First level Help Desk DAP for Data processing center / Amadeus Help Desk Nice SEC for Security administrator WZ for AIS security administrator
    cityCode: Array<string>
    
    // Second RP line information
    secondRpInformation: Array<SecondRpLineInformationType>
    
}

export interface ReservationSecurityInformationTypeAttributes {
    
}


export interface ResponsibilityInformationType_6835C {
    
    $attributes: ResponsibilityInformationType_6835CAttributes
    
    // Type of PNR element: - RR for Associated Cross Reference Record - SP for Split Party - RP for PNR Header line
    typeOfPnrElement: string
    
    // 1. RR element: 2. SP element: 3. PNR Header:Agent initials and duty code (eg: AASU)
    agentId: Array<string>
    
    // 1. RR element office that copied the PNR 2. SP element: office that split the PNR 3. PNR Header: office responsibility or - OA office (City code + OA code) which is 5 chars long
    officeId: Array<string>
    
    // ATA/IATA reference number assigned to a travel agent
    iataCode: Array<number>
    
}

export interface ResponsibilityInformationType_6835CAttributes {
    
}


export interface SecondRpLineInformationType {
    
    $attributes: SecondRpLineInformationTypeAttributes
    
    // Creation office
    creationOfficeId: string
    
    // Creation agent sine/queue category (eg: 1234AA)
    agentSignature: Array<string>
    
    // PNR creation date
    creationDate: string
    
    // ATA/IATA number assigned to a travel agent
    creatorIataCode: Array<number>
    
    // PNR creation time
    creationTime: Array<string>
    
}

export interface SecondRpLineInformationTypeAttributes {
    
}

// To specify an Amadeus PNR Option element
export interface OptionElementType {
    
    $attributes: OptionElementTypeAttributes
    
    
    optionElementInfo: Array<OptionElementInformationType>
    
    // Individual Security for OPQ/OPX elements
    individualSecurity: Array<IndividualSecurityType>
    
}

export interface OptionElementTypeAttributes {
    
}

// Option element information
export interface OptionElementInformationType {
    
    $attributes: OptionElementInformationTypeAttributes
    
    // Option element office id
    mainOffice: string
    
    // Date
    date: Array<string>
    
    // Queue number
    queue: Array<number>
    
    // Category number
    category: Array<number>
    
    
    freetext: Array<string>
    
    // queuing or cancellation time
    time: Array<string>
    
}

export interface OptionElementInformationTypeAttributes {
    
}

// To specify the way data are mapped for structured AB, AM, AMH, AMD or AMM.
export interface StructuredAddressType {
    
    $attributes: StructuredAddressTypeAttributes
    
    // Information type, coded 2 for billing address P08 for general mailing address P19 for miscellaneous mailing address P24 for home mailing address P25 for delivery mailing address
    informationType: Array<string>
    
    // Structured Address
    address: Array<StructuredAddressInformationType>
    
}

export interface StructuredAddressTypeAttributes {
    
}


export interface StructuredAddressInformationType {
    
    $attributes: StructuredAddressInformationTypeAttributes
    
    // Following values are : CY for Company NA for Name L1 for Address line 1 L2 for Address line 2 PO for P.O. BOX ZP for Postal code CI for City ST for State CO for Country
    option: string
    
    // Alphanumeric information related to the level code. Each code has its own max length, an..50 corresponds to the max length among.
    optionText: string
    
}

export interface StructuredAddressInformationTypeAttributes {
    
}


export interface mcoRecordType {
    
    $attributes: mcoRecordTypeAttributes
    
    // specify that a MCO element is present in the PNR - this is a visual trigger of the MCO
    mcoType: MiscellaneousChargeOrderType
    
    // Contains the data relative to the MCO element itself
    mcoInformation: FreeTextInformationType_9865S
    
    // Contains a group of up to 20 Fare elements
    groupOfFareElements: Array<groupOfFareElementsType>
    
}

export interface mcoRecordTypeAttributes {
    
}

// Conveys a miscellaneous charge order&#39;s details
export interface MiscellaneousChargeOrderType {
    
    $attributes: MiscellaneousChargeOrderTypeAttributes
    
    // Type of service
    type: string
    
}

export interface MiscellaneousChargeOrderTypeAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_9865S {
    
    $attributes: FreeTextInformationType_9865SAttributes
    
    
    freeTextDetails: FreeTextDetailsType_1309C
    
    // Free text and message sequence numbers of the remarks.
    freeText: string
    
}

export interface FreeTextInformationType_9865SAttributes {
    
}


export interface FreeTextDetailsType_1309C {
    
    $attributes: FreeTextDetailsType_1309CAttributes
    
    // text subject qualifier
    textSubjectQualifier: string
    
    // information type
    informationType: Array<string>
    
    // status
    status: Array<string>
    
    // company id
    companyId: Array<string>
    
    // Language, coded
    language: Array<string>
    
    // source, coded
    source: string
    
    // encoding
    encoding: string
    
}

export interface FreeTextDetailsType_1309CAttributes {
    
}


export interface groupOfFareElementsType {
    
    $attributes: groupOfFareElementsTypeAttributes
    
    // Sequence Number for a Fare element
    sequenceNumber: SequenceDetailsTypeU4
    
    // Contains the Fare Element data
    fareElementData: FreeTextInformationType_9865S
    
}

export interface groupOfFareElementsTypeAttributes {
    
}

// Conveys TP (Total Price) information
export interface TotalPriceType {
    
    $attributes: TotalPriceTypeAttributes
    
    // The provider code.
    providerCode: CompanyInformationType_83550S
    
    // External Reference of the pricing
    externalRef: Array<ReferenceInformationTypeI_83551S>
    
    // method of delivery, such as e-mail, pick at station, id card, etc.
    methodOfDelivery: Array<methodOfDeliveryType>
    
    // This segment is used to convey the main price information (e.g. the net total price for non-cancelled bookings, the cancellation fee for cancelled bookings). The currency code stands not only for this segment, but for the whole group: all prices have the same currency.
    mainPrice: TariffInformationType2
    
    // The remaining price items are described here. In ferry business, there may be a maximum of 12 prices (+ main price and taxes). The currency code is not applicable because it is the same as in the mainPriceInformation segment.
    otherPrices: Array<TariffInformationType_83558S>
    
    // product associated to the price item
    productDescription: Array<productDescriptionType>
    
    // This segment conveys the tax amount information. The repetition factor equals the number of codesets for the qualifier, because each type of tax may occur once. The currency code is the same as in the mainPriceInformation segment.
    additionnalChargeInformation: Array<TaxesType1>
    
    // This segment is used to convey the booking fare information.
    rateCodeInformation: Array<RateTypesTypeU>
    
    // This segment will transport the optional booking confirmation dead-line information. Note: if this segment transports a valid confirmation dead-line, then the booking is considered as optional.
    optionalBooking: Array<StructuredDateTimeInformationType_83553S>
    
}

export interface TotalPriceTypeAttributes {
    
}

// This segment is used to convey the company information
export interface CompanyInformationType_83550S {
    
    $attributes: CompanyInformationType_83550SAttributes
    
    // This data element is used to qualify the company code, to identify the industry business it belongs.
    travelSector: string
    
    // This data element is used to convey the company code of a company
    companyCode: string
    
}

export interface CompanyInformationType_83550SAttributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInformationTypeI_83551S {
    
    $attributes: ReferenceInformationTypeI_83551SAttributes
    
    // Reference details
    referenceDetails: ReferencingDetailsTypeI_127514C
    
}

export interface ReferenceInformationTypeI_83551SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_127514C {
    
    $attributes: ReferencingDetailsTypeI_127514CAttributes
    
    
    type: string
    
    
    value: string
    
}

export interface ReferencingDetailsTypeI_127514CAttributes {
    
}


export interface methodOfDeliveryType {
    
    $attributes: methodOfDeliveryTypeAttributes
    
    // Identification and semantic attached to the reference description (E.g: a customer can have multiple roles: payer, traveller, insured...)
    elementManagement: ElementManagementSegmentType_83559S
    
    // Describes the details around this mode of delivery
    deliveryDetails: PackageDescriptionType
    
}

export interface methodOfDeliveryTypeAttributes {
    
}

// To specify the PNR segments/elements references and action to apply
export interface ElementManagementSegmentType_83559S {
    
    $attributes: ElementManagementSegmentType_83559SAttributes
    
    // Reference details
    reference: ReferencingDetailsType_127526C
    
}

export interface ElementManagementSegmentType_83559SAttributes {
    
}

// To define the characteristics of a Package (a set of Travel Products sold together).
export interface PackageDescriptionType {
    
    $attributes: PackageDescriptionTypeAttributes
    
    // Inclusive package type: I
    packageType: string
    
    // List of inclusive package
    packageDetails: Array<PackageIdentificationType>
    
}

export interface PackageDescriptionTypeAttributes {
    
}


export interface PackageIdentificationType {
    
    $attributes: PackageIdentificationTypeAttributes
    
    // Description of a package
    packageDesc: string
    
}

export interface PackageIdentificationTypeAttributes {
    
}

// To specify tariff details relating to a service or product.
export interface TariffInformationType2 {
    
    $attributes: TariffInformationType2Attributes
    
    // This composite gives details about the monetary amounts and their usage.
    priceDetails: TariffInformationDetailsTypeU2
    
}

export interface TariffInformationType2Attributes {
    
}

// To identify the rates or tariff details.
export interface TariffInformationDetailsTypeU2 {
    
    $attributes: TariffInformationDetailsTypeU2Attributes
    
    // Prive value. The value conveyed equals 100 times the original value in order to avoid transporting decimal placement information.
    priceAmount: number
    
    // Currency code.
    currencyCode: string
    
    // Gives the type of amount.
    priceQualifier: string
    
}

export interface TariffInformationDetailsTypeU2Attributes {
    
}

// To specify tariff details relating to a service or product.
export interface TariffInformationType_83558S {
    
    $attributes: TariffInformationType_83558SAttributes
    
    // This composite gives details about the monetary amounts and their usage.
    priceDetails: TariffInformationDetailsTypeU_127523C
    
}

export interface TariffInformationType_83558SAttributes {
    
}

// To identify the rates or tariff details.
export interface TariffInformationDetailsTypeU_127523C {
    
    $attributes: TariffInformationDetailsTypeU_127523CAttributes
    
    // Prive value. The value conveyed equals 100 times the original value in order to avoid transporting decimal placement information.
    priceAmount: number
    
    // Gives the type of amount.
    priceQualifier: string
    
}

export interface TariffInformationDetailsTypeU_127523CAttributes {
    
}


export interface productDescriptionType {
    
    $attributes: productDescriptionTypeAttributes
    
    // product associated to the price item
    product: ProductIdentificationTypeU
    
    // product restrictions and attributes: route code and description, crossLondon and advanced purchase.
    productRestriction: Array<TrafficRestrictionDetailsType>
    
}

export interface productDescriptionTypeAttributes {
    
}

// To identify a product.
export interface ProductIdentificationTypeU {
    
    $attributes: ProductIdentificationTypeUAttributes
    
    // product name and code to which prices data apply
    productData: ProductIdentificationDetailsTypeU2
    
}

export interface ProductIdentificationTypeUAttributes {
    
}

// Code, number or name to identify a specific product or service and a code to identify the level or type of product or service.
export interface ProductIdentificationDetailsTypeU2 {
    
    $attributes: ProductIdentificationDetailsTypeU2Attributes
    
    // Product code
    number: string
    
    // Product Name
    name: string
    
}

export interface ProductIdentificationDetailsTypeU2Attributes {
    
}

// To provide details which restrict traffic.
export interface TrafficRestrictionDetailsType {
    
    $attributes: TrafficRestrictionDetailsTypeAttributes
    
    // restriction details
    restrictionDetails: TrafficRestrictionDetailsTypeU
    
}

export interface TrafficRestrictionDetailsTypeAttributes {
    
}

// To provide details which restrict traffic
export interface TrafficRestrictionDetailsTypeU {
    
    $attributes: TrafficRestrictionDetailsTypeUAttributes
    
    // restriction code.
    code: Array<string>
    
    // restriction type
    type: string
    
    // traffic restriction description
    description: Array<string>
    
}

export interface TrafficRestrictionDetailsTypeUAttributes {
    
}

// To specify tax details.
export interface TaxesType1 {
    
    $attributes: TaxesType1Attributes
    
    // Tax details description.
    additionnalCharge: TaxDetailsTypeU
    
}

export interface TaxesType1Attributes {
    
}

// To specify the type of tax, the tax amount and the rate
export interface TaxDetailsTypeU {
    
    $attributes: TaxDetailsTypeUAttributes
    
    // Tax qualifier. For Ferry, only one tax qualifier applies: Port taxes.
    qualifier: string
    
    // Tax amount.
    amount: number
    
}

export interface TaxDetailsTypeUAttributes {
    
}

// To specify the types of rates.
export interface RateTypesTypeU {
    
    $attributes: RateTypesTypeUAttributes
    
    // This element holds the rate code that applies to the Ferry booking.
    rateCode: string
    
}

export interface RateTypesTypeUAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_83553S {
    
    $attributes: StructuredDateTimeInformationType_83553SAttributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - Impacted period - Departure date - Estimated arrival date and time
    businessSemantic: string
    
    // Convey date and/or time.
    dateTime: StructuredDateTimeType_127515C
    
}

export interface StructuredDateTimeInformationType_83553SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_127515C {
    
    $attributes: StructuredDateTimeType_127515CAttributes
    
    // Year number.
    year: string
    
    // Month number in the year ( begins to 1 )
    month: string
    
    // Day number in the month ( begins to 1 )
    day: string
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
}

export interface StructuredDateTimeType_127515CAttributes {
    
}

// to convey the pnr point of sell
export interface POSGroupType_150634G {
    
    $attributes: POSGroupType_150634GAttributes
    
    // This segment indicates the type of PNR Point of Sale.
    pointOfSaleInformationType: PointOfSaleInformationType
    
    // - Office ID owner of the SBR. - IATA Code - Agent type
    sbrUserIdentification: UserIdentificationType_132824S
    
    // - Corporate Code - City Code
    sbrSystemDetails: Array<SystemDetailsInfoType2>
    
    // Preferences - Country - Language - Currency
    sbrPreferences: Array<UserPreferencesType2>
    
    // Convey the LSS user identification or/and the agent sign
    agentId: Array<TicketAgentInfoType>
    
    
    pointOfSaleDate: Array<StructuredDateTimeInformationType_132821S>
    
}

export interface POSGroupType_150634GAttributes {
    
}

// To specify point of sale information by party identification or location identification.
export interface PointOfSaleInformationType {
    
    $attributes: PointOfSaleInformationTypeAttributes
    
    // The point of sale segment indicates the type of POS.
    pointOfSale: PartyIdentifierType
    
}

export interface PointOfSaleInformationTypeAttributes {
    
}

// To specify a party identification. To specify a party identification. To specify a party identification. To specify a party identification
export interface PartyIdentifierType {
    
    $attributes: PartyIdentifierTypeAttributes
    
    
    partyCodeQualifier: string
    
}

export interface PartyIdentifierTypeAttributes {
    
}

// This segment is used to identify a user.
export interface UserIdentificationType_132824S {
    
    $attributes: UserIdentificationType_132824SAttributes
    
    // Originator Identification Details
    originIdentification: OriginatorIdentificationDetailsType
    
    
    originatorTypeCode: Array<string>
    
}

export interface UserIdentificationType_132824SAttributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsType {
    
    $attributes: OriginatorIdentificationDetailsTypeAttributes
    
    // IATA Code
    originatorId: Array<string>
    
    // Office ID of the PNR owner.
    inHouseIdentification1: string
    
    // Amid of the owner of the SBR.
    inHouseIdentification2: Array<number>
    
}

export interface OriginatorIdentificationDetailsTypeAttributes {
    
}

// Used to specify a system
export interface SystemDetailsInfoType2 {
    
    $attributes: SystemDetailsInfoType2Attributes
    
    // LNIATA as sent in the AGT.
    workstationId: Array<string>
    
    
    deliveringSystem: Array<SystemDetailsTypeI_192689C>
    
}

export interface SystemDetailsInfoType2Attributes {
    
}

// To identify by code or name and location the system that originates or delivers the message for a third party.
export interface SystemDetailsTypeI_192689C {
    
    $attributes: SystemDetailsTypeI_192689CAttributes
    
    
    companyId: Array<string>
    
    
    locationId: Array<string>
    
}

export interface SystemDetailsTypeI_192689CAttributes {
    
}

// To convey travel agent and system identification.
export interface TicketAgentInfoType {
    
    $attributes: TicketAgentInfoTypeAttributes
    
    // Organisation
    companyIdNumber: Array<string>
    
    // Conveys the agent&#39;s details.
    internalIdDetails: Array<InternalIDDetailsType>
    
}

export interface TicketAgentInfoTypeAttributes {
    
}

// To specify an internal identification and the type of identification.
export interface InternalIDDetailsType {
    
    $attributes: InternalIDDetailsTypeAttributes
    
    // Conveys the agent sign or the LSS user id.
    inhouseId: string
    
    // type of the inHouse ID. SGN: Agent sign and duty code UID: LSS user id
    type: Array<string>
    
}

export interface InternalIDDetailsTypeAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_132821S {
    
    $attributes: StructuredDateTimeInformationType_132821SAttributes
    
    // Indicate if the time is expressed in UTC or in local time mode ( Codes ZT and LT ).
    timeMode: Array<string>
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType_187544C>
    
}

export interface StructuredDateTimeInformationType_132821SAttributes {
    
}

// To specify security between offices
export interface ExtendedOwnershipSecurityDetailsType {
    
    $attributes: ExtendedOwnershipSecurityDetailsTypeAttributes
    
    // This composite contains security data between entities or related to one entity.
    securityDetails: Array<ExtendedSecurityDetailsType>
    
}

export interface ExtendedOwnershipSecurityDetailsTypeAttributes {
    
}

// This composite contains details on agreement and access mode between two entities
export interface ExtendedSecurityDetailsType {
    
    $attributes: ExtendedSecurityDetailsTypeAttributes
    
    // Used to specify which kind of entities is specified. F - for family
    typeOfEntity: Array<string>
    
    // Used to specify the access mode regarding agreement and entities
    accessMode: string
    
    // Used to specify entity on which the detailed security applied. Mask is specified useing *, for instance, corporate 1A0 is specified as follows : ***1A0***.
    inhouseIdentification: string
    
}

export interface ExtendedSecurityDetailsTypeAttributes {
    
}

// convey FOP data
export interface FOPRepresentationType2 {
    
    $attributes: FOPRepresentationType2Attributes
    
    // will convey all the data related to the various codes used by the FOP package, billing, ETS...
    fopPNRDetails: TicketingFormOfPaymentType
    
    // Conveys the sequence number of the Form of Payment in the FP Line. It must be set to 1 if there is only 1 FOP in the FOP Old FOP are referenced with sequence number: 0
    fopSequenceNumber: Array<SequenceDetailsTypeU_94494S>
    
    // This segment conveys Form of Payment FreeText. Old FOP(s) are considered as one freeflow text even if there is more than one old form of payment. e.g.: FP O/CA+CCVI+/CH CA and CCVI are considered as freeflow text.
    fopFreeflow: Array<FreeTextInformationType_94495S>
    
    // will convey the switches and data associated to the FOP table
    pnrSupplementaryData: Array<PNRSupplementaryDataType>
    
    // will contain all the data related to the payment transaction
    paymentModule: Array<PaymentGroupType>
    
}

export interface FOPRepresentationType2Attributes {
    
}

// To convey details describing the form of payment and not found in the FOP segment
export interface TicketingFormOfPaymentType {
    
    $attributes: TicketingFormOfPaymentTypeAttributes
    
    // Form of payment details
    fopDetails: Array<FormOfPaymentInformationType>
    
}

export interface TicketingFormOfPaymentTypeAttributes {
    
}

// To convey informations related to the form of payment specific to reporting
export interface FormOfPaymentInformationType {
    
    $attributes: FormOfPaymentInformationTypeAttributes
    
    // Format key that identify the FOP within a FOP table. (CCVI, ...)
    fopCode: Array<string>
    
    // Name of the FOP map table used in order to validate the FP element.
    fopMapTable: Array<string>
    
    // This corresponds to the fop billing code (CASH CA / Credit CC). This is only used in case of a MS reporting code. (it corresponds to XX of @FPMSXX tag of TPF tables)
    fopBillingCode: Array<string>
    
    // Fop is a old / new fop.
    fopStatus: Array<string>
    
    // Corresponds to the EDIFACT code. This enables to identify the type of FOP that will be added in case of a structured EDIFACT (i.e. via PNRADD) addition of the FOP. (it corresponds to the @EDI tag of TPF tables) Here is an example: Customer is eager to add a structured cash FOP using an EDIFACT message. The fopEdiCode will be filled with CA which means cash. Then in the FOP table in charge of validating free flow and generating FOP free flow, the system will try to look for the FOP map having CA as fop EDI code. If we are in an Air France (AF) ATO/CTO: the system will get FP CA.... If we are in an Iberia (IB) ATO/CTO: the system will get FP CASH,.... If we are in an United Airline (UA) ATO/CTO: the system will get FP S.... ... (@EDI value)
    fopEdiCode: Array<string>
    
    // This corresponds to the fop code which is used on reporting side. (XX value of @FPXXxx)
    fopReportingCode: Array<string>
    
    // This is the FOP printed code (@PR value)
    fopPrintedCode: Array<string>
    
    // This is the FOP electronic ticketing code. This is used to classify any FOP from the FOP table and also to determine how the FOP should be transmitted to the airline concerned. Based on this, the absence of the switch would make the FOP disallowed for ETKT, for National System Ticketing Server Travel Agency locations and all Central Ticketing offices (@ET value)
    fopElecTicketingCode: Array<string>
    
}

export interface FormOfPaymentInformationTypeAttributes {
    
}

// To provide details relating to the sequence.
export interface SequenceDetailsTypeU_94494S {
    
    $attributes: SequenceDetailsTypeU_94494SAttributes
    
    // Sequence Information
    sequenceDetails: Array<SequenceInformationTypeU4>
    
}

export interface SequenceDetailsTypeU_94494SAttributes {
    
}

// Identification of a sequence and source for sequencing.
export interface SequenceInformationTypeU4 {
    
    $attributes: SequenceInformationTypeU4Attributes
    
    // Sequence number of the Mean Of Payment in the FOP line. There can be up to 3 New MOP and 3 Old MOP in a FOP line. Old Fops are considered as freeflow text.
    number: number
    
}

export interface SequenceInformationTypeU4Attributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_94495S {
    
    $attributes: FreeTextInformationType_94495SAttributes
    
    // will contain the FOP free flow text
    freeTextDetails: FreeTextDetailsType4
    
    // FOP freeflow
    freeText: string
    
}

export interface FreeTextInformationType_94495SAttributes {
    
}

// will convey the FOP table data
export interface PNRSupplementaryDataType {
    
    $attributes: PNRSupplementaryDataTypeAttributes
    
    // will convey the values of the FOP data and switch maps
    dataAndSwitchMap: AttributeType_94576S
    
}

export interface PNRSupplementaryDataTypeAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_94576S {
    
    $attributes: AttributeType_94576SAttributes
    
    // Type of information: - is this a switch? - is this a structured data?
    criteriaSetType: string
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU_142127C>
    
}

export interface AttributeType_94576SAttributes {
    
}

// Generic group to convey payment related data
export interface PaymentGroupType {
    
    $attributes: PaymentGroupTypeAttributes
    
    // Used to describe the element on which the action is performed : FP/FC/PAY and in which context integrated/non integrated
    groupUsage: CodedAttributeType_127282S
    
    // will convey all data necessary for the paiment and not dependant from the Mean Of Payment
    paymentData: Array<PaymentDataGroupType>
    
    // it will convey the Descriptive Billing Information: ONO, GWT, best Fare indicator....
    paymentSupplementaryData: Array<CodedAttributeType_94497S>
    
    // will convey all the specificities of the Mean of Payment
    mopInformation: Array<MeanOfPaymentDataType>
    
    // will allow the usage of FOP segment as trigger for MOPD and MOPS groups
    dummy: DummySegmentTypeI4
    
    // will convey the result of the payment and related to the detailed Mean Of Payment
    mopDetailedData: Array<DetailedPaymentDataType>
    
}

export interface PaymentGroupTypeAttributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_127282S {
    
    $attributes: CodedAttributeType_127282SAttributes
    
    // provides details for the Attribute
    attributeDetails: CodedAttributeInformationType_142108C
    
}

export interface CodedAttributeType_127282SAttributes {
    
}

// it will conveys all payment data
export interface PaymentDataGroupType {
    
    $attributes: PaymentDataGroupTypeAttributes
    
    // Contains merchant information (Entity selling a product/service for wich payment is requested: airline, insurance provider...).
    merchantInformation: CompanyInformationType_94554S
    
    // will convey all the monetary informations related to the payment : amount, currency, sub-amounts
    monetaryInformation: Array<MonetaryInformationType_94557S>
    
    // Conveys Payment Record ID (used by Payment Manager) to identify payment in a unique manner. May convey also a &#34;correlator Id&#34; used by the calling application to reconciliate its payment data. And also the &#34;transaction Id&#34; generated by the third party system (bank/PSP/PAyPAL...)
    paymentId: Array<ItemReferencesAndVersionsType_94556S>
    
    // It will describe the content of the extended payment : when it will start, the frequency and how many times it should occur
    extendedPaymentInfo: Array<FrequencyTypeU>
    
    // The segment conveys the date/time of the transaction
    transactionDateTime: Array<StructuredDateTimeInformationType_94559S>
    
    // Will show the duration of validity of the payment request, mesured from receipt by the issuer. The customer has to agree to the payment within this period. Expressed in seconds.
    expirationPeriod: Array<QuantityType_94558S>
    
    // Distribution Channel information
    distributionChannelInformation: Array<TerminalIdentificationDescriptionType>
    
    // will convey in free text the description of the purchase
    purchaseDescription: Array<FreeTextInformationType_79018S>
    
    // will convey all information needed to perform the checks requested by the banks/PSPs regarding the prevention of fraud.
    fraudScreeningData: Array<FraudScreeningGroupType>
    
    // Will be used to convey information dedicated to the Payment.
    paymentDataMap: Array<AttributeType_94553S>
    
}

export interface PaymentDataGroupTypeAttributes {
    
}

// This segment is used to convey the company information
export interface CompanyInformationType_94554S {
    
    $attributes: CompanyInformationType_94554SAttributes
    
    // This data element is used to convey the company code of a company Ex: AF for Air France MIL for millenium foundation
    companyCode: Array<string>
    
    // This data element is used to convey the numeric merchant ID.
    companyNumericCode: Array<string>
    
}

export interface CompanyInformationType_94554SAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_94557S {
    
    $attributes: MonetaryInformationType_94557SAttributes
    
    // Contains the currencies and the various amounts
    monetaryDetails: MonetaryInformationDetailsType3
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType3>
    
}

export interface MonetaryInformationType_94557SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType3 {
    
    $attributes: MonetaryInformationDetailsType3Attributes
    
    // Here is the list and the purpose of each amount today stored in the FP: I Transaction total amount Total amount authorized in authorization transaction IPC Transaction total amount in PNR currency Total amount authorized is also stored in PNR currency. Indeed, reversal must be done with the rate of exchange valid at time of authorization and therefore this avoids storing the rate of exchange and performing amount conversion at reversal time. IT Initial TST total amount Amount of TST multiplied by the number of passengers associated to the TST ITC Initial TST total amount in PNR currency IT amount in PNR currency for same reason as IPC amount R Total amount / Remaining amount Current authorized amount. Originally it is the total amount authorized and then this amount may decrease in case of total/partial reversal. T Initial Tst Individual amount Amount of TST TPC Initial Tst Individual amount in PNR currency Amount of TST in PNR currency for same reason as IPC amount AUT Authorized Amount Maybe different from the one given in input(for exple, if on input we have 2pax and the amount per pax. In case of bulk, we will authorize the sum of both amounts) It can also be used for: Total Fare Amount 712 or additional collection amount A
    typeQualifier: string
    
    // Value of the amount. This is conveyed as a &#39;string&#39; and therefore several strings can stand for the same amount (eg. 14 , 1400, 14.00... could potentially stand for 14.00 EUR). This means that sender/receiver of this message will need to come to an agreement concerning the way the amount is transferred in this segment.
    amount: number
    
    // IATA alphabetic currency code. Eg: USD,GBP,EUR...
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsType3Attributes {
    
}

// Payment record unique identifier
export interface ItemReferencesAndVersionsType_94556S {
    
    $attributes: ItemReferencesAndVersionsType_94556SAttributes
    
    // qualifies the type of the reference used. Here it will be: PRI Payment Record Id APP Application Correlator Id EXT Third party Record Id
    referenceType: string
    
    // The value of the payment record/correlator Id
    uniqueReference: string
    
}

export interface ItemReferencesAndVersionsType_94556SAttributes {
    
}

// To specify a frequency and the time window in which it applies.
export interface FrequencyTypeU {
    
    $attributes: FrequencyTypeUAttributes
    
    // extended payment characteristics
    extendedPaymentDetails: FrequencyDetailsTypeU
    
}

export interface FrequencyTypeUAttributes {
    
}

// To specify a frequency and the time window in which it applies
export interface FrequencyDetailsTypeU {
    
    $attributes: FrequencyDetailsTypeUAttributes
    
    // Indicates number of instalments for the payment
    instalmentsNumber: number
    
    // Indicates frequency of instalments for the payment D daily M monthly W weekly
    instalmentsFrequency: Array<string>
    
    // Indicates when first instalment should take place
    instalmentsStartDate: Array<string>
    
    // indicates extended payment start date format
    instalmentsDatrDateFormat: Array<string>
    
}

export interface FrequencyDetailsTypeUAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_94559S {
    
    $attributes: StructuredDateTimeInformationType_94559SAttributes
    
    // This data element is used to provide the semantic of the date information provided. Examples : - GMT Transaction date - Local Transaction date ... Default being L local date and time
    businessSemantic: Array<string>
    
    // Convey date and/or time.
    dateTime: StructuredDateTimeType_142180C
    
}

export interface StructuredDateTimeInformationType_94559SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_142180C {
    
    $attributes: StructuredDateTimeType_142180CAttributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: string
    
    // Day number in the month ( begins to 1 )
    day: string
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<number>
    
}

export interface StructuredDateTimeType_142180CAttributes {
    
}

// To specify a pertinent quantity.
export interface QuantityType_94558S {
    
    $attributes: QuantityType_94558SAttributes
    
    // To specify an appropriate quantity.
    quantityDetails: Array<QuantityDetailsTypeI_142179C>
    
}

export interface QuantityType_94558SAttributes {
    
}

// To specify information related to agent terminal
export interface TerminalIdentificationDescriptionType {
    
    $attributes: TerminalIdentificationDescriptionTypeAttributes
    
    // Identification of the transaction initiator.
    terminalID: Array<string>
    
    // The distribution channel.
    distributionChannel: DistributionChannelType
    
}

export interface TerminalIdentificationDescriptionTypeAttributes {
    
}

// Distribution channel
export interface DistributionChannelType {
    
    $attributes: DistributionChannelTypeAttributes
    
    // This field is used to indicate the type of channel used for authorization process: e-commerce (web / Internet), MOTO (Mail Order / telephone Order), Face to face ...) Example: 05 for API 0=MOTO (Mail Order / Telephone Order) 1=e-Commerce (Internet)
    distributionChannelField: number
    
    // Subgroup field.
    subGroup: Array<number>
    
    // Access Type.
    accessType: Array<number>
    
}

export interface DistributionChannelTypeAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_79018S {
    
    $attributes: FreeTextInformationType_79018SAttributes
    
    // Details about the free text.
    freeTextDetails: FreeTextDetailsType4
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType_79018SAttributes {
    
}

// will convey all data needed to prevent the fraud on the payment
export interface FraudScreeningGroupType {
    
    $attributes: FraudScreeningGroupTypeAttributes
    
    // This data element is used to indicate if risk management must be performed at authorization time: - Y means risk management data will be appended to author; - N means risk management data will not be appended;
    fraudScreening: StatusType_94568S
    
    // this segment contains the IP address used in RMM (risk management module or fraud screening)
    ipAdress: Array<DeviceControlDetailsType>
    
    // Merchant&#39;s website URL.
    merchantURL: Array<CommunicationContactType>
    
    // will convey either the phone or the email adress of the payer
    payerPhoneOrEmail: Array<PhoneAndEmailAddressType_94565S>
    
    // this segment contains the shopper session used in RMM (risk management module)
    shopperSession: Array<SystemDetailsInfoType_94569S>
    
    // conveys information about payer LastName (surName) and FirstName (givenName)
    payerName: Array<TravellerInformationType_94570S>
    
    // stores the payer date of birth
    payerDateOfBirth: Array<StructuredDateTimeInformationType_94567S>
    
    // Information about the billing address (can be extracted from the AB PNR element)
    billingAddress: Array<AddressType_94501S>
    
    // Used to store reference information on the payer for fraud screening purpose: social security number driving license information frequent flyer information
    formOfIdDetails: Array<ReferenceInfoType_94566S>
    
}

export interface FraudScreeningGroupTypeAttributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType_94568S {
    
    $attributes: StatusType_94568SAttributes
    
    // will we perform the fraud screening ?
    statusInformation: StatusDetailsType3
    
}

export interface StatusType_94568SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType3 {
    
    $attributes: StatusDetailsType3Attributes
    
    // FRA for fraud screening
    indicator: string
    
    // This data element is used to indicate if risk management must be performed at authorization time: - Y means risk management data will be appended to author; - N means risk management data will not be appended;
    action: string
    
}

export interface StatusDetailsType3Attributes {
    
}

// To specify control details for a device.
export interface DeviceControlDetailsType {
    
    $attributes: DeviceControlDetailsTypeAttributes
    
    // Stores the identification of the device.
    deviceIdentification: Array<IdentificationNumberTypeI>
    
}

export interface DeviceControlDetailsTypeAttributes {
    
}

// Goods item identification number.
export interface IdentificationNumberTypeI {
    
    $attributes: IdentificationNumberTypeIAttributes
    
    // will contain the IP adress of the shopper
    address: string
    
    // will contain IP for IP adress
    qualifier: string
    
}

export interface IdentificationNumberTypeIAttributes {
    
}

// Describes communication channel
export interface CommunicationContactType {
    
    $attributes: CommunicationContactTypeAttributes
    
    // Communication channel
    communication: CommunicationContactDetailsType
    
}

export interface CommunicationContactTypeAttributes {
    
}

// Communication number of a department or employee in a specified channel.
export interface CommunicationContactDetailsType {
    
    $attributes: CommunicationContactDetailsTypeAttributes
    
    // The communication address: an Url.
    urlAddress: string
    
    // will be AH for World Wide Web
    urlType: string
    
}

export interface CommunicationContactDetailsTypeAttributes {
    
}

// To specify a phone or email address
export interface PhoneAndEmailAddressType_94565S {
    
    $attributes: PhoneAndEmailAddressType_94565SAttributes
    
    // Phone or Email contact type
    phoneOrEmailType: string
    
    // Structured telephone number
    telephoneNumberDetails: Array<StructuredTelephoneNumberType2>
    
    // Email address
    emailAddress: Array<string>
    
}

export interface PhoneAndEmailAddressType_94565SAttributes {
    
}


export interface StructuredTelephoneNumberType2 {
    
    $attributes: StructuredTelephoneNumberType2Attributes
    
    // Telephone number
    telephoneNumber: Array<string>
    
}

export interface StructuredTelephoneNumberType2Attributes {
    
}

// Used to specify a system
export interface SystemDetailsInfoType_94569S {
    
    $attributes: SystemDetailsInfoType_94569SAttributes
    
    // LNIATA of the agent.
    workstationId: Array<string>
    
    // System delivering the shopper session ID
    deliveringSystem: Array<SystemDetailsTypeI2>
    
}

export interface SystemDetailsInfoType_94569SAttributes {
    
}

// To identify by code or name and location the system that originates or delivers the message for a third party.
export interface SystemDetailsTypeI2 {
    
    $attributes: SystemDetailsTypeI2Attributes
    
    // will convey the name of the company ex: OPODO
    companyId: Array<string>
    
}

export interface SystemDetailsTypeI2Attributes {
    
}

// To specify a traveler and personal details relating to the traveler
export interface TravellerInformationType_94570S {
    
    $attributes: TravellerInformationType_94570SAttributes
    
    // will convey the name of the credit card holder
    paxDetails: TravellerSurnameInformationType
    
    // will convey the CC holder first name
    otherPaxDetails: Array<TravellerDetailsType4>
    
}

export interface TravellerInformationType_94570SAttributes {
    
}


export interface TravellerSurnameInformationType {
    
    $attributes: TravellerSurnameInformationTypeAttributes
    
    // CC holder name details
    surname: string
    
}

export interface TravellerSurnameInformationTypeAttributes {
    
}

// To identify the given/first name and the title of a traveller and the traveller type.
export interface TravellerDetailsType4 {
    
    $attributes: TravellerDetailsType4Attributes
    
    // passenger first name
    givenName: Array<string>
    
}

export interface TravellerDetailsType4Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_94567S {
    
    $attributes: StructuredDateTimeInformationType_94567SAttributes
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType_142188C>
    
}

export interface StructuredDateTimeInformationType_94567SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_142188C {
    
    $attributes: StructuredDateTimeType_142188CAttributes
    
    // Year number.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: Array<number>
    
    // Day number in the month ( begins to 1 )
    day: Array<number>
    
}

export interface StructuredDateTimeType_142188CAttributes {
    
}

// To specify an address
export interface AddressType_94501S {
    
    $attributes: AddressType_94501SAttributes
    
    // will convey the adress text
    addressDetails: Array<AddressDetailsTypeU2>
    
    // City name.
    city: Array<string>
    
    // postal identification code.
    zipCode: Array<string>
    
    // Country code. ISO 3166 code for the country
    countryCode: Array<string>
    
}

export interface AddressType_94501SAttributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_94566S {
    
    $attributes: ReferenceInfoType_94566SAttributes
    
    // REFERENCING DETAILS
    referenceDetails: Array<ReferencingDetailsType_142187C>
    
}

export interface ReferenceInfoType_94566SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_142187C {
    
    $attributes: ReferencingDetailsType_142187CAttributes
    
    // FOID document type
    type: Array<string>
    
    // FOID document number
    value: Array<string>
    
}

export interface ReferencingDetailsType_142187CAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_94553S {
    
    $attributes: AttributeType_94553SAttributes
    
    // Type of Data Exple : SAL sale indicator EXT for extended payment PAY payment type
    criteriaSetType: string
    
    // Details for the message criteria (name, value).
    criteriaDetails: AttributeInformationTypeU_142127C
    
}

export interface AttributeType_94553SAttributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_94497S {
    
    $attributes: CodedAttributeType_94497SAttributes
    
    // Usage of this element will be the transport of the DescriptiveBilingInformation first value will be QF
    attributeFunction: string
    
    // provides details for the Attribute
    attributeDetails: Array<CodedAttributeInformationType6>
    
}

export interface CodedAttributeType_94497SAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType6 {
    
    $attributes: CodedAttributeInformationType6Attributes
    
    // provides the attribute Type
    attributeType: string
    
    // provides a description for the attribute
    attributeDescription: string
    
}

export interface CodedAttributeInformationType6Attributes {
    
}

// will convey Mean Of Payment specific data
export interface MeanOfPaymentDataType {
    
    $attributes: MeanOfPaymentDataTypeAttributes
    
    // This segment will convey the type of the FOP. Exple : CC credit card CA cash CH cheque SWI swipe card WA web account WB web bank(fund tranfer)
    fopInformation: FormOfPaymentType
    
    // will allow the usage of FOP segment as trigger for GASY and GINV groups
    dummy: DummySegmentTypeI4
    
    // will convey all credit card data needed for the payment
    creditCardData: Array<CreditCardDataGroupType2>
    
}

export interface MeanOfPaymentDataTypeAttributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentType {
    
    $attributes: FormOfPaymentTypeAttributes
    
    // Generic status(new/old) and type(cash, cheque, card...) of the MOP
    formOfPayment: FormOfPaymentDetailsType
    
}

export interface FormOfPaymentTypeAttributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsType {
    
    $attributes: FormOfPaymentDetailsTypeAttributes
    
    // Generic type of the Mean of Payment used : CC credit Card CA cash CH cheque WW web payment... INV invoice
    type: string
    
}

export interface FormOfPaymentDetailsTypeAttributes {
    
}

// will convey all credit card data needed for payment
export interface CreditCardDataGroupType2 {
    
    $attributes: CreditCardDataGroupType2Attributes
    
    // will convey all the data related to the credit card
    creditCardDetails: CreditCardDataType2
    
    // will convey both the CVV and the Credit card number Ids stored in the fortknox Database it could also be used to store identifiers from external Tokenization Service Provider (TSP).
    fortknoxIds: Array<ReferenceInformationTypeI_79009S>
    
    // Contains card holder&#39;s address information.
    cardHolderAddress: Array<AddressType_94501S>
    
}

export interface CreditCardDataGroupType2Attributes {
    
}

// specify credit card data for credit card authorization - USED IN CCVRQT
export interface CreditCardDataType2 {
    
    $attributes: CreditCardDataType2Attributes
    
    // Credit Card information
    ccInfo: Array<CreditCardInformationType2>
    
}

export interface CreditCardDataType2Attributes {
    
}

// credit card info
export interface CreditCardInformationType2 {
    
    $attributes: CreditCardInformationType2Attributes
    
    // Vendor code (VI,CA,AX.)
    vendorCode: Array<string>
    
    // may contain CC sub Types. eg: Maestro or Solo cards
    vendorCodeSubType: Array<string>
    
    // Card number Card number
    cardNumber: Array<string>
    
    // Conveys the security ID of the Credit Card (CVV,CVV2), 3-4 digits stored on the back of the card
    securityId: Array<string>
    
    // Expiry date : format MMYY
    expiryDate: Array<string>
    
    // This field indicates the date the Credit Card was issued. This data is present in case of (UK) maestro cards.
    startDate: Array<string>
    
    // This field indicates the date the Credit Card will not be valid anymore This data is present in case of (UK) maestro cards. May be different from the expiry date
    endDate: Array<string>
    
    // Conveys Credit card holder&#39;s name, as written on the card
    ccHolderName: Array<string>
    
    // will contain the code of the bank that issued the credit card
    issuingBankName: Array<string>
    
    // CC country of issuance details
    cardCountryOfIssuance: Array<string>
    
    // This is the Credit Card Issue number. This represents the number of time a card has been issued. 1 is for the first time then in case of card renewal or card loss this issue number will be increased Today this is applicable to maestro cards.
    issueNumber: Array<number>
    
    // Will convey the full name of the institution that issued he credit card
    issuingBankLongName: Array<string>
    
    // Stores the CC track 1 information (base64 encoded)
    track1: Array<string>
    
    // Stores the CC track 2 information (base64 encoded)
    track2: Array<string>
    
    // Stores the CC track 3 information (base64 encoded)
    track3: Array<string>
    
    // Stores the CC pin code information
    pinCode: Array<string>
    
    // All the tracks of a swipe credit card are contained here as one block.
    rawTrackData: Array<string>
    
}

export interface CreditCardInformationType2Attributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInformationTypeI_79009S {
    
    $attributes: ReferenceInformationTypeI_79009SAttributes
    
    // Details of the reference
    referenceDetails: ReferencingDetailsTypeI2
    
}

export interface ReferenceInformationTypeI_79009SAttributes {
    
}

// will convey the Detailed Payment Data associated to a MOP
export interface DetailedPaymentDataType {
    
    $attributes: DetailedPaymentDataTypeAttributes
    
    // This segment will convey the type of the FOP. Exple : CC credit card CA cash CH cheque WW web
    fopInformation: FormOfPaymentType
    
    // will allow the usage of FOP segment as trigger for GASS and GIVR groups
    dummy: DummySegmentTypeI4
    
    // This group will convey the detailed status of the credit card payment
    creditCardDetailedData: Array<CreditCardStatusGroupType>
    
}

export interface DetailedPaymentDataTypeAttributes {
    
}

// will convey all the detailed payment status related to credit Card
export interface CreditCardStatusGroupType {
    
    $attributes: CreditCardStatusGroupTypeAttributes
    
    // This segment is used to store specific data of links following ISO8583 standard.
    authorisationSupplementaryData: SpecificVisaLinkCreditCardInformationType
    
    // will convey the approval code/source
    approvalDetails: Array<GenericAuthorisationResultType>
    
    // This segment conveys date and time information. You can specify the time mode used (GMT, UTC or Local)and what for it refers. - Transmission date and time This contains the date and time the request was submitted to the link (Visa, Nedbank...field 7). GMT can be used. - Local transaction date and time Date and time when Amadeus builds the authorization message (local according to the point of sale)(Visa, Nedbank...field 12/13) - Transaction receipt date and time date and time when amadeus receives the authorization message.
    localDateTime: Array<StructuredDateTimeInformationType_94516S>
    
    // Transaction Information: - type of authorization message submit for the given FOP - bulk, superbulk, no bulk process - STAN number (identifying a pair of Credit Card authorization request/response).
    authorisationInformation: Array<TransactionInformationForTicketingType>
    
    // This group contains all data about the customer&#39;s browser.
    browserData: Array<browserDataType>
    
    // this group will convey all the 3DS related data
    tdsInformation: Array<ThreeDomainSecureGroupType>
    
    // This will allow the transmission of credit card data.
    cardSupplementaryData: Array<AttributeType_94514S>
    
    // will convey the various sub status that can be associated to a credit card payment CVV, AVS, AUT, ATN....
    transactionStatus: Array<ErrorGroupType1>
    
}

export interface CreditCardStatusGroupTypeAttributes {
    
}

// To specify specific credit card information returned by VISA link only
export interface SpecificVisaLinkCreditCardInformationType {
    
    $attributes: SpecificVisaLinkCreditCardInformationTypeAttributes
    
    // ISO8583 specific info
    msgRef: Array<MessageReferenceType>
    
    // Response identification
    respIdentification: Array<ResponseIdentificationType>
    
}

export interface SpecificVisaLinkCreditCardInformationTypeAttributes {
    
}

// INFORMATION SPECIFIC TO VISA
export interface MessageReferenceType {
    
    $attributes: MessageReferenceTypeAttributes
    
    // This number is used to identify and track ALL messages related to a given cardholder transaction (author, retry, reversal ...). It is usually composed of: - the date when the message was formatted followed by - the message number Field 37 Official definition of Retrieval Reference Number from ISO8583: Field 37 contains a number used with other key data elements to identify and track all messages related to a given cardholder transaction (referred to as a transaction set). It is usually assigned by the acquirer, but it may be assigned by a merchant or by an individual electronic terminal. V.I.P. will also generate the retrieval reference number for transactions it initiates. This field contains two parts. The first four digits are usually a yddd date (Julian date format). The date is defined to be the same day as the date in Field 7_Transmission Date and Time, of the original request. The last eight digits are a numeric transaction identification number. The value in field 37 can be based on the content of fields 7 and 11 in the original request or advice as shown in the recommendation below: . Positions 1_4: the yddd equivalent of the field 7 date . Positions 5_6: the hours from the time in field 7 . Positions 7_12: the value from field 11
    retrievalReferenceNumber: Array<string>
    
    // Authorization characteristics indicator Field 62.1 Possible values: A C E F K M S U V W R I P N T
    authorCharacteristicIndicator: Array<string>
    
    // Authorization response code Field 39
    authorResponseCode: Array<string>
    
    // Card Level Result (Product Identification value) Field 62.23
    cardLevelResult: Array<string>
    
    // Additional POS Information - Terminal Type Field 60.1 - Position 1 CAT (Cardholder-Activated Terminal indicator) or UAT (Unattended Acceptance Terminal)
    terminalType: Array<string>
    
}

export interface MessageReferenceTypeAttributes {
    
}

// RESPONSE IDENTIFICATION
export interface ResponseIdentificationType {
    
    $attributes: ResponseIdentificationTypeAttributes
    
    // Transaction identifier Field 62.2 Official definition: Visa-generated identifier that is unique for each original transaction. The transaction identifier (TID) is a key element that links original authorization requests to subsequent messages, such as reversals.
    transacIdentifier: Array<string>
    
    // Validation code Field 62.3
    validationCode: Array<string>
    
    // Gateway Transaction Identifier - Banknet reference number Field 62.17 - Position 8-13
    banknetRefNumber: Array<string>
    
    // Gateway Transaction Identifier - Banknet date in mmdd format Field 62.17 - Position 1-4
    banknetDate: Array<string>
    
}

export interface ResponseIdentificationTypeAttributes {
    
}

// will convey the approval data of the transaction
export interface GenericAuthorisationResultType {
    
    $attributes: GenericAuthorisationResultTypeAttributes
    
    // transaction authorization approval data
    approvalCodeData: AuthorizationApprovalDataType
    
}

export interface GenericAuthorisationResultTypeAttributes {
    
}

// will convey the approval data
export interface AuthorizationApprovalDataType {
    
    $attributes: AuthorizationApprovalDataTypeAttributes
    
    // will convey the value of the approval code of the payment authorisation
    approvalCode: string
    
    // Source of approval for the payment authorisation. A Automatically obtained by the system. M Manually entered by an agent. F: Credit card automatic approval code of a settlement authorization transaction B: Credit card manual approval code of a settlement transaction.
    sourceOfApproval: Array<string>
    
}

export interface AuthorizationApprovalDataTypeAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_94516S {
    
    $attributes: StructuredDateTimeInformationType_94516SAttributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - LT : date and time corresponding to Authorization message built - T : date and time corresponding to Authorization message sent - AR : date and time corresponding to Authorization message receipt
    businessSemantic: Array<string>
    
    // Indicate if the time is expressed in UTC or in local time mode ( Codes U and L ). In the last case, the time zone information can be provided in the composite C89K.
    timeMode: Array<string>
    
    // Convey date and/or time.
    dateTime: StructuredDateTimeType_142129C
    
    // Reference : IATA SSIM Appendix F If it is not provided, the time is considered to be given in UTC.
    timeZoneInfo: Array<TimeZoneIinformationType>
    
}

export interface StructuredDateTimeInformationType_94516SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_142129C {
    
    $attributes: StructuredDateTimeType_142129CAttributes
    
    // Year number.
    year: number
    
    // Month number in the year ( begins to 1 )
    month: number
    
    // Day number in the month ( begins to 1 )
    day: number
    
    // Hour between 0 and 23
    hour: Array<number>
    
    // Minutes between 0 and 59
    minutes: Array<number>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<number>
    
}

export interface StructuredDateTimeType_142129CAttributes {
    
}

// to specify details relating to the transaction
export interface TransactionInformationForTicketingType {
    
    $attributes: TransactionInformationForTicketingTypeAttributes
    
    // Authorisation transaction details
    transactionDetails: TransactionInformationsType
    
}

export interface TransactionInformationForTicketingTypeAttributes {
    
}

// To convey details related to the transaction
export interface TransactionInformationsType {
    
    $attributes: TransactionInformationsTypeAttributes
    
    // Authorization message type Eg 110: author according standard ISO8583 210: settlement according standard ISO858 ...
    code: Array<string>
    
    // Credit Card link used to perform authorization.
    type: Array<string>
    
    // Process indicator (bulkIndicator): - bulk - superbulk - no bulk.
    issueIndicator: Array<string>
    
    // This is a message number that uniquely identifies a cardholder transaction. According to the link this info can have various names: - STAN number(Systems Trace Audit Number) - ISO8583 (VISA,Nedbank, Credit Mutuel...) - Message number - APACS70 (Barclays,Euroline...) ... Official definition: This is a number assigned by the message initiator that uniquely identifies a cardholder transaction and all the message types (also known as system transactions) that it comprises, according to individual program rules. The trace number remains unchanged for all messages throughout the life of the transaction. For example, the same trace number is used in an authorization request and response, and in a subsequent reversal request and response, and in any advices of authorization or reversal.
    transmissionControlNumber: Array<string>
    
}

export interface TransactionInformationsTypeAttributes {
    
}


export interface browserDataType {
    
    $attributes: browserDataTypeAttributes
    
    // This segment contains data about the customer&#39;s browser : 0 PC (HTML) 1 Mobile Internet Device (WML)
    browserProperties: BrowserInformationType
    
    // Contains in freeflow format data about the customer&#39;s browser. - userAgent - acceptHeaders This entities are independantly optional.
    freeFlowBrowserData: Array<FreeTextInformationType_94526S>
    
}

export interface browserDataTypeAttributes {
    
}

// Conveys browser properties
export interface BrowserInformationType {
    
    $attributes: BrowserInformationTypeAttributes
    
    // Indicates the type of cardholder device.
    deviceCategory: number
    
}

export interface BrowserInformationTypeAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_94526S {
    
    $attributes: FreeTextInformationType_94526SAttributes
    
    // will contain the browser information
    freeTextDetails: FreeTextDetailsType_142141C
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType_94526SAttributes {
    
}


export interface FreeTextDetailsType_142141C {
    
    $attributes: FreeTextDetailsType_142141CAttributes
    
    // mutually defined ZZZ
    textSubjectQualifier: string
    
    // AH Browser Accept headers UA Browser User Agent
    informationType: string
    
    // Manual : M
    source: string
    
    // ZZZ mutually agreed
    encoding: string
    
}

export interface FreeTextDetailsType_142141CAttributes {
    
}

// will convey various 3DS data
export interface ThreeDomainSecureGroupType {
    
    $attributes: ThreeDomainSecureGroupTypeAttributes
    
    // This segment conveys a set of data resulting from the 3DS authentication process
    authenticationData: CreditCardSecurityType
    
    // Access Control Server&#39;s URL (up to 2048 characters).
    acsURL: Array<CommunicationContactType>
    
    // will convey the various messages/encrypted data used during the 3DS authentication processes
    tdsBlobData: Array<tdsBlobDataType>
    
}

export interface ThreeDomainSecureGroupTypeAttributes {
    
}

// Conveys data of the credit card authentication
export interface CreditCardSecurityType {
    
    $attributes: CreditCardSecurityTypeAttributes
    
    // Conveys all data of authentication process. Only used today for &#34;Verified by Visa&#34; process
    authenticationDataDetails: Array<AuthenticationDataType>
    
}

export interface CreditCardSecurityTypeAttributes {
    
}

// Conveys CC authentication data
export interface AuthenticationDataType {
    
    $attributes: AuthenticationDataTypeAttributes
    
    // VERes status (enrollment) Values : Y : authentication available N : cardholder not participating U : Unable to authenticate E : error message
    veres: Array<string>
    
    // PARes status (authentication). Values : Y : authentication successful N : authentication failed U : authentication could not be performed A : attempts processing performed
    pares: Array<string>
    
    // CC Directory Server performing the enrollment process: VISA, MasterCard
    creditCardCompany: string
    
    // To indicate whether the transaction was successful, different indicators for Visa/MasterCard. - ECI for VISA - UCAF collection indicator for Matercard
    authenticationIndicator: Array<string>
    
    // Indicates the algorithm used to generate the Cardholder Authentication Verification Value (CAAV = authentication code)
    caavAlgorithm: Array<number>
    
}

export interface AuthenticationDataTypeAttributes {
    
}


export interface tdsBlobDataType {
    
    $attributes: tdsBlobDataTypeAttributes
    
    // will identify the content of the BLB that follows
    tdsBlbIdentifier: ReferenceInfoType_94524S
    
    
    tdsBlbData: BinaryDataType
    
}

export interface tdsBlobDataTypeAttributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_94524S {
    
    $attributes: ReferenceInfoType_94524SAttributes
    
    // REFERENCING DETAILS
    referenceDetails: ReferencingDetailsType_142140C
    
}

export interface ReferenceInfoType_94524SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_142140C {
    
    $attributes: ReferencingDetailsType_142140CAttributes
    
    // will have the following values: XID Transaction identifier of the 3DS process CAAV authentication verification code for Visa AAV authentication verification code for MasterCard PAREQ authentication message PARES authentication response message
    value: string
    
}

export interface ReferencingDetailsType_142140CAttributes {
    
}

// to carry binary data within an Edifact segment
export interface BinaryDataType {
    
    $attributes: BinaryDataTypeAttributes
    
    // Length of the BLB
    dataLength: number
    
    // type of the data
    dataType: Array<string>
    
    // used to store binary data
    binaryData: string
    
}

export interface BinaryDataTypeAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_94514S {
    
    $attributes: AttributeType_94514SAttributes
    
    // Determines if the set of criteria corresponds to the message identification criteria or to normal criteria.
    criteriaSetType: Array<string>
    
    // List of attributes and status linked to credit card process. Most of them are link dependant.
    criteriaDetails: AttributeInformationTypeU_142127C
    
}

export interface AttributeType_94514SAttributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType1 {
    
    $attributes: ErrorGroupType1Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType_94519S
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType_94495S>
    
}

export interface ErrorGroupType1Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType_94519S {
    
    $attributes: ApplicationErrorInformationType_94519SAttributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType2
    
}

export interface ApplicationErrorInformationType_94519SAttributes {
    
}


export interface ApplicationErrorDetailType2 {
    
    $attributes: ApplicationErrorDetailType2Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: string
    
}

export interface ApplicationErrorDetailType2Attributes {
    
}


export interface SSRPackInformation {
    
    $attributes: SSRPackInformationAttributes
    
    // To count the element in the pack of service
    elementCounter: ItemNumberType_195219S
    
    // To specify: -The booking method of service like SSR, SVC, SK , SIT for Seat -If it is a Pack of service(&#39;PSR&#39;,&#39;PSV&#39;) or atomic service
    bookingMethod: ActionIdentificationType2
    
    // To convey RFIC and RFISC
    pricingInformation: Array<PricingOrTicketingSubsequentType_195222S>
    
    // To specify: -The Code of services{SSR, SK, SVC} -The Marketing airline code -The Seat characteristics
    serviceIdentifier: Array<SpecialRequirementsDetailsType_195223S>
    
    // To convey: -SSR table values -Pack content values -Other information
    tableValues: Array<AttributeType_195221S>
    
    // To convey a reference like tattoo for an element (SSR, SVC etc..) in the pack of service
    elementReference: Array<ReferenceInfoType_195220S>
    
}

export interface SSRPackInformationAttributes {
    
}

// To specify an item number
export interface ItemNumberType_195219S {
    
    $attributes: ItemNumberType_195219SAttributes
    
    
    itemNumberDetails: Array<ItemNumberIdentificationType_272901C>
    
}

export interface ItemNumberType_195219SAttributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType_272901C {
    
    $attributes: ItemNumberIdentificationType_272901CAttributes
    
    
    number: Array<string>
    
}

export interface ItemNumberIdentificationType_272901CAttributes {
    
}

// To provide details of action required or taken, the flights to which this action refers, and reasons for action taken.
export interface ActionIdentificationType2 {
    
    $attributes: ActionIdentificationType2Attributes
    
    // provides type of required action, coded.
    actionRequestCode: string
    
}

export interface ActionIdentificationType2Attributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsType_195223S {
    
    $attributes: SpecialRequirementsDetailsType_195223SAttributes
    
    // To specify the Service Requirement of the customer.
    specialRequirementsInfo: Array<SpecialRequirementsTypeDetailsType4>
    
    // To specify the Seat Number.
    seatDetails: Array<SpecialRequirementsDataDetailsType_272905C>
    
    // This composite enables user to convey quota-related information.
    quotaInfo: Array<QuotaRelatedInformationType>
    
}

export interface SpecialRequirementsDetailsType_195223SAttributes {
    
}

// SPECIAL REQUIREMENTS TYPE DETAILS
export interface SpecialRequirementsTypeDetailsType4 {
    
    $attributes: SpecialRequirementsTypeDetailsType4Attributes
    
    // To specify the Code of the SSR/OSI/SK.
    ssrCode: Array<string>
    
    // To specify the status of the Service: HK: Confirmed
    actionCode: Array<string>
    
    // To specify, for some SSR, the number of items involved (e.g.: for PETS, BIKE....)
    numberInParty: Array<number>
    
    // To specify to which carrier the service applies.
    airlineCode: Array<string>
    
    // To specify if the service is an: - SSR - OSI - SK
    serviceType: Array<string>
    
    // Processing indicator, coded
    otherServiceType: Array<string>
    
    // Place/location identification
    boardPoint: Array<string>
    
    // Place/location identification
    offPoint: Array<string>
    
    // Free Text attached to the Service.
    serviceFreeText: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsType4Attributes {
    
}

// Special requirements data details
export interface SpecialRequirementsDataDetailsType_272905C {
    
    $attributes: SpecialRequirementsDataDetailsType_272905CAttributes
    
    // Seat number
    seatNumber: Array<string>
    
    // Mesure unit qualifier
    measureUnitQualifier: Array<string>
    
    // Customer ranking value
    crossRef: Array<string>
    
    // SSR seat characteristic
    seatCharacteristics: Array<string>
    
}

export interface SpecialRequirementsDataDetailsType_272905CAttributes {
    
}

// Used to convey quota information.
export interface QuotaRelatedInformationType {
    
    $attributes: QuotaRelatedInformationTypeAttributes
    
    // Name of the quota counter, most of the time aligned with SSR type.
    quotaCounterName: Array<string>
    
    // Maximum quantity that can be reached.
    maxQuantity: Array<number>
    
    // Quantity that is available.
    availability: Array<number>
    
    // Status which should be replied when quota are reached, for example UN.
    quotaReachedReplyStatus: Array<string>
    
    // Number of the canned message to be sent.
    quotaReachedMsgNb: Array<string>
    
    // Number of the canned message to be sent.
    quotaNotReachedMsgNb: Array<string>
    
    // Count of the items already booked in the quota.
    counter: Array<number>
    
    // SSR quota type is used to identify the use case: SSR or SIT
    quotaType: Array<string>
    
    // Identify the grade
    quotaGrade: Array<string>
    
}

export interface QuotaRelatedInformationTypeAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_195221S {
    
    $attributes: AttributeType_195221SAttributes
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU_142127C>
    
    
    DummyNET: string
    
}

export interface AttributeType_195221SAttributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType_195220S {
    
    $attributes: ReferenceInfoType_195220SAttributes
    
    
    referenceDetails: Array<ReferencingDetailsType_272902C>
    
}

export interface ReferenceInfoType_195220SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_272902C {
    
    $attributes: ReferencingDetailsType_272902CAttributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
}

export interface ReferencingDetailsType_272902CAttributes {
    
}


export interface tstDataType {
    
    $attributes: tstDataTypeAttributes
    
    // TST general information
    tstGeneralInformation: TstGeneralInformationType
    
    // provide free form or coded long text information
    tstFreetext: Array<LongFreeTextType>
    
    // describe fare basis information
    fareBasisInfo: Array<FareBasisCodesLineType>
    
    // fare data
    fareData: Array<FareDataType>
    
    // selection details
    segmentAssociation: Array<SelectionDetailsTypeI_201122S>
    
    // provide specific reference identification
    referenceForTstData: Array<ReferenceInfoType6>
    
}

export interface tstDataTypeAttributes {
    
}

// Describe general information concerning TST
export interface TstGeneralInformationType {
    
    $attributes: TstGeneralInformationTypeAttributes
    
    // General information
    generalInformation: TstGeneralInformationDetailsType
    
}

export interface TstGeneralInformationTypeAttributes {
    
}


export interface TstGeneralInformationDetailsType {
    
    $attributes: TstGeneralInformationDetailsTypeAttributes
    
    // TST reference number
    tstReferenceNumber: string
    
    // TST creation date
    tstCreationDate: string
    
    // Sales indicator
    salesIndicator: Array<string>
    
}

export interface TstGeneralInformationDetailsTypeAttributes {
    
}

// Provide fare basis information from TST
export interface FareBasisCodesLineType {
    
    $attributes: FareBasisCodesLineTypeAttributes
    
    // Fare element information
    fareElement: Array<FareElementType>
    
}

export interface FareBasisCodesLineTypeAttributes {
    
}

// Fare element extracted from TST
export interface FareElementType {
    
    $attributes: FareElementTypeAttributes
    
    // Contains primary code of the fare element
    primaryCode: string
    
    // Connection indicator
    connection: Array<string>
    
    // Not valid before
    notValidBefore: Array<string>
    
    // Not valid after
    notValidAfter: Array<string>
    
    // Baggage allowance
    baggageAllowance: Array<string>
    
    // Fare basis
    fareBasis: Array<string>
    
    // Ticket designator
    ticketDesignator: Array<string>
    
}

export interface FareElementTypeAttributes {
    
}

// Describe fare data
export interface FareDataType {
    
    $attributes: FareDataTypeAttributes
    
    // Issue identifier
    issueIdentifier: string
    
    // To specify the type of monetary amount, the amount and the currency code
    monetaryInfo: Array<MonetaryInformationDetailsTypeI_8308C>
    
    // Tax fields
    taxFields: Array<TaxFieldsType>
    
}

export interface FareDataTypeAttributes {
    
}

// MONETARY INFORMATION
export interface MonetaryInformationDetailsTypeI_8308C {
    
    $attributes: MonetaryInformationDetailsTypeI_8308CAttributes
    
    // . F for Fare basis . E for Equivalent . T for Total
    qualifier: string
    
    // Amount
    amount: string
    
    // Eg: USD,FRF,EUR...
    currencyCode: string
    
}

export interface MonetaryInformationDetailsTypeI_8308CAttributes {
    
}


export interface TaxFieldsType {
    
    $attributes: TaxFieldsTypeAttributes
    
    // Tax indicator
    taxIndicator: string
    
    // Tax currency
    taxCurrency: string
    
    // Tax amount
    taxAmount: string
    
    // Tax country code
    taxCountryCode: string
    
    // Tax nature code
    taxNatureCode: Array<string>
    
}

export interface TaxFieldsTypeAttributes {
    
}


export interface pricingRecordGroupType {
    
    $attributes: pricingRecordGroupTypeAttributes
    
    
    pricingRecordData: PricingTicketingDetailsType2
    
    
    productPricingQuotationRecord: Array<PPQRdataType>
    
}

export interface pricingRecordGroupTypeAttributes {
    
}


export interface PricingTicketingDetailsType2 {
    
    $attributes: PricingTicketingDetailsType2Attributes
    
    
    idNumber: Array<string>
    
}

export interface PricingTicketingDetailsType2Attributes {
    
}

// PQR data
export interface PPQRdataType {
    
    $attributes: PPQRdataTypeAttributes
    
    // Tattoo/type of the pricing record
    pricingRecordId: ItemReferencesAndVersionsType_94069S
    
    // Tattoos of the passengers the document is linked to: - at max 1 for a TSM P - at max 99 for a TST
    passengerTattoos: Array<ReferenceInformationType_65487S>
    
    // This segment conveys the pax associated discount and PTC codes given in the pricing input.
    ptcDiscountCode: Array<DiscountInformationType_94068S>
    
    // Tattoos /types of fare elements linked to this Pricing record (FO, FM, FT, FP, FE, FD and FZ)
    fareIds: Array<ReferenceInformationTypeI_79009S>
    
    // Document functional (product + pricing) details
    documentDetailsGroup: documentDetailsGroupType
    
}

export interface PPQRdataTypeAttributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType_94069S {
    
    $attributes: ItemReferencesAndVersionsType_94069SAttributes
    
    
    referenceType: Array<string>
    
    
    uniqueReference: Array<string>
    
    
    actionCategory: Array<string>
    
    
    idSection: Array<UniqueIdDescriptionType_141680C>
    
}

export interface ItemReferencesAndVersionsType_94069SAttributes {
    
}


export interface UniqueIdDescriptionType_141680C {
    
    $attributes: UniqueIdDescriptionType_141680CAttributes
    
    // System responsible of the associated version number: - &#34;1ARES&#34; for CS RES system - &#34;DCSLON&#34; for current NGDCS in London -... New values may be added when needed
    systemQualifier: Array<string>
    
    // ID sequence number
    versionNumber: Array<string>
    
    // ID qualifier
    referenceQualifier: Array<string>
    
    // ID (DID, IID, SID number or any uniquer identifier)
    primeId: Array<string>
    
    // ID
    secondaryId: Array<string>
    
    // ID Status
    status: Array<string>
    
    // Value of the year ex:2003
    creationYear: Array<string>
    
    // Value of the month ex:7
    creationMonth: Array<string>
    
    // Value of the day in the month ex:30
    creationDay: Array<string>
    
    // The time of the creation ex:13
    creationHour: Array<string>
    
    // the minutes of the creation time
    creationMinutes: Array<string>
    
    // ID Description
    description: Array<string>
    
}

export interface UniqueIdDescriptionType_141680CAttributes {
    
}

// To specify main information about the discount.
export interface DiscountInformationType_94068S {
    
    $attributes: DiscountInformationType_94068SAttributes
    
    // Contains the mandatory discount code, the discount percentage and the number of passengers taking benefit of the discount or concerned by the &#34;paying for&#34; discount.
    discountDetails: DiscountInformationDetailsType_141679C
    
    // In case more than one discount code has been used.
    otherDiscountDetails: Array<DiscountInformationDetailsType_141679C>
    
}

export interface DiscountInformationType_94068SAttributes {
    
}

// To specify the reason for, amount, the company granting, and a number related to the reason for a discount.
export interface DiscountInformationDetailsType_141679C {
    
    $attributes: DiscountInformationDetailsType_141679CAttributes
    
    // Discount Code.
    discountCode: string
    
    // Discount percentage applicable to the ticket amount for the specified segment(s) and passenger(s).
    percentage: Array<number>
    
    // Status code of the percentage.
    beneficiary: Array<string>
    
    // Number of passengers concerned by the discount (i.e. passengers of a Group). This field can also contain the paying for 10 number.
    unitQuantity: Array<number>
    
}

export interface DiscountInformationDetailsType_141679CAttributes {
    
}


export interface documentDetailsGroupType {
    
    $attributes: documentDetailsGroupTypeAttributes
    
    // Document Total Fare (T)
    totalFare: MonetaryInformationTypeI_79012S
    
    // Document General Fares + Banker Rates: FOR TSM: - Base fare (B) - Net fare (H) - Equivalent amount (E) - Refundable amount (N) - Exchange value fare (X) - Banker Exchange Rate (D1) FOR TST: (General Fares) - Base fare + issue identifier (F/R/I/Y/U/W) - Net fare (H) - Equivalent amount (E) - Grand Total (GT) - Banker Selling Rate 1 (D1) - Banker Selling Rate 2 (D2)
    otherFares: Array<MonetaryInformationTypeI_79012S>
    
    // Details of taxes: - old/new/refundable (O/X/R) taxes indicator - currency - tax amount - iso tax code - nature tax code We can have 198 taxes maximum: - 99 old and new - + 99 refundable
    taxInformation: Array<TaxTypeI_79017S>
    
    // Pricing Record Issue Identifier: F First issue I First issue IT R Re-issue U First issue BT W Re-issue BT Y Re-issue IT
    issueIdentifier: PricingTicketingDetailsTypeI
    
    // originDestination
    originDestination: Array<OriginAndDestinationDetailsTypeI_79034S>
    
    // Reason For Issuance Codes (RFIC) and their descriptions: - electronic RFIC [qualifier=E] - Paper MCO RFIC [qualifier=P] - IATA RFIC (for eMCO) [qualifier=I]
    rfics: Array<AttributeType_79011S>
    
    // Manual indicator (MAN): 0: automatic 1: manual
    manualIndicator: StatusTypeI2
    
    // - Change flag (CHF) - TSM issued indicator (ISD) - Confidential indicator (CNF) - Miles override indicator (MOV) - Negotiated fare indicator (NEG) - Issuance Required (IRQ) Defined by a boolean: 1: Yes 0: False
    flags: Array<StatusTypeI2>
    
    // - EMD type (key=EMD): standalone (S) or associated (A) - FCPI (key = FCP) - FCRI (key = FCR) USED ONLY FOR TST: - FCMI (key = FCM) - Ticket Type (key=TT): paper (&#34;P&#34;) or electronic (&#34;E&#34;)
    generalIndicators: Array<CodedAttributeType_79010S>
    
    // FOR TSM: - Document remarks (RMK) - Reason for waiving (RFW) - Fare calc (FCL) FOR TST: - Payment restrictions (PAY) - Fare calc (FCL)
    fareCalcRemarks: Array<FreeTextInformationType4>
    
    // Office Information about the creator of the document: - agent sign - office name - office AMID (FOR TST ONLY)
    officeInformation: UserIdentificationType_79019S
    
    // Groups Tst Nego Information: - Nego Fares (Selling, Published, Net Negociated Fare) - Scheme Indicator (A, B, C, F, I, N) - Commission Details - Supplementary Commission Details - Tour Code - Commercial Agreement Reference - Value Code
    negoDetails: Array<NegoDataType>
    
    // Document creation date
    creationDate: StructuredDateTimeInformationType_79014S
    
    // Document Additional dates (FOR TST): - pricing date (PD) - last ticketing date (LT)
    otherDates: Array<StructuredDateTimeInformationType_79014S>
    
    // ATC Info from TQR record: - Total Additional Collection (TAC) - Base Fare Balance (BEQ) - New Base Fare (BNF) - Old Base Fare (IBA) - Penalty (DPI) - Grand Total (GT) - Residual Value (RES) - TST Additional Collection (TST) - Tax Balance (BTA) - Ticket Difference (BTO)
    atcFares: Array<ATCdataType>
    
    // OB fees Group
    airlineServiceFeeGroup: Array<OBfeesGroupType>
    
    // Coupons of the Document
    couponDetailsGroup: Array<couponDetailsGroupType>
    
    // Fare Component Details Group.
    fareComponentDetailsGroup: Array<FareComponentDetailsType>
    
}

export interface documentDetailsGroupTypeAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI_79012S {
    
    $attributes: MonetaryInformationTypeI_79012SAttributes
    
    // Details of the monetaty amount
    monetaryDetails: MonetaryInformationDetailsTypeI_121351C
    
}

export interface MonetaryInformationTypeI_79012SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI_121351C {
    
    $attributes: MonetaryInformationDetailsTypeI_121351CAttributes
    
    // Qualifier of the amount.
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency of the amount
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI_121351CAttributes {
    
}

// To specify details relating to tax(es).
export interface TaxTypeI_79017S {
    
    $attributes: TaxTypeI_79017SAttributes
    
    // Tax category to distinct old from new taxes
    taxCategory: string
    
    // Details of tax
    taxDetails: TaxDetailsTypeI2
    
}

export interface TaxTypeI_79017SAttributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsTypeI2 {
    
    $attributes: TaxDetailsTypeI2Attributes
    
    // Tax amount
    rate: string
    
    // ISO tax code
    countryCode: string
    
    // Currency code
    currencyCode: string
    
    // Nature tax code
    type: Array<string>
    
}

export interface TaxDetailsTypeI2Attributes {
    
}

// To convey pricing and date information related to a ticket.
export interface PricingTicketingDetailsTypeI {
    
    $attributes: PricingTicketingDetailsTypeIAttributes
    
    // international indicator
    priceTicketDetails: Array<PricingTicketingInformationTypeI>
    
    // Issue indicator (F, R , IT..)
    priceTariffType: string
    
}

export interface PricingTicketingDetailsTypeIAttributes {
    
}

// To specify indicators related to pricing and ticketing.
export interface PricingTicketingInformationTypeI {
    
    $attributes: PricingTicketingInformationTypeIAttributes
    
    // Issue Identifier
    indicators: string
    
}

export interface PricingTicketingInformationTypeIAttributes {
    
}

// To convey the origin and destination of a journey.
export interface OriginAndDestinationDetailsTypeI_79034S {
    
    $attributes: OriginAndDestinationDetailsTypeI_79034SAttributes
    
    
    origin: string
    
    
    destination: string
    
}

export interface OriginAndDestinationDetailsTypeI_79034SAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_79011S {
    
    $attributes: AttributeType_79011SAttributes
    
    // Qualifier identifying the RFIC
    criteriaSetType: string
    
    // Details for the message criteria (name, value).
    criteriaDetails: AttributeInformationTypeU4
    
}

export interface AttributeType_79011SAttributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU4 {
    
    $attributes: AttributeInformationTypeU4Attributes
    
    // The Reason For Issuance Code or Subcode (RFIC/RFISC).
    attributeType: string
    
    // The RFIC or RFISC description.
    attributeDescription: string
    
}

export interface AttributeInformationTypeU4Attributes {
    
}

// To identify a status and related information.
export interface StatusTypeI2 {
    
    $attributes: StatusTypeI2Attributes
    
    
    statusDetails: StatusDetailsTypeI2
    
}

export interface StatusTypeI2Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI2 {
    
    $attributes: StatusDetailsTypeI2Attributes
    
    // Qualifier of the indicator.
    indicator: string
    
    // Value of the indicator.
    action: string
    
}

export interface StatusDetailsTypeI2Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_79010S {
    
    $attributes: CodedAttributeType_79010SAttributes
    
    // provides details for the Attribute
    attributeDetails: CodedAttributeInformationType6
    
}

export interface CodedAttributeType_79010SAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType4 {
    
    $attributes: FreeTextInformationType4Attributes
    
    // Details about the free text.
    freeTextDetails: FreeTextDetailsType4
    
    
    freeText: Array<string>
    
}

export interface FreeTextInformationType4Attributes {
    
}

// This segment is used to identify a user.
export interface UserIdentificationType_79019S {
    
    $attributes: UserIdentificationType_79019SAttributes
    
    // Originator Identification Details - agent sign (C9900) - office name (C9902) - office AMID (C9902)(FOR TST ONLY)
    originIdentification: OriginatorIdentificationDetailsTypeI6
    
}

export interface UserIdentificationType_79019SAttributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI6 {
    
    $attributes: OriginatorIdentificationDetailsTypeI6Attributes
    
    // Agent Id
    originatorId: Array<number>
    
    // Office Id
    inHouseIdentification1: Array<string>
    
    // Office AMID
    inHouseIdentification2: Array<string>
    
}

export interface OriginatorIdentificationDetailsTypeI6Attributes {
    
}

// Map TST Nego information
export interface NegoDataType {
    
    $attributes: NegoDataTypeAttributes
    
    // Indicates the Incentive Scheme to apply for TST Nego. I : IT transaction B : BT transaction A : IT with NR flag C : BT with NR flag N : Net Remit transaction F : Flexible Commission
    schemeIndicator: PricingTicketingDetailsTypeI_79032S
    
    // TST Nego Selling Fare (S)
    negoSellingFare: MonetaryInformationTypeI_79012S
    
    // TST Nego other fares: - Published Fare (P) - Net Negociated Fare (N)
    negoOtherFares: Array<MonetaryInformationTypeI_79012S>
    
    // Commission Details 1rst Mandatory Composite: - Commission Value - Commission Indicator 2rst Conditional Composite: - Supplementary Commission Value - Supplementary Commission Indicator
    commissionInformation: Array<CommissionInformationTypeI>
    
    // Tour Information: - Tour Code
    tourInformation: Array<TourInformationTypeI_79029S>
    
    // negoReferences: - C.A.R (CAR): contains a Commercial Agreement Reference related to the scheme indicator - Net Remit Scheme (NRS): Value code used for Remit Scheme
    negoReferences: Array<ReferenceInformationTypeI_79033S>
    
}

export interface NegoDataTypeAttributes {
    
}

// To convey pricing and date information related to a ticket.
export interface PricingTicketingDetailsTypeI_79032S {
    
    $attributes: PricingTicketingDetailsTypeI_79032SAttributes
    
    // Scheme Indicator (for TST NEGO)
    priceTicketDetails: PricingTicketingInformationTypeI
    
}

export interface PricingTicketingDetailsTypeI_79032SAttributes {
    
}

// To specify information about a commission.
export interface CommissionInformationTypeI {
    
    $attributes: CommissionInformationTypeIAttributes
    
    // Commission Details: - Commission indicator - Commission Value
    commissionDetails: CommissionDetailsTypeI
    
    // Supplementary Commission Details: - Supplementary Commission indicator - Supplementary Commission Value
    otherComDetails: Array<CommissionDetailsTypeI>
    
}

export interface CommissionInformationTypeIAttributes {
    
}

// To specify the commission conditions, amount, currency, party paying and any related free text.
export interface CommissionDetailsTypeI {
    
    $attributes: CommissionDetailsTypeIAttributes
    
    // Commission Indicator: A Amount C Cap Amount D Cap Percentage N Percentage of the Net Fare P Percentage of the Published Fare S Percentage of the Selling Fare
    type: string
    
    // Commission Value
    amount: Array<number>
    
    // Commission Currency
    currency: Array<string>
    
}

export interface CommissionDetailsTypeIAttributes {
    
}

// To convey information concerning a tour.
export interface TourInformationTypeI_79029S {
    
    $attributes: TourInformationTypeI_79029SAttributes
    
    // TST Nego: Tour Code
    tourInformationDetails: TourDetailsTypeI
    
}

export interface TourInformationTypeI_79029SAttributes {
    
}

// To provide details of a tour by code, name of the tour provider, length, number of stops, room occupancy and number of rooms.
export interface TourDetailsTypeI {
    
    $attributes: TourDetailsTypeIAttributes
    
    // Tour Code
    tourCode: string
    
}

export interface TourDetailsTypeIAttributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInformationTypeI_79033S {
    
    $attributes: ReferenceInformationTypeI_79033SAttributes
    
    // COMMERCIAL AGREEMENT REFERENCE FOR TST NEGO
    referenceDetails: ReferencingDetailsTypeI_121390C
    
}

export interface ReferenceInformationTypeI_79033SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_121390C {
    
    $attributes: ReferencingDetailsTypeI_121390CAttributes
    
    // Identifier for Nego References segment: - CAR:Commercial Agreement Reference - NRS: Net Remit Scheme
    type: string
    
    // COMMERCIAL AGREEMENT REFERENCE
    value: string
    
}

export interface ReferencingDetailsTypeI_121390CAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_79014S {
    
    $attributes: StructuredDateTimeInformationType_79014SAttributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - Impacted period - Departure date - Estimated arrival date and time
    businessSemantic: string
    
    // Convey date and/or time.
    dateTime: StructuredDateTimeType4
    
}

export interface StructuredDateTimeInformationType_79014SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType4 {
    
    $attributes: StructuredDateTimeType4Attributes
    
    // Year number.
    year: string
    
    // Month number in the year ( begins to 1 )
    month: string
    
    // Day number in the month ( begins to 1 )
    day: string
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<number>
    
}

export interface StructuredDateTimeType4Attributes {
    
}

// Map TST ATC Data
export interface ATCdataType {
    
    $attributes: ATCdataTypeAttributes
    
    // ATC Total Additional Collection (TAC)
    atcTotalAdditionalCollection: MonetaryInformationTypeI_79012S
    
    // Other ATC Fares: - Base Fare Balance (BEQ) - New Base Fare (BNF) - Old Base Fare (IBA) - Penalty (DPI) - Grand Total (GT) - Residual Value (RES) - TST Additional Collection (TST) - Tax Balance (BTA) - Ticket Difference (BTO)
    otherAtcFares: Array<MonetaryInformationTypeI_79012S>
    
}

export interface ATCdataTypeAttributes {
    
}


export interface OBfeesGroupType {
    
    $attributes: OBfeesGroupTypeAttributes
    
    // carrierFee
    carrierFee: SpecificDataInformationTypeI_79035S
    
    // Fee commercial description.
    feeDescription: Array<CodedAttributeType_79464S>
    
    // amount of the fee VAT excluded or VAT included if no FCVC present
    feeAmount: MonetaryInformationTypeI_79012S
    
    // fee Tax (VAT may be part of the taxes)
    feeTax: Array<TaxTypeI_79038S>
    
    // vatPropertiesGroup
    vatPropertiesGroup: Array<VatPropertiesGroupType>
    
}

export interface OBfeesGroupTypeAttributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationTypeI_79035S {
    
    $attributes: SpecificDataInformationTypeI_79035SAttributes
    
    
    dataTypeInformation: DataTypeInformationTypeI
    
    
    dataInformation: Array<DataInformationTypeI>
    
}

export interface SpecificDataInformationTypeI_79035SAttributes {
    
}

// To identify specific data and a quantity related to the data.
export interface DataInformationTypeI {
    
    $attributes: DataInformationTypeIAttributes
    
    
    indicator: Array<string>
    
}

export interface DataInformationTypeIAttributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_79464S {
    
    $attributes: CodedAttributeType_79464SAttributes
    
    // provides details for the Attribute
    attributeDetails: Array<CodedAttributeInformationType_122050C>
    
}

export interface CodedAttributeType_79464SAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_122050C {
    
    $attributes: CodedAttributeInformationType_122050CAttributes
    
    // provides the attribute Type
    attributeType: string
    
    // provides a description for the attribute
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType_122050CAttributes {
    
}

// To specify details relating to tax(es).
export interface TaxTypeI_79038S {
    
    $attributes: TaxTypeI_79038SAttributes
    
    
    taxCategory: Array<string>
    
    
    taxDetails: Array<TaxDetailsTypeI_121395C>
    
}

export interface TaxTypeI_79038SAttributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsTypeI_121395C {
    
    $attributes: TaxDetailsTypeI_121395CAttributes
    
    
    rate: Array<string>
    
    
    countryCode: Array<string>
    
    
    currencyCode: Array<string>
    
    
    type: Array<string>
    
}

export interface TaxDetailsTypeI_121395CAttributes {
    
}

// contains the VAT computing info
export interface VatPropertiesGroupType {
    
    $attributes: VatPropertiesGroupTypeAttributes
    
    // Convey the VAT rate and the VAT amount
    vatRateAndAmount: MonetaryInformationTypeI_53012S
    
    // Contains the fare filing indicator : - VIN = VAT Inclusif - VEX = VAT Exclusif
    fareFiling: SelectionDetailsTypeI1
    
}

export interface VatPropertiesGroupTypeAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI_53012S {
    
    $attributes: MonetaryInformationTypeI_53012SAttributes
    
    // VAT amount
    monetaryDetails: MonetaryInformationDetailsTypeI_86190C
    
    // VAT rate
    otherMonetaryDetails: MonetaryInformationDetailsTypeI_86190C
    
}

export interface MonetaryInformationTypeI_53012SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI_86190C {
    
    $attributes: MonetaryInformationDetailsTypeI_86190CAttributes
    
    // Precision concerning the amount: - VA : VAT Amount - VR : VAT Rate
    typeQualifier: string
    
    // Convey the VAT rate or amount
    amount: string
    
}

export interface MonetaryInformationDetailsTypeI_86190CAttributes {
    
}


export interface couponDetailsGroupType {
    
    $attributes: couponDetailsGroupTypeAttributes
    
    // Tattoo + type of the product identifying the coupon.
    productId: ReferenceInformationTypeI_79009S
    
    // The Reason For Issuance Subcode (RFISC) and its description
    rfisc: Array<AttributeType_79011S>
    
    // Fee owner
    feeOwner: Array<CompanyInformationType_79020S>
    
    // Value of the coupon
    couponValue: Array<MonetaryInformationTypeI_79012S>
    
    // In Connection With document/coupon number
    icw: Array<InConnectionWithType>
    
    // - Consumed at issuance indicator (CMI) - Non-refundable indicator (NRF) - Non-exchangeable indicator (NEX) - Non-interlineable indicator (NIL)
    couponFlags: Array<StatusTypeI2>
    
    // - Present To (PRT) - Present At (PRA) - Service remarks (RMK)
    presentToAtAndRemarks: Array<FreeTextInformationType_79018S>
    
    // Flight Connection Type: - X: Connection Point - O: ARUNK
    flightConnectionType: Array<TravelProductInformationTypeI_79024S>
    
    // Fare basis details
    fareQualifier: Array<PricingOrTicketingSubsequentType_79023S>
    
    // Validity dates: - Not Valid After (A) - Not Valid Before (B)
    validityDates: Array<DateAndTimeInformationTypeI_79021S>
    
    // Excess Baggage data
    baggageInformation: Array<ExcessBaggageTypeI>
    
    
    couponTaxDetailsGroup: Array<couponTaxDetailsGroupType>
    
}

export interface couponDetailsGroupTypeAttributes {
    
}

// This segment is used to convey the company information
export interface CompanyInformationType_79020S {
    
    $attributes: CompanyInformationType_79020SAttributes
    
    // Fee Owner
    companyCode: string
    
}

export interface CompanyInformationType_79020SAttributes {
    
}

// In Connection With
export interface InConnectionWithType {
    
    $attributes: InConnectionWithTypeAttributes
    
    // Carrier field of ICW
    carrier: TransportIdentifierType_79027S
    
    // Mandatory doc serial number and optional ticket type for ICW
    identification: TicketNumberTypeI_79026S
    
    // List of coupons for ICW
    couponList: Array<CouponInformationTypeI>
    
}

export interface InConnectionWithTypeAttributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType_79027S {
    
    $attributes: TransportIdentifierType_79027SAttributes
    
    // Carrier identification
    companyIdentification: CompanyIdentificationTypeI6
    
}

export interface TransportIdentifierType_79027SAttributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI6 {
    
    $attributes: CompanyIdentificationTypeI6Attributes
    
    // Carrier code: the numerical one
    marketingCompany: string
    
}

export interface CompanyIdentificationTypeI6Attributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberTypeI_79026S {
    
    $attributes: TicketNumberTypeI_79026SAttributes
    
    // Document details
    documentDetails: TicketNumberDetailsTypeI2
    
}

export interface TicketNumberTypeI_79026SAttributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsTypeI2 {
    
    $attributes: TicketNumberDetailsTypeI2Attributes
    
    // Document serial number
    number: string
    
    // Coupon type: E - electronic coupon P - paper coupon
    type: Array<string>
    
}

export interface TicketNumberDetailsTypeI2Attributes {
    
}

// To identify data specific to a value (flight) coupon.
export interface CouponInformationTypeI {
    
    $attributes: CouponInformationTypeIAttributes
    
    // Coupon details
    couponDetails: CouponInformationDetailsTypeI
    
}

export interface CouponInformationTypeIAttributes {
    
}

// To specify the coupon number, status, value, and other related information.
export interface CouponInformationDetailsTypeI {
    
    $attributes: CouponInformationDetailsTypeIAttributes
    
    // Coupon number
    cpnNumber: string
    
}

export interface CouponInformationDetailsTypeIAttributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI_79024S {
    
    $attributes: TravelProductInformationTypeI_79024SAttributes
    
    // TST Flight Connection Type: - X - O
    flightTypeDetails: ProductTypeDetailsTypeI4
    
}

export interface TravelProductInformationTypeI_79024SAttributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsTypeI4 {
    
    $attributes: ProductTypeDetailsTypeI4Attributes
    
    // TST Connection Type: - X - O
    flightIndicator: string
    
}

export interface ProductTypeDetailsTypeI4Attributes {
    
}

// To convey additional information related to a ticket
export interface PricingOrTicketingSubsequentType_79023S {
    
    $attributes: PricingOrTicketingSubsequentType_79023SAttributes
    
    // RATE OR TARIFF CLASS INFORMATION
    fareBasisDetails: Array<RateTariffClassInformationTypeI>
    
}

export interface PricingOrTicketingSubsequentType_79023SAttributes {
    
}

// To identify the current and/or original fare basis code.
export interface RateTariffClassInformationTypeI {
    
    $attributes: RateTariffClassInformationTypeIAttributes
    
    // Ticket designator of the fare basis
    rateTariffClass: Array<string>
    
    // Primary code of the fare basis. This is not a codeset but a free flow text field.
    rateTariffIndicator: Array<string>
    
    // Fare basis code of the fare basis. This is not a codeset but a free flow text field.
    otherRateTariffClass: Array<string>
    
    // pricedPTC Discount code
    otherRateTariffIndicator: Array<string>
    
}

export interface RateTariffClassInformationTypeIAttributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeInformationTypeI_79021S {
    
    $attributes: DateAndTimeInformationTypeI_79021SAttributes
    
    // NVA, NVB
    dateAndTimeDetails: DateAndTimeDetailsTypeI2
    
}

export interface DateAndTimeInformationTypeI_79021SAttributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeDetailsTypeI2 {
    
    $attributes: DateAndTimeDetailsTypeI2Attributes
    
    // NVA or NVB
    qualifier: string
    
    // NVA or NVB
    date: string
    
    // NVA or NVB
    time: Array<number>
    
}

export interface DateAndTimeDetailsTypeI2Attributes {
    
}

// To specify information concerning excess baggage charges and the associated baggage details.
export interface ExcessBaggageTypeI {
    
    $attributes: ExcessBaggageTypeIAttributes
    
    // Excess baggage charge
    excessBaggageDetails: Array<ExcessBaggageDetailsTypeI>
    
    // Excess baggage quantity
    baggageDetails: Array<BaggageDetailsTypeI>
    
}

export interface ExcessBaggageTypeIAttributes {
    
}

// To specify details concerning a traveller&#39;s excess baggage.
export interface ExcessBaggageDetailsTypeI {
    
    $attributes: ExcessBaggageDetailsTypeIAttributes
    
    // Currency
    currency: Array<string>
    
    // Amount
    amount: Array<number>
    
}

export interface ExcessBaggageDetailsTypeIAttributes {
    
}

// To specify the number and weight of baggage.
export interface BaggageDetailsTypeI {
    
    $attributes: BaggageDetailsTypeIAttributes
    
    // Total number of units.
    freeAllowance: Array<number>
    
    // Code to qualify unit as pieces or seats.
    quantityCode: Array<string>
    
    // Code to qualify unit as pounds or kilos.
    unitQualifier: Array<string>
    
}

export interface BaggageDetailsTypeIAttributes {
    
}


export interface couponTaxDetailsGroupType {
    
    $attributes: couponTaxDetailsGroupTypeAttributes
    
    // Trigger for tax functionality
    taxTriggerInfo: DutyTaxFeeDetailsType
    
    
    taxDetails: Array<TaxType5>
    
    
    monetaryInfo: Array<MonetaryInformationType_193831S>
    
    // Location info
    locationInfo: Array<PlaceLocationIdentificationType>
    
}

export interface couponTaxDetailsGroupTypeAttributes {
    
}

// To specify relevant duty/tax/fee information.
export interface DutyTaxFeeDetailsType {
    
    $attributes: DutyTaxFeeDetailsTypeAttributes
    
    // Tax qualifier
    taxQualifier: string
    
}

export interface DutyTaxFeeDetailsTypeAttributes {
    
}

// To specify details relating to tax(es).
export interface TaxType5 {
    
    $attributes: TaxType5Attributes
    
    
    taxCategory: Array<string>
    
    
    taxDetails: Array<TaxDetailsType2>
    
}

export interface TaxType5Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsType2 {
    
    $attributes: TaxDetailsType2Attributes
    
    
    countryCode: Array<string>
    
    
    type: Array<string>
    
}

export interface TaxDetailsType2Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_193831S {
    
    $attributes: MonetaryInformationType_193831SAttributes
    
    
    monetaryDetails: MonetaryInformationDetailsType_270802C
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType_270802C>
    
}

export interface MonetaryInformationType_193831SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_270802C {
    
    $attributes: MonetaryInformationDetailsType_270802CAttributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType_270802CAttributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType {
    
    $attributes: PlaceLocationIdentificationTypeAttributes
    
    
    locationType: string
    
    
    locationDescription: Array<LocationIdentificationBatchType>
    
}

export interface PlaceLocationIdentificationTypeAttributes {
    
}

// Identification of a location by code or name
export interface LocationIdentificationBatchType {
    
    $attributes: LocationIdentificationBatchTypeAttributes
    
    
    code: Array<string>
    
}

export interface LocationIdentificationBatchTypeAttributes {
    
}


export interface FareComponentDetailsType {
    
    $attributes: FareComponentDetailsTypeAttributes
    
    
    fareComponentID: ItemNumberType4
    
    // Market information related to the fare component or to the bound.
    marketFareComponent: Array<TravelProductInformationTypeI_144078S>
    
    // Monetary Information.
    monetaryInformation: Array<MonetaryInformationType5>
    
    // Component Class information
    componentClassInfo: Array<PricingOrTicketingSubsequentType_145400S>
    
    // Fare Qualifier Detail
    fareQualifiersDetail: Array<FareQualifierDetailsType_145397S>
    
    // Details of the fare family used for this fare component
    fareFamilyDetails: Array<FareFamilyType4>
    
    // Carrier owner of the fare family
    fareFamilyOwner: Array<TransportIdentifierType2>
    
    // Used to specify coupons included in the fare component or in the bound.
    couponDetailsGroup: Array<CouponDetailsType>
    
}

export interface FareComponentDetailsTypeAttributes {
    
}

// To specify an item number
export interface ItemNumberType4 {
    
    $attributes: ItemNumberType4Attributes
    
    // Item identification: number of the fare component or of the bound.
    itemNumberDetails: Array<ItemNumberIdentificationType4>
    
}

export interface ItemNumberType4Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType4 {
    
    $attributes: ItemNumberIdentificationType4Attributes
    
    // Item identification: number of the fare component or of the bound.
    number: Array<string>
    
    // Item type: fare component (FC) or bound (BND).
    type: Array<string>
    
}

export interface ItemNumberIdentificationType4Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI_144078S {
    
    $attributes: TravelProductInformationTypeI_144078SAttributes
    
    
    boardPointDetails: Array<LocationTypeI_208252C>
    
    
    offpointDetails: Array<LocationTypeI_208252C>
    
}

export interface TravelProductInformationTypeI_144078SAttributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI_208252C {
    
    $attributes: LocationTypeI_208252CAttributes
    
    
    trueLocationId: Array<string>
    
}

export interface LocationTypeI_208252CAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType5 {
    
    $attributes: MonetaryInformationType5Attributes
    
    // Monetary information per fare component
    monetaryDetails: MonetaryInformationDetailsType_223822C
    
    // Other monetary information per fare component
    otherMonetaryDetails: Array<MonetaryInformationDetailsType_223822C>
    
}

export interface MonetaryInformationType5Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_223822C {
    
    $attributes: MonetaryInformationDetailsType_223822CAttributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsType_223822CAttributes {
    
}

// To convey additional information related to a ticket
export interface PricingOrTicketingSubsequentType_145400S {
    
    $attributes: PricingOrTicketingSubsequentType_145400SAttributes
    
    // RATE OR TARIFF CLASS INFORMATION
    fareBasisDetails: Array<RateTariffClassInformationType>
    
}

export interface PricingOrTicketingSubsequentType_145400SAttributes {
    
}

// To identify the current and/or original fare basis code.
export interface RateTariffClassInformationType {
    
    $attributes: RateTariffClassInformationTypeAttributes
    
    // Fare Basis Code
    rateTariffClass: Array<string>
    
    // Ticket Designator
    otherRateTariffClass: Array<string>
    
}

export interface RateTariffClassInformationTypeAttributes {
    
}


export interface FareQualifierDetailsType_145397S {
    
    $attributes: FareQualifierDetailsType_145397SAttributes
    
    
    discountDetails: Array<DiscountPenaltyInformationType2>
    
}

export interface FareQualifierDetailsType_145397SAttributes {
    
}


export interface DiscountPenaltyInformationType2 {
    
    $attributes: DiscountPenaltyInformationType2Attributes
    
    
    fareQualifier: Array<string>
    
}

export interface DiscountPenaltyInformationType2Attributes {
    
}

// NEW FARE SEACH
export interface FareFamilyType4 {
    
    $attributes: FareFamilyType4Attributes
    
    // Fare Family Short Name
    fareFamilyname: Array<string>
    
    // HIERARCHICAL ORDER WITHIN FARE FAMILY
    hierarchy: Array<number>
    
    // Indicates Commercial Fare Family Short names
    commercialFamilyDetails: Array<FareFamilyDetailsType4>
    
}

export interface FareFamilyType4Attributes {
    
}

// NEW FARE SEARCH
export interface FareFamilyDetailsType4 {
    
    $attributes: FareFamilyDetailsType4Attributes
    
    // Commercial fare Family Short name
    commercialFamily: string
    
}

export interface FareFamilyDetailsType4Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType2 {
    
    $attributes: TransportIdentifierType2Attributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI_222513C>
    
}

export interface TransportIdentifierType2Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI_222513C {
    
    $attributes: CompanyIdentificationTypeI_222513CAttributes
    
    // Carrier owner fo the fare family
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI_222513CAttributes {
    
}


export interface CouponDetailsType {
    
    $attributes: CouponDetailsTypeAttributes
    
    // Tattoo + type of the product identifying the coupon.
    productId: ReferenceInfoType_145406S
    
}

export interface CouponDetailsTypeAttributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType_145406S {
    
    $attributes: ReferenceInfoType_145406SAttributes
    
    
    referenceDetails: ReferencingDetailsType_209980C
    
}

export interface ReferenceInfoType_145406SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_209980C {
    
    $attributes: ReferencingDetailsType_209980CAttributes
    
    
    type: string
    
    
    value: string
    
}

export interface ReferencingDetailsType_209980CAttributes {
    
}


export interface dcsDataType {
    
    $attributes: dcsDataTypeAttributes
    
    // This is used as DUM segment
    markerPax: PassengerFlightDetailsTypeI
    
    // This is used as a Dum segment.
    markerSegment: PassengerFlightDetailsTypeI
    
    // Conveys the DCS data at Segment level. Up to 19602 repetitions (198 PAX*99 segments)
    segmentSection: Array<segmentSectionType>
    
    // This is used as a Dum segement.
    markerLeg: PassengerFlightDetailsTypeI
    
    // Conveys the DCS info at leg level. Up to 176418 repetitions (9 legs * 99 segments * 198 pax)
    legSection: Array<legSectionType>
    
}

export interface dcsDataTypeAttributes {
    
}

// To specify details relating to a passenger&#39;s
export interface PassengerFlightDetailsTypeI {
    
    $attributes: PassengerFlightDetailsTypeIAttributes
    
}

export interface PassengerFlightDetailsTypeIAttributes {
    
}


export interface segmentSectionType {
    
    $attributes: segmentSectionTypeAttributes
    
    // Specify structured elements references
    elementManagementStructData: ElementManagementSegmentType_127983S
    
    // provide specific reference identification
    referenceForStructDataElement: Array<ReferenceInfoType6>
    
    
    dcsSegmentInfo: dcsSegmentInfoType
    
}

export interface segmentSectionTypeAttributes {
    
}

// To specify the PNR segments/elements references and action to apply
export interface ElementManagementSegmentType_127983S {
    
    $attributes: ElementManagementSegmentType_127983SAttributes
    
    // reference of the element
    elementReference: Array<ReferencingDetailsType_127526C>
    
    // PNR segment or element name
    segmentName: Array<string>
    
    // PNR segment/element &#39;line&#39; number.
    lineNumber: Array<number>
    
}

export interface ElementManagementSegmentType_127983SAttributes {
    
}


export interface dcsSegmentInfoType {
    
    $attributes: dcsSegmentInfoTypeAttributes
    
    // Booking information. This is not required by the process it self, but can be used to easily track problems. This segment is required also to solve ambiguity problems. It can be empty if there is not need to convey information (more meaningful than a DUM)
    booking: TravelProductInformationTypeI4
    
    // Determines if the DCS Data apply to the adult or to the infant (in case there is one). By default, it applies to the adult.
    paxType: ReferenceInformationTypeI2
    
    // Gives the compensation type. * attributeDetails/attributeType = - DBA - DBN - DBO - DBV - DBM - DBD - DBW
    typeOfCOP: Array<CodedAttributeType_127282S>
    
}

export interface dcsSegmentInfoTypeAttributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI4 {
    
    $attributes: TravelProductInformationTypeI4Attributes
    
}

export interface TravelProductInformationTypeI4Attributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInformationTypeI2 {
    
    $attributes: ReferenceInformationTypeI2Attributes
    
    // Details of the referencing
    referenceDetails: ReferencingDetailsTypeI_185716C
    
}

export interface ReferenceInformationTypeI2Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_185716C {
    
    $attributes: ReferencingDetailsTypeI_185716CAttributes
    
    // A code which identifies the type of identifier that is used.
    type: string
    
}

export interface ReferencingDetailsTypeI_185716CAttributes {
    
}


export interface legSectionType {
    
    $attributes: legSectionTypeAttributes
    
    // Specify structured elements references
    elementManagementStructData: ElementManagementSegmentType_127983S
    
    // provide specific reference identification
    referenceForStructDataElement: Array<ReferenceInfoType6>
    
    
    dcsLegInfo: dcsLegInfoType
    
}

export interface legSectionTypeAttributes {
    
}


export interface dcsLegInfoType {
    
    $attributes: dcsLegInfoTypeAttributes
    
    // Contains the leg position inside the booking
    legPosition: TravelItineraryInformationTypeI
    
    // Indenties uniquely a leg inside a multi-leg booking
    leg: OriginAndDestinationDetailsTypeI2
    
    // Determines if the DCS Data apply to the adult or to the infant (in case there is one). By default, it applies to the adult.
    paxType: ReferenceInformationTypeI2
    
    // Contains information on the seat delivered by the DCS
    seatDelivery: Array<SpecialRequirementsDetailsType4>
    
    // Third data element provide the category of attribute: NOREC information, acceptance status... First data element contains the value of the attribute : the NOREC flag, the acceptance status, the boarding status and the cabin regrade type, Check Bags indicator, Waitlist status.
    paxStatus: Array<StatusTypeI_127261S>
    
    // Contains the acceptance/regrade reason and reason code
    accregReason: Array<accregReasonType>
    
    // Regrade cabin code
    regradeCabin: Array<SegmentCabinIdentificationType>
    
    // Group contains the acceptance channel information.
    acceptanceChannel: Array<acceptanceChannelType>
    
    // Provides information on the compensation offered to passengers with valid tickets, airline turned down at check-in/boarding. - coded form of payment (NGDCS only) - currency code (NGDCS only) - amount (NGDCS only) - compensation type (voluntary/involuntary) - free text (both valid for PFS clients and NGDCS)
    compensationData: Array<CompensationType>
    
}

export interface dcsLegInfoTypeAttributes {
    
}

// To specify a segment of an itinerary and related details.
export interface TravelItineraryInformationTypeI {
    
    $attributes: TravelItineraryInformationTypeIAttributes
    
    // The sequence number indentifying the position of a leg in a booking
    itemNumber: number
    
}

export interface TravelItineraryInformationTypeIAttributes {
    
}

// To convey the origin and destination of a journey.
export interface OriginAndDestinationDetailsTypeI2 {
    
    $attributes: OriginAndDestinationDetailsTypeI2Attributes
    
    // City pair to indentify uniquely a leg in a multi-leg booking
    origin: string
    
    // City pair to indentify uniquely a leg in a multi-leg booking
    destination: Array<string>
    
}

export interface OriginAndDestinationDetailsTypeI2Attributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsType4 {
    
    $attributes: SpecialRequirementsDetailsType4Attributes
    
    // To specify the Seat Number.
    seatDetails: SpecialRequirementsDataDetailsType4
    
}

export interface SpecialRequirementsDetailsType4Attributes {
    
}

// To specify additional requirements concerning a special request/requirement and to reference to a traveller.
export interface SpecialRequirementsDataDetailsType4 {
    
    $attributes: SpecialRequirementsDataDetailsType4Attributes
    
    // The seat number
    seatNumber: Array<string>
    
    // type of the seat
    seatCharacteristic: Array<string>
    
}

export interface SpecialRequirementsDataDetailsType4Attributes {
    
}

// To identify a status and related information.
export interface StatusTypeI_127261S {
    
    $attributes: StatusTypeI_127261SAttributes
    
    // Provides a set of coded characteristics of the customer.
    statusDetails: Array<StatusDetailsTypeI_185722C>
    
}

export interface StatusTypeI_127261SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI_185722C {
    
    $attributes: StatusDetailsTypeI_185722CAttributes
    
    // Status of the entity
    indicator: string
    
    // Qualifies the status
    type: string
    
}

export interface StatusDetailsTypeI_185722CAttributes {
    
}


export interface accregReasonType {
    
    $attributes: accregReasonTypeAttributes
    
    // Reason code for: - Acceptation/Cancellation - Regrade
    reasons: CodedAttributeType_127279S
    
    // Contains Acceptance Reason, Regrade Reason description.
    deliveryInformation: Array<InteractiveFreeTextTypeI1>
    
}

export interface accregReasonTypeAttributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_127279S {
    
    $attributes: CodedAttributeType_127279SAttributes
    
    // provides details for the Attribute
    attributeDetails: CodedAttributeInformationType_185753C
    
}

export interface CodedAttributeType_127279SAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_185753C {
    
    $attributes: CodedAttributeInformationType_185753CAttributes
    
    // provides the attribute Type
    attributeType: string
    
    // provides a description for the attribute: If 950K set to ARC, value can be: AS: Airline Staff, BA: Baggage not Accepted, CB: Customer failed to board, CR: Customer Request, CU: Customer Unwell, DB: Denied Boarding, FA: Flight Alternative Offered and accepted by the customer, FD: Flight Delayed, FO: Flight Oversold, FC: Flight Cancelled, MC: Missed Connection, MR: Medical Reasons, NO: NOSHOW (can only be used with Target Customer Acceptance Status set to &#39;Rejected&#39;), OT: Other, RR: Regulatory Requirement not met, SR: Security Reasons, TC: Travel in different cabin through another booking, TD: Travel Documentation Incomplete, TI: Travel Industry Staff, UC: User Error Correction. If 950K set to RRC, value can be: OC: Cabin/Flight oversold (current flight), OO: Cabin/Flight oversold (other flight), MC: Misidentification of customer at check-in, PM: Previously mishandled, SO: Special occasion, AC: Aircraft change, CF: Cabin configuration change, RQ: Request from a special requestor, CO: Compassionate, MI: Marketing Initiative e.g. please try Club Class for free, DC: Disruption on current flight, DO: Disruption on other flight, CC: Crew level change, TR: Technical reason, CS: Catering shortfall, CI: Check-in error, IA: Inadmissible, ST: Staff, SR: Service Recovery Entitlement, AB: Authorized by, US: Unsuitable.
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType_185753CAttributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextTypeI1 {
    
    $attributes: InteractiveFreeTextTypeI1Attributes
    
    // Provides information on the text conveyed in the IFT: language, type...
    freeTextQualification: Array<FreeTextQualificationTypeI_185754C>
    
    // The information itself
    freeText: Array<string>
    
}

export interface InteractiveFreeTextTypeI1Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationTypeI_185754C {
    
    $attributes: FreeTextQualificationTypeI_185754CAttributes
    
    // Categorise the format of the text (free text, coded,...)
    textSubjectQualifier: string
    
    // Provides a code identifying the information (phone, OSI, etc...)
    informationType: Array<string>
    
    // The airline code that may be associated to this information
    companyId: Array<string>
    
}

export interface FreeTextQualificationTypeI_185754CAttributes {
    
}

// To reference a segment cabin
export interface SegmentCabinIdentificationType {
    
    $attributes: SegmentCabinIdentificationTypeAttributes
    
    // Cabin class designator
    cabinCode: string
    
}

export interface SegmentCabinIdentificationTypeAttributes {
    
}


export interface acceptanceChannelType {
    
    $attributes: acceptanceChannelTypeAttributes
    
    // Qualifies originator of the acceptance actions: - A for Check-in Agent - D for Direct consumer - S for automated Devices - E for internet/web based application
    acceptanceOrigin: UserIdentificationType_127265S
    
    // contains the application used to perform check-in operations: - cryptic application - Java front End application - SMS application - Telephone - web application - External departure control application
    applicationType: ApplicationType3
    
}

export interface acceptanceChannelTypeAttributes {
    
}

// Identify acceptance origin.
export interface UserIdentificationType_127265S {
    
    $attributes: UserIdentificationType_127265SAttributes
    
    // 1 character code for airline agent (A), travel agent (T), etc...
    originatorTypeCode: string
    
}

export interface UserIdentificationType_127265SAttributes {
    
}

// This segment is used to specify details on an application
export interface ApplicationType3 {
    
    $attributes: ApplicationType3Attributes
    
    // provides information on application identification
    applicationDetails: ApplicationIdentificationType2
    
}

export interface ApplicationType3Attributes {
    
}

// Used to specify application details
export interface ApplicationIdentificationType2 {
    
    $attributes: ApplicationIdentificationType2Attributes
    
    // application internal identifier
    internalId: string
    
    // Item Version Number
    versionNumber: Array<string>
    
}

export interface ApplicationIdentificationType2Attributes {
    
}

// To convey details describing a compensation given to a Customer
export interface CompensationType {
    
    $attributes: CompensationTypeAttributes
    
    // Compensation details
    compensationDetails: CardValidityType
    
}

export interface CompensationTypeAttributes {
    
}

// To convey Compensation details for a Customer
export interface CardValidityType {
    
    $attributes: CardValidityTypeAttributes
    
    // Type of the compensation, ie voluntary or involuntary
    type: Array<string>
    
    // Form of the payment of the compensation
    form: Array<string>
    
    // Amount of the compensation
    amount: Array<number>
    
    // Currency used for the compensation.
    currency: Array<string>
    
    // Any comment related to the compensation
    freeText: Array<string>
    
}

export interface CardValidityTypeAttributes {
    
}

// To designate non-system specific combinations of fare types.
export interface FareCategoryCodesType {
    
    $attributes: FareCategoryCodesTypeAttributes
    
    // Rate Code value. (Code set list not used)
    fareType: string
    
}

export interface FareCategoryCodesTypeAttributes {
    
}

// To specify the details which qualify a fare
export interface FareQualifierDetailsType2 {
    
    $attributes: FareQualifierDetailsType2Attributes
    
    // Rate Code
    fareCategories: Array<FareCategoryCodesType>
    
}

export interface FareQualifierDetailsType2Attributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType_128791S {
    
    $attributes: FreeTextInformationType_128791SAttributes
    
    // Free text information.
    freeTextDetails: FreeTextDetailsType_187592C
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType_128791SAttributes {
    
}


export interface HotelRoomRateInformationType_188211C {
    
    $attributes: HotelRoomRateInformationType_188211CAttributes
    
    // This data element is used to convey the room type
    roomType: Array<string>
    
    // This data element is used to convey the hotel rate code
    ratePlanCode: Array<string>
    
    // This data element is used to convey the hotel rate category code
    rateCategoryCode: Array<string>
    
    // This data element is used to indicate if the rate code is a qualified rate code or not.
    rateQualifiedIndic: Array<string>
    
}

export interface HotelRoomRateInformationType_188211CAttributes {
    
}

// This segment is used to convey the hotel room information
export interface HotelRoomType_129168S {
    
    $attributes: HotelRoomType_129168SAttributes
    
    // This composite is used to convey the room rate identifier.
    roomRateIdentifier: Array<HotelRoomRateInformationType_188211C>
    
    // This data element is used to convey the booking code.
    bookingCode: Array<string>
    
    // This composite is used to convey the occupancy level of the hotel room.
    guestCountDetails: Array<NumberOfUnitDetailsTypeI_18670C>
    
    // This data element is used to convey the override room type (non-Amadeus room types).
    roomTypeOverride: Array<string>
    
}

export interface HotelRoomType_129168SAttributes {
    
}

// coverage conditions
export interface InsuranceCoverageType {
    
    $attributes: InsuranceCoverageTypeAttributes
    
    // Indicate type of amount (eg. Medical Coverage, Trip Value, etc)
    coverageIndicator: Array<string>
    
}

export interface InsuranceCoverageTypeAttributes {
    
}

// contains information about the total price plan
export interface InsuranceProviderAndProductsType_128668S {
    
    $attributes: InsuranceProviderAndProductsType_128668SAttributes
    
    // Type of trip (package. leisure etc...)
    tripType: Array<string>
    
    // Code of the operator who provides the TOUR.
    tourOperator: Array<string>
    
    // To specify the countries involved in the Travel assistance element.
    countryInfo: Array<CountrydescriptionType>
    
}

export interface InsuranceProviderAndProductsType_128668SAttributes {
    
}

// To specify a phone or email address
export interface PhoneAndEmailAddressType_128670S {
    
    $attributes: PhoneAndEmailAddressType_128670SAttributes
    
    // Phone or Email contact type
    phoneOrEmailType: string
    
    // Structured telephone number
    telephoneNumber: Array<StructuredTelephoneNumberType_187460C>
    
    // Email address
    emailAddress: Array<string>
    
}

export interface PhoneAndEmailAddressType_128670SAttributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI_62874C {
    
    $attributes: ProductDateTimeTypeI_62874CAttributes
    
    // AIR segment : departure date ATX segment : requested date CAR segment : pick-up date CCR segment : pick-up date HHL segment : check-in date HTL segment : check-in date MIS segment : date for service requested SUR segment : date Trn Amtrak sgt: departure date Trn SNCF sgt: departure date TTO segment: departure date of the tour TUR segment: tour departure date INS element: departure date CRU segment: sailing departure date
    depDate: Array<number>
    
    // AIR segment : departure time SUR segment : pick-up time Trn Amtrak sgt: departure time Trn SNCF sgt: departure time
    depTime: Array<number>
    
    // AIR segment : arrival date CAR segment : drop-off date CCR segment : return date HHL segment : check-out date HTL segment : check-out date TTO segment: return date of the tour INS element: return date
    arrDate: Array<string>
    
    // AIR segment : arrival time Trn Amtrak sgt: arrival time Trn SNCF sgt: arrival time
    arrTime: number
    
    // AIR segment: day change indicator (1,2,-1) TRN Amtrak sgt: day change indicator (1,2,-1) TRN SNCF sgt: day change indicator (1,2,-1)
    dayChangeIndicator: Array<number>
    
}

export interface ProductDateTimeTypeI_62874CAttributes {
    
}

// To identify the rates or tariff details.
export interface TariffInformationDetailsTypeI_188214C {
    
    $attributes: TariffInformationDetailsTypeI_188214CAttributes
    
    // A unique rate product identifier.
    rateType: Array<string>
    
    // This field is used to convey the amount.
    amount: Array<number>
    
    // This field is used to convey the currency
    currency: Array<string>
    
    // This data element is used to convey the rate plan (Daily or total indicator).
    ratePlanIndicator: Array<string>
    
    // This data element is used to convey the rate amount type.
    amountType: Array<string>
    
    // This data element is used to specify the fact that a rate change occurs during the period of the stay. If the is a change the value is * (for YES)
    rateChangeIndicator: Array<string>
    
    // contains the First Date information
    firstDate: Array<string>
    
}

export interface TariffInformationDetailsTypeI_188214CAttributes {
    
}

// To specify tariff details relating to a service or product.
export interface TariffInformationTypeI_129170S {
    
    $attributes: TariffInformationTypeI_129170SAttributes
    
    // This composite is used to convey the tariff information
    tariffInfo: Array<TariffInformationDetailsTypeI_188214C>
    
    // Additional rate type information
    rateInformation: Array<RateInformationTypeI>
    
    // This composite is used to convey all the extra charge information.
    chargeDetails: Array<AssociatedChargesInformationTypeI2>
    
}

export interface TariffInformationTypeI_129170SAttributes {
    
}

// To specify details related to a product
export interface TravelProductInformationTypeI_36746S {
    
    $attributes: TravelProductInformationTypeI_36746SAttributes
    
    // To specify dates and times of the product
    product: Array<ProductDateTimeTypeI_62874C>
    
    // Boarding point detail
    boardpointDetail: Array<LocationTypeI_2784C>
    
    // Off Point details
    offpointDetail: Array<LocationTypeI_2784C>
    
    // Company identification
    companyDetail: Array<CompanyIdentificationTypeI_2785C>
    
    // Product identifications details
    productDetails: Array<ProductIdentificationDetailsTypeI_2786C>
    
    // Product Type details
    typeDetail: Array<ProductTypeDetailsTypeI_2787C>
    
    // AIR segment : to indicate an Informational Air segment : N for No action required.
    processingIndicator: Array<string>
    
}

export interface TravelProductInformationTypeI_36746SAttributes {
    
}


export interface PNR_AddMultiElementsType {
    
    $attributes: PNR_AddMultiElementsTypeAttributes
    
    // To specify a reference to a reservation
    reservationInfo: Array<ReservationControlInformationTypeI4>
    
    // To specify specific Actions to be processed on PNR
    pnrActions: OptionalPNRActionsType
    
    // This group is used to convey passenger information
    travellerInfo: Array<travellerInfoType1>
    
    // for connected/not connected air segments
    originDestinationDetails: Array<originDestinationDetailsType1>
    
    // Data elements master containg the DUM delimiter and group 8
    dataElementsMaster: Array<dataElementsMasterType1>
    
}

export interface PNR_AddMultiElementsTypeAttributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI4 {
    
    $attributes: ReservationControlInformationTypeI4Attributes
    
    // reservation control information - i.e. record locator
    reservation: Array<ReservationControlInformationDetailsTypeI4>
    
}

export interface ReservationControlInformationTypeI4Attributes {
    
}

// Reservation control information
export interface ReservationControlInformationDetailsTypeI4 {
    
    $attributes: ReservationControlInformationDetailsTypeI4Attributes
    
    // 1A
    companyId: Array<string>
    
    // 1. RR element: Record locator of the original PNR 2. Record locator information: Airline record locator 3. Profile record locator information: Profile record locator 4. Air segment: Passive segment airline record locator Due to technical limitations, RCI for air segment is truncated to 7 characters.
    controlNumber: Array<string>
    
}

export interface ReservationControlInformationDetailsTypeI4Attributes {
    
}

// To specify specific Actions to be processed on PNR.
export interface OptionalPNRActionsType {
    
    $attributes: OptionalPNRActionsTypeAttributes
    
    // 0 No Special Processing 10 - 49 PNR processing options 50 - 99 PNRACC options 100 - 149 Other Opt 150 - 199 Error Processing 200 - 229 Car Opt 230 - 259 Hotel Opt 260 - 299 Air + AUX Opt 300 - 329 Ticketing Opt
    optionCode: Array<number>
    
}

export interface OptionalPNRActionsTypeAttributes {
    
}


export interface travellerInfoType1 {
    
    $attributes: travellerInfoType1Attributes
    
    // To specify the PNR segments/elements references and action to apply
    elementManagementPassenger: ElementManagementSegmentType3
    
    // This group contains passenger related information: - name - date of birth First repetition is usually for adult and second for related infant.
    passengerData: Array<passengerDataType1>
    
    // This group contains passenger related information: - name - date of birth First repetition is usually for adult and second for related infant. This group is used to carry: - rich names - and/or multiple names (Native name(s)), Universal name, for a same passenger. - or name (rich or roman) with title separated from the firstname.
    enhancedPassengerData: Array<enhancedPassengerDataType1>
    
}

export interface travellerInfoType1Attributes {
    
}

// To specify the PNR segments/elements references and action to apply.
export interface ElementManagementSegmentType3 {
    
    $attributes: ElementManagementSegmentType3Attributes
    
    // segments/elements references - type and number
    reference: Array<ReferencingDetailsType7>
    
    // PNR segment or element name
    segmentName: string
    
}

export interface ElementManagementSegmentType3Attributes {
    
}

// Reference details
export interface ReferencingDetailsType7 {
    
    $attributes: ReferencingDetailsType7Attributes
    
    // OT, PT, PR, ST, SR, SS
    qualifier: string
    
    // refers to an existing PNR segment/element that has been previously transmitted in a previous Server response message.
    number: string
    
}

export interface ReferencingDetailsType7Attributes {
    
}


export interface passengerDataType1 {
    
    $attributes: passengerDataType1Attributes
    
    // To specify a traveler(s) and personal details relating to the traveler(s). In values with &#39;X00&#39; (X being any letter), 00 should be replaced by any value between 01 and 99.
    travellerInformation: TravellerInformationTypeI1
    
    // Passenger date of birth (DDMMYYYY) If the passenger has an infant, not in a separate TIF, then the date is used for the infant date of birth.
    dateOfBirth: Array<DateAndTimeInformationType5>
    
}

export interface passengerDataType1Attributes {
    
}

// To specify a traveler(s) and personal details relating to the traveler(s)
export interface TravellerInformationTypeI1 {
    
    $attributes: TravellerInformationTypeI1Attributes
    
    // traveller surname,type and quantity
    traveller: TravellerSurnameInformationTypeI1
    
    // Occurrence one relates to the traveler. Occurrence 2 relates only to an infant accompanying the traveler for whom only the given name is present.
    passenger: Array<TravellerDetailsTypeI1>
    
}

export interface TravellerInformationTypeI1Attributes {
    
}


export interface TravellerSurnameInformationTypeI1 {
    
    $attributes: TravellerSurnameInformationTypeI1Attributes
    
    // Traveler Last Name or Group name
    surname: string
    
    // G for a group. (The traveler type is in C324/6353)
    qualifier: Array<string>
    
    // - 1 : only one traveler defined by TIFwith exceptions below. - 2 : the traveler is accompanied by an infant for whom only the given name is present.
    quantity: Array<number>
    
}

export interface TravellerSurnameInformationTypeI1Attributes {
    
}


export interface TravellerDetailsTypeI1 {
    
    $attributes: TravellerDetailsTypeI1Attributes
    
    // Traveler First Name + titel
    firstName: Array<string>
    
    // Traveler Type using Amadeus codification. In values with &#39;X00&#39; (X being any letter), 00 should be replaced by any value between 01 and 99.
    type: Array<string>
    
    // 1. Infant (INF) No more info in Edifact. 2. Infant given name only (INF/BILL) Infant given name will be placed in a 2nd occurence of C324 of this (adult) passenger TIF. The 2nd C324/6353 element will contain INF. 3. Infant given and last name (INFGATES/BILL) Infant is treated as a separate TIF following immediately this (adult) passenger TIF. This following TIF C324/6353 element will contain INF.
    infantIndicator: Array<string>
    
    // Identification code, 2 cases: ID &lt; 1 to 51 char free text ) or CR &lt; 1 to 40 char free text )
    identificationCode: Array<string>
    
}

export interface TravellerDetailsTypeI1Attributes {
    
}

// To convey information regarding estimated or actual dates and times of operational events
export interface DateAndTimeInformationType5 {
    
    $attributes: DateAndTimeInformationType5Attributes
    
    // DATE AND TIME DETAILS
    dateAndTimeDetails: Array<DateAndTimeDetailsTypeI_56946C1>
    
}

export interface DateAndTimeInformationType5Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeDetailsTypeI_56946C1 {
    
    $attributes: DateAndTimeDetailsTypeI_56946C1Attributes
    
    
    qualifier: Array<string>
    
    // Inf/Child date of birth
    date: Array<string>
    
}

export interface DateAndTimeDetailsTypeI_56946C1Attributes {
    
}


export interface enhancedPassengerDataType1 {
    
    $attributes: enhancedPassengerDataType1Attributes
    
    // To specify a traveler(s) and personal details relating to the traveler(s). To be imperatively used if name is UTF-8 encoded.
    enhancedTravellerInformation: EnhancedTravellerInformationType3
    
    // Passenger date of birth (DDMMYYYY) If the passenger has an infant, not in a separate TIF, then the date is used for the infant date of birth.
    dateOfBirthInEnhancedPaxData: Array<DateAndTimeInformationType5>
    
}

export interface enhancedPassengerDataType1Attributes {
    
}


export interface EnhancedTravellerInformationType3 {
    
    $attributes: EnhancedTravellerInformationType3Attributes
    
    // Traveller name information, unique for a given passenger.
    travellerNameInfo: Array<TravellerNameInfoType3>
    
    // 3 occurences as the passenger could have 3 possible types of names, accepted depending on the context (until 2 Native Name, Universal name...).
    otherPaxNamesDetails: Array<TravellerNameDetailsType3>
    
}

export interface EnhancedTravellerInformationType3Attributes {
    
}


export interface TravellerNameInfoType3 {
    
    $attributes: TravellerNameInfoType3Attributes
    
    // PAX = PAX IN = Infant
    qualifier: Array<string>
    
    // - 1 : only one traveler defined by ETI with exceptions below. - 2 : the traveler is accompanied by an infant. - n: number in party in a group.
    quantity: Array<number>
    
    // Passenger type (PTC). Traveler Type using Amadeus codification. In values with &#39;X00&#39; (X being any letter), 00 should be replaced by any value between 01 and 99.
    type: Array<string>
    
    // Passenger type (PTC).
    otherType: Array<string>
    
    // 1. Infant has same surname and given name as the Adult (INF). 2. Infant has same surname only (INF/BILL) as the adult. Infant will be following ETI segment, and will have passenger type INF. 3. Infant given and last name (INFGATES/BILL) is treated as a separate ETI following immediately this (adult) passenger ETI. This ETI will contain INF passenger type code.
    infantIndicator: Array<string>
    
    // Identification code, 2 cases: ID &lt; 1 to 51 char free text ) or CR &lt; 1 to 40 char free text ).
    travellerIdentificationCode: Array<string>
    
    // Age of the passenger
    age: Array<number>
    
}

export interface TravellerNameInfoType3Attributes {
    
}

// To identify all the names in different alphabets associated to a same traveller
export interface TravellerNameDetailsType3 {
    
    $attributes: TravellerNameDetailsType3Attributes
    
    // To be filled only if the application sending this message is able to identify in advance the type of name (Native name, Universal name...). In most of the cases, application will not know it then it should not be filled.
    nameType: Array<string>
    
    // Reference name.
    referenceName: Array<string>
    
    // Traveler Last Name or Group name.
    surname: Array<string>
    
    // Traveler First Name. It could include title, or title could be sent separately in another field.
    givenName: Array<string>
    
    // Title separated from the firstname. In that case, the title must not be provided in the givenName (firstName) field.
    title: Array<string>
    
}

export interface TravellerNameDetailsType3Attributes {
    
}


export interface originDestinationDetailsType1 {
    
    $attributes: originDestinationDetailsType1Attributes
    
    // To convey the origin and destination of a journey
    originDestination: OriginAndDestinationDetailsTypeI3
    
    // all segments
    itineraryInfo: Array<itineraryInfoType1>
    
}

export interface originDestinationDetailsType1Attributes {
    
}

// To convey the origin and destination of a journey
export interface OriginAndDestinationDetailsTypeI3 {
    
    $attributes: OriginAndDestinationDetailsTypeI3Attributes
    
    // Airport/city code of Origin In a Client request message, a non-blank ODI is used in an air sell request to advise that the following segments (TVL etc...) are connected. There is a maximum of 6 TVLs following a non-blank ODI.
    origin: Array<string>
    
    // Airport/city code of Destination
    destination: Array<string>
    
}

export interface OriginAndDestinationDetailsTypeI3Attributes {
    
}


export interface itineraryInfoType1 {
    
    $attributes: itineraryInfoType1Attributes
    
    // To specify the PNR segments/elements references and action to apply
    elementManagementItinerary: ElementManagementSegmentType3
    
    // air and aux segments
    airAuxItinerary: Array<airAuxItineraryType>
    
    // To provide specific reference identification
    referenceForSegment: Array<ReferenceInfoType7>
    
}

export interface itineraryInfoType1Attributes {
    
}


export interface airAuxItineraryType {
    
    $attributes: airAuxItineraryTypeAttributes
    
    // To specify details related to a product
    travelProduct: TravelProductInformationType1
    
    // To specify the message type and business function
    messageAction: MessageActionDetailsTypeI2
    
    // To indicate quantity and action required in relation to a product
    relatedProduct: Array<RelatedProductInformationTypeI4>
    
    // To specify the details for making a selection
    selectionDetailsAir: Array<SelectionDetailsTypeI2>
    
    // To specify a reference to a reservation
    reservationInfoSell: Array<ReservationControlInformationTypeI4>
    
    // To provide free form or coded long text information.
    freetextItinerary: Array<LongFreeTextType1>
    
}

export interface airAuxItineraryTypeAttributes {
    
}

// To specify details related to a product
export interface TravelProductInformationType1 {
    
    $attributes: TravelProductInformationType1Attributes
    
    // date and time details
    product: Array<ProductDateTimeTypeI5>
    
    // boardpoint details
    boardpointDetail: Array<LocationTypeI5>
    
    // offpoint details
    offpointDetail: Array<LocationTypeI5>
    
    // airline or system code
    company: Array<CompanyIdentificationTypeI7>
    
    // product details - number and class
    productDetails: Array<ProductIdentificationDetailsTypeI5>
    
    // Product type details. Here: availibility context.
    flightTypeDetails: Array<ProductTypeDetailsType4>
    
    // 1. Air segment To indicate an Informational Air segment: N for No action required
    processingIndicator: Array<string>
    
}

export interface TravelProductInformationType1Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI5 {
    
    $attributes: ProductDateTimeTypeI5Attributes
    
    // 1. Air segment: Departure date 2. ATX segment: Requested date 3. CAR segment: Pick-up date 4. HTL segment: Check-in date 5. MIS segment: Date for service required
    depDate: string
    
    // 1. Air segment Departure time 2. SUR segment: Pick-up time 3. TRN Amtrack segment: Departure time 4. TRN SNCF segment: Departure time
    depTime: Array<string>
    
    // 1. Air segment Arrival date (not in the display) 2. CAR segment Drop-off date 3. HTL segment: Check-out date 4. TTO segment: Return date of the Tour
    arrDate: Array<string>
    
    // 1. Air segment Arrival time 2. TRN Amtrack segment: Arrival time 3. TRN SNCF segment: Arrival time
    arrTime: Array<string>
    
}

export interface ProductDateTimeTypeI5Attributes {
    
}


export interface LocationTypeI5 {
    
    $attributes: LocationTypeI5Attributes
    
    // 1. Air segment: Boarding point 2. ATX segment: Boarding point 3. CAR segment: Pick-up point city 4. HTL segment: Check-in city 5. MIS segment: City code
    cityCode: string
    
    // 1. TRN SNCF segment: Off point city name
    cityName: Array<string>
    
}

export interface LocationTypeI5Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI7 {
    
    $attributes: CompanyIdentificationTypeI7Attributes
    
    // 1. Air segment: Airline code 2. ATX segment: Airline code of the airline to take action 3. CAR segment: Airline code of the airline to take action 4. HTL segment: Airline code of the airline to take action
    identification: string
    
    // To convey a second carrier (e.g. in case of multi airline open segments)
    secondIdentification: Array<string>
    
}

export interface CompanyIdentificationTypeI7Attributes {
    
}


export interface ProductIdentificationDetailsTypeI5 {
    
    $attributes: ProductIdentificationDetailsTypeI5Attributes
    
    // 1. Air segment: Flight number or OPEN ARNK - air segment arrival unknown 2. CAR se 3. segment: Car type 4. SUR segment: Transportation type (refer to VGTVD transaction)
    identification: string
    
    // 1. Air segment: Class of service 2. TRN Amtrack segment: Class of service 3. TRN SNCF segment: Class of service
    classOfService: Array<string>
    
    // 1. Air segment Flight number alpha suffix A, B, C, D, E 2. SUR segment: Departure code A or D 3. TRN SNCF segment: Train type
    subtype: Array<string>
    
    // 1. Air segment: N for Night class 2. TRN Amtrack segment: N for Night class 3. TRN SNCF segment: N for Night class
    description: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI5Attributes {
    
}


export interface ProductTypeDetailsType4 {
    
    $attributes: ProductTypeDetailsType4Attributes
    
    // Used to convey availibility context.
    flightIndicator: string
    
}

export interface ProductTypeDetailsType4Attributes {
    
}

// To specify the message type and business function
export interface MessageActionDetailsTypeI2 {
    
    $attributes: MessageActionDetailsTypeI2Attributes
    
    // type of segment
    business: MessageFunctionBusinessDetailsTypeI2
    
}

export interface MessageActionDetailsTypeI2Attributes {
    
}

// Message function or business details
export interface MessageFunctionBusinessDetailsTypeI2 {
    
    $attributes: MessageFunctionBusinessDetailsTypeI2Attributes
    
    // 1. Air segment:
    function: string
    
}

export interface MessageFunctionBusinessDetailsTypeI2Attributes {
    
}

// To indicate quantity and action required in relation to a product
export interface RelatedProductInformationTypeI4 {
    
    $attributes: RelatedProductInformationTypeI4Attributes
    
    // 1. Air segment: Number of passengers 2. ATX segment: Number of passengers 3. CAR segment: Number of cars 4. CCR segment: Number of cars 5. HHL segment: Number of rooms 6. HTL segment: Number of rooms
    quantity: Array<number>
    
    // status
    status: string
    
}

export interface RelatedProductInformationTypeI4Attributes {
    
}

// To specify the details for making a selection
export interface SelectionDetailsTypeI2 {
    
    $attributes: SelectionDetailsTypeI2Attributes
    
    // level of sell to be processed
    selection: Array<SelectionDetailsInformationTypeI4>
    
}

export interface SelectionDetailsTypeI2Attributes {
    
}

// Selection details information
export interface SelectionDetailsInformationTypeI4 {
    
    $attributes: SelectionDetailsInformationTypeI4Attributes
    
    // See comment below
    option: string
    
}

export interface SelectionDetailsInformationTypeI4Attributes {
    
}

// To provide free form or coded long text information.
export interface LongFreeTextType1 {
    
    $attributes: LongFreeTextType1Attributes
    
    // free text details
    freetextDetail: Array<FreeTextQualificationType3>
    
    // Long free text information
    longFreetext: Array<string>
    
}

export interface LongFreeTextType1Attributes {
    
}

// Free text qualification
export interface FreeTextQualificationType3 {
    
    $attributes: FreeTextQualificationType3Attributes
    
    // Identifies whether the free text is coded or not coded 3 for Literal text
    subjectQualifier: string
    
    // 1. AP element: 2. AQ element: 3. OS element
    type: Array<string>
    
    // Transmittable/non-transmittable indicator (S or X). Codeset list not applicable.
    status: Array<string>
    
    // Airline or system code
    companyId: Array<string>
    
}

export interface FreeTextQualificationType3Attributes {
    
}

// To provide specific reference identification
export interface ReferenceInfoType7 {
    
    $attributes: ReferenceInfoType7Attributes
    
    // This composite is used to transmit association information
    reference: Array<ReferencingDetailsType7>
    
}

export interface ReferenceInfoType7Attributes {
    
}


export interface dataElementsMasterType1 {
    
    $attributes: dataElementsMasterType1Attributes
    
    // marker
    marker1: DummySegmentTypeI5
    
    // all the others segments
    dataElementsIndiv: Array<dataElementsIndivType1>
    
}

export interface dataElementsMasterType1Attributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI5 {
    
    $attributes: DummySegmentTypeI5Attributes
    
}

export interface DummySegmentTypeI5Attributes {
    
}


export interface dataElementsIndivType1 {
    
    $attributes: dataElementsIndivType1Attributes
    
    // To specify the PNR segments/elements references and action to apply
    elementManagementData: ElementManagementSegmentType3
    
    // To specify the Amadeus PNR Individual Security element Note: up to 3 ISI segments may be needed to represent the ES element and its 3 types of receiver
    pnrSecurity: Array<IndividualPnrSecurityInformationType1>
    
    // specify amadeus accounting informations
    accounting: Array<AccountingInformationElementType1>
    
    // To specify different kinds of remarks
    miscellaneousRemark: Array<MiscellaneousRemarksType3>
    
    // Extended Remark with Unicode Content.
    extendedRemark: Array<ExtendedRemarkType1>
    
    // To specify special requests or services information relating to a traveller.
    serviceRequest: Array<SpecialRequirementsDetailsTypeI1>
    
    // To provide date and time details relative to flight movements
    dateAndTimeInformation: Array<DateAndTimeInformationTypeI3>
    
    // To specify the Amadeus PNR Tour Code element
    tourCode: Array<TourCodeType>
    
    // To specify an Amadeus PNR Ticket element
    ticketElement: Array<TicketElementType1>
    
    // To provide free form or coded long text information.
    freetextData: Array<LongFreeTextType1>
    
    // To specify the way data are mapped for structured
    structuredAddress: Array<StructuredAddressType1>
    
    // To specify an Amadeus PNR Option element
    optionElement: Array<OptionElementType1>
    
    // To request a Hard Copy Print
    printer: Array<PrinterIdentificationType>
    
    // The group handles Seat Request with possibly rail preferences
    seatGroup: Array<SeatEntityType>
    
    // To specify the Amadeus PNR Fare elements
    fareElement: Array<FareElementsType>
    
    // To specify the Amadeus PNR Fare discount element
    fareDiscount: Array<FareDiscountElementType>
    
    // To specify the Amadeus PNR Manual Document Registration element
    manualFareDocument: Array<ManualDocumentRegistrationType>
    
    // To specify the Amadeus PNR Commission element
    commission: Array<CommissionElementType>
    
    // To specify the Amadeus PNR Original Issue / Issue in Exchange For element
    originalIssue: Array<OriginalIssueType>
    
    // To convey details describing the form of payment
    formOfPayment: Array<FormOfPaymentTypeI4>
    
    // To convey additional details of the form of payment
    fopExtension: Array<MarketSpecificDataType>
    
    // To convey: - The FOP service details - The Corporate Security option for Remarks - The Timestamp indicator for Remarks
    serviceDetails: Array<StatusTypeI3>
    
    // To specify frequent traveler verification
    frequentTravellerVerification: Array<FrequentTravellerVerificationType>
    
    // To specify the Amadeus PNR Ticketing Carrier Designator element
    ticketingCarrier: Array<TicketingCarrierDesignatorType>
    
    // To specify the Amadeus PNR Fare Print Override element
    farePrintOverride: Array<FarePrintOverrideType>
    
    // To convey frequent traveler program information relating to a specific traveller or group.
    frequentTravellerData: Array<FrequentTravellerInformationTypeU>
    
    // To specify access level of an entity (office) to the element. If empty (equivalent to /L), only the creation office will have access.
    accessLevel: Array<ExtendedOwnershipSecurityDetailsType1>
    
    // To provide specific reference identification
    referenceForDataElement: Array<ReferenceInfoType7>
    
}

export interface dataElementsIndivType1Attributes {
    
}

// To specify the Amadeus PNR Individual Security element.
export interface IndividualPnrSecurityInformationType1 {
    
    $attributes: IndividualPnrSecurityInformationType1Attributes
    
    // Returned before EOT or after retrieve by RTE
    security: Array<IndividualSecurityType1>
    
    // Returned when retrieved
    securityInfo: Array<SecurityInformationType1>
    
    // Code as in the display: G for Amadeus Global Core Office Identification I for IATA number P for Pseudo-Office Identification Default is G.
    indicator: Array<string>
    
}

export interface IndividualPnrSecurityInformationType1Attributes {
    
}

// Individual security
export interface IndividualSecurityType1 {
    
    $attributes: IndividualSecurityType1Attributes
    
    // Type of receiver G: Type of receiver I: Type of receiver P:
    identification: string
    
    // R for Read B for Both read and write N for None
    accessMode: string
    
}

export interface IndividualSecurityType1Attributes {
    
}

// Security information
export interface SecurityInformationType1 {
    
    $attributes: SecurityInformationType1Attributes
    
    // Date of creation
    creationDate: string
    
    // Agent initials and duty code as in ORG (eg: AASU)
    agentCode: string
    
    // Office Id of creation/update
    officeId: Array<string>
    
}

export interface SecurityInformationType1Attributes {
    
}

// To specify the Amadeus Accounting Information element (AI element).
export interface AccountingInformationElementType1 {
    
    $attributes: AccountingInformationElementType1Attributes
    
    // One of these 4 data elements is mandatory , but non in particular
    account: Array<AccountingElementType1>
    
    // Number of units qualifier
    accountNumberOfUnits: Array<string>
    
}

export interface AccountingInformationElementType1Attributes {
    
}

// ACCOUNTING ELEMENT
export interface AccountingElementType1 {
    
    $attributes: AccountingElementType1Attributes
    
    // Account number
    number: Array<string>
    
    // Cost Number
    costNumber: Array<string>
    
    // IATA company number
    companyNumber: Array<string>
    
    // Client Reference Number
    clientReference: Array<string>
    
    
    gSTTaxDetails: Array<string>
    
}

export interface AccountingElementType1Attributes {
    
}

// To specify miscellaneous, confidential, quality control and invoice remarks.
export interface MiscellaneousRemarksType3 {
    
    $attributes: MiscellaneousRemarksType3Attributes
    
    // miscellaneous remarks
    remarks: Array<MiscellaneousRemarkType3>
    
}

export interface MiscellaneousRemarksType3Attributes {
    
}

// Miscellaneous remarks
export interface MiscellaneousRemarkType3 {
    
    $attributes: MiscellaneousRemarkType3Attributes
    
    // RC for confidential remark RI for invoice remark RM for miscellaneous remark RQ for quality control remark
    type: string
    
    // This is the 3rd character (x) of the remark title RIx or RMx, or 2 letter code for RMxx, conditional for RM, not applicable for RC and RQ
    category: Array<string>
    
    // Free text and message sequence numbers of the remarks.
    freetext: Array<string>
    
    // Provider type (element RIA): 1 for Air provider 2 for Car provider (CCR) 3 for Hotel Provider (HHL) M for Miscellaneous
    providerType: Array<string>
    
    // MCO element : Currency code
    currency: Array<string>
    
    // MCO element : total fee amount
    amount: Array<number>
    
    // Office Id (confidential remark RC)
    officeId: Array<string>
    
}

export interface MiscellaneousRemarkType3Attributes {
    
}

// To convey a structured remark
export interface ExtendedRemarkType1 {
    
    $attributes: ExtendedRemarkType1Attributes
    
    // To convey a Structured Remark with Unicode content.
    structuredRemark: Array<MiscellaneousRemarkType_210664C>
    
}

export interface ExtendedRemarkType1Attributes {
    
}

// Miscellaneous remarks
export interface MiscellaneousRemarkType_210664C {
    
    $attributes: MiscellaneousRemarkType_210664CAttributes
    
    // RIF for Invoice Remark RII for Itineray and Invoice Remark RIR for Itinerary Remark RIZ for Mini-Itinerary Remark RM for General Remark
    type: string
    
    // Category of the remark
    category: Array<string>
    
    // Free text of the remark.
    freetext: string
    
}

export interface MiscellaneousRemarkType_210664CAttributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsTypeI1 {
    
    $attributes: SpecialRequirementsDetailsTypeI1Attributes
    
    // special requirement type details
    ssr: SpecialRequirementsTypeDetailsTypeI1
    
    // Group seat SSR cannot ask for specific seats but only smoking and/or non-smoking (see Group seat SSR). Therefore the maximum repetitions here is 9 seats (1 per passenger of non-group PNR).
    ssrb: Array<SpecialRequirementsDataDetailsTypeI1>
    
}

export interface SpecialRequirementsDetailsTypeI1Attributes {
    
}

// Special requirements type details
export interface SpecialRequirementsTypeDetailsTypeI1 {
    
    $attributes: SpecialRequirementsTypeDetailsTypeI1Attributes
    
    // - ATA/IATA defined Special Service Requirement code. (refer to IATA AIRIMP documentation) - SK element : Keyword
    type: Array<string>
    
    // ATA/IATA status code Codeset list not applicable.
    status: Array<string>
    
    // Number of services requested
    quantity: Array<number>
    
    // Airline code or YY
    companyId: Array<string>
    
    // Processing indicator, coded. - Normal SSR P01 request for SSR explosion at EOT ...
    indicator: Array<string>
    
    // Board point
    boardpoint: Array<string>
    
    // Off point
    offpoint: Array<string>
    
    // free text data
    freetext: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsTypeI1Attributes {
    
}

// Special requirements data details
export interface SpecialRequirementsDataDetailsTypeI1 {
    
    $attributes: SpecialRequirementsDataDetailsTypeI1Attributes
    
    // Seat number + row (seat SSR) Number of seats (Group seat SSR)
    data: Array<string>
    
    // 3 occurrences may be used for in Amadeus seat SSR to indicate: 1. smoking/no smoking 2. 1st area preference 3. 2nd area preference or passenger type
    seatType: Array<string>
    
}

export interface SpecialRequirementsDataDetailsTypeI1Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeInformationTypeI3 {
    
    $attributes: DateAndTimeInformationTypeI3Attributes
    
    // date and time details
    dateAndTime: DateAndTimeDetailsTypeI3
    
}

export interface DateAndTimeInformationTypeI3Attributes {
    
}

// Date and time details
export interface DateAndTimeDetailsTypeI3 {
    
    $attributes: DateAndTimeDetailsTypeI3Attributes
    
    // Miscellaneous Charge Order element : date.- SEAT ssr : date of cahnge of gauge - gourp seat SSR : date of change of gauge
    firstDate: string
    
    // Miscellaneous Charge Order element : ARC carrier code code.
    movementType: string
    
    // Miscellaneous Charge Order element : ARC city code.
    locationIdentification: string
    
}

export interface DateAndTimeDetailsTypeI3Attributes {
    
}

// To specify the Amadeus PNR Tour Code element
export interface TourCodeType {
    
    $attributes: TourCodeTypeAttributes
    
    // Passenger type PAX for Passenger INF for Infant not occupying a seat
    passengerType: Array<string>
    
    // Formatted tour code
    formatedTour: Array<FormatedTourCodeType>
    
    // Net remit
    netRemit: Array<NetRemitTourCodeType>
    
    // Freeformat Tour information
    freeFormatTour: Array<FreeFormatTourCodeType>
    
}

export interface TourCodeTypeAttributes {
    
}

// Formated tour code
export interface FormatedTourCodeType {
    
    $attributes: FormatedTourCodeTypeAttributes
    
    // Tour type IT, BT
    productId: Array<string>
    
    // Last digit of year in which tour code became effective
    year: Array<number>
    
    // Airline code of sponsor
    companyId: Array<string>
    
    // Conference area approval code
    approvalCode: Array<string>
    
    // Tour identification
    partyId: Array<string>
    
}

export interface FormatedTourCodeTypeAttributes {
    
}

// Net remit tour code
export interface NetRemitTourCodeType {
    
    $attributes: NetRemitTourCodeTypeAttributes
    
    // Net remit indicator N
    indicator: Array<string>
    
    // Free flow text of next remit
    freetext: Array<string>
    
}

export interface NetRemitTourCodeTypeAttributes {
    
}

// Free format tour code
export interface FreeFormatTourCodeType {
    
    $attributes: FreeFormatTourCodeTypeAttributes
    
    // Free format indicator FF
    indicator: Array<string>
    
    // Free flow text
    freetext: Array<string>
    
}

export interface FreeFormatTourCodeTypeAttributes {
    
}

// To specify an Amadeus PNR Ticket element
export interface TicketElementType1 {
    
    $attributes: TicketElementType1Attributes
    
    // Passenger type PAX for Passenger INF for Infant not occupying a seat
    passengerType: Array<string>
    
    // general ticketing information
    ticket: TicketInformationType1
    
    // Print options (//print options after double slash)
    printOptions: Array<string>
    
}

export interface TicketElementType1Attributes {
    
}

// Ticket information
export interface TicketInformationType1 {
    
    $attributes: TicketInformationType1Attributes
    
    // Ticketing type TL, OK, DO, IN, MA, TR, AT, PT, XL, ST, SS
    indicator: string
    
    // Ticketing date
    date: Array<string>
    
    // Ticketing time
    time: Array<string>
    
    // Office Id
    officeId: Array<string>
    
    // Free flow text
    freetext: Array<string>
    
    // Airline code
    airlineCode: Array<string>
    
    // Queue number
    queueNumber: Array<string>
    
    // Category number
    queueCategory: Array<string>
    
    // SITA Addresses
    sitaAddress: Array<string>
    
}

export interface TicketInformationType1Attributes {
    
}

// To specify the way data are mapped for structured AB//, AM//, AM/H//, AM/D//AM/M//.
export interface StructuredAddressType1 {
    
    $attributes: StructuredAddressType1Attributes
    
    // Information type, coded 2 for billing address P08 for general mailing address P19 for miscellaneous mailing address P24 for home mailing address P25 for delivery mailing address
    informationType: Array<string>
    
    // address line
    address: StructuredAddressInformationType1
    
    // upto 8 possible address options
    optionalData: Array<StructuredAddressInformationType_5063C>
    
}

export interface StructuredAddressType1Attributes {
    
}

// Structured address information
export interface StructuredAddressInformationType1 {
    
    $attributes: StructuredAddressInformationType1Attributes
    
    // A1 for Address line 1
    optionA1: string
    
    // A1 50 char
    optionTextA1: string
    
}

export interface StructuredAddressInformationType1Attributes {
    
}

// Structured address information
export interface StructuredAddressInformationType_5063C {
    
    $attributes: StructuredAddressInformationType_5063CAttributes
    
    // CY for company - NA for name - A2 for addr line - PO for P.O box-ZP for postacl code - CI for city - ST for state-CO for country
    option: string
    
    // CY-NA-CI - 30char : A2 - 50 char: ST-CT- 25 char : PO 8 char - ZP 9 char.
    optionText: string
    
}

export interface StructuredAddressInformationType_5063CAttributes {
    
}

// To specify an Amadeus PNR Option element
export interface OptionElementType1 {
    
    $attributes: OptionElementType1Attributes
    
    // queuing option details
    optionDetail: Array<OptionElementInformationType1>
    
}

export interface OptionElementType1Attributes {
    
}

// Option element information
export interface OptionElementInformationType1 {
    
    $attributes: OptionElementInformationType1Attributes
    
    // Office Id
    officeId: Array<string>
    
    // Date
    date: Array<string>
    
    // Queue number
    queue: Array<number>
    
    // Category number
    category: Array<number>
    
    // Free flow text
    freetext: Array<string>
    
}

export interface OptionElementInformationType1Attributes {
    
}

// To request a Hard Copy Print
export interface PrinterIdentificationType {
    
    $attributes: PrinterIdentificationTypeAttributes
    
    // identification details
    identifierDetail: Array<PrinterIdentificationDetailsType>
    
    // 1A office id
    office: Array<string>
    
    // IATA teletype address
    teletypeAddress: Array<string>
    
}

export interface PrinterIdentificationTypeAttributes {
    
}

// Printer identification
export interface PrinterIdentificationDetailsType {
    
    $attributes: PrinterIdentificationDetailsTypeAttributes
    
    // name of the printer
    name: string
    
    // netwrok ID of the printer
    network: Array<string>
    
}

export interface PrinterIdentificationDetailsTypeAttributes {
    
}


export interface SeatEntityType {
    
    $attributes: SeatEntityTypeAttributes
    
    // To make Seat requests on flights within the PNR
    seatRequest: SeatRequestType
    
    // Used to convey specific seat details relative to Train for a specific request or the &#34;near-to&#34; seat details for a &#34;next-to&#34; request.
    railSeatReferenceInformation: Array<RailSeatReferenceInformationType1>
    
    // Rail Seat Preferences
    railSeatPreferences: Array<RailSeatPreferencesType1>
    
}

export interface SeatEntityTypeAttributes {
    
}

// To make Seat requests on flights within the PNR.
export interface SeatRequestType {
    
    $attributes: SeatRequestTypeAttributes
    
    // seat requirement details
    seat: Array<SeatRequierementsType>
    
    // Maximum 99 for Group Seat request
    special: Array<SeatRequierementsDataType>
    
}

export interface SeatRequestTypeAttributes {
    
}

// Seat requirements type details
export interface SeatRequierementsType {
    
    $attributes: SeatRequierementsTypeAttributes
    
    // G for group
    qualifier: Array<string>
    
    // Type of Seat requested. S - Smoking (SMST) N - No Smoking (NSST) RQST
    type: Array<string>
    
    // Board point
    boardpoint: Array<string>
    
    // Off point
    offpoint: Array<string>
    
}

export interface SeatRequierementsTypeAttributes {
    
}

// Seat requirements data details
export interface SeatRequierementsDataType {
    
    $attributes: SeatRequierementsDataTypeAttributes
    
    // Seat number + row (seat request) Number of seats (Group seat request)
    data: Array<string>
    
    // 3 occurrences may be used for in Amadeus seat request to indicate: 1. smoking/no smoking 2. 1st area preference 2nd area preference or passenger type
    seatType: Array<string>
    
}

export interface SeatRequierementsDataTypeAttributes {
    
}

// To convey full reference for a rail seat.
export interface RailSeatReferenceInformationType1 {
    
    $attributes: RailSeatReferenceInformationType1Attributes
    
    // Rail seat reference information.
    railSeatReferenceDetails: Array<SeatReferenceInformationType1>
    
}

export interface RailSeatReferenceInformationType1Attributes {
    
}


export interface SeatReferenceInformationType1 {
    
    $attributes: SeatReferenceInformationType1Attributes
    
    // Coach number.
    coachNumber: Array<string>
    
    // Deck number.
    deckNumber: Array<string>
    
    // Seat number.
    seatNumber: Array<string>
    
}

export interface SeatReferenceInformationType1Attributes {
    
}

// Description of the rail advanced seat request
export interface RailSeatPreferencesType1 {
    
    $attributes: RailSeatPreferencesType1Attributes
    
    // Selection of the type of seat request.
    seatRequestFunction: Array<string>
    
    // Seat smoking zone indicator.
    smokingIndicator: Array<string>
    
    // Seat class details.
    classDetails: Array<ClassDetailsType1>
    
    // Seat configuration details.
    seatConfiguration: Array<RailSeatConfigurationType1>
    
}

export interface RailSeatPreferencesType1Attributes {
    
}


export interface ClassDetailsType1 {
    
    $attributes: ClassDetailsType1Attributes
    
    // For the booking class code.
    code: Array<string>
    
    
    bookingClass: Array<string>
    
}

export interface ClassDetailsType1Attributes {
    
}


export interface RailSeatConfigurationType1 {
    
    $attributes: RailSeatConfigurationType1Attributes
    
    // Seat space.
    seatSpace: Array<string>
    
    // Coach type.
    coachType: Array<string>
    
    // Seat equipment.
    seatEquipment: Array<string>
    
    // Seat position.
    seatPosition: Array<string>
    
    // Seat direction.
    seatDirection: Array<string>
    
    // Seat deck.
    seatDeck: Array<string>
    
    // Special passenger information.
    specialPassengerType: Array<string>
    
}

export interface RailSeatConfigurationType1Attributes {
    
}

// To specify the Amadeus PNR Fare elements FE, FK, FS, FZ
export interface FareElementsType {
    
    $attributes: FareElementsTypeAttributes
    
    // E for FE - Endorsements / Restrictions element K for FK - Shadow AIR office ID element S for FS - Miscellaneous Ticketing Information element Z for FZ - Miscellaneous Information element
    generalIndicator: Array<string>
    
    // Passenger type PAX for Passenger INF for Infant not occupying a seat
    passengerType: Array<string>
    
    // 1. FK element: Office identification
    officeId: Array<string>
    
    // 1. FE element: Free text 2. FS element: Free text 3. FZ element: Free text
    freetextLong: Array<string>
    
}

export interface FareElementsTypeAttributes {
    
}

// To specify the Amadeus PNR Fare discount element
export interface FareDiscountElementType {
    
    $attributes: FareDiscountElementTypeAttributes
    
    // Passenger type PAX for Passenger INF for Infant not occupying a seat
    passengerType: Array<string>
    
    // To specify the discount details. Only 1 repetition must be used. The Fare Discount element cannot process multiple discounts. If you wish to enter multiple discounts for a passenger, you should enter several FD elements and associate them to the same passenger.
    discount: Array<DiscountInformationType1>
    
    // Date of birth
    birthDate: Array<string>
    
    // number of years or months
    numberDetail: Array<NumberOfUnitDetailsType3>
    
    // company ID and reference number (should not be used)
    rpInformation: Array<RpInformationType>
    
    // Customer info
    customer: Array<ItemDetailsType>
    
    // Resident Discount applicable for discount code RM,RC,DC,BP or BI
    residentDisc: Array<ItemDetailsType_186716C>
    
    // Contains Fare Discount attributes information with a key/value format.
    attributeDetails: Array<CodedAttributeInformationType7>
    
}

export interface FareDiscountElementTypeAttributes {
    
}

// Discount information
export interface DiscountInformationType1 {
    
    $attributes: DiscountInformationType1Attributes
    
    // Discount code
    adjustmentReason: Array<string>
    
    // Discount percentage
    percentage: Array<number>
    
    // Status code
    status: Array<string>
    
    // Staff employee number
    staffNumber: Array<string>
    
    // Staff employee name
    staffName: Array<string>
    
}

export interface DiscountInformationType1Attributes {
    
}

// Number of units details
export interface NumberOfUnitDetailsType3 {
    
    $attributes: NumberOfUnitDetailsType3Attributes
    
    // Number of years or months
    units: number
    
    // YRS for year MTH for month
    unitsQualifier: string
    
}

export interface NumberOfUnitDetailsType3Attributes {
    
}

// Rp information
export interface RpInformationType {
    
    $attributes: RpInformationTypeAttributes
    
    // Airline code (should not be used)
    companyId: Array<string>
    
    // Numeric value (should not be used)
    referenceNumber: Array<number>
    
}

export interface RpInformationTypeAttributes {
    
}

// To describe an item (id card, discount...)
export interface ItemDetailsType {
    
    $attributes: ItemDetailsTypeAttributes
    
    // Only applicable for some discount codes
    companyId: Array<string>
    
    // Only applicable for some discount codes
    cardType: Array<number>
    
    // Only applicable for some discount codes
    cardNumber: Array<number>
    
    // for PC - alpha value for other - numeric value
    cardCheck: Array<string>
    
    // for PC only
    owner: Array<number>
    
    // for PC only
    version: Array<number>
    
}

export interface ItemDetailsTypeAttributes {
    
}

// To describe an item (id card, discount...)
export interface ItemDetailsType_186716C {
    
    $attributes: ItemDetailsType_186716CAttributes
    
    // DN, TR,GR,AM,CR,MR
    idCardCode: Array<string>
    
    // T - used for TR resident discount only
    idCardType: Array<string>
    
    // Card Number
    cardNumber: Array<number>
    
    // Card alpha check
    alphaCheck: Array<string>
    
    // Zip code
    zipCode: Array<string>
    
    // Credential certificate number
    certificateNumber: Array<string>
    
}

export interface ItemDetailsType_186716CAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType7 {
    
    $attributes: CodedAttributeInformationType7Attributes
    
    // Attribute type (key)
    attributeType: string
    
    // provides a description for the attribute (value)
    attributeDescription: string
    
}

export interface CodedAttributeInformationType7Attributes {
    
}

// To specify the Amadeus PNR Manual Document Registration element
export interface ManualDocumentRegistrationType {
    
    $attributes: ManualDocumentRegistrationTypeAttributes
    
    // Passenger type PAX for Passenger INF for Infant not occupying a seat
    passengerType: Array<string>
    
    // documentation details
    document: Array<ManualDocumentType>
    
    // Free text
    freeflow: Array<string>
    
}

export interface ManualDocumentRegistrationTypeAttributes {
    
}

// Manual document
export interface ManualDocumentType {
    
    $attributes: ManualDocumentTypeAttributes
    
    // Numeric airline code
    companyId: string
    
    // Ticket number
    ticketNumber: string
    
    // Ticket number check digit
    ticketNumberCd: Array<number>
    
    // Last conjunction ticket number
    lastConjuction: Array<number>
    
    // Last conjunction ticket number check digit
    lastConjuctionCD: Array<number>
    
}

export interface ManualDocumentTypeAttributes {
    
}

// To specify the Amadeus PNR commission element
export interface CommissionElementType {
    
    $attributes: CommissionElementTypeAttributes
    
    // Passenger type PAX for Passenger INF for Infant not occupying a seat
    passengerType: Array<string>
    
    // Commission indicator M, C, P, CR, PR
    indicator: Array<string>
    
    // Commission
    commissionInfo: CommissionInformationType2
    
    // Old commission
    oldCommission: Array<CommissionInformationType_6428C>
    
    // Manual capping Amount (after tag C)
    manualCapping: Array<number>
    
}

export interface CommissionElementTypeAttributes {
    
}

// Amadeus commission information
export interface CommissionInformationType2 {
    
    $attributes: CommissionInformationType2Attributes
    
    // Percentage (max 2 decimals)
    percentage: Array<number>
    
    // Amount (before tag A)
    amount: Array<number>
    
    // VAT indicator V
    vatIndicator: Array<string>
    
    // Net remit indicator N
    remitIndicator: Array<string>
    
}

export interface CommissionInformationType2Attributes {
    
}

// Amadeus commission information
export interface CommissionInformationType_6428C {
    
    $attributes: CommissionInformationType_6428CAttributes
    
    // Percentage (max 2 decimals)
    percentage: Array<number>
    
    // Amount (before tag A)
    amount: Array<number>
    
    // VAT indicator V
    vatIndicator: Array<string>
    
    // Net remit indicator N
    remitIndicator: Array<string>
    
}

export interface CommissionInformationType_6428CAttributes {
    
}

// To specify the Amadeus PNR Original Issue/Issue in Exchange For element
export interface OriginalIssueType {
    
    $attributes: OriginalIssueTypeAttributes
    
    // Passenger type PAX for Passenger INF for Infant not occupying a seat
    passengerType: Array<string>
    
    // 8 for Voucher/Certificate indicator RN for RN indicator E for electronic
    voucherIndicator: Array<string>
    
    // 1st occurrence for original issue 2 occurrences for issues in exchange
    issue: Array<IssueInformationType>
    
    // Base fare amount
    baseFare: Array<number>
    
    // Total tax amount
    totalTax: Array<number>
    
    // Penalty amount
    penalty: Array<number>
    
    // Free flow text
    freeflow: Array<string>
    
}

export interface OriginalIssueTypeAttributes {
    
}

// Issue information
export interface IssueInformationType {
    
    $attributes: IssueInformationTypeAttributes
    
    // Numeric airline code
    airlineCode: string
    
    // {Original issue , exchange for} document number
    documentNumber: string
    
    // {Original issue , exchange for} document check digit
    documentCD: Array<number>
    
    // 1st coupon number
    coupon1: Array<string>
    
    // 2nd coupon number
    coupon2: Array<string>
    
    // 3rd coupon number
    coupon3: Array<string>
    
    // 4th coupon number
    coupon4: Array<string>
    
    // Last 2 digits of the last conjunction document of the {original issue , exchange for} document
    lastConjunction: Array<number>
    
    // Last conjunction document of the {original issue , exchange for} document check digit
    exchangeDocumentCD: Array<number>
    
    // 1st last conjunction document of the {original issue , exchange for} document coupon number
    lastConjunction1: Array<string>
    
    // 2nd last conjunction document of the {original issue , exchange for} document coupon number
    lastConjunction2: Array<string>
    
    // 3rd last conjunction document of the {original issue , exchange for} document 4th coupon number
    lastConjunction3: Array<string>
    
    // 4th last conjunction document of the {original issue , exchange for} document 1st coupon number
    lastConjunction4: Array<string>
    
    // City code of the issue
    cityCode: string
    
    // Date of the {original , new} issue
    dateOfIssue: string
    
    // IATA number
    iataNumber: Array<string>
    
    // Currency
    currency: Array<string>
    
    // Amount
    amount: Array<number>
    
}

export interface IssueInformationTypeAttributes {
    
}

// To convey details describing the form of payment
export interface FormOfPaymentTypeI4 {
    
    $attributes: FormOfPaymentTypeI4Attributes
    
    // form of payment details
    fop: Array<FormOfPaymentDetailsTypeI4>
    
}

export interface FormOfPaymentTypeI4Attributes {
    
}

// Form of payment details
export interface FormOfPaymentDetailsTypeI4 {
    
    $attributes: FormOfPaymentDetailsTypeI4Attributes
    
    // Form(s) of payment CA for Cash (Amadeus code CASH) CK for Check (Amadeus code CHECK) CC for Credit card (Amadeus code CC) MS for Miscellaneous (Amadeus code MS)
    identification: string
    
    // Amount
    amount: Array<number>
    
    // Credit card code
    creditCardCode: Array<string>
    
    // Credit card account number
    accountNumber: Array<string>
    
    // Credit card expiry date
    expiryDate: Array<string>
    
    // Credit card approval code
    approvalCode: Array<string>
    
    // Customer account number
    customerAccountNumber: Array<string>
    
    // Extended credit payment request E for extended payment
    paymentTimeReference: Array<string>
    
    // free text
    freetext: Array<string>
    
    // Currency (as there is no place elsewhere)
    currencyCode: Array<string>
    
}

export interface FormOfPaymentDetailsTypeI4Attributes {
    
}

// Complementary data for form of payement information
export interface MarketSpecificDataType {
    
    $attributes: MarketSpecificDataTypeAttributes
    
    // FOP detail Sequence Number.
    fopSequenceNumber: number
    
    // Passenger type: PAX or INF.
    passengerType: Array<string>
    
    // Form of Payment Market Specific Data
    newFopsDetails: Array<MarketSpecificDataDetailsType>
    
    // To provide extended FOP details.
    extFOP: Array<ReferencingDetailsTypeI3>
    
}

export interface MarketSpecificDataTypeAttributes {
    
}

// Form of payment details
export interface MarketSpecificDataDetailsType {
    
    $attributes: MarketSpecificDataDetailsTypeAttributes
    
    // Credit Card Verification data (*CV data)
    cvData: Array<string>
    
    // Printed and reported freeflow
    printedFreeflow: Array<string>
    
    // Reported but not printed freeflow
    reportedFreeflow: Array<string>
    
    // Credit Card ONO data.
    onoData: Array<string>
    
    // Credit Card GWT data
    gwtData: Array<string>
    
    // Credit Card Holder name.
    chdData: Array<string>
    
    // Delegation code.
    delegationCode: Array<string>
    
    // MCO Fop Document Number
    mcoDocNumber: Array<string>
    
    // MCO Fop Coupon Number
    mcoCouponNumber: Array<string>
    
    // MCO Fop Iata Number
    mcoIataNumber: Array<number>
    
    // MCO Fop Place of Issue
    mcoPlaceOfIssue: Array<string>
    
    // MCO Fop date of Issue. DDMMMYY
    mcoDateOfIssue: Array<string>
    
    // Standard Fop Iata Number
    iataNumber: Array<number>
    
}

export interface MarketSpecificDataDetailsTypeAttributes {
    
}


export interface ReferencingDetailsTypeI3 {
    
    $attributes: ReferencingDetailsTypeI3Attributes
    
    // Reference qualifier
    referenceQualifier: string
    
    // Reference value.
    dataValue: Array<string>
    
}

export interface ReferencingDetailsTypeI3Attributes {
    
}

// To identify a status and related information.
export interface StatusTypeI3 {
    
    $attributes: StatusTypeI3Attributes
    
    // To convey the status details
    statusDetails: StatusDetailsTypeI3
    
}

export interface StatusTypeI3Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI3 {
    
    $attributes: StatusDetailsTypeI3Attributes
    
    // Service indicator SV : Service Fee TS : Timestamped Remark
    indicator: Array<string>
    
}

export interface StatusDetailsTypeI3Attributes {
    
}

// To specify frequent traveler verification.
export interface FrequentTravellerVerificationType {
    
    $attributes: FrequentTravellerVerificationTypeAttributes
    
    // A Add FT name N Name verification R Redeem miles
    actionRequest: string
    
    // company identification
    company: Array<CompanyIdentificationType4>
    
    // frequent flyer number
    account: ProductAccountDetailsType
    
}

export interface FrequentTravellerVerificationTypeAttributes {
    
}

// Company identification
export interface CompanyIdentificationType4 {
    
    $attributes: CompanyIdentificationType4Attributes
    
    // To specify the frequent traveller program company code
    code: string
    
    // To specify the frequent traveller program partnership company code
    partnerCode: Array<string>
    
    // To specify the frequent traveller program other partnership company code
    otherPartnerCode: Array<string>
    
}

export interface CompanyIdentificationType4Attributes {
    
}

// Product or account details
export interface ProductAccountDetailsType {
    
    $attributes: ProductAccountDetailsTypeAttributes
    
    // To specify the product/account number qualifier.
    numberQualifier: Array<string>
    
    // A code to identify a frequent traveller (e.g. a frequent traveller number)
    number: string
    
}

export interface ProductAccountDetailsTypeAttributes {
    
}

// To specify the Amadeus PNR Ticketing Carrier Designator element
export interface TicketingCarrierDesignatorType {
    
    $attributes: TicketingCarrierDesignatorTypeAttributes
    
    // Passenger type PAX for Passenger INF for Infant not occupying a seat
    passengerType: Array<string>
    
    // airline code and printer details
    carrier: Array<TicketingCarrierType>
    
}

export interface TicketingCarrierDesignatorTypeAttributes {
    
}

// Ticketing carrier
export interface TicketingCarrierType {
    
    $attributes: TicketingCarrierTypeAttributes
    
    // Airline code of sponsor
    airlineCode: string
    
    // Print itinerary option IBP, IEP, IBPJ, IEPJ
    optionInfo: Array<string>
    
    // Printer number
    printerNumber: Array<string>
    
    // ISO code 639 - 1988
    language: Array<string>
    
}

export interface TicketingCarrierTypeAttributes {
    
}

// To specify the Amadeus PNR Fare Print Override element
export interface FarePrintOverrideType {
    
    $attributes: FarePrintOverrideTypeAttributes
    
    // Passenger type PAX for Passenger INF for Infant not occupying a seat
    passengerType: Array<string>
    
    // fare override detaild
    override: Array<FarePrintOverrideDetailsType>
    
}

export interface FarePrintOverrideTypeAttributes {
    
}

// Fare print override
export interface FarePrintOverrideDetailsType {
    
    $attributes: FarePrintOverrideDetailsTypeAttributes
    
    // Base fare override
    baseFare: string
    
    // Total fare override
    totalFare: Array<string>
    
    // equivalent fare override
    equivalentFare: Array<string>
    
    // Tax amount override
    taxAmount: Array<string>
    
}

export interface FarePrintOverrideDetailsTypeAttributes {
    
}

// To convey frequent traveler program information relating to a specific traveller or group.
export interface FrequentTravellerInformationTypeU {
    
    $attributes: FrequentTravellerInformationTypeUAttributes
    
    // frequent traveller identification
    frequentTraveller: FrequentTravellerIdentificationTypeU
    
}

export interface FrequentTravellerInformationTypeUAttributes {
    
}

// Frequent traveller identification
export interface FrequentTravellerIdentificationTypeU {
    
    $attributes: FrequentTravellerIdentificationTypeUAttributes
    
    // Airline Code
    companyId: string
    
    // Frequent Traveller Number
    membershipNumber: string
    
}

export interface FrequentTravellerIdentificationTypeUAttributes {
    
}

// To specify security between offices
export interface ExtendedOwnershipSecurityDetailsType1 {
    
    $attributes: ExtendedOwnershipSecurityDetailsType1Attributes
    
    // This composite contains security data between entities or related to one entity.
    securityDetails: Array<ExtendedSecurityDetailsType1>
    
}

export interface ExtendedOwnershipSecurityDetailsType1Attributes {
    
}

// This composite contains details on agreement and access mode between two entities
export interface ExtendedSecurityDetailsType1 {
    
    $attributes: ExtendedSecurityDetailsType1Attributes
    
    // Used to specify which kind of entities is specified. F - for family
    typeOfEntity: Array<string>
    
    // Used to specify the access mode regarding agreement and entities
    accessMode: Array<string>
    
    // Used to specify entity on which the detailed security applied. Mask is specified using *, for instance, corporate 1A0 is specified as follows : ***1A0***.
    inhouseIdentification: Array<string>
    
}

export interface ExtendedSecurityDetailsType1Attributes {
    
}


export interface PNR_RetrieveType {
    
    $attributes: PNR_RetrieveTypeAttributes
    
    // Informations on the PNR options requested and the printer identification
    settings: Array<settingsType>
    
    // Set of informations needed for the retreival of the PNR
    retrievalFacts: retrievalFactsType
    
}

export interface PNR_RetrieveTypeAttributes {
    
}


export interface settingsType {
    
    $attributes: settingsTypeAttributes
    
    // optional information on what needs to be returned in the PNR , hardcopy print or PNR mode.
    options: OptionalPNRActionsType1
    
    // Identification of the printer when hardcopy is requested
    printer: Array<PrinterIdentificationType1>
    
}

export interface settingsTypeAttributes {
    
}

// PNR options
export interface OptionalPNRActionsType1 {
    
    $attributes: OptionalPNRActionsType1Attributes
    
    // 51 - return all RTSVC 52 - return line numbers 53 - return RLRs 55 - do not return individual names of a group 101 - hard copy print 201 - return RTSVC for car 231 - return RTSVC for hotel 261 - return RTSVC for air 300 - TY mode
    optionCode: Array<number>
    
}

export interface OptionalPNRActionsType1Attributes {
    
}

// Printer identification
export interface PrinterIdentificationType1 {
    
    $attributes: PrinterIdentificationType1Attributes
    
    // printer identification
    identifierDetail: Array<PrinterIdentificationDetailsType1>
    
    // amadeus office id
    office: Array<string>
    
    // IATA teletype address
    teletypeAddress: Array<string>
    
}

export interface PrinterIdentificationType1Attributes {
    
}

// Printer identification
export interface PrinterIdentificationDetailsType1 {
    
    $attributes: PrinterIdentificationDetailsType1Attributes
    
    // name of the printer
    name: string
    
    // network id of the printer
    network: Array<string>
    
}

export interface PrinterIdentificationDetailsType1Attributes {
    
}


export interface retrievalFactsType {
    
    $attributes: retrievalFactsTypeAttributes
    
    // retrieval type , options , and references related to the PNR content .
    retrieve: RetrievePNRType
    
    // Informations needed for retreive by record locator or retreive by customer profile.
    reservationOrProfileIdentifier: Array<ReservationControlInformationType2>
    
    // informations related to the travellers
    personalFacts: Array<personalFactsType>
    
    // Informations needed for a retreive by frequent flyer .
    frequentFlyer: Array<FrequentTravellerIdentificationCodeType7>
    
    // Informations needed for a retreive by account number
    accounting: Array<AccountingInformationElementType2>
    
}

export interface retrievalFactsTypeAttributes {
    
}

// Retrieve PNR
export interface RetrievePNRType {
    
    $attributes: RetrievePNRTypeAttributes
    
    // 1 - redisplay 2 - retrieve by record locator 3 - retrieve by office and name 4 - retrieve by service and name 5 - retrieve by frequent traveller 6 - retrieve by account number 7 - retrieve by customer profile 8 - retrieve by Insurance policy number 9 - retrieve by numeric record locator 10 - Retrieve Previous PNR
    type: number
    
    // information needed for redisplay if RTSVC (AIR, HTL, CAR). Needed for retrieve by service and name . Optional for retrieve by office and name
    service: Array<string>
    
    // Element tattoo. Optional for redisplay when RTSVC.
    tattoo: Array<string>
    
    // PNR owner office id
    office: Array<string>
    
    // Target system for retrieve PNR via claim. Only for retrieve by record locator and retrieve by service and name
    targetSystem: Array<string>
    
    // X - RTAXR V - RV Optional for redisplay and retrieval types 2, 3 and 4. N/A otherwise.
    option1: Array<string>
    
    // A - active PNRs only Optional for retrieve by office and name. N/A otherwise.
    option2: Array<string>
    
}

export interface RetrievePNRTypeAttributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationType2 {
    
    $attributes: ReservationControlInformationType2Attributes
    
    // this segment is used to store the reservation number
    reservation: Array<ReservationControlInformationDetailsType1>
    
}

export interface ReservationControlInformationType2Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsType1 {
    
    $attributes: ReservationControlInformationDetailsType1Attributes
    
    // for the PNR record locator: 1A for the reservation number: provider code
    companyId: Array<string>
    
    // this is the place to store the identifier
    controlNumber: string
    
    // if &#34;N&#34; is filled, it indicates that the number is a reservation number
    controlType: Array<string>
    
}

export interface ReservationControlInformationDetailsType1Attributes {
    
}


export interface personalFactsType {
    
    $attributes: personalFactsTypeAttributes
    
    // Informations needed for retreive by office and name or retreive by service and name .
    travellerInformation: TravellerInformationType1
    
    // Informations on the travel product
    productInformation: Array<TravelProductInformationType2>
    
    // Ticket number that can be used optionally when retreive by record locator is done .
    ticket: Array<TicketNumberType1>
    
}

export interface personalFactsTypeAttributes {
    
}

// Traveller information
export interface TravellerInformationType1 {
    
    $attributes: TravellerInformationType1Attributes
    
    // traveler surname information
    traveller: TravellerSurnameInformationTypeI2
    
    // N/A for retrieve by record locator
    passenger: Array<TravellerDetailsTypeI2>
    
}

export interface TravellerInformationType1Attributes {
    
}

// TRAVELLER SURNAME INFORMATION
export interface TravellerSurnameInformationTypeI2 {
    
    $attributes: TravellerSurnameInformationTypeI2Attributes
    
    // traveler last name or group name
    surname: string
    
}

export interface TravellerSurnameInformationTypeI2Attributes {
    
}

// TRAVELLER DETAILS
export interface TravellerDetailsTypeI2 {
    
    $attributes: TravellerDetailsTypeI2Attributes
    
    // Traveler first name
    firstName: string
    
}

export interface TravellerDetailsTypeI2Attributes {
    
}

// Travel product information
export interface TravelProductInformationType2 {
    
    $attributes: TravelProductInformationType2Attributes
    
    // Defaults to current date
    product: Array<ProductDateTimeTypeI6>
    
    // Needed for retrieval by flight, optional otherwise.
    boardpointDetail: Array<LocationTypeI6>
    
    // needed only if board point is provided.
    offpointDetail: Array<LocationTypeI6>
    
    // company identification
    company: Array<CompanyIdentificationTypeI8>
    
    // needed only for retrieve by flight
    productDetails: Array<ProductIdentificationDetailsTypeI6>
    
}

export interface TravelProductInformationType2Attributes {
    
}

// PRODUCT DATE OR TIME
export interface ProductDateTimeTypeI6 {
    
    $attributes: ProductDateTimeTypeI6Attributes
    
    // Departure/ pick-up/ check-in date
    depDate: string
    
    // Only for retrieve by flight/departure time, needed.
    depTime: Array<string>
    
    // Return/ drop-off/ check-out date
    arrDate: Array<string>
    
}

export interface ProductDateTimeTypeI6Attributes {
    
}

// LOCATION
export interface LocationTypeI6 {
    
    $attributes: LocationTypeI6Attributes
    
    // Board point or off point
    cityCode: string
    
}

export interface LocationTypeI6Attributes {
    
}

// COMPANY IDENTIFICATION
export interface CompanyIdentificationTypeI8 {
    
    $attributes: CompanyIdentificationTypeI8Attributes
    
    // Airline/ provider code
    code: string
    
}

export interface CompanyIdentificationTypeI8Attributes {
    
}

// PRODUCT IDENTIFICATION DETAILS
export interface ProductIdentificationDetailsTypeI6 {
    
    $attributes: ProductIdentificationDetailsTypeI6Attributes
    
    // Flight number
    identification: number
    
    // Flight number alpha suffix
    subtype: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI6Attributes {
    
}

// TICKET NUMBER
export interface TicketNumberType1 {
    
    $attributes: TicketNumberType1Attributes
    
    // airline code
    airline: number
    
    // airline ticket number
    ticketNumber: number
    
}

export interface TicketNumberType1Attributes {
    
}

// Frequent traveller information
export interface FrequentTravellerIdentificationCodeType7 {
    
    $attributes: FrequentTravellerIdentificationCodeType7Attributes
    
    // frequent traveler identification needed when retreive by frequent traveller
    frequentTraveller: FrequentTravellerIdentificationTypeI1
    
}

export interface FrequentTravellerIdentificationCodeType7Attributes {
    
}

// FREQUENT TRAVELLER IDENTIFICATION
export interface FrequentTravellerIdentificationTypeI1 {
    
    $attributes: FrequentTravellerIdentificationTypeI1Attributes
    
    // airline code
    companyId: string
    
    // frequent traveller reference number
    membershipNumber: string
    
}

export interface FrequentTravellerIdentificationTypeI1Attributes {
    
}

// Accounting information element
export interface AccountingInformationElementType2 {
    
    $attributes: AccountingInformationElementType2Attributes
    
    // accounting element needed when retreive by account number
    account: AccountingElementType2
    
}

export interface AccountingInformationElementType2Attributes {
    
}

// ACCOUNTING ELEMENT
export interface AccountingElementType2 {
    
    $attributes: AccountingElementType2Attributes
    
    // account number
    number: string
    
}

export interface AccountingElementType2Attributes {
    
}


export interface PNR_CancelType {
    
    $attributes: PNR_CancelTypeAttributes
    
    // reservation control informations
    reservationInfo: Array<ReservationControlInformationType3>
    
    // specific actions to be processed on PNR
    pnrActions: OptionalPNRActionsType2
    
    // CANCEL PNR ELEMENT
    cancelElements: Array<CancelPNRElementType>
    
}

export interface PNR_CancelTypeAttributes {
    
}

// Reservation control information
export interface ReservationControlInformationType3 {
    
    $attributes: ReservationControlInformationType3Attributes
    
    // record information
    reservation: ReservationControlInformationDetailsTypeI5
    
}

export interface ReservationControlInformationType3Attributes {
    
}

// RESERVATION CONTROL INFORMATION
export interface ReservationControlInformationDetailsTypeI5 {
    
    $attributes: ReservationControlInformationDetailsTypeI5Attributes
    
    // profile or PNR record locator
    controlNumber: string
    
}

export interface ReservationControlInformationDetailsTypeI5Attributes {
    
}

// To specify specific Actions to be processed on PNR.
export interface OptionalPNRActionsType2 {
    
    $attributes: OptionalPNRActionsType2Attributes
    
    // Processing options. Only the option 0, 10, 11 and 20 are supported.
    optionCode: Array<number>
    
}

export interface OptionalPNRActionsType2Attributes {
    
}

// To cancel a PNR element
export interface CancelPNRElementType {
    
    $attributes: CancelPNRElementTypeAttributes
    
    // Cancel type
    entryType: string
    
    // Element data
    element: Array<ElementIdentificationType>
    
}

export interface CancelPNRElementTypeAttributes {
    
}

// ELEMENT DATA
export interface ElementIdentificationType {
    
    $attributes: ElementIdentificationTypeAttributes
    
    // Element qualifier
    identifier: Array<string>
    
    // element number
    number: Array<number>
    
    // sub element number
    subElement: Array<number>
    
}

export interface ElementIdentificationTypeAttributes {
    
}


export interface PNR_TransferOwnershipType {
    
    $attributes: PNR_TransferOwnershipTypeAttributes
    
    // This segment conveys the Amadeus record locator information. There is no record locator if the PNR is in creation mode.
    recordLocator: ReservationControlInformationTypeI5
    
    // Optional action to propagate the changes through the AXR.
    propagatioAction: Array<ActionIdentificationType3>
    
    // This group conveys the new owner as an Amadeus office identificator and additionally the action to take (queing office, ticketing office or option queue element update). This group is mutually exclusive with REF segement.
    officeIdentification: Array<officeIdentificationType>
    
    // This segement conveys the new owner as an OA identification. This segment is mutually exclusive with the Group 1.
    oaIdentificator: Array<ReferenceInformationTypeI3>
    
}

export interface PNR_TransferOwnershipTypeAttributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI5 {
    
    $attributes: ReservationControlInformationTypeI5Attributes
    
    // This composite conveys the details of the record locator.
    reservation: ReservationControlInformationDetailsTypeI6
    
}

export interface ReservationControlInformationTypeI5Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI6 {
    
    $attributes: ReservationControlInformationDetailsTypeI6Attributes
    
    // This field contains the Amadeus record locator.
    controlNumber: string
    
}

export interface ReservationControlInformationDetailsTypeI6Attributes {
    
}

// To provide details of action required or taken, the flights to which this action refers, and reasons for action taken.
export interface ActionIdentificationType3 {
    
    $attributes: ActionIdentificationType3Attributes
    
    // Update action to perform
    actionRequestCode: string
    
}

export interface ActionIdentificationType3Attributes {
    
}


export interface officeIdentificationType {
    
    $attributes: officeIdentificationTypeAttributes
    
    // Amadeus office identificator and/or User Security Entity.
    officeIdentificator: AdditionalBusinessSourceInformationType1
    
    // The optional update actions to take on: - the queing office - the ticketing office - the option queue element
    specificChanges: Array<ActionIdentificationType3>
    
}

export interface officeIdentificationTypeAttributes {
    
}

// To specify ownership and creator of a PNR
export interface AdditionalBusinessSourceInformationType1 {
    
    $attributes: AdditionalBusinessSourceInformationType1Attributes
    
    // Contains the new responsible identification details
    originatorDetails: OriginatorIdentificationDetailsType1
    
}

export interface AdditionalBusinessSourceInformationType1Attributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsType1 {
    
    $attributes: OriginatorIdentificationDetailsType1Attributes
    
    // Office identificator
    inHouseIdentification1: Array<string>
    
    // User Security Entity
    inHouseIdentification2: Array<string>
    
}

export interface OriginatorIdentificationDetailsType1Attributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInformationTypeI3 {
    
    $attributes: ReferenceInformationTypeI3Attributes
    
    // identify an element
    referenceDetails: ReferencingDetailsTypeI4
    
}

export interface ReferenceInformationTypeI3Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI4 {
    
    $attributes: ReferencingDetailsTypeI4Attributes
    
    // identifier of the element referenced
    value: string
    
}

export interface ReferencingDetailsTypeI4Attributes {
    
}


export interface PNR_TransferOwnershipReplyType {
    
    $attributes: PNR_TransferOwnershipReplyTypeAttributes
    
    // This group conveys the general error or warning details.
    generalError: Array<ErrorGroupType2>
    
    // If present in the request, the Amadeus record locator is repeated in the reply.
    recordLocator: Array<ReservationControlInformationTypeI6>
    
    // This group returns the office identificator of the request, if present, and eventually the error specific to this data.
    officeIdentification: Array<officeIdentificationType1>
    
    // This group returns the OA identificator of the request, if present, and eventually the error specific to this data.
    oaIdentification: Array<oaIdentificationType>
    
}

export interface PNR_TransferOwnershipReplyTypeAttributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType2 {
    
    $attributes: ErrorGroupType2Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType5
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType5>
    
}

export interface ErrorGroupType2Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType5 {
    
    $attributes: ApplicationErrorInformationType5Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType3
    
}

export interface ApplicationErrorInformationType5Attributes {
    
}


export interface ApplicationErrorDetailType3 {
    
    $attributes: ApplicationErrorDetailType3Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: string
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: string
    
}

export interface ApplicationErrorDetailType3Attributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType5 {
    
    $attributes: FreeTextInformationType5Attributes
    
    
    freeTextDetails: FreeTextDetailsType5
    
    // Free text and message sequence numbers of the remarks.
    freeText: string
    
}

export interface FreeTextInformationType5Attributes {
    
}


export interface FreeTextDetailsType5 {
    
    $attributes: FreeTextDetailsType5Attributes
    
    
    textSubjectQualifier: string
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType5Attributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI6 {
    
    $attributes: ReservationControlInformationTypeI6Attributes
    
    // This composite conveys the details of the record locator.
    reservation: ReservationControlInformationDetailsTypeI7
    
}

export interface ReservationControlInformationTypeI6Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI7 {
    
    $attributes: ReservationControlInformationDetailsTypeI7Attributes
    
    // This field contains the Amadeus record locator.
    controlNumber: string
    
}

export interface ReservationControlInformationDetailsTypeI7Attributes {
    
}


export interface officeIdentificationType1 {
    
    $attributes: officeIdentificationType1Attributes
    
    // The office identificator of the request.
    officeIdentificator: AdditionalBusinessSourceInformationType2
    
    // This group contains the error or warning that applies to this office identificator.
    officeError: Array<ErrorGroupType2>
    
}

export interface officeIdentificationType1Attributes {
    
}

// To specify ownership and creator of a PNR
export interface AdditionalBusinessSourceInformationType2 {
    
    $attributes: AdditionalBusinessSourceInformationType2Attributes
    
    // Contains the new responsible identification details
    originatorDetails: OriginatorIdentificationDetailsType2
    
}

export interface AdditionalBusinessSourceInformationType2Attributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsType2 {
    
    $attributes: OriginatorIdentificationDetailsType2Attributes
    
    // Office identificator
    inHouseIdentification1: Array<string>
    
    // User Security Entity
    inHouseIdentification2: Array<string>
    
}

export interface OriginatorIdentificationDetailsType2Attributes {
    
}


export interface oaIdentificationType {
    
    $attributes: oaIdentificationTypeAttributes
    
    // The OA identificator of the request.
    oaIdentificator: ReferenceInformationTypeI4
    
    // This group contains the error or warning that applies to this OA identificator.
    oaError: Array<ErrorGroupType2>
    
}

export interface oaIdentificationTypeAttributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInformationTypeI4 {
    
    $attributes: ReferenceInformationTypeI4Attributes
    
    // identify an element
    referenceDetails: ReferencingDetailsTypeI5
    
}

export interface ReferenceInformationTypeI4Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI5 {
    
    $attributes: ReferencingDetailsTypeI5Attributes
    
    // identifier of the element referenced
    value: string
    
}

export interface ReferencingDetailsTypeI5Attributes {
    
}


export interface Queue_PlacePNRType {
    
    $attributes: Queue_PlacePNRTypeAttributes
    
    // specify the type of placement to be done queue place on queue queue place on another queue queue place off queue
    placementOption: SelectionDetailsTypeI3
    
    // provides upto 10 target offices where the PNR/Msg can be queue placed to
    targetDetails: Array<targetDetailsType>
    
    // contains the record locator to be queue placed
    recordLocator: ReservationControlInformationTypeI7
    
}

export interface Queue_PlacePNRTypeAttributes {
    
}

// To specify the details for making a selection.
export interface SelectionDetailsTypeI3 {
    
    $attributes: SelectionDetailsTypeI3Attributes
    
    // specify queue type
    selectionDetails: SelectionDetailsInformationTypeI5
    
}

export interface SelectionDetailsTypeI3Attributes {
    
}

// To specify a selected option and associated information.
export interface SelectionDetailsInformationTypeI5 {
    
    $attributes: SelectionDetailsInformationTypeI5Attributes
    
    // to specify if noramal or delay queue
    option: string
    
}

export interface SelectionDetailsInformationTypeI5Attributes {
    
}


export interface targetDetailsType {
    
    $attributes: targetDetailsTypeAttributes
    
    // used to specify the target office for which the queue count is to be displayed
    targetOffice: AdditionalBusinessSourceInformationType3
    
    // used to specify the queue if required
    queueNumber: Array<QueueInformationTypeI>
    
    // used to select the category
    categoryDetails: Array<SubQueueInformationTypeI>
    
    // used to pass the target date/time if not default
    placementDate: Array<StructuredDateTimeInformationType2>
    
}

export interface targetDetailsTypeAttributes {
    
}

// To specify ownership and creator of a PNR
export interface AdditionalBusinessSourceInformationType3 {
    
    $attributes: AdditionalBusinessSourceInformationType3Attributes
    
    // SOURCE TYPE
    sourceType: SourceTypeDetailsTypeI
    
    // ORIGINATOR DETAILS
    originatorDetails: Array<OriginatorIdentificationDetailsTypeI7>
    
}

export interface AdditionalBusinessSourceInformationType3Attributes {
    
}

// To identify the type of source.
export interface SourceTypeDetailsTypeI {
    
    $attributes: SourceTypeDetailsTypeIAttributes
    
    // to define if own office or different office being targetted
    sourceQualifier1: string
    
}

export interface SourceTypeDetailsTypeIAttributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI7 {
    
    $attributes: OriginatorIdentificationDetailsTypeI7Attributes
    
    // the office that is being targetted
    inHouseIdentification1: string
    
}

export interface OriginatorIdentificationDetailsTypeI7Attributes {
    
}

// To specify details of a reservation queue.
export interface QueueInformationTypeI {
    
    $attributes: QueueInformationTypeIAttributes
    
    // queue identification
    queueDetails: QueueInformationDetailsTypeI
    
}

export interface QueueInformationTypeIAttributes {
    
}

// To identify the name of the queue, position of items, count, maximum items allowed, status and related queues.
export interface QueueInformationDetailsTypeI {
    
    $attributes: QueueInformationDetailsTypeIAttributes
    
    // queue number
    number: number
    
}

export interface QueueInformationDetailsTypeIAttributes {
    
}

// To specify details of a reservation sub queue
export interface SubQueueInformationTypeI {
    
    $attributes: SubQueueInformationTypeIAttributes
    
    // identifies the category or categories.
    subQueueInfoDetails: SubQueueInformationDetailsTypeI
    
}

export interface SubQueueInformationTypeIAttributes {
    
}

// To identify the name of the sub queue, count, maximum items allowed and status.
export interface SubQueueInformationDetailsTypeI {
    
    $attributes: SubQueueInformationDetailsTypeIAttributes
    
    // E for every category A for cats with items to be worked C for category number N for nickname CN for both category number and nickname numeric for date range
    identificationType: string
    
    // category number
    itemNumber: Array<string>
    
    // used for nickname on inbound used for category name on outbound
    itemDescription: Array<string>
    
}

export interface SubQueueInformationDetailsTypeIAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType2 {
    
    $attributes: StructuredDateTimeInformationType2Attributes
    
    // used to select the date range
    timeMode: Array<number>
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType5>
    
}

export interface StructuredDateTimeInformationType2Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType5 {
    
    $attributes: StructuredDateTimeType5Attributes
    
    // Year number. The format is a little long for short term usage but it can be reduced by implementation if required.
    year: string
    
    // Month number in the year ( begins to 1 )
    month: string
    
    // Day number in the month ( begins to 1 )
    day: string
    
    // Hour between 0 and 23
    hour: Array<string>
    
}

export interface StructuredDateTimeType5Attributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI7 {
    
    $attributes: ReservationControlInformationTypeI7Attributes
    
    // contains the record locator
    reservation: ReservationControlInformationDetailsTypeI8
    
}

export interface ReservationControlInformationTypeI7Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI8 {
    
    $attributes: ReservationControlInformationDetailsTypeI8Attributes
    
    // contains the record locator to be queue placed
    controlNumber: string
    
}

export interface ReservationControlInformationDetailsTypeI8Attributes {
    
}


export interface Queue_PlacePNRReplyType {
    
    $attributes: Queue_PlacePNRReplyTypeAttributes
    
    // any errors should be returned in this group
    errorReturn: Array<errorReturnType>
    
    // record locator
    recordLocator: Array<ReservationControlInformationTypeI8>
    
}

export interface Queue_PlacePNRReplyTypeAttributes {
    
}


export interface errorReturnType {
    
    $attributes: errorReturnTypeAttributes
    
    // returns the error code
    errorDefinition: ApplicationErrorInformationTypeI
    
    // contains the text of the error
    errorText: Array<FreeTextInformationType6>
    
}

export interface errorReturnTypeAttributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationTypeI {
    
    $attributes: ApplicationErrorInformationTypeIAttributes
    
    // error details
    errorDetails: ApplicationErrorDetailTypeI
    
}

export interface ApplicationErrorInformationTypeIAttributes {
    
}

// Code assigned by the recipient of a message to indicate a data validation error condition.
export interface ApplicationErrorDetailTypeI {
    
    $attributes: ApplicationErrorDetailTypeIAttributes
    
    // error code
    errorCode: string
    
    // error category
    errorCategory: Array<string>
    
    // error code owner
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailTypeIAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType6 {
    
    $attributes: FreeTextInformationType6Attributes
    
    // contains only the qualifier.
    freeTextDetails: Array<FreeTextDetailsType6>
    
    // Free text
    freeText: Array<string>
    
}

export interface FreeTextInformationType6Attributes {
    
}


export interface FreeTextDetailsType6 {
    
    $attributes: FreeTextDetailsType6Attributes
    
    // qualifier of the following text
    textSubjectQualifier: string
    
    // Source Details
    source: Array<string>
    
    // Encoding Informations
    encoding: Array<string>
    
}

export interface FreeTextDetailsType6Attributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI8 {
    
    $attributes: ReservationControlInformationTypeI8Attributes
    
    // contains the record locator
    reservation: ReservationControlInformationDetailsTypeI9
    
}

export interface ReservationControlInformationTypeI8Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI9 {
    
    $attributes: ReservationControlInformationDetailsTypeI9Attributes
    
    // contains the record locator to be queue placed
    controlNumber: string
    
}

export interface ReservationControlInformationDetailsTypeI9Attributes {
    
}


export interface Air_MultiAvailabilityType {
    
    $attributes: Air_MultiAvailabilityTypeAttributes
    
    // Specification of the action code of the request
    messageActionDetails: MessageActionDetailsType1
    
    // Used to encode corporation id.
    consumerReferenceInformation: Array<ConsumerReferenceInformationType3>
    
    
    pointOfCommencement: Array<PointOfCommencementTypeI1>
    
    // Frequent traveller details.
    frequentTraveller: Array<frequentTravellerType>
    
    // Information related to availability request
    requestSection: Array<requestSectionType>
    
}

export interface Air_MultiAvailabilityTypeAttributes {
    
}

// Specification of the action code of the request
export interface MessageActionDetailsType1 {
    
    $attributes: MessageActionDetailsType1Attributes
    
    // Specification of the action code
    functionDetails: MessageFunctionBusinessDetailsType1
    
}

export interface MessageActionDetailsType1Attributes {
    
}

// Specification of the action code
export interface MessageFunctionBusinessDetailsType1 {
    
    $attributes: MessageFunctionBusinessDetailsType1Attributes
    
    // Business function type
    businessFunction: Array<string>
    
    // Main function Action Code
    actionCode: string
    
    // A sub function to further identify what action is requested (usable with Scroll requests)
    subActionCode: Array<string>
    
}

export interface MessageFunctionBusinessDetailsType1Attributes {
    
}

// To specify consumer reference information.
export interface ConsumerReferenceInformationType3 {
    
    $attributes: ConsumerReferenceInformationType3Attributes
    
    // Customer references
    customerReferences: Array<ConsumerReferenceIdentificationType1>
    
}

export interface ConsumerReferenceInformationType3Attributes {
    
}

// Identification of consumer references by type, company, number and reference to a traveller.
export interface ConsumerReferenceIdentificationType1 {
    
    $attributes: ConsumerReferenceIdentificationType1Attributes
    
    
    referenceQualifier: string
    
    
    referenceNumber: string
    
}

export interface ConsumerReferenceIdentificationType1Attributes {
    
}

// To specify the point of commencement
export interface PointOfCommencementTypeI1 {
    
    $attributes: PointOfCommencementTypeI1Attributes
    
    
    location: string
    
    
    date: Array<string>
    
    
    time: Array<string>
    
}

export interface PointOfCommencementTypeI1Attributes {
    
}


export interface frequentTravellerType {
    
    $attributes: frequentTravellerTypeAttributes
    
    // Frequent traveller details.
    travellerDetails: TravellerInformationTypeI2
    
    // Frequent traveller identification.
    travelleridentification: Array<FrequentTravellerInformationTypeI>
    
}

export interface frequentTravellerTypeAttributes {
    
}

// To specify a traveler(s) and personal details relating to the traveler(s).
export interface TravellerInformationTypeI2 {
    
    $attributes: TravellerInformationTypeI2Attributes
    
    
    paxDetails: TravellerSurnameInformationTypeI3
    
    
    otherPaxDetails: Array<TravellerDetailsTypeI3>
    
}

export interface TravellerInformationTypeI2Attributes {
    
}

// Identification of the surname of a traveller, the type of traveller, number of travellers per surname and the action to be taken.
export interface TravellerSurnameInformationTypeI3 {
    
    $attributes: TravellerSurnameInformationTypeI3Attributes
    
    
    surname: string
    
    
    type: Array<string>
    
    
    quantity: Array<number>
    
    
    status: Array<string>
    
}

export interface TravellerSurnameInformationTypeI3Attributes {
    
}

// To identify the given/first name and the title of a traveller and the traveller type.
export interface TravellerDetailsTypeI3 {
    
    $attributes: TravellerDetailsTypeI3Attributes
    
    
    givenName: Array<string>
    
    
    type: Array<string>
    
    
    uniqueCustomerIdentifier: Array<string>
    
    
    infantIndicator: Array<string>
    
    
    title: Array<string>
    
}

export interface TravellerDetailsTypeI3Attributes {
    
}

// To specify frequent traveler information.
export interface FrequentTravellerInformationTypeI {
    
    $attributes: FrequentTravellerInformationTypeIAttributes
    
    // Frequent flyer details.
    frequentTravellerDetails: FrequentTravellerIdentificationTypeI2
    
    // Other Frequent flyer details.
    otherFrequentTravellerDetails: Array<FrequentTravellerIdentificationTypeI2>
    
}

export interface FrequentTravellerInformationTypeIAttributes {
    
}

// Identification of the frequent traveller number by company code with the capability to reference a specific traveller.
export interface FrequentTravellerIdentificationTypeI2 {
    
    $attributes: FrequentTravellerIdentificationTypeI2Attributes
    
    // Carrier code
    carrier: string
    
    // Frequent flyer card number.
    number: string
    
    // Customer Reference
    customerReference: Array<string>
    
    // Status.
    status: Array<string>
    
    // Priority code associated to the frequent flyer card.
    priorityCode: Array<string>
    
}

export interface FrequentTravellerIdentificationTypeI2Attributes {
    
}


export interface requestSectionType {
    
    $attributes: requestSectionTypeAttributes
    
    // Specification of dates for an availability request.
    availabilityProductInfo: AvailabilityProductionInfoType
    
    // Multi-city request. Contains a board or an off point in the ODI segment. In case of request by radius, the value and the unit is specified in the MEA segment. A request may contain up to 6 different origins and/or 6 different destinations.
    boardOffDetails: Array<boardOffDetailsType>
    
    // Information related to a travel choice request
    travelChoiceInfo: Array<travelChoiceInfoType>
    
    // Specification of classes option
    optionClass: Array<ClassQueryType>
    
    // Specification of connections option. The request may contain up to 3 combinations of preferred or excluded connecting points.
    connectionOption: Array<ConnectionType1>
    
    // Specification of the number of seats requested
    numberOfSeatsInfo: Array<RelatedProductInformationTypeI5>
    
    // Specification of some airline or flight option.
    airlineOrFlightOption: Array<AirlineOptionType>
    
    // Specification of cabins option
    cabinOption: Array<CabinDescriptionType1>
    
    // specification of the tour name and reference or record locator
    negoSpaceDetails: Array<NegociatedSpaceType>
    
    // Specification of the options of an availability request
    availabilityOptions: AvailabilityOptionsType
    
    // Unaccompanied minor requested ages
    umRequest: Array<UnaccompaniedMinorRequest>
    
}

export interface requestSectionTypeAttributes {
    
}

// Specification of dates and locations of an availability request
export interface AvailabilityProductionInfoType {
    
    $attributes: AvailabilityProductionInfoTypeAttributes
    
    // Multidate request. Defines date and time of an availability request. A request may contain up to 31 days. These 31 days may include single dates or date ranges.
    availabilityDetails: Array<ProductDateTimeType4>
    
    // Departure Location
    departureLocationInfo: Array<LocationDetailsType>
    
    // Arrival Location
    arrivalLocationInfo: Array<LocationDetailsType>
    
}

export interface AvailabilityProductionInfoTypeAttributes {
    
}

// Defines date and time of an availability request
export interface ProductDateTimeType4 {
    
    $attributes: ProductDateTimeType4Attributes
    
    // Departure date for Availability/Schedule, Effective date for Timetable (ddmmyy)
    departureDate: Array<string>
    
    // Departure Time (hhmm)
    departureTime: Array<string>
    
    // Arrival date for Availability/Schedule Discontinue date for Timetable (ddmmyy)
    arrivalDate: Array<string>
    
    // Arrival Time (hhmm)
    arrivalTime: Array<string>
    
}

export interface ProductDateTimeType4Attributes {
    
}

// Departure Location
export interface LocationDetailsType {
    
    $attributes: LocationDetailsTypeAttributes
    
    // A 3 character IATA code to specify place of departure
    cityAirport: string
    
    // Indicator used to force to use the Airport or the City code
    modifier: Array<string>
    
}

export interface LocationDetailsTypeAttributes {
    
}


export interface boardOffDetailsType {
    
    $attributes: boardOffDetailsTypeAttributes
    
    // Contains a board or an off point.
    boardOffPoints: AvailabilityProductionInfoType_167714S
    
    // Alternate city request. Contains the radius around the board or off point in miles or kilometres.
    cityRadius: Array<MeasurementsTypeI>
    
}

export interface boardOffDetailsTypeAttributes {
    
}

// Specification of dates and locations of an availability request
export interface AvailabilityProductionInfoType_167714S {
    
    $attributes: AvailabilityProductionInfoType_167714SAttributes
    
    // Departure Location
    departureLocationInfo: Array<LocationDetailsType>
    
    // Arrival Location
    arrivalLocationInfo: Array<LocationDetailsType>
    
}

export interface AvailabilityProductionInfoType_167714SAttributes {
    
}

// To specify physical measurements, including dimension tolerances, weights and counts.
export interface MeasurementsTypeI {
    
    $attributes: MeasurementsTypeIAttributes
    
    // Qualifier
    qualifier: string
    
    // Radius in miles or kilometers.
    valueRange: ValueRangeTypeI
    
}

export interface MeasurementsTypeIAttributes {
    
}

// Measurement value and relevant minimum and maximum tolerances in that order.
export interface ValueRangeTypeI {
    
    $attributes: ValueRangeTypeIAttributes
    
    // Unit of the radius.
    unit: string
    
    // Value of the radius.
    value: number
    
}

export interface ValueRangeTypeIAttributes {
    
}


export interface travelChoiceInfoType {
    
    $attributes: travelChoiceInfoTypeAttributes
    
    // Specification of process details for travel choice request
    travelChoiceDetails: SelectionDetailsTypeI4
    
    // Specification of the travel choice profile used in the request
    profileInformation: Array<ReservationControlInformationTypeI9>
    
}

export interface travelChoiceInfoTypeAttributes {
    
}

// To specify the details for making a selection
export interface SelectionDetailsTypeI4 {
    
    $attributes: SelectionDetailsTypeI4Attributes
    
    // Travel Choice general information
    generalInfo: SelectionDetailsInformationType_237211C
    
    // Passenger reference information
    passengerReferenceInfo: Array<SelectionDetailsInformationType_237212C>
    
    // Highlighting of preferences information
    highlightingInfo: Array<SelectionDetailsInformationTypeI6>
    
}

export interface SelectionDetailsTypeI4Attributes {
    
}

// Specification of availability options
export interface SelectionDetailsInformationType_237211C {
    
    $attributes: SelectionDetailsInformationType_237211CAttributes
    
    // Travel Choice type of display
    typeOfDisplay: string
    
    // Trip category
    tripCategory: Array<string>
    
}

export interface SelectionDetailsInformationType_237211CAttributes {
    
}

// Specification of availability options
export interface SelectionDetailsInformationType_237212C {
    
    $attributes: SelectionDetailsInformationType_237212CAttributes
    
    // Passenger reference option
    option: Array<string>
    
    // Passenger reference number
    number: Array<number>
    
}

export interface SelectionDetailsInformationType_237212CAttributes {
    
}

// Selection details information
export interface SelectionDetailsInformationTypeI6 {
    
    $attributes: SelectionDetailsInformationTypeI6Attributes
    
    // Highlighting preferences option
    option: Array<string>
    
}

export interface SelectionDetailsInformationTypeI6Attributes {
    
}

// Specification of the travel choice profile used in the request
export interface ReservationControlInformationTypeI9 {
    
    $attributes: ReservationControlInformationTypeI9Attributes
    
    // profile record locator and type for travel choice request
    profileRecordLocator: Array<ReservationControlInformationDetailsTypeI10>
    
}

export interface ReservationControlInformationTypeI9Attributes {
    
}

// Reservation control information
export interface ReservationControlInformationDetailsTypeI10 {
    
    $attributes: ReservationControlInformationDetailsTypeI10Attributes
    
    // PROFILE RECORD LOCATOR
    number: string
    
    // profile type
    type: string
    
}

export interface ReservationControlInformationDetailsTypeI10Attributes {
    
}

// Specification of classes option
export interface ClassQueryType {
    
    $attributes: ClassQueryTypeAttributes
    
    // Specification of a class type
    productClassDetails: Array<ProductDetailsType3>
    
    // Indicates if the request is expanded
    expandClassRequest: Array<string>
    
}

export interface ClassQueryTypeAttributes {
    
}

// Specification of a class type
export interface ProductDetailsType3 {
    
    $attributes: ProductDetailsType3Attributes
    
    // Class of service
    serviceClass: string
    
    // Night Modifier
    nightModifierOption: Array<string>
    
}

export interface ProductDetailsType3Attributes {
    
}

// Specification of connections option
export interface ConnectionType1 {
    
    $attributes: ConnectionType1Attributes
    
    // Specification of the first connection point and time
    firstConnection: ConnectPointDetailsType2
    
    // Specification of the other connection points and time. The request may contain up to 5 preferred or excluded connection points.
    secondConnection: Array<ConnectPointDetailsType2>
    
}

export interface ConnectionType1Attributes {
    
}

// Specification of the first connection point and time
export interface ConnectPointDetailsType2 {
    
    $attributes: ConnectPointDetailsType2Attributes
    
    // ATA/IATA code directory - connection city/airport
    location: Array<string>
    
    // Connection time (hhmm)
    time: Array<string>
    
    // Additional information on the connection option
    indicatorList: Array<string>
    
}

export interface ConnectPointDetailsType2Attributes {
    
}

// To indicate quantity and action required in relation to a product
export interface RelatedProductInformationTypeI5 {
    
    $attributes: RelatedProductInformationTypeI5Attributes
    
    // Number of passengers
    numberOfPassengers: Array<number>
    
}

export interface RelatedProductInformationTypeI5Attributes {
    
}

// Specification of some airline or flight option
export interface AirlineOptionType {
    
    $attributes: AirlineOptionTypeAttributes
    
    // Airline / Flight option. The request may contain up to 6 preferred or excluded airline.
    flightIdentification: Array<FullFlightIdentificationType>
    
    // Airline exclusion
    excludeAirlineIndicator: Array<string>
    
}

export interface AirlineOptionTypeAttributes {
    
}

// Airline / Flight option
export interface FullFlightIdentificationType {
    
    $attributes: FullFlightIdentificationTypeAttributes
    
    // Carrier code corresponding to an airline option
    airlineCode: string
    
    // Flight number
    number: Array<string>
    
    // Flight suffix not authorized in case of exclude airline option
    suffix: Array<string>
    
}

export interface FullFlightIdentificationTypeAttributes {
    
}

// Specification of cabins option
export interface CabinDescriptionType1 {
    
    $attributes: CabinDescriptionType1Attributes
    
    // Product class, number and designator which defines a cabin in a means of transport.
    cabinDesignation: Array<CabinClassDesignationType3>
    
    // Defines if the classes will be ordered by cabin in the response
    orderClassesByCabin: Array<string>
    
}

export interface CabinDescriptionType1Attributes {
    
}

// Product class, number and designator which defines a cabin in a means of transport.
export interface CabinClassDesignationType3 {
    
    $attributes: CabinClassDesignationType3Attributes
    
    // Cabin Expansion
    expandCabinIndicator: Array<string>
    
    // Cabin type
    cabinClassOfServiceList: Array<number>
    
}

export interface CabinClassDesignationType3Attributes {
    
}

// SPECIFY INFORMATION ON A NEGOTIATED SPACE AVAILABILITY
export interface NegociatedSpaceType {
    
    $attributes: NegociatedSpaceTypeAttributes
    
    // Tour name
    tourName: Array<string>
    
    // Tour reference
    tourReference: Array<string>
    
    // Record locator
    recordLocator: Array<string>
    
}

export interface NegociatedSpaceTypeAttributes {
    
}

// Specification of the options of an availability request
export interface AvailabilityOptionsType {
    
    $attributes: AvailabilityOptionsTypeAttributes
    
    // Specification of the availability type
    productTypeDetails: ProductTypeDetailsType5
    
    // Specification of availability options
    optionInfo: Array<SelectionDetailsInformationType4>
    
    // Product Availability option
    productAvailability: Array<ProductIdentificationDetailsType1>
    
    // UN/IATA code identifying type of aircraft
    typeOfAircraft: Array<string>
    
}

export interface AvailabilityOptionsTypeAttributes {
    
}

// Specification of the availability type
export interface ProductTypeDetailsType5 {
    
    $attributes: ProductTypeDetailsType5Attributes
    
    // Defines the type of availability request
    typeOfRequest: string
    
}

export interface ProductTypeDetailsType5Attributes {
    
}

// Specification of availability options
export interface SelectionDetailsInformationType4 {
    
    $attributes: SelectionDetailsInformationType4Attributes
    
    // Option
    type: string
    
    // argument For the option
    arguments: Array<string>
    
}

export interface SelectionDetailsInformationType4Attributes {
    
}

// Product Availability option
export interface ProductIdentificationDetailsType1 {
    
    $attributes: ProductIdentificationDetailsType1Attributes
    
    // discount code for product availability
    discountCode: string
    
    // number of seats associated to this code
    numberOfSeats: Array<number>
    
}

export interface ProductIdentificationDetailsType1Attributes {
    
}

// Availability request for unaccompanied minors
export interface UnaccompaniedMinorRequest {
    
    $attributes: UnaccompaniedMinorRequestAttributes
    
    // Unaccompanied minor&#39;s age
    umAge: Array<number>
    
}

export interface UnaccompaniedMinorRequestAttributes {
    
}


export interface Air_MultiAvailabilityReplyType {
    
    $attributes: Air_MultiAvailabilityReplyTypeAttributes
    
    // Specification of the action code of the response
    messageActionDetails: Array<MessageActionDetailsTypeI3>
    
    // Warnings and Errors found at process level
    errorOrWarningSection: Array<errorOrWarningSectionType>
    
    // Information related to one city pair
    singleCityPairInfo: Array<singleCityPairInfoType>
    
    // Customer Server Edifact message
    travelChoiceMessage: Array<travelChoiceMessageType>
    
}

export interface Air_MultiAvailabilityReplyTypeAttributes {
    
}

// To specify the message type and business function
export interface MessageActionDetailsTypeI3 {
    
    $attributes: MessageActionDetailsTypeI3Attributes
    
    // Specification of the action code
    functionDetails: MessageFunctionBusinessDetailsTypeI3
    
    // Indicates if the process has been successfully completed
    responseType: Array<string>
    
}

export interface MessageActionDetailsTypeI3Attributes {
    
}

// Message function or business details
export interface MessageFunctionBusinessDetailsTypeI3 {
    
    $attributes: MessageFunctionBusinessDetailsTypeI3Attributes
    
    // Business function type
    businessFunction: Array<string>
    
    // Main function Action Code
    actionCode: string
    
    // A sub-function to further identify what has been performed
    subActionCode: Array<string>
    
}

export interface MessageFunctionBusinessDetailsTypeI3Attributes {
    
}


export interface errorOrWarningSectionType {
    
    $attributes: errorOrWarningSectionTypeAttributes
    
    // Error or Warning message found at process level
    errorOrWarningInfo: ApplicationErrorInformationTypeI1
    
    // Error or Warning free flow text found at process level
    textInformation: Array<InteractiveFreeTextTypeI2>
    
}

export interface errorOrWarningSectionTypeAttributes {
    
}

// To identify the type of application error within a message
export interface ApplicationErrorInformationTypeI1 {
    
    $attributes: ApplicationErrorInformationTypeI1Attributes
    
    // Defines the type and code of an error
    error: ApplicationErrorDetailTypeI1
    
}

export interface ApplicationErrorInformationTypeI1Attributes {
    
}

// Application error detail
export interface ApplicationErrorDetailTypeI1 {
    
    $attributes: ApplicationErrorDetailTypeI1Attributes
    
    // The code assigned by the receiver of a message for identification of a data validation error condition.
    code: string
    
    // Identifies type of code list
    type: Array<string>
    
    // Identifies agency responsible for code list
    listResponsible: string
    
}

export interface ApplicationErrorDetailTypeI1Attributes {
    
}

// To provide free form or coded text information
export interface InteractiveFreeTextTypeI2 {
    
    $attributes: InteractiveFreeTextTypeI2Attributes
    
    // Qualifies the free text
    freeTextQualification: Array<FreeTextQualificationTypeI4>
    
    // Text information
    freeText: Array<string>
    
}

export interface InteractiveFreeTextTypeI2Attributes {
    
}

// Free text qualification
export interface FreeTextQualificationTypeI4 {
    
    $attributes: FreeTextQualificationTypeI4Attributes
    
    // Indicates whether the free text is coded or not coded
    codedIndicator: string
    
    // Coded text, or specifies type of information in 4440
    typeOfInfo: Array<string>
    
    // ISO Code for Language of free text
    isoLanguageCode: Array<string>
    
}

export interface FreeTextQualificationTypeI4Attributes {
    
}


export interface singleCityPairInfoType {
    
    $attributes: singleCityPairInfoTypeAttributes
    
    // Specification of board point and off point of the segment
    locationDetails: OriginAndDestinationDetailsTypeI4
    
    // Free flow text found at city pair level
    cityPairFreeFlowText: Array<InteractiveFreeTextTypeI2>
    
    // Warnings and Errors found at city pair level
    cityPairErrorOrWarning: Array<cityPairErrorOrWarningType>
    
    // Information related to a flight. The repetition has been increased to 300 to support availability award calendar requests.
    flightInfo: Array<flightInfoType>
    
}

export interface singleCityPairInfoTypeAttributes {
    
}

// To convey the origin and destination of a journey
export interface OriginAndDestinationDetailsTypeI4 {
    
    $attributes: OriginAndDestinationDetailsTypeI4Attributes
    
    // 3 character ATA/IATA airport/city code for origin
    origin: Array<string>
    
    // 3 character ATA/IATA airport/city code for destination
    destination: Array<string>
    
}

export interface OriginAndDestinationDetailsTypeI4Attributes {
    
}


export interface cityPairErrorOrWarningType {
    
    $attributes: cityPairErrorOrWarningTypeAttributes
    
    // Error or Warning message found at city pair level
    cityPairErrorOrWarningInfo: ApplicationErrorInformationTypeI1
    
    // Error or Warning free flow text found at city pair level
    cityPairErrorOrWarningText: Array<InteractiveFreeTextTypeI2>
    
}

export interface cityPairErrorOrWarningTypeAttributes {
    
}


export interface flightInfoType {
    
    $attributes: flightInfoTypeAttributes
    
    // Main information on the flight
    basicFlightInfo: AvailabilityProductInformationType
    
    // Information on classes
    infoOnClasses: Array<ClassInformationType2>
    
    // Information related to classes ordered by cabin
    cabinClassInfo: Array<cabinClassInfoType>
    
    // Additional information on the flight
    additionalFlightInfo: Array<AdditionalProductDetailsTypeI4>
    
    // SSR informations at leg/flight level
    ssrQuotaDetails: Array<SpecialRequirementsQuotaType>
    
    // Leg cabin informations
    legCabinInfo: Array<legCabinInfoType>
    
    // Specification of the traffic restrictions applied on a segment
    trafficRestrictionList: Array<TrafficRestrictionTypeI2>
    
    // Group with ACV code and saleable config.
    aircraftInformation: Array<aircraftInformationType>
    
    // Warnings and Errors found at flight level
    flightErrorWarningSection: Array<flightErrorWarningSectionType>
    
    // To specify information on a negociated space availability
    negoSpaceDetails: Array<NegociatedSpaceType1>
    
}

export interface flightInfoTypeAttributes {
    
}

// To specify details related to a product
export interface AvailabilityProductInformationType {
    
    $attributes: AvailabilityProductInformationTypeAttributes
    
    // Information on date and time of a flight
    flightDetails: ProductDateTimeType5
    
    // Departure location of the flight
    departureLocation: LocationType2
    
    // To give a reference to a customer preference associated to this departure point.
    departurePreference: Array<AssociatedPreferenceType>
    
    // Arrival location of the flight
    arrivalLocation: Array<LocationType2>
    
    // To give a reference to a customer preference associated to this arrival point.
    arrivalPreference: Array<AssociatedPreferenceType>
    
    // Defines the marketing airline of the flight
    marketingCompany: Array<CompanyIdentificationType5>
    
    // To give a reference to a customer preference associated to this company
    markCompanyPreferences: Array<AssociatedPreferenceType_237163C>
    
    // Defines the operating airline of the flight
    operatingCompany: Array<CompanyIdentificationType5>
    
    // To give a reference to a customer preference associated to this company
    operCompanyPreference: Array<AssociatedPreferenceType_237163C>
    
    // Flight Identification
    flightIdentification: Array<ProductIdentificationDetailsType2>
    
    // Details on the flight type
    productTypeDetail: Array<ProductTypeDetailsType6>
    
    // Journey number as on the screen display
    lineItemNumber: Array<number>
    
}

export interface AvailabilityProductInformationTypeAttributes {
    
}

// Product date or time
export interface ProductDateTimeType5 {
    
    $attributes: ProductDateTimeType5Attributes
    
    // Departure Date (ddmmyy
    departureDate: Array<string>
    
    // Departure Time (hhmm)
    departureTime: Array<string>
    
    // Arrival date (ddmmyy)
    arrivalDate: Array<string>
    
    // Arrival Time (hhmm)
    arrivalTime: Array<string>
    
}

export interface ProductDateTimeType5Attributes {
    
}

// Location
export interface LocationType2 {
    
    $attributes: LocationType2Attributes
    
    // A 3 character code to specify place of departure
    cityAirport: string
    
}

export interface LocationType2Attributes {
    
}

// Preference associated
export interface AssociatedPreferenceType {
    
    $attributes: AssociatedPreferenceTypeAttributes
    
    // Type of profile associated to this class:
    rcType: string
    
    // Level of highlighting :
    highlight: string
    
}

export interface AssociatedPreferenceTypeAttributes {
    
}

// Company identification
export interface CompanyIdentificationType5 {
    
    $attributes: CompanyIdentificationType5Attributes
    
    // A 2-3 character code to specify the marketing airline designator code
    identifier: string
    
}

export interface CompanyIdentificationType5Attributes {
    
}

// Preference associated
export interface AssociatedPreferenceType_237163C {
    
    $attributes: AssociatedPreferenceType_237163CAttributes
    
    // Type of profile associated to this company:
    rcType: string
    
    // Level of highlighting
    highlight: string
    
    // Priority for airline preference
    priority: Array<number>
    
}

export interface AssociatedPreferenceType_237163CAttributes {
    
}

// Product identification details
export interface ProductIdentificationDetailsType2 {
    
    $attributes: ProductIdentificationDetailsType2Attributes
    
    // Flight number, a 1-4 digit number.
    number: string
    
    // An operational suffix (A-E) related to flight number.
    operationalSuffix: Array<string>
    
}

export interface ProductIdentificationDetailsType2Attributes {
    
}

// Product type details
export interface ProductTypeDetailsType6 {
    
    $attributes: ProductTypeDetailsType6Attributes
    
    // Information on the flight type
    productIndicators: Array<string>
    
}

export interface ProductTypeDetailsType6Attributes {
    
}

// Specification of classes option
export interface ClassInformationType2 {
    
    $attributes: ClassInformationType2Attributes
    
    // Information on a class
    productClassDetail: ProductDetailsType4
    
    // To give a reference to a customer preference associated to this class.
    preferenceForTheClass: Array<AssociatedPreferenceType>
    
}

export interface ClassInformationType2Attributes {
    
}

// Specification of a class type
export interface ProductDetailsType4 {
    
    $attributes: ProductDetailsType4Attributes
    
    // Class of service
    serviceClass: string
    
    // Indicates availability status, coded or numeric
    availabilityStatus: Array<string>
    
    // Reservation booking modifier:
    modifier: Array<string>
    
}

export interface ProductDetailsType4Attributes {
    
}


export interface cabinClassInfoType {
    
    $attributes: cabinClassInfoTypeAttributes
    
    // Information on cabins
    cabinInfo: CabinDetailsType1
    
    // Information on classes associated to a cabin
    infoByCabinOnClasses: Array<ClassInformationType2>
    
}

export interface cabinClassInfoTypeAttributes {
    
}

// To specify the physical layout of a cabin class or compartment for seating
export interface CabinDetailsType1 {
    
    $attributes: CabinDetailsType1Attributes
    
    // Product class, number and designator which defines a cabin in a means of transport.
    cabinDesignation: CabinClassDesignationType4
    
}

export interface CabinDetailsType1Attributes {
    
}

// Cabin class designation
export interface CabinClassDesignationType4 {
    
    $attributes: CabinClassDesignationType4Attributes
    
    // Cabin type:
    cabinClassOfService: Array<number>
    
}

export interface CabinClassDesignationType4Attributes {
    
}

// To convey additional information concerning an airline flight
export interface AdditionalProductDetailsTypeI4 {
    
    $attributes: AdditionalProductDetailsTypeI4Attributes
    
    // Additional details describing a specific means of transport
    flightDetails: Array<AdditionalProductTypeI4>
    
    // Departure Station Information
    departureStation: Array<StationInformationTypeI4>
    
    // Arrival Station Information
    arrivalStation: Array<StationInformationTypeI4>
    
    // Accumulated elapsed time for multi-leg flight and distance by flight leg.
    milageDetails: Array<MileageTimeDetailsTypeI3>
    
    // Passenger departure and arrival times from gate (e.g. airports with mobile lounges)
    travellerTimeDetails: Array<TravellerTimeDetailsTypeI1>
    
    // Defines indicators for facilities
    productFacilities: Array<ProductFacilitiesTypeI2>
    
}

export interface AdditionalProductDetailsTypeI4Attributes {
    
}

// Additional product details
export interface AdditionalProductTypeI4 {
    
    $attributes: AdditionalProductTypeI4Attributes
    
    // UN/IATA code identifying type of aircraft
    typeOfAircraft: Array<string>
    
    // Number of stops enroute made in a journey
    numberOfStops: Array<number>
    
    // Elapsed flying time of the journey (hhmm)
    legDuration: Array<string>
    
    // On time performance indicator
    onTimePercentage: Array<string>
    
    // Day of week indicator based on schedules format:
    dayOfOperation: Array<number>
    
    // Time table effective and discontinue date: ddmmyyddmmyy
    effectivePeriod: Array<string>
    
    // Indicates if the flight is a complexing or a change of gauge flight
    complexingFlightIndicator: Array<string>
    
    // 3 character airport/city code where 1st change of gauge occurs
    firstChangeOfGauge: Array<string>
    
    // 3 character airport/city code where 2nd change of gauge occurs
    secondChangeOfGauge: Array<string>
    
    // 3 character airport/city code where 3rd change of gauge occurs
    thirdChangeOfGauge: Array<string>
    
}

export interface AdditionalProductTypeI4Attributes {
    
}

// Station information
export interface StationInformationTypeI4 {
    
    $attributes: StationInformationTypeI4Attributes
    
    // To indicate gate of departure
    gate: Array<string>
    
    // To indicate terminal of departure
    terminal: Array<string>
    
    // To indicate concourse terminal of departure
    concourseTerminal: Array<string>
    
}

export interface StationInformationTypeI4Attributes {
    
}

// Milage or time details
export interface MileageTimeDetailsTypeI3 {
    
    $attributes: MileageTimeDetailsTypeI3Attributes
    
    // Flight leg mileage
    flightLeg: Array<number>
    
    // Measure unit qualifier M = Miles
    measureUnit: Array<string>
    
}

export interface MileageTimeDetailsTypeI3Attributes {
    
}

// Traveller time details
export interface TravellerTimeDetailsTypeI1 {
    
    $attributes: TravellerTimeDetailsTypeI1Attributes
    
    // Passenger schedule time of departure (hhmm)
    departureTime: Array<string>
    
    // Passenger schedule time of arrival (hhmm)
    arrivalTime: Array<string>
    
    // Check in date and time (ddmmyyhhmm)
    checkInDateAndTime: Array<number>
    
}

export interface TravellerTimeDetailsTypeI1Attributes {
    
}

// Product facilities
export interface ProductFacilitiesTypeI2 {
    
    $attributes: ProductFacilitiesTypeI2Attributes
    
    // Defines indicators for facilities
    type: Array<string>
    
}

export interface ProductFacilitiesTypeI2Attributes {
    
}

// To specify special requests or services quota information related to a fligth.
export interface SpecialRequirementsQuotaType {
    
    $attributes: SpecialRequirementsQuotaTypeAttributes
    
    // This composite enables user to convey quota-related information.
    quotaInfo: QuotaRelatedInformationType1
    
    // this composite allows to convey optional ssr quota details (cabin, nest)
    ssrQuotaInfo: Array<SpecialRequirementsQuotaDetailsType>
    
}

export interface SpecialRequirementsQuotaTypeAttributes {
    
}

// Used to convey quota information.
export interface QuotaRelatedInformationType1 {
    
    $attributes: QuotaRelatedInformationType1Attributes
    
    // Name of the quota counter, most of the time aligned with SSR type.
    quotaCounterName: Array<string>
    
    // Maximum quantity that can be reached.
    maxQuantity: Array<number>
    
    // Quantity that is available.
    availability: Array<number>
    
    // Count of the items already booked in the quota.
    counter: Array<number>
    
}

export interface QuotaRelatedInformationType1Attributes {
    
}

// SPECIAL REQUIREMENTS QUOTA DETAILS
export interface SpecialRequirementsQuotaDetailsType {
    
    $attributes: SpecialRequirementsQuotaDetailsTypeAttributes
    
    // Reference of the leg cabin on which the quota applies. If no cabin , the quota applies on the whole Leg.
    cabinCode: Array<string>
    
    // Reference of the nest family if any. This means availability is shared with other quota of the same family.
    nestReference: Array<string>
    
}

export interface SpecialRequirementsQuotaDetailsTypeAttributes {
    
}


export interface legCabinInfoType {
    
    $attributes: legCabinInfoTypeAttributes
    
    // Contains the cabin code
    cabinIdentification: SegmentCabinIdentificationType1
    
    // Leg Cabin Capacity
    legCabinCapacity: AircraftConfigurationVersionType
    
    // Availability counters
    legCabinAvlCounters: LegCabinAvailabilitiesType
    
}

export interface legCabinInfoTypeAttributes {
    
}

// To reference a segment cabin
export interface SegmentCabinIdentificationType1 {
    
    $attributes: SegmentCabinIdentificationType1Attributes
    
    // Cabin class designator
    cabinCode: string
    
}

export interface SegmentCabinIdentificationType1Attributes {
    
}

// To specify aircraft configuration version of an aircraft
export interface AircraftConfigurationVersionType {
    
    $attributes: AircraftConfigurationVersionTypeAttributes
    
    // To Cabin/Class Identification
    cabinClassDetails: Array<ConfigurationDetailsType>
    
}

export interface AircraftConfigurationVersionTypeAttributes {
    
}

// CONFIGURATION DETAILS
export interface ConfigurationDetailsType {
    
    $attributes: ConfigurationDetailsTypeAttributes
    
    // Cabin class code designator
    classDesignator: Array<string>
    
    // Number of seats in the cabin class.
    numberOfSeats: Array<number>
    
    // Booking Class identification
    characteristic: Array<string>
    
}

export interface ConfigurationDetailsTypeAttributes {
    
}


export interface LegCabinAvailabilitiesType {
    
    $attributes: LegCabinAvailabilitiesTypeAttributes
    
    // Leg-Cabin UPR
    ups: number
    
    // Leg-Cabin Bookings Counter 0 if no bookings
    bookingsCounter: number
    
    // Net Availability (NAV)
    netAvailability: number
    
    // Gross Availability (GAV)
    grossAvailability: number
    
    // Average Cancellation Profile (Leg-Cabin)
    acp: Array<number>
    
    // Expected to board (ETB)
    expectedToBoard: Array<number>
    
    
    staffStandbyCounter: Array<number>
    
    // Leg-Cabin Waitlisted Bookings Counter
    waitlistBookingsCounter: Array<number>
    
    // Leg-Cabin Group Bookings Counter
    groupBookingsCounter: Array<number>
    
}

export interface LegCabinAvailabilitiesTypeAttributes {
    
}

// To convey certain restrictions that apply to a means of transport on all or part of a journey
export interface TrafficRestrictionTypeI2 {
    
    $attributes: TrafficRestrictionTypeI2Attributes
    
    // defines the traffic restrictions
    trafficRestriction: Array<TrafficRestrictionDetailsTypeI2>
    
}

export interface TrafficRestrictionTypeI2Attributes {
    
}

// Traffic restriction details
export interface TrafficRestrictionDetailsTypeI2 {
    
    $attributes: TrafficRestrictionDetailsTypeI2Attributes
    
    // Traffic restriction code
    code: Array<string>
    
}

export interface TrafficRestrictionDetailsTypeI2Attributes {
    
}


export interface aircraftInformationType {
    
    $attributes: aircraftInformationTypeAttributes
    
    // Aircraft Configuration View information
    acvInformation: AircraftConfigurationVersionType_167685S
    
    // Saleable config information
    saleableConfiguration: EquipmentInformationTypeI
    
}

export interface aircraftInformationTypeAttributes {
    
}

// To specify aircraft configuration version of an aircraft
export interface AircraftConfigurationVersionType_167685S {
    
    $attributes: AircraftConfigurationVersionType_167685SAttributes
    
    // ADDITIONAL EQUIPMENT INFORMATION Aircraft configuration version details
    configVersionDetails: AdditionalEquipmentInformationTypeI
    
}

export interface AircraftConfigurationVersionType_167685SAttributes {
    
}

// To identify equipment configuration, registration number, and cabin facilities.
export interface AdditionalEquipmentInformationTypeI {
    
    $attributes: AdditionalEquipmentInformationTypeIAttributes
    
    // Aircraft Configuration View information
    code: string
    
}

export interface AdditionalEquipmentInformationTypeIAttributes {
    
}

// To specify configuration details of an aircraft.
export interface EquipmentInformationTypeI {
    
    $attributes: EquipmentInformationTypeIAttributes
    
    // Saleable Config information
    configurationCode: string
    
}

export interface EquipmentInformationTypeIAttributes {
    
}


export interface flightErrorWarningSectionType {
    
    $attributes: flightErrorWarningSectionTypeAttributes
    
    // Error or Warning message found at flight level
    flightErrorWarningInfo: ApplicationErrorInformationTypeI1
    
    // Error or Warning free flow text found at flight level
    flightErrorWarningText: Array<InteractiveFreeTextTypeI2>
    
}

export interface flightErrorWarningSectionTypeAttributes {
    
}

// SPECIFY INFORMATION ON A NEGOTIATED SPACE AVAILABILITY
export interface NegociatedSpaceType1 {
    
    $attributes: NegociatedSpaceType1Attributes
    
    // Specifications of the owner
    ownerDetails: OwnerDetailsType
    
    // Tour name
    tourName: Array<string>
    
    // Tour reference
    tourReference: Array<string>
    
    // Record locator
    recordLocator: Array<string>
    
    // Negociated Space Status
    negoStatus: Array<string>
    
}

export interface NegociatedSpaceType1Attributes {
    
}


export interface OwnerDetailsType {
    
    $attributes: OwnerDetailsTypeAttributes
    
    // Owner code
    code: string
    
    // Owner indicator
    indicator: Array<string>
    
}

export interface OwnerDetailsTypeAttributes {
    
}


export interface travelChoiceMessageType {
    
    $attributes: travelChoiceMessageTypeAttributes
    
    // To summarise the preferences and policies that have been selected and the availability line
    summaryAndAvailabilityLines: PrefAndPolicySummaryAndAvailLineType
    
    // To specify air preferences
    preferencesSection: Array<preferencesSectionType>
    
}

export interface travelChoiceMessageTypeAttributes {
    
}

// To summarise the preferences and policies that have been selected and the availability line.
export interface PrefAndPolicySummaryAndAvailLineType {
    
    $attributes: PrefAndPolicySummaryAndAvailLineTypeAttributes
    
    // Policies and preferences summary line
    summaryLine: string
    
    // Reservation control type
    activeProfileType: Array<string>
    
    // AVAILABILITY COMPONENT
    availabilityComponent: Array<AvailabilityComponentType>
    
}

export interface PrefAndPolicySummaryAndAvailLineTypeAttributes {
    
}


export interface AvailabilityComponentType {
    
    $attributes: AvailabilityComponentTypeAttributes
    
    // Reservation control type
    reservationControlType: Array<string>
    
    // Availability information line
    informationLine: Array<string>
    
    // More selected availability lines indicator, coded
    moreIndicator: Array<string>
    
}

export interface AvailabilityComponentTypeAttributes {
    
}


export interface preferencesSectionType {
    
    $attributes: preferencesSectionTypeAttributes
    
    // To specify a reference to a profile
    profileIdentificationSection: ReservationControlInformationTypeI10
    
    // To specify a traveller and personal details relating to the traveller
    travellerInformation: Array<TravellerInformationTypeI3>
    
    // To specify a profile name for corporate, agencies or organizations
    associationName: Array<ProfileNameType>
    
    // To specify origin and destination rules
    originAndDestinationRules: Array<OriginAndDestinationRequestType4>
    
    // To specify Cabin eligibility rules
    cabinRules: Array<CabinEligibilityRulesType>
    
    // To specify availability informations
    availabilityInformationSection: Array<AvailabilityInformationType>
    
    // To specify itinerary preferences
    itineraryPreference: Array<ItineraryPreferencesType>
    
}

export interface preferencesSectionTypeAttributes {
    
}

// To specify a reference to a reservation
export interface ReservationControlInformationTypeI10 {
    
    $attributes: ReservationControlInformationTypeI10Attributes
    
    // RESERVATION CONTROL INFORMATION
    profileRecordLocator: ReservationControlInformationDetailsTypeI11
    
}

export interface ReservationControlInformationTypeI10Attributes {
    
}


export interface ReservationControlInformationDetailsTypeI11 {
    
    $attributes: ReservationControlInformationDetailsTypeI11Attributes
    
    // Reservation control number
    number: string
    
    // Reservation control type, coded
    type: string
    
}

export interface ReservationControlInformationDetailsTypeI11Attributes {
    
}

// To specify a travellers and personal details relating to the taravellers
export interface TravellerInformationTypeI3 {
    
    $attributes: TravellerInformationTypeI3Attributes
    
    // TRAVELLER SURNAME INFORMATION
    nameInformation: TravellerSurnameInformationTypeI4
    
    // TRAVELLER DETAILS
    otherInformation: Array<TravellerDetailsTypeI4>
    
}

export interface TravellerInformationTypeI3Attributes {
    
}


export interface TravellerSurnameInformationTypeI4 {
    
    $attributes: TravellerSurnameInformationTypeI4Attributes
    
    // Traveller surname
    name: string
    
    // Number of units qualifier
    groupIndicator: Array<string>
    
    // Quantity
    numberOfTravellers: Array<number>
    
}

export interface TravellerSurnameInformationTypeI4Attributes {
    
}


export interface TravellerDetailsTypeI4 {
    
    $attributes: TravellerDetailsTypeI4Attributes
    
    // Traveller Given Name
    firstName: Array<string>
    
    // Number of units qualifier
    passengerType: Array<string>
    
    // Traveller accompanied by infant
    travellerAccompaniedByInfant: Array<string>
    
    // Other names
    passengerID: Array<string>
    
}

export interface TravellerDetailsTypeI4Attributes {
    
}

// To specify a profile name for groups, corporates and agencies.
export interface ProfileNameType {
    
    $attributes: ProfileNameTypeAttributes
    
    // Reservation control type
    correspondingProfileType: string
    
    // Profile name
    profileName: string
    
}

export interface ProfileNameTypeAttributes {
    
}

// To specify origins and destinations rules.
export interface OriginAndDestinationRequestType4 {
    
    $attributes: OriginAndDestinationRequestType4Attributes
    
    // ORIGIN AND DESTINATION PREFERENCES
    originAndDestinationPreference: Array<OriginAndDestinationPrefType>
    
    // ORIGIN AND DESTINATION EXCLUSIONS
    originAndDestinationExclusions: Array<OriginAndDestinationExclusionsType>
    
}

export interface OriginAndDestinationRequestType4Attributes {
    
}


export interface OriginAndDestinationPrefType {
    
    $attributes: OriginAndDestinationPrefTypeAttributes
    
    // Company identification
    airlineCode: string
    
    // Lock indicator, coded
    privilegeIndicator: Array<string>
    
    // Owner
    owner: Array<string>
    
    // Priority
    priority: Array<number>
    
    // Origin value
    originValue: Array<string>
    
    // Destination value
    destinationValue: Array<string>
    
    // Traveller category
    travellerCategory: Array<string>
    
    // Trip category
    tripCategory: Array<string>
    
    // Cabin, coded
    cabin: Array<string>
    
    // Class
    cabinClass: Array<string>
    
}

export interface OriginAndDestinationPrefTypeAttributes {
    
}


export interface OriginAndDestinationExclusionsType {
    
    $attributes: OriginAndDestinationExclusionsTypeAttributes
    
    // Company identification
    airlineCode: string
    
    // Lock indicator, coded
    privilegeIndicator: Array<string>
    
    // Owner
    owner: Array<string>
    
}

export interface OriginAndDestinationExclusionsTypeAttributes {
    
}

// To specify Cabin Eligibility rules.
export interface CabinEligibilityRulesType {
    
    $attributes: CabinEligibilityRulesTypeAttributes
    
    // GENERAL CABIN PREFERENCES RULES
    generalCabinPreferences: Array<GeneralCabinPrefRulesType>
    
    // GENERAL CABIN EXCLUSIONS RULES
    cabinExclusion: Array<GeneralCabinExclusionsRulesType>
    
    // Domestic flight cabin, coded
    domesticFlightCabin: Array<string>
    
    // ELAPSED FLYING TIME RULES
    eftCabinPreference: Array<ElapsedFlyingTimeRulesType>
    
}

export interface CabinEligibilityRulesTypeAttributes {
    
}


export interface GeneralCabinPrefRulesType {
    
    $attributes: GeneralCabinPrefRulesTypeAttributes
    
    // Cabin, coded
    cabin: string
    
    // Traveller category
    travellerCategory: Array<string>
    
    // Trip category
    tripCategory: Array<string>
    
}

export interface GeneralCabinPrefRulesTypeAttributes {
    
}


export interface GeneralCabinExclusionsRulesType {
    
    $attributes: GeneralCabinExclusionsRulesTypeAttributes
    
    // Cabin, coded
    cabin: Array<string>
    
}

export interface GeneralCabinExclusionsRulesTypeAttributes {
    
}


export interface ElapsedFlyingTimeRulesType {
    
    $attributes: ElapsedFlyingTimeRulesTypeAttributes
    
    // Elapsed flying time
    elapsedFlyingTime: number
    
    // Greater than EFT cabin, coded
    greaterThanEFTCabin: string
    
    // Lower than EFT cabin, coded
    lowerThanEFTCabin: string
    
    // Traveller category
    travellerCategory: Array<string>
    
    // Trip category
    tripCategory: Array<string>
    
}

export interface ElapsedFlyingTimeRulesTypeAttributes {
    
}

// To specify Availability Information.
export interface AvailabilityInformationType {
    
    $attributes: AvailabilityInformationTypeAttributes
    
    // AVAILABILITY INFORMATION
    availabilityInformation: AvailabilityInformationDetailsType
    
}

export interface AvailabilityInformationTypeAttributes {
    
}


export interface AvailabilityInformationDetailsType {
    
    $attributes: AvailabilityInformationDetailsTypeAttributes
    
    // Availability information line
    line: string
    
    // Destination value
    destinationValue: Array<string>
    
}

export interface AvailabilityInformationDetailsTypeAttributes {
    
}

// To specify itinerary preferences.
export interface ItineraryPreferencesType {
    
    $attributes: ItineraryPreferencesTypeAttributes
    
    // PREFERRED AIRPORTS
    preferredAirport: Array<PreferredAirportsType>
    
    // EMBARGOED TRANSITS
    embargoedTransit: Array<EmbargoedTransitsType>
    
}

export interface ItineraryPreferencesTypeAttributes {
    
}


export interface PreferredAirportsType {
    
    $attributes: PreferredAirportsTypeAttributes
    
    // Airport code
    code: string
    
}

export interface PreferredAirportsTypeAttributes {
    
}


export interface EmbargoedTransitsType {
    
    $attributes: EmbargoedTransitsTypeAttributes
    
    // Transit value
    value: string
    
}

export interface EmbargoedTransitsTypeAttributes {
    
}


export interface Air_RetrieveSeatMapType {
    
    $attributes: Air_RetrieveSeatMapTypeAttributes
    
    // Travel Product Identification
    travelProductIdent: TravelProductInformationTypeI5
    
    // Seat Request Parameters
    seatRequestParameters: Array<SeatRequestParametersTypeI1>
    
    
    productInformation: Array<RelatedProductInformationTypeI6>
    
    // frequent flyer or corporate details
    frequentTravelerInfo: Array<FrequentTravellerInformationTypeI1>
    
    // Record locator details
    resControlInfo: Array<ReservationControlInformationTypeI11>
    
    
    equipmentInformation: Array<EquipmentInfoTypeI>
    
    // Point of Sell override
    additionalInfo: Array<AdditionalBusinessSourceInformationTypeI>
    
    // To return price in another currency
    conversionRate: Array<ConversionRateTypeI2>
    
    // Traveler detail group
    traveler: Array<travelerType>
    
    // Indicate to which passenger the seat map is performed (PNR index)
    suitablePassenger: Array<ReferenceInformationType3>
    
    // process indicators
    processIndicators: Array<StatusType5>
    
}

export interface Air_RetrieveSeatMapTypeAttributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI5 {
    
    $attributes: TravelProductInformationTypeI5Attributes
    
    
    flightDate: Array<ProductDateTimeTypeI7>
    
    
    boardPointDetails: Array<LocationTypeI7>
    
    
    offpointDetails: Array<LocationTypeI7>
    
    
    companyDetails: Array<CompanyIdentificationTypeI9>
    
    
    flightIdentification: Array<ProductIdentificationDetailsTypeI7>
    
    
    flightTypeDetails: Array<ProductTypeDetailsTypeI5>
    
}

export interface TravelProductInformationTypeI5Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI7 {
    
    $attributes: ProductDateTimeTypeI7Attributes
    
    
    departureDate: Array<string>
    
    
    departureTime: Array<string>
    
    
    arrivalDate: Array<string>
    
    
    arrivalTime: Array<string>
    
    
    dateVariation: Array<number>
    
}

export interface ProductDateTimeTypeI7Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI7 {
    
    $attributes: LocationTypeI7Attributes
    
    
    trueLocationId: Array<string>
    
    
    trueLocation: Array<string>
    
}

export interface LocationTypeI7Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI9 {
    
    $attributes: CompanyIdentificationTypeI9Attributes
    
    
    marketingCompany: Array<string>
    
    
    operatingCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI9Attributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI7 {
    
    $attributes: ProductIdentificationDetailsTypeI7Attributes
    
    
    flightNumber: string
    
    
    bookingClass: Array<string>
    
    
    operationalSuffix: Array<string>
    
    
    modifier: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI7Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsTypeI5 {
    
    $attributes: ProductTypeDetailsTypeI5Attributes
    
    
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsTypeI5Attributes {
    
}

// To specify the selection criteria for a seat map request.
export interface SeatRequestParametersTypeI1 {
    
    $attributes: SeatRequestParametersTypeI1Attributes
    
    
    genericDetails: Array<GenericDetailsTypeI1>
    
    
    rangeOfRowsDetails: Array<RangeOfRowsDetailsTypeI>
    
    
    processingIndicator: Array<string>
    
    
    referenceNumber: Array<string>
    
    
    description: Array<string>
    
}

export interface SeatRequestParametersTypeI1Attributes {
    
}

// To identify the type of seat requested.
export interface GenericDetailsTypeI1 {
    
    $attributes: GenericDetailsTypeI1Attributes
    
    
    cabinClassDesignator: Array<string>
    
    
    noSmokingIndicator: Array<string>
    
    
    cabinClass: Array<number>
    
    
    compartmentDesignator: Array<string>
    
    
    seatCharacteristic: Array<string>
    
}

export interface GenericDetailsTypeI1Attributes {
    
}

// To specify row information for a means of transport.
export interface RangeOfRowsDetailsTypeI {
    
    $attributes: RangeOfRowsDetailsTypeIAttributes
    
    
    seatRowNumber: number
    
    
    numberOfRows: Array<number>
    
    
    seatColumn: Array<string>
    
}

export interface RangeOfRowsDetailsTypeIAttributes {
    
}

// To indicate quantity and action required in relation to a product.
export interface RelatedProductInformationTypeI6 {
    
    $attributes: RelatedProductInformationTypeI6Attributes
    
    
    quantity: Array<number>
    
    
    statusCode: Array<string>
    
}

export interface RelatedProductInformationTypeI6Attributes {
    
}

// To specify frequent traveler information.
export interface FrequentTravellerInformationTypeI1 {
    
    $attributes: FrequentTravellerInformationTypeI1Attributes
    
    // customer frequent flyer or corporate details according to the type value
    frequentTravellerDetails: FrequentTravellerIdentificationTypeI3
    
    // other customer frequent flyer or corporate details according to the type value
    otherFrequentTravellerDetails: Array<FrequentTravellerIdentificationTypeI_262024C>
    
}

export interface FrequentTravellerInformationTypeI1Attributes {
    
}

// Identification of the frequent traveller number by company code with the capability to reference a specific traveller.
export interface FrequentTravellerIdentificationTypeI3 {
    
    $attributes: FrequentTravellerIdentificationTypeI3Attributes
    
    // Airline code
    carrier: string
    
    // frequent flyer number or corporate identifier according to the type value
    number: string
    
    // customer reference
    customerReference: Array<string>
    
    // tier level
    tierLevel: Array<string>
    
    // priority code
    priorityCode: Array<string>
    
    // customer or corporate value depending on the type value
    customerValue: Array<number>
    
    // To specify the product/account number qualifier. (e.g. 1 = Customer Frequent Flyer 2=Corporate Frequent Flyer).
    type: Array<string>
    
}

export interface FrequentTravellerIdentificationTypeI3Attributes {
    
}

// Identification of the frequent traveller number by company code with the capability to reference a specific traveller.
export interface FrequentTravellerIdentificationTypeI_262024C {
    
    $attributes: FrequentTravellerIdentificationTypeI_262024CAttributes
    
    // airline code
    carrier: string
    
    // frequent flyer number or corporate identifier according to the type value
    number: string
    
    // customer reference
    customerReference: Array<string>
    
    // tier level
    tierLevel: Array<string>
    
    // priority code
    priorityCode: Array<string>
    
    // customer or corporate value depending on the type value
    customerValue: Array<number>
    
    // To specify the product/account number qualifier. (e.g. 1 = Customer Frequent Flyer 2=Corporate Frequent Flyer).
    type: Array<string>
    
}

export interface FrequentTravellerIdentificationTypeI_262024CAttributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI11 {
    
    $attributes: ReservationControlInformationTypeI11Attributes
    
    
    reservation: Array<ReservationControlInformationDetailsTypeI12>
    
}

export interface ReservationControlInformationTypeI11Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI12 {
    
    $attributes: ReservationControlInformationDetailsTypeI12Attributes
    
    
    companyId: Array<string>
    
    
    controlNumber: Array<string>
    
    
    controlType: Array<string>
    
    
    date: Array<string>
    
    
    time: Array<number>
    
}

export interface ReservationControlInformationDetailsTypeI12Attributes {
    
}

// To specify configuration details of an aircraft.
export interface EquipmentInfoTypeI {
    
    $attributes: EquipmentInfoTypeIAttributes
    
    
    cabinClassDetails: Array<ConfigurationDetailsTypeI>
    
    
    iataAircraftTypeCode: Array<string>
    
    
    configVersionDetails: Array<AdditionalEquipmentInformationTypeI1>
    
    
    configVersionDescription: Array<string>
    
}

export interface EquipmentInfoTypeIAttributes {
    
}

// To identify the number of seats for a specific class of service.
export interface ConfigurationDetailsTypeI {
    
    $attributes: ConfigurationDetailsTypeIAttributes
    
    
    classDesignator: string
    
    
    numberOfSeats: Array<number>
    
    
    characteristic: Array<string>
    
}

export interface ConfigurationDetailsTypeIAttributes {
    
}

// To identify equipment configuration, registration number, and cabin facilities.
export interface AdditionalEquipmentInformationTypeI1 {
    
    $attributes: AdditionalEquipmentInformationTypeI1Attributes
    
    
    fittedConfigurationCode: Array<string>
    
    
    defaultConfigurationCode: Array<string>
    
    
    airlineDetails: Array<string>
    
    
    code: Array<string>
    
    
    characteristic: Array<string>
    
}

export interface AdditionalEquipmentInformationTypeI1Attributes {
    
}

// To specify additional originator and source information.
export interface AdditionalBusinessSourceInformationTypeI {
    
    $attributes: AdditionalBusinessSourceInformationTypeIAttributes
    
    
    sourceType: SourceTypeDetailsTypeI1
    
    
    originatorDetails: Array<OriginatorIdentificationDetailsTypeI8>
    
    
    locationDetails: Array<LocationTypeI7>
    
    
    countryCode: Array<string>
    
    
    systemCode: Array<string>
    
}

export interface AdditionalBusinessSourceInformationTypeIAttributes {
    
}

// To identify the type of source.
export interface SourceTypeDetailsTypeI1 {
    
    $attributes: SourceTypeDetailsTypeI1Attributes
    
    
    sourceQualifier1: string
    
    
    sourceQualifier2: Array<string>
    
}

export interface SourceTypeDetailsTypeI1Attributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI8 {
    
    $attributes: OriginatorIdentificationDetailsTypeI8Attributes
    
    // is alpanum since the sine of an agent might contain his initials and duty code
    originatorId: Array<number>
    
    
    inHouseIdentification1: Array<string>
    
    
    inHouseIdentification2: Array<string>
    
    
    inHouseIdentification3: Array<string>
    
}

export interface OriginatorIdentificationDetailsTypeI8Attributes {
    
}

// To specify details of a conversion rate related to an amount.
export interface ConversionRateTypeI2 {
    
    $attributes: ConversionRateTypeI2Attributes
    
    // currency conversion details
    conversionRateDetails: ConversionRateDetailsTypeI2
    
}

export interface ConversionRateTypeI2Attributes {
    
}

// To specify the conversion rate and the monetary amount.
export interface ConversionRateDetailsTypeI2 {
    
    $attributes: ConversionRateDetailsTypeI2Attributes
    
    // type of conversion
    conversionType: Array<string>
    
    // currency code
    currency: Array<string>
    
}

export interface ConversionRateDetailsTypeI2Attributes {
    
}


export interface travelerType {
    
    $attributes: travelerTypeAttributes
    
    // traveler information
    travelerInformation: TravellerInformationType2
    
    // frequent flyer or corporate details
    frequentTravelerDetails: Array<FrequentTravellerInformationTypeI_187045S>
    
    // PTC override and Ticket Designator
    fareInfo: Array<FareInformationTypeI4>
    
    // Date of Birth
    dateAndTimeInfo: Array<DateAndTimeInformationTypeI4>
    
    // eTicket number for pricing override
    ticketDetails: Array<TicketNumberTypeI3>
    
    // Fare Basis
    fareQualifierDetails: Array<FareQualifierDetailsTypeI1>
    
    // customer characteristics
    customerCharacteristics: Array<SpecialRequirementsDetailsType5>
    
}

export interface travelerTypeAttributes {
    
}

// To specify a traveler and personal details relating to the traveler
export interface TravellerInformationType2 {
    
    $attributes: TravellerInformationType2Attributes
    
    // passenger details
    paxDetails: TravellerSurnameInformationType1
    
    // other passenger details
    otherPaxDetails: Array<TravellerDetailsType5>
    
}

export interface TravellerInformationType2Attributes {
    
}


export interface TravellerSurnameInformationType1 {
    
    $attributes: TravellerSurnameInformationType1Attributes
    
    // Passenger name
    surname: string
    
    // passenger type (PTC)
    type: Array<string>
    
    // quantity
    quantity: Array<number>
    
}

export interface TravellerSurnameInformationType1Attributes {
    
}

// To identify the given/first name and the title of a traveller and the traveller type.
export interface TravellerDetailsType5 {
    
    $attributes: TravellerDetailsType5Attributes
    
    // given name of the passenger
    givenName: Array<string>
    
    // passenger type (PTC)
    type: Array<string>
    
    // unique customer identifier
    uniqueCustomerIdentifier: Array<string>
    
    
    infantIndicator: Array<string>
    
}

export interface TravellerDetailsType5Attributes {
    
}

// To specify frequent traveler information.
export interface FrequentTravellerInformationTypeI_187045S {
    
    $attributes: FrequentTravellerInformationTypeI_187045SAttributes
    
    // customer frequent flyer or corporate details according to the type value
    frequentTravellerDetails: FrequentTravellerIdentificationTypeI3
    
    // other customer frequent flyer or corporate details according to the type value
    otherFrequentTravellerDetails: Array<FrequentTravellerIdentificationTypeI3>
    
}

export interface FrequentTravellerInformationTypeI_187045SAttributes {
    
}

// To specify fare details.
export interface FareInformationTypeI4 {
    
    $attributes: FareInformationTypeI4Attributes
    
    
    valueQualifier: Array<string>
    
    
    rateCategory: Array<string>
    
}

export interface FareInformationTypeI4Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeInformationTypeI4 {
    
    $attributes: DateAndTimeInformationTypeI4Attributes
    
    
    dateAndTimeDetails: Array<DateAndTimeDetailsTypeI4>
    
}

export interface DateAndTimeInformationTypeI4Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeDetailsTypeI4 {
    
    $attributes: DateAndTimeDetailsTypeI4Attributes
    
    
    qualifier: Array<string>
    
    
    date: Array<string>
    
}

export interface DateAndTimeDetailsTypeI4Attributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberTypeI3 {
    
    $attributes: TicketNumberTypeI3Attributes
    
    
    documentDetails: TicketNumberDetailsTypeI3
    
}

export interface TicketNumberTypeI3Attributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsTypeI3 {
    
    $attributes: TicketNumberDetailsTypeI3Attributes
    
    
    number: Array<string>
    
}

export interface TicketNumberDetailsTypeI3Attributes {
    
}

// To specify the details which qualify a fare
export interface FareQualifierDetailsTypeI1 {
    
    $attributes: FareQualifierDetailsTypeI1Attributes
    
    
    additionalFareDetails: Array<AdditionalFareQualifierDetailsTypeI2>
    
}

export interface FareQualifierDetailsTypeI1Attributes {
    
}

// To specify the fare basis and ticket designator codes.
export interface AdditionalFareQualifierDetailsTypeI2 {
    
    $attributes: AdditionalFareQualifierDetailsTypeI2Attributes
    
    
    rateClass: Array<string>
    
    
    commodityCategory: Array<string>
    
}

export interface AdditionalFareQualifierDetailsTypeI2Attributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsType5 {
    
    $attributes: SpecialRequirementsDetailsType5Attributes
    
    // To specify the Service Requirement of the customer.
    specialRequirementsInfo: SpecialRequirementsTypeDetailsType5
    
}

export interface SpecialRequirementsDetailsType5Attributes {
    
}

// SPECIAL REQUIREMENTS TYPE DETAILS
export interface SpecialRequirementsTypeDetailsType5 {
    
    $attributes: SpecialRequirementsTypeDetailsType5Attributes
    
    // To specify the Code of the SSR.
    ssrCode: string
    
    // Board point
    boardPoint: Array<string>
    
    // Off point
    offPoint: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsType5Attributes {
    
}

// Used to convey the passenger references.
export interface ReferenceInformationType3 {
    
    $attributes: ReferenceInformationType3Attributes
    
    // Used to convey the passenger tatoo
    passengerReference: Array<ReferencingDetailsType8>
    
}

export interface ReferenceInformationType3Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType8 {
    
    $attributes: ReferencingDetailsType8Attributes
    
    // reference type
    type: string
    
    // reference
    value: string
    
}

export interface ReferencingDetailsType8Attributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType5 {
    
    $attributes: StatusType5Attributes
    
    // List of processing indicators
    statusInformation: Array<StatusDetailsType4>
    
}

export interface StatusType5Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType4 {
    
    $attributes: StatusDetailsType4Attributes
    
    
    action: string
    
}

export interface StatusDetailsType4Attributes {
    
}


export interface Air_RetrieveSeatMapReplyType {
    
    $attributes: Air_RetrieveSeatMapReplyTypeAttributes
    
    // Response details
    responseDetails: Array<ResponseAnalysisDetailsTypeI>
    
    // Specification of the error details
    errorInformation: Array<ErrorInformationTypeI>
    
    // warning information
    warningInformation: Array<WarningInformationType>
    
    // selection criteria for a seat map
    seatRequestParameters: Array<SeatRequestParametersTypeI2>
    
    // Describes each air segment with the seat map of their respective aircrafts.
    seatmapInformation: Array<seatmapInformationType>
    
}

export interface Air_RetrieveSeatMapReplyTypeAttributes {
    
}

// To specify the type of query and the processing status associated with this response.
export interface ResponseAnalysisDetailsTypeI {
    
    $attributes: ResponseAnalysisDetailsTypeIAttributes
    
    // To which message this is a response (e.g. S for seat map).
    responseType: string
    
    // STATUS, CODED Processing status is e.g. OK - data follows (O) or OK - no data follow (P) or non recoverable error (X).
    statusCode: string
    
}

export interface ResponseAnalysisDetailsTypeIAttributes {
    
}

// To specify the error(s) encountered while processing.
export interface ErrorInformationTypeI {
    
    $attributes: ErrorInformationTypeIAttributes
    
    // Error information
    errorDetails: ErrorInformationDetailsTypeI
    
    // Error information
    otherErrorDetails: Array<ErrorInformationDetailsTypeI>
    
}

export interface ErrorInformationTypeIAttributes {
    
}

// To identify an error and whether it occurred at the system or application level.
export interface ErrorInformationDetailsTypeI {
    
    $attributes: ErrorInformationDetailsTypeIAttributes
    
    // Indicates at which level of processing the error took place.
    processingLevel: number
    
    // A code assigned by the receiver of a message identifying the error or warning.
    code: Array<number>
    
    // Free text
    description: Array<string>
    
}

export interface ErrorInformationDetailsTypeIAttributes {
    
}

// To specify the warning(s) resulting from processing.
export interface WarningInformationType {
    
    $attributes: WarningInformationTypeAttributes
    
    // Details of the warning message
    warningDetails: WarningDetailsType
    
    // Details of the subsequent warning message
    otherWarningDetails: Array<WarningDetailsType>
    
}

export interface WarningInformationTypeAttributes {
    
}

// To identify a warning error and whether it occurred at the system or application level.
export interface WarningDetailsType {
    
    $attributes: WarningDetailsTypeAttributes
    
    // Defines the warning at a system level or syntax.
    processingLevel: number
    
    // A code assigned by the receiver of a message identifying the warning.
    number: Array<number>
    
    // Text Information related to a cabin class.
    description: Array<string>
    
}

export interface WarningDetailsTypeAttributes {
    
}

// To specify the selection criteria for a seat map request.
export interface SeatRequestParametersTypeI2 {
    
    $attributes: SeatRequestParametersTypeI2Attributes
    
    // Generic details
    genericDetails: Array<GenericDetailsTypeI2>
    
    // Range of rows details
    rangeOfRowsDetails: Array<RangeOfRowsDetailsTypeI1>
    
    // The Processing Indicator (data element 7365) is used to indicate seat assignment association in the Advance Seat Assignment and Boarding Pass Request and the Wrap Up Request. The Processing Indicator is used to indicate boarding pass authority/restriction in the Advance Seat Assignment and Boarding Pass Response and the Wrap Up Response.
    processingIndicator: Array<string>
    
    // Reference number
    referenceNumber: Array<string>
    
    // Free text
    description: Array<string>
    
}

export interface SeatRequestParametersTypeI2Attributes {
    
}

// To identify the type of seat requested.
export interface GenericDetailsTypeI2 {
    
    $attributes: GenericDetailsTypeI2Attributes
    
    // Allows seat assignment request and response by aircraft cabin.
    cabinClassDesignator: Array<string>
    
    // Allows seat assignment request and response by smoking/non-smoking zone.
    noSmokingIndicator: Array<string>
    
    // Cabin Class of service, coded. Allows seat assignment request/response by cabin class.
    cabinClass: Array<number>
    
    // Allows seat assignment request and response by cabin compartment if there are separate cabins (front, rear cabin or upper deck)
    compartmentDesignator: Array<string>
    
    // Allows seat assignment request/response to provide additional seat detail.
    seatCharacteristic: Array<string>
    
}

export interface GenericDetailsTypeI2Attributes {
    
}

// To specify row information for a means of transport.
export interface RangeOfRowsDetailsTypeI1 {
    
    $attributes: RangeOfRowsDetailsTypeI1Attributes
    
    // Seat row number
    seatRowNumber: number
    
    // Number of rows
    numberOfRows: Array<number>
    
    // List of existing seat column designators for this particular row.
    seatColumn: Array<string>
    
}

export interface RangeOfRowsDetailsTypeI1Attributes {
    
}


export interface seatmapInformationType {
    
    $attributes: seatmapInformationTypeAttributes
    
    // Travel product identification (flight for which the seat map is requested).
    flightDateInformation: TravelProductInformationTypeI6
    
    // Specification of the error details
    seatmapErrorInfo: Array<ErrorInformationTypeI>
    
    // warning informations
    seatmapWarningInfo: Array<WarningInformationTypeI>
    
    // Additional product details
    additionalProductInfo: Array<AdditionalProductDetailsTypeI5>
    
    // Specification of the details of the aircraft
    equipmentInformation: Array<EquipmentInfoTypeI1>
    
    // Seatmap of a cabin.
    cabin: Array<cabinType>
    
    // Describes seats characteristics and occupation (One occurence per Row)
    row: Array<rowType>
    
    // Pricing and Commercial Description
    freeText: Array<InteractiveFreeTextTypeI3>
    
    // Commercial description
    commercialDescription: Array<FreeTextInformationType7>
    
    // Price map per passenger or group of passengers
    customerCentricData: Array<customerCentricDataType>
    
    // catalogue pricing description
    catalogData: Array<catalogDataType>
    
}

export interface seatmapInformationTypeAttributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI6 {
    
    $attributes: TravelProductInformationTypeI6Attributes
    
    // Product Date/Time
    flightDate: Array<ProductDateTimeTypeI8>
    
    // Location of departure
    boardPointDetails: Array<LocationTypeI8>
    
    // Location of arrival
    offpointDetails: Array<LocationTypeI8>
    
    // Company details
    companyDetails: Array<CompanyIdentificationTypeI10>
    
    // Product identification details
    flightIdentification: Array<ProductIdentificationDetailsTypeI8>
    
}

export interface TravelProductInformationTypeI6Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI8 {
    
    $attributes: ProductDateTimeTypeI8Attributes
    
    // Departure date (ddmmyy)
    departureDate: Array<string>
    
    // Departure time (hhmm)
    departureTime: Array<string>
    
    // Arrival date (ddmmyy)
    arrivalDate: Array<string>
    
    // Arrival time (hhmm)
    arrivalTime: Array<string>
    
    // Date variation
    dateVariation: Array<number>
    
}

export interface ProductDateTimeTypeI8Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI8 {
    
    $attributes: LocationTypeI8Attributes
    
    // A 3 character ATA/IATA airport/city code to specify place of departure
    trueLocationId: Array<string>
    
}

export interface LocationTypeI8Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI10 {
    
    $attributes: CompanyIdentificationTypeI10Attributes
    
    // A 2-3 character code to specify the marketing airline designator code
    marketingCompany: Array<string>
    
    // A 2-3 character code to specify the operating airline designator code
    operatingCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI10Attributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI8 {
    
    $attributes: ProductIdentificationDetailsTypeI8Attributes
    
    // Product identification details
    flightNumber: string
    
    // Class of service
    bookingClass: Array<string>
    
    // An operational suffix related to flight number
    operationalSuffix: Array<string>
    
    // Modifier
    modifier: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI8Attributes {
    
}

// To specify the warning(s) resulting from processing.
export interface WarningInformationTypeI {
    
    $attributes: WarningInformationTypeIAttributes
    
    // Details of the warning message
    warningDetails: WarningDetailsTypeI
    
    // Details of the subsequent warning message
    otherWarningDetails: Array<WarningDetailsTypeI>
    
}

export interface WarningInformationTypeIAttributes {
    
}

// To identify a warning error and whether it occurred at the system or application level.
export interface WarningDetailsTypeI {
    
    $attributes: WarningDetailsTypeIAttributes
    
    // Defines the warning at a system level or syntax.
    processingLevel: number
    
    // A code assigned by the receiver of a message identifying the warning.
    number: Array<number>
    
    // Text Information related to a cabin class.
    description: Array<string>
    
}

export interface WarningDetailsTypeIAttributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsTypeI5 {
    
    $attributes: AdditionalProductDetailsTypeI5Attributes
    
    // Additional product details
    legDetails: Array<AdditionalProductTypeI5>
    
    // Departure information
    departureStationInfo: Array<StationInformationTypeI5>
    
    // Arrival information
    arrivalStationInfo: Array<StationInformationTypeI5>
    
    // Traveller time details
    travellerTimeDetails: Array<TravellerTimeDetailsTypeI2>
    
    // Such things as meals or entertrainment on board
    facilitiesInformation: Array<ProductFacilitiesTypeI3>
    
}

export interface AdditionalProductDetailsTypeI5Attributes {
    
}

// Additional details describing a specific means of transport.
export interface AdditionalProductTypeI5 {
    
    $attributes: AdditionalProductTypeI5Attributes
    
    // Aircraft code
    equipment: Array<string>
    
    // Number of en-route stops
    numberOfStops: Array<number>
    
    // Leg duration
    duration: Array<number>
    
    // Days of the week the flight operates: 1=Monday to 7=Sunday
    daysOfOperation: Array<number>
    
}

export interface AdditionalProductTypeI5Attributes {
    
}

// To specify departure/arrival information concerning a means of transport.
export interface StationInformationTypeI5 {
    
    $attributes: StationInformationTypeI5Attributes
    
    // Gate description
    gateDescription: Array<string>
    
    // Terminal of arrival
    terminal: Array<string>
    
    // Concourse of arrival
    concourse: Array<string>
    
}

export interface StationInformationTypeI5Attributes {
    
}

// Dates and times relevant to a traveller.
export interface TravellerTimeDetailsTypeI2 {
    
    $attributes: TravellerTimeDetailsTypeI2Attributes
    
    // Check-in date and time (ddmmyyhhmm)
    checkInDateTime: Array<number>
    
}

export interface TravellerTimeDetailsTypeI2Attributes {
    
}

// Identification of facilities for a product or service by type or description.
export interface ProductFacilitiesTypeI3 {
    
    $attributes: ProductFacilitiesTypeI3Attributes
    
    // Only 2 codes supported by AMADEUS: &#39;E&#39; for Entertainment &#39;M&#39; for Meal Service
    code: Array<string>
    
    // Can contain a 2 character Meal Service Code if 9932 is &#39;M&#39;.
    description: Array<string>
    
}

export interface ProductFacilitiesTypeI3Attributes {
    
}

// To specify configuration details of an aircraft.
export interface EquipmentInfoTypeI1 {
    
    $attributes: EquipmentInfoTypeI1Attributes
    
    // The details of the fitted configuration.
    cabinClassDetails: Array<ConfigurationDetailsTypeI1>
    
    // User own or ATA/IATA industry defined aircraft type code (See SSIM, Appendix A, IATA Airline Coding Directory, Chapter 8).
    iataAircraftTypeCode: Array<string>
    
    // Additional equipment information
    configVersionDetails: Array<AdditionalEquipmentInformationTypeI2>
    
    // Free text
    configVersionDescription: Array<string>
    
}

export interface EquipmentInfoTypeI1Attributes {
    
}

// To identify the number of seats for a specific class of service.
export interface ConfigurationDetailsTypeI1 {
    
    $attributes: ConfigurationDetailsTypeI1Attributes
    
    // Cabin class designator To indicate cabin class not necessarily an RBD
    classDesignator: string
    
    // Seats - number of seats
    numberOfSeats: Array<number>
    
}

export interface ConfigurationDetailsTypeI1Attributes {
    
}

// To identify equipment configuration, registration number, and cabin facilities.
export interface AdditionalEquipmentInformationTypeI2 {
    
    $attributes: AdditionalEquipmentInformationTypeI2Attributes
    
    // Aircraft cabin version identification
    fittedConfigurationCode: Array<string>
    
    // Airline Organisation FOR Airline Owner
    airlineDetails: Array<string>
    
}

export interface AdditionalEquipmentInformationTypeI2Attributes {
    
}


export interface cabinType {
    
    $attributes: cabinTypeAttributes
    
    // It gives the row where the class starts and where it ends.
    compartmentDetails: CabinDetailsTypeI
    
    // Specification of the details of the facilities of a cabin
    cabinFacilities: Array<CabinFacilitiesTypeI>
    
}

export interface cabinTypeAttributes {
    
}

// To specify the physical layout of a cabin area for seating.
export interface CabinDetailsTypeI {
    
    $attributes: CabinDetailsTypeIAttributes
    
    // Cabin class designation
    classDetails: Array<CabinClassDesignationTypeI>
    
    // To specify the range of rows in a particular cabin class
    seatRowRange: CabinClassSeatRowRangeDetailsTypeI
    
    // Specifies the physical of a cabin class within a means of transport- lowerdeck-maindeck-upperdeck
    cabinZoneCode: Array<string>
    
    // To specify the range of rows that allows smoking.
    smokingSeatRowRange: Array<SmokingAreaSeatRowRangeDetailsTypeI>
    
    // Describes the general occupation status of seats on a means of transport
    defaultSeatOccupation: Array<string>
    
    // To specify the range of rows over the wings of an aircraft
    overwingSeatRowRange: Array<OverwingSeatRowRangeTypeI>
    
    // List of column designators in this cabin
    columnDetails: Array<CabinWidthAndColumnDetailsTypeI>
    
}

export interface CabinDetailsTypeIAttributes {
    
}

// Product class, number, and designator which define a cabin in a means of transport.
export interface CabinClassDesignationTypeI {
    
    $attributes: CabinClassDesignationTypeIAttributes
    
    // Class of the cabin whose seat map is returned.
    classDesignator: string
    
    // Identify the reservation booking designator.
    bookingClass: Array<string>
    
    // Cabin class of service, coded
    cabinClass: Array<number>
    
    // Cabin compartment designator
    compartmentDesignator: Array<string>
    
}

export interface CabinClassDesignationTypeIAttributes {
    
}

// To specify the range of rows in a particular cabin class.
export interface CabinClassSeatRowRangeDetailsTypeI {
    
    $attributes: CabinClassSeatRowRangeDetailsTypeIAttributes
    
    // Specifies the first and last row number within a particular cabin class compartment.
    number: Array<number>
    
}

export interface CabinClassSeatRowRangeDetailsTypeIAttributes {
    
}

// To specify the range of rows that allow smoking.
export interface SmokingAreaSeatRowRangeDetailsTypeI {
    
    $attributes: SmokingAreaSeatRowRangeDetailsTypeIAttributes
    
    // Specifies the first and last row number within a particular smoking seat row range.
    number: Array<number>
    
}

export interface SmokingAreaSeatRowRangeDetailsTypeIAttributes {
    
}

// To specify the range of rows in the overwing section of an aircraft.
export interface OverwingSeatRowRangeTypeI {
    
    $attributes: OverwingSeatRowRangeTypeIAttributes
    
    // To specify the first and last row number in the range.
    number: Array<number>
    
}

export interface OverwingSeatRowRangeTypeIAttributes {
    
}

// To specify the status of a column of seats.
export interface CabinWidthAndColumnDetailsTypeI {
    
    $attributes: CabinWidthAndColumnDetailsTypeIAttributes
    
    // To indicate the column of a seat
    seatColumn: string
    
    // Column description - To indicate if the column is along a window or an aisle or between two other columns.
    description: Array<string>
    
}

export interface CabinWidthAndColumnDetailsTypeIAttributes {
    
}

// To indicate facilities within a cabin class or cabin compartment.
export interface CabinFacilitiesTypeI {
    
    $attributes: CabinFacilitiesTypeIAttributes
    
    // Row location qualifier -To indicate the location of a cabin facility . F = front M = middle R = rear.
    rowLocation: string
    
    // Information describing a specific area in a means of transport.
    cabinFacilityDetails: CabinFacilitiesDetailsTypeI
    
    // Information describing a specific area in a means of transport.
    otherCabinFacilityDetails: Array<CabinFacilitiesDetailsTypeI>
    
}

export interface CabinFacilitiesTypeIAttributes {
    
}

// Information describing a specific area in a means of transport.
export interface CabinFacilitiesDetailsTypeI {
    
    $attributes: CabinFacilitiesDetailsTypeIAttributes
    
    // To indicate the type of cabin facility (e.g. lavatory, galley, etc.).
    type: string
    
    // To indicate the location of a cabin facility within a numbered row (e.g. right, etc.).
    location: Array<string>
    
}

export interface CabinFacilitiesDetailsTypeIAttributes {
    
}


export interface rowType {
    
    $attributes: rowTypeAttributes
    
    // Row - To specify the individual seat information for seats in a particular row.
    rowDetails: RowDetailsType
    
    // Specification of the details of the cabin facilities at a certain row.
    cabinFacility: Array<CabinFacilitiesTypeI>
    
}

export interface rowTypeAttributes {
    
}

// To specify the individual seat information for seats in a particular row.
export interface RowDetailsType {
    
    $attributes: RowDetailsTypeAttributes
    
    // Seat row number
    seatRowNumber: number
    
    // Row characteristic details
    rowCharacteristicDetails: Array<RowCharacteristicsDetailsTypeI>
    
    // Seat occupation details
    seatOccupationDetails: Array<SeatOccupationDetailsTypeI_262401C>
    
}

export interface RowDetailsTypeAttributes {
    
}

// To identify the characteristics of a row on a means of transport.
export interface RowCharacteristicsDetailsTypeI {
    
    $attributes: RowCharacteristicsDetailsTypeIAttributes
    
    // Characteristic which relates to all seats within the specified row number.
    rowCharacteristic: string
    
    // Characteristic which relates to all seats within the specified row number.
    otherRowCharacteristic: Array<string>
    
}

export interface RowCharacteristicsDetailsTypeIAttributes {
    
}

// To identify the status of a specific seat.
export interface SeatOccupationDetailsTypeI_262401C {
    
    $attributes: SeatOccupationDetailsTypeI_262401CAttributes
    
    // Column identifier of the seat
    seatColumn: string
    
    // indicate the seat occupancy
    seatOccupation: Array<string>
    
    // Characteristics of the seat: window, aisle, for passenger with infant, facing a bulkhead...
    seatCharacteristic: Array<string>
    
}

export interface SeatOccupationDetailsTypeI_262401CAttributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextTypeI3 {
    
    $attributes: InteractiveFreeTextTypeI3Attributes
    
    // Free Text Qualification
    freeTextQualification: Array<FreeTextQualificationTypeI5>
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface InteractiveFreeTextTypeI3Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationTypeI5 {
    
    $attributes: FreeTextQualificationTypeI5Attributes
    
    // Text Subject Qualifier
    textSubjectQualifier: string
    
    // Information Type
    informationType: Array<string>
    
    // status
    status: Array<string>
    
    // Company Id
    companyId: Array<string>
    
    // language
    language: Array<string>
    
}

export interface FreeTextQualificationTypeI5Attributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType7 {
    
    $attributes: FreeTextInformationType7Attributes
    
    // Free text details
    freeTextDetails: FreeTextDetailsType7
    
    // This field contains the commercial name
    freeText: Array<string>
    
}

export interface FreeTextInformationType7Attributes {
    
}


export interface FreeTextDetailsType7 {
    
    $attributes: FreeTextDetailsType7Attributes
    
    // Text subject qualifier
    textSubjectQualifier: string
    
    // Type of information
    informationType: string
    
    // Source value
    source: string
    
    // Type of encoding
    encoding: string
    
}

export interface FreeTextDetailsType7Attributes {
    
}


export interface customerCentricDataType {
    
    $attributes: customerCentricDataTypeAttributes
    
    // Separator
    dummy: DummySegmentTypeI6
    
    // Traveller Details
    travellerDetails: Array<TravellerInformationTypeI4>
    
    // Prices of chargeables seats for a given passenger
    seatPrice: Array<seatPriceType>
    
}

export interface customerCentricDataTypeAttributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI6 {
    
    $attributes: DummySegmentTypeI6Attributes
    
}

export interface DummySegmentTypeI6Attributes {
    
}

// To specify a traveler(s) and personal details relating to the traveler(s).
export interface TravellerInformationTypeI4 {
    
    $attributes: TravellerInformationTypeI4Attributes
    
    // Pax Details
    paxDetails: TravellerSurnameInformationTypeI5
    
    // Traveller Details
    otherPaxDetails: Array<TravellerDetailsTypeI5>
    
}

export interface TravellerInformationTypeI4Attributes {
    
}

// Identification of the surname of a traveller, the type of traveller, number of travellers per surname and the action to be taken.
export interface TravellerSurnameInformationTypeI5 {
    
    $attributes: TravellerSurnameInformationTypeI5Attributes
    
    // Traveller surname
    surname: string
    
    // Number of units qualifier
    type: Array<string>
    
    // Quantity
    quantity: Array<number>
    
    // Status, coded
    status: Array<string>
    
}

export interface TravellerSurnameInformationTypeI5Attributes {
    
}

// To identify the given/first name and the title of a traveller and the traveller type.
export interface TravellerDetailsTypeI5 {
    
    $attributes: TravellerDetailsTypeI5Attributes
    
    // Traveller given name
    givenName: Array<string>
    
    // Number of units qualifier
    type: Array<string>
    
    // Traveller reference number
    uniqueCustomerIdentifier: Array<string>
    
    // Traveler accompanied by infant
    infantIndicator: Array<string>
    
    // Identification code, 2 cases: ID&lt;1 to 51 char free text) or CR&lt;1 to 40 char free text)
    title: Array<string>
    
}

export interface TravellerDetailsTypeI5Attributes {
    
}


export interface seatPriceType {
    
    $attributes: seatPriceTypeAttributes
    
    // Seat Price
    seatPrice: MonetaryInformationTypeI7
    
    // tax Details
    taxDetails: Array<TaxTypeI1>
    
    // Reference to a pricing description in the pricing catalog
    priceRef: Array<ReferenceInfoType8>
    
    // Additional information specified at pricing level about seat policies and enriched content ROR: Reissue/refundable indicator COM: Commision indicator
    additionalInfo: Array<CodedAttributeType7>
    
    // enriched content
    enrichedContent: Array<CommunicationContactType1>
    
    // Position of the seats by rows, with optional seat occupation at passenger level
    rowDetails: Array<RowDetailsTypeI>
    
}

export interface seatPriceTypeAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI7 {
    
    $attributes: MonetaryInformationTypeI7Attributes
    
    // Monetary Details
    monetaryDetails: Array<MonetaryInformationDetailsTypeI7>
    
}

export interface MonetaryInformationTypeI7Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI7 {
    
    $attributes: MonetaryInformationDetailsTypeI7Attributes
    
    // Amount Type
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI7Attributes {
    
}

// To specify details relating to tax(es).
export interface TaxTypeI1 {
    
    $attributes: TaxTypeI1Attributes
    
    // Tax Category
    taxCategory: Array<string>
    
    // Tax Details
    taxDetails: Array<TaxDetailsTypeI3>
    
}

export interface TaxTypeI1Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsTypeI3 {
    
    $attributes: TaxDetailsTypeI3Attributes
    
    // Tax Rate
    rate: Array<number>
    
    // Country Code
    countryCode: Array<string>
    
    // Currency
    currencyCode: Array<string>
    
    // Tax Type
    type: Array<string>
    
    // Tax Rate
    filedAmount: Array<number>
    
    // Currency
    filedCurrency: Array<string>
    
    // Tax Type
    filedType: Array<string>
    
    // Monetary Amount
    conversionRate: Array<number>
    
    // Monetary Function
    taxQualifier: Array<string>
    
}

export interface TaxDetailsTypeI3Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType8 {
    
    $attributes: ReferenceInfoType8Attributes
    
    // Reference details
    referenceDetails: ReferencingDetailsType9
    
}

export interface ReferenceInfoType8Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType9 {
    
    $attributes: ReferencingDetailsType9Attributes
    
    // type of data
    type: string
    
    // pricing description reference
    value: string
    
}

export interface ReferencingDetailsType9Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType7 {
    
    $attributes: CodedAttributeType7Attributes
    
    // Attribute details
    attributeDetails: Array<CodedAttributeInformationType8>
    
}

export interface CodedAttributeType7Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType8 {
    
    $attributes: CodedAttributeInformationType8Attributes
    
    // Attribute type
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType8Attributes {
    
}

// Describes communication channel
export interface CommunicationContactType1 {
    
    $attributes: CommunicationContactType1Attributes
    
    // Communication channel
    communication: CommunicationContactDetailsType1
    
}

export interface CommunicationContactType1Attributes {
    
}

// Communication identifier such as URL address.
export interface CommunicationContactDetailsType1 {
    
    $attributes: CommunicationContactDetailsType1Attributes
    
    // url
    urlAddress: string
    
    // Type of URL
    urlType: string
    
}

export interface CommunicationContactDetailsType1Attributes {
    
}

// To specify the individual seat information for seats in a particular row.
export interface RowDetailsTypeI {
    
    $attributes: RowDetailsTypeIAttributes
    
    // Seat row number
    seatRowNumber: number
    
    // Seat occupation details
    seatOccupationDetails: Array<SeatOccupationDetailsTypeI>
    
}

export interface RowDetailsTypeIAttributes {
    
}

// To identify the status of a specific seat.
export interface SeatOccupationDetailsTypeI {
    
    $attributes: SeatOccupationDetailsTypeIAttributes
    
    // Column identifier of the seat.
    seatColumn: string
    
    // To indicate seat availability
    seatOccupation: Array<string>
    
}

export interface SeatOccupationDetailsTypeIAttributes {
    
}


export interface catalogDataType {
    
    $attributes: catalogDataTypeAttributes
    
    // pricing description catalogue reference
    catalogueRef: ReferenceInfoType8
    
    // Catalogue description, to be used with reference at price level
    catalogueDescription: Array<FreeTextInformationType7>
    
}

export interface catalogDataTypeAttributes {
    
}


export interface Ticket_CreateTSMFromPricingType {
    
    $attributes: Ticket_CreateTSMFromPricingTypeAttributes
    
    // PNR record locator information for this transaction. This PNR record locator is used for tracing purpose, no internal retrieve.
    pnrLocatorData: Array<ReservationControlInformationTypeI12>
    
    // List of recommendations to take into account for TSM creation.
    psaList: Array<psaListType>
    
}

export interface Ticket_CreateTSMFromPricingTypeAttributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI12 {
    
    $attributes: ReservationControlInformationTypeI12Attributes
    
    // Reservation control information
    reservationInformation: ReservationControlInformationDetailsTypeI13
    
}

export interface ReservationControlInformationTypeI12Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI13 {
    
    $attributes: ReservationControlInformationDetailsTypeI13Attributes
    
    // Record locator.
    controlNumber: string
    
}

export interface ReservationControlInformationDetailsTypeI13Attributes {
    
}


export interface psaListType {
    
    $attributes: psaListTypeAttributes
    
    // Reference of the recommendation selected.
    itemReference: ItemReferencesAndVersionsType7
    
    // Reference information on passengers.
    paxReference: Array<ReferenceInformationTypeI5>
    
}

export interface psaListTypeAttributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType7 {
    
    $attributes: ItemReferencesAndVersionsType7Attributes
    
    // qualifies the type of the reference used. Code set to define
    referenceType: Array<string>
    
    // Reference of the recommendation
    uniqueReference: Array<number>
    
}

export interface ItemReferencesAndVersionsType7Attributes {
    
}

// To provide specific reference identification.
export interface ReferenceInformationTypeI5 {
    
    $attributes: ReferenceInformationTypeI5Attributes
    
    // Passenger/segment/TST/fare reference details
    refDetails: Array<ReferencingDetailsTypeI6>
    
}

export interface ReferenceInformationTypeI5Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI6 {
    
    $attributes: ReferencingDetailsTypeI6Attributes
    
    // Qualifyer of the reference (Pax/Seg/Tst/Fare tattoo)
    refQualifier: Array<string>
    
    // Passenger/segment/TSM/fare tattoo reference number
    refNumber: Array<number>
    
}

export interface ReferencingDetailsTypeI6Attributes {
    
}


export interface Ticket_CreateTSMFromPricingReplyType {
    
    $attributes: Ticket_CreateTSMFromPricingReplyTypeAttributes
    
    // Application error information
    applicationError: Array<applicationErrorType>
    
    // PNR record locator information for this transaction. This PNR record locator is used for tracing purpose.
    pnrLocatorData: Array<ReservationControlInformationTypeI13>
    
    // List of TST tattoos created. As we can have 10 TST per Pax, 99 passenger per PNR, and a TST split with the Infant , the max number of TST is 1980.
    tstList: Array<tstListType>
    
}

export interface Ticket_CreateTSMFromPricingReplyTypeAttributes {
    
}


export interface applicationErrorType {
    
    $attributes: applicationErrorTypeAttributes
    
    // General error information returned by ticketing application
    applicationErrorInfo: ApplicationErrorInformationType6
    
    // Description in free flow text of the error returned by ticketing application
    errorText: Array<InteractiveFreeTextTypeI4>
    
}

export interface applicationErrorTypeAttributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType6 {
    
    $attributes: ApplicationErrorInformationType6Attributes
    
    // Application error details.
    applicationErrorDetail: ApplicationErrorDetailType4
    
}

export interface ApplicationErrorInformationType6Attributes {
    
}


export interface ApplicationErrorDetailType4 {
    
    $attributes: ApplicationErrorDetailType4Attributes
    
    // Code identifying the data validation error condition.
    applicationErrorCode: string
    
    // Identification of a code list.
    codeListQualifier: Array<string>
    
    // Code identifying the agency responsible for a code list.
    codeListResponsibleAgency: Array<string>
    
}

export interface ApplicationErrorDetailType4Attributes {
    
}

// To provide error free text information.
export interface InteractiveFreeTextTypeI4 {
    
    $attributes: InteractiveFreeTextTypeI4Attributes
    
    // Free flow text describing the error
    errorFreeText: Array<string>
    
}

export interface InteractiveFreeTextTypeI4Attributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI13 {
    
    $attributes: ReservationControlInformationTypeI13Attributes
    
    // Reservation control information
    reservationInformation: ReservationControlInformationDetailsTypeI14
    
}

export interface ReservationControlInformationTypeI13Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI14 {
    
    $attributes: ReservationControlInformationDetailsTypeI14Attributes
    
    // Record locator.
    controlNumber: string
    
}

export interface ReservationControlInformationDetailsTypeI14Attributes {
    
}


export interface tstListType {
    
    $attributes: tstListTypeAttributes
    
    // TSM tattoo number created by the transaction.
    tsmReference: ItemReferencesAndVersionsType8
    
    // Reference information on passengers.
    paxInformation: Array<ReferenceInformationTypeI6>
    
}

export interface tstListTypeAttributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType8 {
    
    $attributes: ItemReferencesAndVersionsType8Attributes
    
    // qualifies the type of the reference used. Code set to define
    referenceType: Array<string>
    
    // Tattoo number (It is in fact the Tsm Display Number)
    uniqueReference: Array<number>
    
    // Gives the TSM ID number
    iDDescription: Array<UniqueIdDescriptionType3>
    
}

export interface ItemReferencesAndVersionsType8Attributes {
    
}


export interface UniqueIdDescriptionType3 {
    
    $attributes: UniqueIdDescriptionType3Attributes
    
    // The TSM Id Number : The Id number allows to determine a TSM in the single manner.
    iDSequenceNumber: number
    
}

export interface UniqueIdDescriptionType3Attributes {
    
}

// To provide specific reference identification.
export interface ReferenceInformationTypeI6 {
    
    $attributes: ReferenceInformationTypeI6Attributes
    
    // Passenger/segment/TSM reference details
    refDetails: Array<ReferencingDetailsTypeI7>
    
}

export interface ReferenceInformationTypeI6Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI7 {
    
    $attributes: ReferencingDetailsTypeI7Attributes
    
    // Qualifyer of the reference (Pax/Seg/Tst)
    refQualifier: Array<string>
    
    // Passenger/segment/TSM reference number
    refNumber: Array<number>
    
}

export interface ReferencingDetailsTypeI7Attributes {
    
}


export interface Ticket_CreateTSTFromPricingType {
    
    $attributes: Ticket_CreateTSTFromPricingTypeAttributes
    
    // PNR record locator information for this transaction. This PNR record locator is used for tracing purpose, no internal retrieve.
    pnrLocatorData: Array<ReservationControlInformationTypeI14>
    
    // List of fares to take into account for TST creation. A fare has been calculated for several . As we can have 10 TST per Pax, 99 passenger per PNR, and a TST split with the Infant , the max number of TST is 1980.
    psaList: Array<psaListType1>
    
}

export interface Ticket_CreateTSTFromPricingTypeAttributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI14 {
    
    $attributes: ReservationControlInformationTypeI14Attributes
    
    // Reservation control information
    reservationInformation: ReservationControlInformationDetailsTypeI15
    
}

export interface ReservationControlInformationTypeI14Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI15 {
    
    $attributes: ReservationControlInformationDetailsTypeI15Attributes
    
    // Record locator.
    controlNumber: string
    
}

export interface ReservationControlInformationDetailsTypeI15Attributes {
    
}


export interface psaListType1 {
    
    $attributes: psaListType1Attributes
    
    // Reference of the fare selected. A fare may have been calculated by Fare Quote for several passengers but there is still the possibility to create a TST only for a part of these passengers.
    itemReference: ItemReferencesAndVersionsType9
    
    // Reference information on passengers.
    paxReference: Array<ReferenceInformationTypeI7>
    
}

export interface psaListType1Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType9 {
    
    $attributes: ItemReferencesAndVersionsType9Attributes
    
    // qualifies the type of the reference used. Code set to define
    referenceType: Array<string>
    
    // Tattoo number : It is in fact the TST display number.
    uniqueReference: Array<number>
    
}

export interface ItemReferencesAndVersionsType9Attributes {
    
}

// To provide specific reference identification.
export interface ReferenceInformationTypeI7 {
    
    $attributes: ReferenceInformationTypeI7Attributes
    
    // Passenger/segment/TST/fare reference details
    refDetails: Array<ReferencingDetailsTypeI8>
    
}

export interface ReferenceInformationTypeI7Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI8 {
    
    $attributes: ReferencingDetailsTypeI8Attributes
    
    // Qualifyer of the reference (Pax/Seg/Tst/Fare tattoo)
    refQualifier: Array<string>
    
    // Passenger/segment/TST/fare tattoo reference number
    refNumber: Array<number>
    
}

export interface ReferencingDetailsTypeI8Attributes {
    
}


export interface Ticket_CreateTSTFromPricingReplyType {
    
    $attributes: Ticket_CreateTSTFromPricingReplyTypeAttributes
    
    // Application error information
    applicationError: Array<applicationErrorType1>
    
    // PNR record locator information for this transaction. This PNR record locator is used for tracing purpose.
    pnrLocatorData: Array<ReservationControlInformationTypeI15>
    
    // List of TST tattoos created. As we can have 10 TST per Pax, 99 passenger per PNR, and a TST split with the Infant , the max number of TST is 1980.
    tstList: Array<tstListType1>
    
}

export interface Ticket_CreateTSTFromPricingReplyTypeAttributes {
    
}


export interface applicationErrorType1 {
    
    $attributes: applicationErrorType1Attributes
    
    // General error information returned by ticketing application
    applicationErrorInfo: ApplicationErrorInformationType7
    
    // Description in free flow text of the error returned by ticketing application
    errorText: Array<InteractiveFreeTextTypeI5>
    
}

export interface applicationErrorType1Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType7 {
    
    $attributes: ApplicationErrorInformationType7Attributes
    
    // Application error details.
    applicationErrorDetail: ApplicationErrorDetailType5
    
}

export interface ApplicationErrorInformationType7Attributes {
    
}


export interface ApplicationErrorDetailType5 {
    
    $attributes: ApplicationErrorDetailType5Attributes
    
    // Code identifying the data validation error condition.
    applicationErrorCode: string
    
    // Identification of a code list.
    codeListQualifier: Array<string>
    
    // Code identifying the agency responsible for a code list.
    codeListResponsibleAgency: Array<string>
    
}

export interface ApplicationErrorDetailType5Attributes {
    
}

// To provide error free text information.
export interface InteractiveFreeTextTypeI5 {
    
    $attributes: InteractiveFreeTextTypeI5Attributes
    
    // Free flow text describing the error
    errorFreeText: Array<string>
    
}

export interface InteractiveFreeTextTypeI5Attributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI15 {
    
    $attributes: ReservationControlInformationTypeI15Attributes
    
    // Reservation control information
    reservationInformation: ReservationControlInformationDetailsTypeI16
    
}

export interface ReservationControlInformationTypeI15Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI16 {
    
    $attributes: ReservationControlInformationDetailsTypeI16Attributes
    
    // Record locator.
    controlNumber: string
    
}

export interface ReservationControlInformationDetailsTypeI16Attributes {
    
}


export interface tstListType1 {
    
    $attributes: tstListType1Attributes
    
    // TST tattoo number created by the transaction.
    tstReference: ItemReferencesAndVersionsType10
    
    // Reference information on passengers.
    paxInformation: Array<ReferenceInformationTypeI8>
    
}

export interface tstListType1Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType10 {
    
    $attributes: ItemReferencesAndVersionsType10Attributes
    
    // qualifies the type of the reference used. Code set to define
    referenceType: Array<string>
    
    // Tattoo number (It is in fact the Tst Display Number)
    uniqueReference: Array<number>
    
    // Gives the TST ID number
    iDDescription: Array<UniqueIdDescriptionType4>
    
}

export interface ItemReferencesAndVersionsType10Attributes {
    
}


export interface UniqueIdDescriptionType4 {
    
    $attributes: UniqueIdDescriptionType4Attributes
    
    // The TST Id Number : The Id number allows to determine a TST in the single manner.
    iDSequenceNumber: number
    
}

export interface UniqueIdDescriptionType4Attributes {
    
}

// To provide specific reference identification.
export interface ReferenceInformationTypeI8 {
    
    $attributes: ReferenceInformationTypeI8Attributes
    
    // Passenger/segment/TST reference details
    refDetails: Array<ReferencingDetailsTypeI9>
    
}

export interface ReferenceInformationTypeI8Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI9 {
    
    $attributes: ReferencingDetailsTypeI9Attributes
    
    // Qualifyer of the reference (Pax/Seg/Tst)
    refQualifier: Array<string>
    
    // Passenger/segment/TST reference number
    refNumber: Array<number>
    
}

export interface ReferencingDetailsTypeI9Attributes {
    
}


export interface FOP_CreateFormOfPaymentType {
    
    $attributes: FOP_CreateFormOfPaymentTypeAttributes
    
    
    transactionContext: Array<TransactionInformationForTicketingType_174416S>
    
    // This segment is used to convey best effort processing status. If this segment is not specified, we consider that best effort is not available.
    bestEffort: Array<StatusType_84967S>
    
    // Reservation Control information.
    reservationControlInformation: Array<ReservationControlInformationType_182595S>
    
    // The group can contain up to 127 different FOPs
    fopGroup: Array<fopGroupType>
    
}

export interface FOP_CreateFormOfPaymentTypeAttributes {
    
}

// to specify details relating to the transaction
export interface TransactionInformationForTicketingType_174416S {
    
    $attributes: TransactionInformationForTicketingType_174416SAttributes
    
    // Reporting transaction details
    transactionDetails: TransactionInformationsType_245700C
    
}

export interface TransactionInformationForTicketingType_174416SAttributes {
    
}

// To convey details related to the transaction
export interface TransactionInformationsType_245700C {
    
    $attributes: TransactionInformationsType_245700CAttributes
    
    // Transaction Code, coded : CANR MCOA MCOM MDnn PTAM ARVM TKTA TKTB TKTM TKTT TORM XSBA XSBM ACMR RENA RENM RFND ACMA SSAC TAAD ADMA RCSM SSAD BPAS CANN PSCN VSCN CANX RSCN XXXX XOXO TID
    code: Array<string>
    
    // Issue indicator : &#39;F&#39; --) First Issue &#39;R&#39; --) Reissue &#39;I&#39; --) First issue of It &#39;Y&#39; --) Reissue of IT &#39;B&#39; --) First issue of BT &#39;W&#39; --) Reissue of BT &#39;OB&#39; --) OB Fee calculation
    issueIndicator: Array<string>
    
}

export interface TransactionInformationsType_245700CAttributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType_84967S {
    
    $attributes: StatusType_84967SAttributes
    
    // STATUS DETAILS
    statusInformation: Array<StatusDetailsTypeI_129334C>
    
    
    DummyNET: string
    
}

export interface StatusType_84967SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI_129334C {
    
    $attributes: StatusDetailsTypeI_129334CAttributes
    
    // best effort indicator
    indicator: Array<string>
    
    // value
    action: Array<string>
    
}

export interface StatusDetailsTypeI_129334CAttributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationType_182595S {
    
    $attributes: ReservationControlInformationType_182595SAttributes
    
    
    reservation: Array<ReservationControlInformationDetailsType_220877C>
    
}

export interface ReservationControlInformationType_182595SAttributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsType_220877C {
    
    $attributes: ReservationControlInformationDetailsType_220877CAttributes
    
    
    companyId: Array<string>
    
    
    controlNumber: Array<string>
    
    
    controlType: Array<string>
    
    
    date: Array<string>
    
    
    time: Array<number>
    
    
    bfeType: Array<string>
    
}

export interface ReservationControlInformationDetailsType_220877CAttributes {
    
}


export interface fopGroupType {
    
    $attributes: fopGroupTypeAttributes
    
    // Contains the FP/SFP tattoo
    fopReference: ElementManagementSegmentType4
    
    // will list all the passengers associated to the FOP element
    passengerAssociation: Array<ReferenceInformationType4>
    
    // will list the various links of the FOP element. it can be MCO, Segment... (pax reference is conveyed within PXR)
    pnrElementAssociation: Array<ReferenceInfoType_190195S>
    
    
    pricingTicketingDetails: Array<PricingTicketingDetailsTypeI1>
    
    // OB Fees Type and options: EX = Exempt all automated OB Fees
    feeTypeInfo: Array<SelectionDetailsType5>
    
    
    feeDetailsInfoGroup: Array<feeDetailsInfoGroupType>
    
    // To specify options at FP level
    fpProcessingOptions: Array<StatusType_190200S>
    
    // This group conveys Mean of payment information
    mopDescription: Array<mopDescriptionType>
    
}

export interface fopGroupTypeAttributes {
    
}

// To specify the PNR segments/elements references and action to apply
export interface ElementManagementSegmentType4 {
    
    $attributes: ElementManagementSegmentType4Attributes
    
    
    reference: Array<ReferencingDetailsType_261040C>
    
}

export interface ElementManagementSegmentType4Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_261040C {
    
    $attributes: ReferencingDetailsType_261040CAttributes
    
    // Form of payment or Sales form of payment way of identification
    qualifier: string
    
    // Number attributed by the Server to reference the PNR segment/element Limited to the time the PNR is worked (First retrieve - End of Transaction)
    number: string
    
}

export interface ReferencingDetailsType_261040CAttributes {
    
}

// Used to convey the passenger references.
export interface ReferenceInformationType4 {
    
    $attributes: ReferenceInformationType4Attributes
    
    // Used to convey the passenger tatoo or display number.
    passengerReference: ReferencingDetailsType_260700C
    
}

export interface ReferenceInformationType4Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_260700C {
    
    $attributes: ReferencingDetailsType_260700CAttributes
    
    // type of the passenger : INF infant PAX adult
    type: Array<string>
    
    // Conveys the value of PAX association
    value: string
    
}

export interface ReferencingDetailsType_260700CAttributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType_190195S {
    
    $attributes: ReferenceInfoType_190195SAttributes
    
    
    referenceDetails: Array<ReferencingDetailsType_266069C>
    
}

export interface ReferenceInfoType_190195SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_266069C {
    
    $attributes: ReferencingDetailsType_266069CAttributes
    
    
    type: string
    
    
    value: string
    
}

export interface ReferencingDetailsType_266069CAttributes {
    
}

// To convey pricing and date information related to a ticket.
export interface PricingTicketingDetailsTypeI1 {
    
    $attributes: PricingTicketingDetailsTypeI1Attributes
    
    // Pricing option: Pricing date override
    productDateTimeDetails: Array<ProductDateTimeTypeI_247911C>
    
    // Pricing option = POS override
    locationDetails: Array<LocationDetailsTypeI2>
    
}

export interface PricingTicketingDetailsTypeI1Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI_247911C {
    
    $attributes: ProductDateTimeTypeI_247911CAttributes
    
    // Pricing Date Override
    departureDate: Array<string>
    
}

export interface ProductDateTimeTypeI_247911CAttributes {
    
}

// To specify a location and related country.
export interface LocationDetailsTypeI2 {
    
    $attributes: LocationDetailsTypeI2Attributes
    
    // POS Override (location)
    city: Array<string>
    
}

export interface LocationDetailsTypeI2Attributes {
    
}

// To specify access type information
export interface SelectionDetailsType5 {
    
    $attributes: SelectionDetailsType5Attributes
    
    // Company access type information
    selectionDetails: SelectionDetailsInformationTypeI7
    
}

export interface SelectionDetailsType5Attributes {
    
}

// To specify a company acess indicator
export interface SelectionDetailsInformationTypeI7 {
    
    $attributes: SelectionDetailsInformationTypeI7Attributes
    
    // OB Fees
    option: string
    
    // OB Fee option: IN = include OB Fee sub-type EX = exclude OB Fee sub-type
    optionInformation: Array<string>
    
}

export interface SelectionDetailsInformationTypeI7Attributes {
    
}


export interface feeDetailsInfoGroupType {
    
    $attributes: feeDetailsInfoGroupTypeAttributes
    
    
    feeInfo: SpecificDataInformationType4
    
    // OB Fees sub-type options: FEX = OB Fee Sub-Type excluded FIN = OB Fee Sub-Type included
    feeProcessingInfo: Array<SelectionDetailsType_197860S>
    
}

export interface feeDetailsInfoGroupTypeAttributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationType4 {
    
    $attributes: SpecificDataInformationType4Attributes
    
    
    dataTypeInformation: DataTypeInformationType4
    
}

export interface SpecificDataInformationType4Attributes {
    
}

// To identify the type of data to be sent and to qualify the data when required.
export interface DataTypeInformationType4 {
    
    $attributes: DataTypeInformationType4Attributes
    
    
    type: string
    
}

export interface DataTypeInformationType4Attributes {
    
}

// To specify the details for making a selection.
export interface SelectionDetailsType_197860S {
    
    $attributes: SelectionDetailsType_197860SAttributes
    
    // Selection details
    selectionDetails: SelectionDetailsInformationTypeU1
    
}

export interface SelectionDetailsType_197860SAttributes {
    
}

// To specify a selected option and associated information
export interface SelectionDetailsInformationTypeU1 {
    
    $attributes: SelectionDetailsInformationTypeU1Attributes
    
    // OB Fees
    option: string
    
    // OB Fee option: IN = include OB Fee sub-type EX = exclude OB Fee sub-type
    optionInformation: Array<string>
    
}

export interface SelectionDetailsInformationTypeU1Attributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType_190200S {
    
    $attributes: StatusType_190200SAttributes
    
    // used to describe one processing option.
    statusInformation: Array<StatusDetailsType_266072C>
    
}

export interface StatusType_190200SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType_266072C {
    
    $attributes: StatusDetailsType_266072CAttributes
    
    // use to refer the processing option name.
    indicator: Array<string>
    
    // if the option from data element Indicator is configurable, this data element contains the parameter.
    action: Array<string>
    
}

export interface StatusDetailsType_266072CAttributes {
    
}


export interface mopDescriptionType {
    
    $attributes: mopDescriptionTypeAttributes
    
    // Conveys the sequence number of the Form of Payment in the FP Line. It must be set to 1 if there is only 1 FOP in the FOP
    fopSequenceNumber: SequenceDetailsTypeU5
    
    // Element used to identify the FOP as a sub-element of FP line, or the MEP and PAI elements in case of a SFP.
    fopMasterElementReference: Array<ReferenceInfoType_185714S>
    
    // Used to refer to an element StakeHolder of type Payer. It is the owner of the Method of Payment described in the GMOD or GPAY group.
    stakeholderPayerReference: Array<ReferenceInformationType4>
    
    // This group conveys Mean of payment general information.
    mopDetails: Array<mopDetailsType>
    
    // will contain all the data related to the payment transaction
    paymentModule: Array<PaymentGroupType1>
    
}

export interface mopDescriptionTypeAttributes {
    
}

// To provide details relating to the sequence.
export interface SequenceDetailsTypeU5 {
    
    $attributes: SequenceDetailsTypeU5Attributes
    
    // Sequence Information
    sequenceDetails: Array<SequenceInformationTypeU5>
    
}

export interface SequenceDetailsTypeU5Attributes {
    
}

// Identification of a sequence and source for sequencing.
export interface SequenceInformationTypeU5 {
    
    $attributes: SequenceInformationTypeU5Attributes
    
    // Sequence number of the Mean Of Payment in the FOP line. There can be up to 3 New MOP (identified by sequence 1, 2 or 3) and 1 Old MOP in a FOP line. Old Fops are considered as freeflow text and are identified by 0 (zero).
    number: string
    
    // Element filled in case FOP is a sub element of another sequence
    identificationCode: Array<string>
    
}

export interface SequenceInformationTypeU5Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType_185714S {
    
    $attributes: ReferenceInfoType_185714SAttributes
    
    // Element type and tatoo number of MEP and PAI element (for SFP).
    referenceDetails: Array<ReferencingDetailsType_260461C>
    
}

export interface ReferenceInfoType_185714SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_260461C {
    
    $attributes: ReferencingDetailsType_260461CAttributes
    
    // Sequence Number of the Master FOP element, or PAI element type, or MEP element type.
    type: Array<string>
    
    // value
    value: Array<string>
    
}

export interface ReferencingDetailsType_260461CAttributes {
    
}


export interface mopDetailsType {
    
    $attributes: mopDetailsTypeAttributes
    
    // will convey all the data related to the various codes used by the FOP package, billing, ETS...
    fopPNRDetails: TicketingFormOfPaymentType_87832S
    
    // This segment conveys Old Form of Payment. Old FOP(s) are considered as one freeflow text even if there is more than one old form of payment. e.g.: FP O/CA+CCVI+/CH CA and CCVI are considered as freeflow text.
    oldFopFreeflow: Array<FreeTextInformationType_154688S>
    
    // will convey the switches and data associated to the FOP table
    pnrSupplementaryData: Array<PNRSupplementaryDataType1>
    
}

export interface mopDetailsTypeAttributes {
    
}

// To convey details describing the form of payment and not found in the FOP segment
export interface TicketingFormOfPaymentType_87832S {
    
    $attributes: TicketingFormOfPaymentType_87832SAttributes
    
    // Form of payment details
    fopDetails: Array<FormOfPaymentInformationType1>
    
}

export interface TicketingFormOfPaymentType_87832SAttributes {
    
}

// To convey informations related to the form of payment specific to reporting
export interface FormOfPaymentInformationType1 {
    
    $attributes: FormOfPaymentInformationType1Attributes
    
    // Format key that identify the FOP within a FOP table. (CCVI, ...)
    fopCode: Array<string>
    
    // Name of the FOP map table used in order to validate the FP element.
    fopMapTable: Array<string>
    
    // This corresponds to the fop billing code (CASH CA / Credit CC). This is only used in case of a MS reporting code. (it corresponds to XX of @FPMSXX tag of TPF tables)
    fopBillingCode: Array<string>
    
    // Fop is a Old / new fop.
    fopStatus: Array<string>
    
    // Corresponds to the EDIFACT code. This enables to identify the type of FOP that will be added in case of a structured EDIFACT (i.e. via PNRADD) addition of the FOP. (it corresponds to the @EDI tag of TPF tables) Here is an example: Customer is eager to add a structured cash FOP using an EDIFACT message. The fopEdiCode will be filled with CA which means cash. Then in the FOP table in charge of validating free flow and generating FOP free flow, the system will try to look for the FOP map having CA as fop EDI code. If we are in an Air France (AF) ATO/CTO: the system will get FP CA.... If we are in an Iberia (IB) ATO/CTO: the system will get FP CASH,.... If we are in an United Airline (UA) ATO/CTO: the system will get FP S.... ... (@EDI value)
    fopEdiCode: Array<string>
    
    // This corresponds to the fop code which is used on reporting side. (XX value of @FPXXxx)
    fopReportingCode: Array<string>
    
    // This is the FOP printed code (@PR value)
    fopPrintedCode: Array<string>
    
    // This is the FOP electronic ticketing code. This is used to classify any FOP from the FOP table and also to determine how the FOP should be transmitted to the airline concerned. Based on this, the absence of the switch would make the FOP disallowed for ETKT, for National System Ticketing Server Travel Agency locations and all Central Ticketing offices (@ET value)
    fopElecTicketingCode: Array<string>
    
}

export interface FormOfPaymentInformationType1Attributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_154688S {
    
    $attributes: FreeTextInformationType_154688SAttributes
    
    // error text description
    freeTextDetails: FreeTextDetailsType8
    
    // Free text and message sequence numbers of the remarks.
    freeText: string
    
}

export interface FreeTextInformationType_154688SAttributes {
    
}


export interface FreeTextDetailsType8 {
    
    $attributes: FreeTextDetailsType8Attributes
    
    // mutually defined ZZZ
    textSubjectQualifier: string
    
    // Manual : M
    source: string
    
    // ZZZ mutually agreed
    encoding: string
    
}

export interface FreeTextDetailsType8Attributes {
    
}

// will convey the FOP table data
export interface PNRSupplementaryDataType1 {
    
    $attributes: PNRSupplementaryDataType1Attributes
    
    // will convey the values of the FOP data and switch maps
    dataAndSwitchMap: AttributeType_154671S
    
}

export interface PNRSupplementaryDataType1Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_154671S {
    
    $attributes: AttributeType_154671SAttributes
    
    // Type of information: - is this a switch? - is this a structured data?
    criteriaSetType: string
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU5>
    
}

export interface AttributeType_154671SAttributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU5 {
    
    $attributes: AttributeInformationTypeU5Attributes
    
    // This is the data type. may contain: - the name of the switch (eg nonRefundableFop, foCheck ...) - the name of the data (eg bacchusDealNumber, ...)
    attributeType: string
    
    // This is the data value. This may contain: - a potential attribute of the switch - the value of the structured data of the FOP
    attributeDescription: Array<string>
    
}

export interface AttributeInformationTypeU5Attributes {
    
}

// is the generic group to convey payment related data
export interface PaymentGroupType1 {
    
    $attributes: PaymentGroupType1Attributes
    
    // Used to specify processing options at FOP level
    groupUsage: CodedAttributeType_190204S
    
    // will convey all data necessary for the paiment and not dependant from the Mean Of Payment
    paymentData: Array<PaymentDataGroupType1>
    
    // will convey the overall status of the payment
    paymentStatus: Array<PaymentStatusGroupType>
    
    // it will convey the Descriptive Billing Information: ONO, GWT, best Fare indicator....
    paymentSupplementaryData: Array<CodedAttributeType8>
    
    // will convey all the specificities of the Mean of Payment
    mopInformation: Array<MeanOfPaymentDataType1>
    
    // will allow the usage of FOP segment as trigger for MOPD and MOPS groups
    dummy: DummySegmentTypeI7
    
    // will convey the result of the payment and related to the detailed Mean Of Payment
    mopDetailedData: Array<DetailedPaymentDataType1>
    
}

export interface PaymentGroupType1Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_190204S {
    
    $attributes: CodedAttributeType_190204SAttributes
    
    // used to describe one processing option at FOP level
    attributeDetails: Array<CodedAttributeInformationType_266039C>
    
}

export interface CodedAttributeType_190204SAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_266039C {
    
    $attributes: CodedAttributeInformationType_266039CAttributes
    
    // use to refer the processing option name.
    attributeType: string
    
    // if the option from data element Indicator is configurable, this data element contains the parameter.
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType_266039CAttributes {
    
}

// it will conveys all payment data
export interface PaymentDataGroupType1 {
    
    $attributes: PaymentDataGroupType1Attributes
    
    // Contains merchant information (Entity selling a product/service for wich payment is requested: airline, insurance provider...).
    merchantInformation: CompanyInformationType_154718S
    
    // will convey all the monetary informations related to the payment : amount, currency, sub-amounts
    monetaryInformation: Array<MonetaryInformationType_190206S>
    
    // Used to convey currency conversion rates
    currenciesRatesGroup: Array<currenciesRatesGroupType>
    
    
    sliderConversion: Array<SliderConversionType>
    
    // Conveys Payment Record ID (used by Payment Manager) to identify payment in a unique manner. May convey also a &#34;correlator Id&#34; used by the calling application to reconciliate its payment data. And also the &#34;transaction Id&#34; generated by the third party system (bank/PSP/PAyPAL...)
    paymentId: Array<ItemReferencesAndVersionsType11>
    
    // It will describe the content of the extended payment : when it will start, the frequency and how many times it should occur
    extendedPaymentInfo: Array<FrequencyTypeU1>
    
    // The segment conveys the date/time of the transaction
    transactionDateTime: Array<StructuredDateTimeInformationType_154723S>
    
    // Will show the duration of validity of the payment request, mesured from receipt by the issuer. The customer has to agree to the payment within this period. Expressed in seconds.
    expirationPeriod: Array<QuantityType1>
    
    // Distribution Channel information
    distributionChannelInformation: Array<TerminalIdentificationDescriptionType1>
    
    // will convey in free text the description of the purchase
    purchaseDescription: Array<FreeTextInformationType_154703S>
    
    // Element used to convey explicit Payment association within a Pricing Context.
    association: Array<ReferenceInfoType9>
    
    // will convey all information needed to perform the checks requested by the banks/PSPs regarding the prevention of fraud.
    fraudScreeningData: Array<FraudScreeningGroupType1>
    
    // Will be used to convey information dedicated to the Payment.
    paymentDataMap: Array<AttributeType_154671S>
    
}

export interface PaymentDataGroupType1Attributes {
    
}

// This segment is used to convey the merchant information
export interface CompanyInformationType_154718S {
    
    $attributes: CompanyInformationType_154718SAttributes
    
    // This data element is used to convey the company code of a company Ex: AF for Air France MIL for millenium foundation
    companyCode: string
    
    // This data element is used to convey the numeric merchant ID.
    companyNumericCode: Array<string>
    
}

export interface CompanyInformationType_154718SAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_190206S {
    
    $attributes: MonetaryInformationType_190206SAttributes
    
    // Contains the currencies and the various amounts
    monetaryDetails: MonetaryInformationDetailsType_266075C
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType_266075C>
    
}

export interface MonetaryInformationType_190206SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_266075C {
    
    $attributes: MonetaryInformationDetailsType_266075CAttributes
    
    // Here is the list and the purpose of each amount today stored in the FP: I Transaction total amount Total amount authorized in authorization transaction IPC Transaction total amount in PNR currency Total amount authorized is also stored in PNR currency. Indeed, reversal must be done with the rate of exchange valid at time of authorization and therefore this avoids storing the rate of exchange and performing amount conversion at reversal time. IT Initial TST total amount Amount of TST multiplied by the number of passengers associated to the TST ITC Initial TST total amount in PNR currency IT amount in PNR currency for same reason as IPC amount R Total amount / Remaining amount Current authorized amount. Originally it is the total amount authorized and then this amount may decrease in case of total/partial reversal. T Initial Tst Individual amount Amount of TST TPC Initial Tst Individual amount in PNR currency Amount of TST in PNR currency for same reason as IPC amount AUT Authorized Amount Maybe different from the one given in input(for exple, if on input we have 2pax and the amount per pax. In case of bulk, we will authorize the sum of both amounts) It can also be used for: Total Fare Amount 712 or additional collection amount A
    typeQualifier: string
    
    // Value of the amount. This is conveyed as a &#39;string&#39; and therefore several strings can stand for the same amount (eg. 14 , 1400, 14.00... could potentially stand for 14.00 EUR). This means that sender/receiver of this message will need to come to an agreement concerning the way the amount is transferred in this segment.
    amount: number
    
    // IATA alphabetic currency code. Eg: USD,GBP,EUR...
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsType_266075CAttributes {
    
}


export interface currenciesRatesGroupType {
    
    $attributes: currenciesRatesGroupTypeAttributes
    
    
    currenciesExchangeRate: CurrenciesType
    
    // used to defined if the currency rate is informative, proposed, applied etc...
    rateType: CodedAttributeType_190204S
    
}

export interface currenciesRatesGroupTypeAttributes {
    
}

// To specify currencies used in the transaction and relevant details for the rate of exchange.
export interface CurrenciesType {
    
    $attributes: CurrenciesTypeAttributes
    
    
    firstCurrencyDetails: Array<CurrencyDetailsTypeU>
    
    
    secondCurrencyDetails: Array<CurrencyDetailsTypeU>
    
    
    exchangeRate: Array<number>
    
}

export interface CurrenciesTypeAttributes {
    
}

// The usage to which a currency relates
export interface CurrencyDetailsTypeU {
    
    $attributes: CurrencyDetailsTypeUAttributes
    
    
    currencyQualifier: string
    
    
    currencyIsoCode: Array<string>
    
    
    currencyType: Array<string>
    
    
    currencyRate: Array<number>
    
}

export interface CurrencyDetailsTypeUAttributes {
    
}

// Information relative to slider conversion
export interface SliderConversionType {
    
    $attributes: SliderConversionTypeAttributes
    
    // Miles and cash slider mode. One of the following: CVT Converter Mode SLD Slider Mode With possible option : CBF Convert Base Fare First
    sliderMode: StatusDetailsType_275596C
    
    // Used to convey - Slider rank - number of positions possible on the slider
    sliderPosition: Array<NumberOfUnitDetailsType4>
    
}

export interface SliderConversionTypeAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType_275596C {
    
    $attributes: StatusDetailsType_275596CAttributes
    
    // Mode to use to perform conversion : - SLD slider mode - CVT converter mode
    indicator: string
    
    // Option to use to perform conversion : - CBF Convert Base Fare First
    type: Array<string>
    
}

export interface StatusDetailsType_275596CAttributes {
    
}

// Identification of number of units and its purpose.
export interface NumberOfUnitDetailsType4 {
    
    $attributes: NumberOfUnitDetailsType4Attributes
    
    
    numberOfUnit: Array<number>
    
    
    unitQualifier: Array<string>
    
}

export interface NumberOfUnitDetailsType4Attributes {
    
}

// Payment record unique identifier
export interface ItemReferencesAndVersionsType11 {
    
    $attributes: ItemReferencesAndVersionsType11Attributes
    
    // qualifies the type of the reference used. Here it could be: PRI Payment Record Id APP Application Correlator Id EXT Third party Record Id ...
    referenceType: string
    
    // The value of the payment record/correlator Id
    uniqueReference: string
    
}

export interface ItemReferencesAndVersionsType11Attributes {
    
}

// To specify a frequency and the time window in which it applies.
export interface FrequencyTypeU1 {
    
    $attributes: FrequencyTypeU1Attributes
    
    // extended payment characteristics
    extendedPaymentDetails: FrequencyDetailsTypeU1
    
}

export interface FrequencyTypeU1Attributes {
    
}

// To specify a frequency and the time window in which it applies
export interface FrequencyDetailsTypeU1 {
    
    $attributes: FrequencyDetailsTypeU1Attributes
    
    // Indicates number of instalments for the payment
    instalmentsNumber: number
    
    // Indicates frequency of instalments for the payment D daily M monthly W weekly
    instalmentsFrequency: Array<string>
    
    // Indicates when first instalment should take place
    instalmentsStartDate: Array<string>
    
    // indicates extended payment start date format
    instalmentsDatrDateFormat: Array<string>
    
}

export interface FrequencyDetailsTypeU1Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_154723S {
    
    $attributes: StructuredDateTimeInformationType_154723SAttributes
    
    // This data element is used to provide the semantic of the date information provided. Examples : - GMT Transaction date - Local Transaction date ... Default being L local date and time
    businessSemantic: Array<string>
    
    // Convey date and/or time.
    dateTime: StructuredDateTimeType_220917C
    
}

export interface StructuredDateTimeInformationType_154723SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_220917C {
    
    $attributes: StructuredDateTimeType_220917CAttributes
    
    // Year number.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: number
    
    // Day number in the month ( begins to 1 )
    day: number
    
    // Hour between 0 and 23
    hour: Array<number>
    
    // Minutes between 0 and 59
    minutes: Array<number>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<number>
    
}

export interface StructuredDateTimeType_220917CAttributes {
    
}

// To specify a pertinent quantity.
export interface QuantityType1 {
    
    $attributes: QuantityType1Attributes
    
    // To specify an appropriate quantity.
    quantityDetails: Array<QuantityDetailsTypeI3>
    
}

export interface QuantityType1Attributes {
    
}

// Quantity information in a transaction, qualified when relevant.
export interface QuantityDetailsTypeI3 {
    
    $attributes: QuantityDetailsTypeI3Attributes
    
    // it will be L for Life time period
    qualifier: string
    
    // duration expressed in Seconds during the consumer has to do the payment
    value: number
    
    // SEC for duration in seconds
    unit: string
    
}

export interface QuantityDetailsTypeI3Attributes {
    
}

// To specify information related to agent terminal
export interface TerminalIdentificationDescriptionType1 {
    
    $attributes: TerminalIdentificationDescriptionType1Attributes
    
    // Identification of the transaction initiator.
    terminalID: Array<string>
    
    // The distribution channel.
    distributionChannel: DistributionChannelType1
    
}

export interface TerminalIdentificationDescriptionType1Attributes {
    
}

// Distribution channel
export interface DistributionChannelType1 {
    
    $attributes: DistributionChannelType1Attributes
    
    // This field is used to indicate the type of channel used for authorization process: e-commerce (web / Internet), MOTO (Mail Order / telephone Order), Face to face ...) Example: 05 for API 0=MOTO (Mail Order / Telephone Order) 1=e-Commerce (Internet)
    distributionChannelField: number
    
    // Subgroup field.
    subGroup: Array<number>
    
    // Access Type.
    accessType: Array<number>
    
}

export interface DistributionChannelType1Attributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_154703S {
    
    $attributes: FreeTextInformationType_154703SAttributes
    
    // will describe which kind of color we are using
    freeTextDetails: FreeTextDetailsType8
    
    // Free text describing the color
    freeText: Array<string>
    
}

export interface FreeTextInformationType_154703SAttributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType9 {
    
    $attributes: ReferenceInfoType9Attributes
    
    // Reference details
    referenceDetails: Array<ReferencingDetailsType10>
    
    
    DummyNET: string
    
}

export interface ReferenceInfoType9Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType10 {
    
    $attributes: ReferencingDetailsType10Attributes
    
    // identifier
    type: Array<string>
    
    // fare component identifier
    value: Array<string>
    
}

export interface ReferencingDetailsType10Attributes {
    
}

// will convey all data needed to prevent the fraud on the payment
export interface FraudScreeningGroupType1 {
    
    $attributes: FraudScreeningGroupType1Attributes
    
    // This data element is used to indicate if risk management must be performed at authorization time: - Y means risk management data will be appended to author; - N means risk management data will not be appended;
    fraudScreening: StatusType_68675S
    
    // this segment contains the IP address used in RMM (risk management module or fraud screening)
    ipAdress: Array<DeviceControlDetailsType1>
    
    // Merchant&#39;s website URL.
    merchantURL: Array<CommunicationContactType_154690S>
    
    // will convey either the phone or the email adress of the payer
    payerPhoneOrEmail: Array<PhoneAndEmailAddressType_154728S>
    
    // this segment contains the shopper session used in RMM (risk management module)
    shopperSession: Array<SystemDetailsInfoType3>
    
    // conveys information about payer LastName (surName) and FirstName (givenName)
    payerName: Array<TravellerInformationType_154732S>
    
    // stores the payer date of birth
    payerDateOfBirth: Array<StructuredDateTimeInformationType_154730S>
    
    // Information about the billing address (can be extracted from the AB PNR element)
    billingAddress: Array<AddressType6>
    
    // Used to store reference information on the payer for fraud screening purpose: social security number driving license information frequent flyer information
    formOfIdDetails: Array<ReferenceInfoType_154729S>
    
    // Defines if the shopper is also a traveller or not.
    travelShopper: Array<StatusType6>
    
    // Details on the shopper: its customer ID reference, and if he successed to log on his account or not
    shopperDetails: Array<shopperDetailsType>
    
    // Provide the security details: type and key for the fraud screening In case, a fraud partner uses different keys for its fraud screening, the group can be repeated 9 times.
    securityCode: Array<securityCodeType>
    
}

export interface FraudScreeningGroupType1Attributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType_68675S {
    
    $attributes: StatusType_68675SAttributes
    
    // will we perform the fraud screening ?
    statusInformation: StatusDetailsTypeI_107129C
    
}

export interface StatusType_68675SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI_107129C {
    
    $attributes: StatusDetailsTypeI_107129CAttributes
    
    // FRA for fraud screening
    indicator: string
    
    // This data element is used to indicate if risk management must be performed at authorization time: - Y means risk management data will be appended to author; - N means risk management data will not be appended;
    action: string
    
}

export interface StatusDetailsTypeI_107129CAttributes {
    
}

// To specify control details for a device.
export interface DeviceControlDetailsType1 {
    
    $attributes: DeviceControlDetailsType1Attributes
    
    // Stores the identification of the device.
    deviceIdentification: Array<IdentificationNumberTypeI1>
    
}

export interface DeviceControlDetailsType1Attributes {
    
}

// Goods item identification number.
export interface IdentificationNumberTypeI1 {
    
    $attributes: IdentificationNumberTypeI1Attributes
    
    // will contain the IP adress of the shopper
    address: string
    
    // will contain IP for IP adress
    qualifier: string
    
}

export interface IdentificationNumberTypeI1Attributes {
    
}

// Describes communication channel
export interface CommunicationContactType_154690S {
    
    $attributes: CommunicationContactType_154690SAttributes
    
    // Communication channel
    communication: CommunicationContactDetailsTypeU1
    
}

export interface CommunicationContactType_154690SAttributes {
    
}

// Communication number of a department or employee in a specified channel.
export interface CommunicationContactDetailsTypeU1 {
    
    $attributes: CommunicationContactDetailsTypeU1Attributes
    
    // The communication address: an Url.
    internetAddress: string
    
    // will be AH for World Wide Web
    adressQualifier: string
    
}

export interface CommunicationContactDetailsTypeU1Attributes {
    
}

// To specify a phone or email address
export interface PhoneAndEmailAddressType_154728S {
    
    $attributes: PhoneAndEmailAddressType_154728SAttributes
    
    // Phone or Email contact type
    phoneOrEmailType: string
    
    // Structured telephone number
    telephoneNumberDetails: Array<StructuredTelephoneNumberType_220921C>
    
    // Email address
    emailAddress: Array<string>
    
}

export interface PhoneAndEmailAddressType_154728SAttributes {
    
}


export interface StructuredTelephoneNumberType_220921C {
    
    $attributes: StructuredTelephoneNumberType_220921CAttributes
    
    // Telephone number
    telephoneNumber: Array<string>
    
}

export interface StructuredTelephoneNumberType_220921CAttributes {
    
}

// Used to specify a system
export interface SystemDetailsInfoType3 {
    
    $attributes: SystemDetailsInfoType3Attributes
    
    // LNIATA of the agent.
    workstationId: Array<string>
    
    // System delivering the shopper session ID
    deliveringSystem: Array<SystemDetailsTypeI3>
    
}

export interface SystemDetailsInfoType3Attributes {
    
}

// To identify by code or name and location the system that originates or delivers the message for a third party.
export interface SystemDetailsTypeI3 {
    
    $attributes: SystemDetailsTypeI3Attributes
    
    // will convey the name of the company ex: OPODO
    companyId: Array<string>
    
}

export interface SystemDetailsTypeI3Attributes {
    
}

// To specify a traveler and personal details relating to the traveler
export interface TravellerInformationType_154732S {
    
    $attributes: TravellerInformationType_154732SAttributes
    
    // will convey the name of the pax
    ccHolderNameDetails: TravellerSurnameInformationType_220914C
    
    // will convey the CC holder first name
    otherNameDetails: Array<TravellerDetailsTypeI6>
    
}

export interface TravellerInformationType_154732SAttributes {
    
}


export interface TravellerSurnameInformationType_220914C {
    
    $attributes: TravellerSurnameInformationType_220914CAttributes
    
    // Passenger name
    surname: string
    
}

export interface TravellerSurnameInformationType_220914CAttributes {
    
}

// To identify the given/first name and the title of a traveller and the traveller type.
export interface TravellerDetailsTypeI6 {
    
    $attributes: TravellerDetailsTypeI6Attributes
    
    // passenger first name
    givenName: Array<string>
    
}

export interface TravellerDetailsTypeI6Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_154730S {
    
    $attributes: StructuredDateTimeInformationType_154730SAttributes
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType_220922C>
    
}

export interface StructuredDateTimeInformationType_154730SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_220922C {
    
    $attributes: StructuredDateTimeType_220922CAttributes
    
    // Year number.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: Array<number>
    
    // Day number in the month ( begins to 1 )
    day: Array<number>
    
}

export interface StructuredDateTimeType_220922CAttributes {
    
}

// To specify an address
export interface AddressType6 {
    
    $attributes: AddressType6Attributes
    
    // will convey the adress text
    addressDetails: Array<AddressDetailsTypeU3>
    
    // City name.
    city: Array<string>
    
    // postal identification code.
    zipCode: Array<string>
    
    // Country code. ISO 3166 code for the country
    countryCode: Array<string>
    
}

export interface AddressType6Attributes {
    
}

// To specify the details of an address.
export interface AddressDetailsTypeU3 {
    
    $attributes: AddressDetailsTypeU3Attributes
    
    // Address Format . Will be 5 unstructured
    format: string
    
    // Address Text. Any of the following address lines may start with a tag: Door number- Street- ExternalNumber- InternalNumber- County- Neighbourhood- State-
    line1: string
    
    
    line2: Array<string>
    
    
    line3: Array<string>
    
    
    line4: Array<string>
    
    
    line5: Array<string>
    
    
    line6: Array<string>
    
}

export interface AddressDetailsTypeU3Attributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_154729S {
    
    $attributes: ReferenceInfoType_154729SAttributes
    
    // REFERENCING DETAILS
    referenceDetails: Array<ReferencingDetailsTypeI_107111C>
    
}

export interface ReferenceInfoType_154729SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_107111C {
    
    $attributes: ReferencingDetailsTypeI_107111CAttributes
    
    // ACQ for merchant&#39;s bank
    type: Array<string>
    
    // will contain the Id of the merchant&#39;s bank within the PSP First exmple: iDEAL
    value: Array<string>
    
}

export interface ReferencingDetailsTypeI_107111CAttributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType6 {
    
    $attributes: StatusType6Attributes
    
    // STATUS DETAILS
    statusInformation: Array<StatusDetailsType5>
    
}

export interface StatusType6Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType5 {
    
    $attributes: StatusDetailsType5Attributes
    
    // Shopper has logged ot not logged on his account: YES / NO
    action: Array<string>
    
    // long free text
    description: Array<string>
    
}

export interface StatusDetailsType5Attributes {
    
}


export interface shopperDetailsType {
    
    $attributes: shopperDetailsTypeAttributes
    
    // Account number of the shopper on the airline (in some cases, it could be the same as the frequent flyer number)
    shopperID: UserIdentificationType7
    
    // Defines if the shopper has been able to log on the airline&#39;s account or not
    shopperLogged: Array<StatusType6>
    
}

export interface shopperDetailsTypeAttributes {
    
}

// This segment is used to identify a user.
export interface UserIdentificationType7 {
    
    $attributes: UserIdentificationType7Attributes
    
    // End-user
    originatorTypeCode: Array<string>
    
    // Customer ID
    originator: Array<string>
    
}

export interface UserIdentificationType7Attributes {
    
}


export interface securityCodeType {
    
    $attributes: securityCodeTypeAttributes
    
    // Type of security used by the airline for the fraud screening. e.g.: Device Finger Print (DFP)
    securityType: SecurityScreeningType
    
    // Security key provided for the fraud screening to Retail Decision, for example.
    securityKey: BinaryDataType_154733S
    
}

export interface securityCodeTypeAttributes {
    
}

// To identify Screening and Security details
export interface SecurityScreeningType {
    
    $attributes: SecurityScreeningTypeAttributes
    
    // Security used for the fraud screening; e.g.: Device Finger Print
    screeningInstructions: Array<string>
    
}

export interface SecurityScreeningTypeAttributes {
    
}

// to carry binary data within an Edifact segment
export interface BinaryDataType_154733S {
    
    $attributes: BinaryDataType_154733SAttributes
    
    // Length of data stored in DataElem 114Z
    dataLength: number
    
    // type of the data B: Binary
    dataType: Array<string>
    
    // used to store binary data
    binaryData: string
    
}

export interface BinaryDataType_154733SAttributes {
    
}

// will convey the status of the payment
export interface PaymentStatusGroupType {
    
    $attributes: PaymentStatusGroupTypeAttributes
    
    // Will convey the status of the payment. If status is an Not OK then a GERR group will be present to describe more precisely the error. This field gives the type of status which can be in: - pre-validate - validate - update - etc... Several status can be stored at the same time. E.g. a PAY element in a PNR will store the pre-validate status and the validate status.
    paymentStatusInformation: ResponseAnalysisDetailsType_180157S
    
    // Will convey the history of the statuses of the payment. This field gives the type of status which can be in: - pre-validate - validate - update - etc... Several status can be stored at the same time. E.g. a PAY element in a PNR will store the pre-validate status and the validate status.
    paymentStatusHistory: Array<ResponseAnalysisDetailsType_180157S>
    
    // will convey the reason of the error that occured during the payment transaction
    paymentStatusError: Array<ErrorGroupType_87970G>
    
    // will convey the value of the fraud screening checks done by the PSP/bank
    fraudScreeningResult: Array<MeasurementsType>
    
}

export interface PaymentStatusGroupTypeAttributes {
    
}

// To specify the type of query and the processing status associated with this response.
export interface ResponseAnalysisDetailsType_180157S {
    
    $attributes: ResponseAnalysisDetailsType_180157SAttributes
    
    // Characteristic of the Payment Status. Exple : C Payment Created G Payment Got K Payment Captured D Payment Deleted U Payment Updated V Payment Validated R Payment Refund S Payment Reversed W Payment with Web redirection
    responseType: string
    
    // will be OK or NOK. In the case of NOK, the GERR will epxlain precisely the nature of the failure
    statusCode: string
    
}

export interface ResponseAnalysisDetailsType_180157SAttributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType_87970G {
    
    $attributes: ErrorGroupType_87970GAttributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType_154697S
    
    // The description of warning or error.
    errorWarningDescription: Array<FreeTextInformationType_154703S>
    
}

export interface ErrorGroupType_87970GAttributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType_154697S {
    
    $attributes: ApplicationErrorInformationType_154697SAttributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType6
    
}

export interface ApplicationErrorInformationType_154697SAttributes {
    
}


export interface ApplicationErrorDetailType6 {
    
    $attributes: ApplicationErrorDetailType6Attributes
    
    // Code identifying the data validation error condition. It will be a canned message number in our case
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType6Attributes {
    
}

// To specify Physical Measurements.
export interface MeasurementsType {
    
    $attributes: MeasurementsTypeAttributes
    
    // defines the type of the given measure will be FRA in our case
    measurementQualifier: Array<string>
    
    // Details on Fraud screening result
    measurementDetails: Array<MeasurementDetailsTypeI>
    
    // will convey the result of the fraud screening process on the PSP/bank side : will look like 300 Points
    valueRange: Array<ValueRangeTypeI1>
    
    
    surfaceLayerIndicator: Array<string>
    
}

export interface MeasurementsTypeAttributes {
    
}

// Identification of measurement type.
export interface MeasurementDetailsTypeI {
    
    $attributes: MeasurementDetailsTypeIAttributes
    
    // Fraud screening result description. This data is set in accordance with the fraud score set by the airline. OK : Fraud screening result approved KO : Fraud screening result declined WRN : Fraud screening result Warning
    significance: Array<string>
    
}

export interface MeasurementDetailsTypeIAttributes {
    
}

// Measurement value and relevant minimum and maximum tolerances in that order.
export interface ValueRangeTypeI1 {
    
    $attributes: ValueRangeTypeI1Attributes
    
    // will be P for points in our case.
    unit: string
    
    // This data element contains the value of the risk management score
    value: Array<number>
    
}

export interface ValueRangeTypeI1Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType8 {
    
    $attributes: CodedAttributeType8Attributes
    
    // Usage of this element will be the transport of the DescriptiveBilingInformation first value will be QF
    attributeFunction: string
    
    // provides details for the Attribute
    attributeDetails: Array<CodedAttributeInformationType9>
    
}

export interface CodedAttributeType8Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType9 {
    
    $attributes: CodedAttributeInformationType9Attributes
    
    // will convey the following QF data: ONOD onoData Order Number(Qantas specific) GWTD gwtData Government Warrant number(Qantas specific) HOLDN ccHolderName Conveys the CN (company name) (Qantas specific).This has sense only in case of automatic creation of attribute record (cards is a bets card). In the other cases this information cannot be filled. ONOR onoRequired This ONO indicator indicates whether or not ONO data is mandatory.(Information provided by Qantas IGW link) This has sense only in case of automatic creation of attribute record (cards is a bets card) GWTR gwtRequired This GWT indicator indicates whether or not GWT data is mandatory.(Information provided by Qantas IGW link) This has sense only in case of automatic creation of attribute record (cards is a bets card) CIND cind Conveys CIND indicator : - MANU - AUTO This indicates whether attributes records have been created manually (no bets card) or automatically (bets card). BFAREC bestFareCandidate Conveys best fare indicator: - Yes - No This indicates whether or not the card is best fare candidate. (this implies card is a bets card)
    attributeType: string
    
    // onoData Order Number(Qantas specific) gwtData Government Warrant number ccHolderName Conveys the CN onoRequired YES - NO gwtRequired YES - NO cind MANU - AUTO bestFareCandidate YES - NO
    attributeDescription: string
    
}

export interface CodedAttributeInformationType9Attributes {
    
}

// will convey Mean Of Payment specific data
export interface MeanOfPaymentDataType1 {
    
    $attributes: MeanOfPaymentDataType1Attributes
    
    // his segment will convey the type of the FOP. Exple : CC credit card CA cash CH cheque SWI swipe card WA web account WB web bank(fund tranfer)
    fopInformation: FormOfPaymentType_190169S
    
    // will convey all data needed for the payment on the Web using fund transfers. First customer is iDEAL
    fundTransferData: Array<WebFundTransferGroupType>
    
    // Group containing one Asynchronous FOP to validate.
    asyncDataGroup: Array<AsynchPaymentGroupType>
    
    // will allow the usage of FOP segment as trigger for GASY and GINV groups
    dummy: DummySegmentTypeI7
    
    // Group containing one Invoice FOP to validate.
    invoiceDataGroup: Array<InvoiceFopGroupType>
    
    // will convey all credit card data needed for the payment
    creditCardData: Array<CreditCardDataGroupType3>
    
    // will convey all data needed for a payment done on the web using an account
    webAccountData: Array<WebAccountGroupType>
    
}

export interface MeanOfPaymentDataType1Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentType_190169S {
    
    $attributes: FormOfPaymentType_190169SAttributes
    
    // Details on the form of payment
    formOfPayment: FormOfPaymentDetailsType_266040C
    
}

export interface FormOfPaymentType_190169SAttributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsType_266040C {
    
    $attributes: FormOfPaymentDetailsType_266040CAttributes
    
    
    type: string
    
}

export interface FormOfPaymentDetailsType_266040CAttributes {
    
}

// will convey all MOP specific data for Web Fund Transfer
export interface WebFundTransferGroupType {
    
    $attributes: WebFundTransferGroupTypeAttributes
    
    // will convey the bankId of the customer
    issuerId: ReferenceInfoType_154679S
    
    // will convey the name of the payment provider
    paymentProvider: CompanyInformationType3
    
}

export interface WebFundTransferGroupTypeAttributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_154679S {
    
    $attributes: ReferenceInfoType_154679SAttributes
    
    // REFERENCING DETAILS
    referenceDetails: ReferencingDetailsTypeI10
    
}

export interface ReferenceInfoType_154679SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI10 {
    
    $attributes: ReferencingDetailsTypeI10Attributes
    
    // nature of the bank id. Here: CUS for customer bank
    type: string
    
    // Id of the issuing bank.
    value: string
    
}

export interface ReferencingDetailsTypeI10Attributes {
    
}

// This segment is used to convey the company information
export interface CompanyInformationType3 {
    
    $attributes: CompanyInformationType3Attributes
    
    // This data element is used to convey the company name of a company IDEAL PAYPAL ...
    companyName: string
    
}

export interface CompanyInformationType3Attributes {
    
}


export interface AsynchPaymentGroupType {
    
    $attributes: AsynchPaymentGroupTypeAttributes
    
    // Stores account number and expiry date
    asunchronousPaymentDetails: FormOfPaymentTypeI_69625S
    
}

export interface AsynchPaymentGroupTypeAttributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentTypeI_69625S {
    
    $attributes: FormOfPaymentTypeI_69625SAttributes
    
    // Stores account number and expiry date
    formOfPayment: FormOfPaymentDetailsTypeI_66014C
    
}

export interface FormOfPaymentTypeI_69625SAttributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsTypeI_66014C {
    
    $attributes: FormOfPaymentDetailsTypeI_66014CAttributes
    
    // asynchronous
    type: string
    
    // Indicates the service provider processing the asynchronous FOP
    providerCode: Array<string>
    
    // Stores the asynchronous payment expiry date
    expiryDate: Array<string>
    
    // Stores the payer account number
    customerAccount: Array<string>
    
}

export interface FormOfPaymentDetailsTypeI_66014CAttributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI7 {
    
    $attributes: DummySegmentTypeI7Attributes
    
}

export interface DummySegmentTypeI7Attributes {
    
}

// Represents Invoice fop to validate.
export interface InvoiceFopGroupType {
    
    $attributes: InvoiceFopGroupTypeAttributes
    
    // Account, Transaction and Financial data.
    invoiceInformation: FormOfPaymentTypeI5
    
    // internal information, contains the provider and product type to be routed to. IE : LH / Prisa LH / Staff OS / Prisa
    routing: RoutingInformationTypeI2
    
    // Stores award code and I/U qualifier
    iruQualifier: Array<StatusType_68646S>
    
    // This group is used to convey the FOP(s) type used with IRU FOP
    fopInformationGroup: Array<fopInformationGroupType>
    
    // Used to add data related to FOP Account
    accountSupplementaryData: Array<AttributeType7>
    
    // PNR reference information
    bookingReference: Array<ReservationControlInformationType4>
    
    // In case of Ticketing follow up transactions (Refund/exchange/...) : information on ticket being processed.
    parentTicketGroup: Array<parentTicketGroupType>
    
    // Element used to convey specific rules to be applied on the method of payment.
    ruleList: Array<ruleListType>
    
}

export interface InvoiceFopGroupTypeAttributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentTypeI5 {
    
    $attributes: FormOfPaymentTypeI5Attributes
    
    // Contains the Account data, the transaction data and financial data
    formOfPayment: FormOfPaymentDetailsTypeI_198021C
    
    // Contains the Account data, the transaction data and financial data
    otherFormOfPayment: Array<FormOfPaymentDetailsTypeI_198021C>
    
}

export interface FormOfPaymentTypeI5Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsTypeI_198021C {
    
    $attributes: FormOfPaymentDetailsTypeI_198021CAttributes
    
    // FOP code taken from the FP elem in PNR (ie for PRISA : INV, INVAGT, INVIDA, INVBARTER, INVNAGT, INVGSA)
    type: string
    
    // Issue indicator : &#39;C&#39; -) collective invoice
    indicator: Array<string>
    
    // Airline code in case of IRU FOP
    merchantCode: Array<string>
    
    
    expiryDate: Array<string>
    
    // Contains the account number.
    customerAccount: string
    
    // Account type identifier : 1 -) customer 2 -) airline office ECL -) E-CreditLine IRU -) Frequent Flyer account
    membershipStatus: string
    
    // Transaction identifier
    transactionInfo: Array<string>
    
    // stores a pin code attached to the account (IRU MOP)
    pinCode: Array<string>
    
    // Details pin code type (in case of encrypted pin code)
    pinCodeType: Array<string>
    
}

export interface FormOfPaymentDetailsTypeI_198021CAttributes {
    
}

// To provide routing information.
export interface RoutingInformationTypeI2 {
    
    $attributes: RoutingInformationTypeI2Attributes
    
    // Routing details
    routingDetails: ProductLocationDetailsTypeI2
    
}

export interface RoutingInformationTypeI2Attributes {
    
}

// To indicate a location and the type of location.
export interface ProductLocationDetailsTypeI2 {
    
    $attributes: ProductLocationDetailsTypeI2Attributes
    
    // product EBANK
    otherStation: string
    
}

export interface ProductLocationDetailsTypeI2Attributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType_68646S {
    
    $attributes: StatusType_68646SAttributes
    
    // STATUS DETAILS
    statusInformation: Array<StatusDetailsTypeI4>
    
    
    DummyNET: string
    
}

export interface StatusType_68646SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI4 {
    
    $attributes: StatusDetailsTypeI4Attributes
    
    // Will define to content of the validation done with the payment provider on the web : PPP Paypal Payment express checkout or UATP express checkout. In the case of UATP we can also want to perform the authorisation of the credit card payment automatically EXP Express Checkout Or TPC UATP express checkout AUT Credit Card authorisation
    indicator: string
    
    // Will be N No or Y Yes
    action: string
    
    // description
    description: string
    
}

export interface StatusDetailsTypeI4Attributes {
    
}


export interface fopInformationGroupType {
    
    $attributes: fopInformationGroupTypeAttributes
    
    // This segment is used to convey information on other FOP used with IRU one.
    fopInformation: TicketingFormOfPaymentType_87806S
    
    // Amount paid by other FOP
    fopInformationAmount: MonetaryInformationType_87804S
    
}

export interface fopInformationGroupTypeAttributes {
    
}

// To convey details describing the form of payment and not found in the FOP segment
export interface TicketingFormOfPaymentType_87806S {
    
    $attributes: TicketingFormOfPaymentType_87806SAttributes
    
    // Form of payment details
    fopDetails: Array<FormOfPaymentInformationType1>
    
}

export interface TicketingFormOfPaymentType_87806SAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_87804S {
    
    $attributes: MonetaryInformationType_87804SAttributes
    
    // monertary details
    monetaryDetails: MonetaryInformationDetailsTypeI8
    
}

export interface MonetaryInformationType_87804SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI8 {
    
    $attributes: MonetaryInformationDetailsTypeI8Attributes
    
    // amount qualifier of associated FOP: I : transaction total amount
    typeQualifier: string
    
    // amount
    amount: Array<string>
    
    // currency
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI8Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType7 {
    
    $attributes: AttributeType7Attributes
    
    // Type of Data related to FOP account, ex: ACC = account info
    criteriaSetType: Array<string>
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU5>
    
}

export interface AttributeType7Attributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationType4 {
    
    $attributes: ReservationControlInformationType4Attributes
    
    // PNR reference information
    reservation: ReservationControlInformationDetailsType2
    
}

export interface ReservationControlInformationType4Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsType2 {
    
    $attributes: ReservationControlInformationDetailsType2Attributes
    
    // Company Id
    companyId: Array<string>
    
    // PNR value
    controlNumber: Array<string>
    
    // Type
    controlType: Array<string>
    
    // original booking type.
    bfeType: Array<string>
    
}

export interface ReservationControlInformationDetailsType2Attributes {
    
}


export interface parentTicketGroupType {
    
    $attributes: parentTicketGroupTypeAttributes
    
    // Can convey the edoc number or the primary ticket number
    documentNumber: TicketNumberType2
    
    // will convey all the monetary informations related to the payment : amount, currency, sub-amounts
    monetaryInformation: Array<MonetaryInformationType6>
    
    // Details of taxes: - old/new/refundable (O/X/R) taxes indicator - currency - tax amount - iso tax code - nature tax code We can have 198 taxes maximum: - 99 old and new - + 99 refundable
    taxInformation: Array<TaxType6>
    
    // This group is used to convey conjuntive tickets information.
    conjunctiveTicketGroup: Array<conjunctiveTicketGroupType>
    
    // Office id and the sign of the originator
    originatorInfo: Array<OriginatorOfRequestDetailsTypeI>
    
    // contains information on the PNR record locator involved in the payment
    eDocrecordLocator: Array<ReservationControlInformationType_167717S>
    
    // Passenger Name and Surname
    recipientNameSurname: Array<TravellerInformationType3>
    
    // Frequent Flyer Number
    frequentFlyerNumber: Array<FrequentTravellerVerificationType1>
    
    // Ticket expiry and issuance date
    dates: Array<StructuredDateTimeInformationType3>
    
    // additional comments or print information
    additionalInformation: Array<FreeTextInformationType8>
    
    // Element used to convey fare component associations
    fareComponentDetails: Array<fareComponentDetailsType>
    
    // Conveys data about the coupons contained in the unused ticket
    unusedTicketCoupons: Array<unusedTicketCouponsType>
    
    // In case of Ticketing follow up transactions (Refund/exchange/...) : informative Form Of Payment used on ticket being processed.
    fopParentTicketGroup: Array<fopParentTicketGroupType>
    
}

export interface parentTicketGroupTypeAttributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberType2 {
    
    $attributes: TicketNumberType2Attributes
    
    
    documentDetails: TicketNumberDetailsType1
    
    // provides ticket status
    status: Array<string>
    
}

export interface TicketNumberType2Attributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsType1 {
    
    $attributes: TicketNumberDetailsType1Attributes
    
    // provides ticket number
    number: Array<number>
    
    
    type: Array<string>
    
    
    numberOfBooklets: Array<number>
    
    
    dataIndicator: Array<string>
    
    
    requestNotification: Array<string>
    
    
    inConnectionWith: Array<number>
    
}

export interface TicketNumberDetailsType1Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType6 {
    
    $attributes: MonetaryInformationType6Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsType4
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType4>
    
}

export interface MonetaryInformationType6Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType4 {
    
    $attributes: MonetaryInformationDetailsType4Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType4Attributes {
    
}

// To specify details relating to tax(es).
export interface TaxType6 {
    
    $attributes: TaxType6Attributes
    
    // Tax category to distinct old from new taxes
    taxCategory: Array<string>
    
    // Details of tax
    taxDetails: Array<TaxDetailsType3>
    
}

export interface TaxType6Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsType3 {
    
    $attributes: TaxDetailsType3Attributes
    
    // Tax amount
    rate: Array<string>
    
    // ISO tax code
    countryCode: Array<string>
    
    // Currency code
    currencyCode: Array<string>
    
    // Nature tax code
    type: Array<string>
    
}

export interface TaxDetailsType3Attributes {
    
}


export interface conjunctiveTicketGroupType {
    
    $attributes: conjunctiveTicketGroupTypeAttributes
    
    // Element used to activate conjunctive ticket data.
    conjunctiveFlag: StatusType_141910S
    
    // Conjunctive ticket number.
    conjunctiveDocumentNumber: TicketNumberType2
    
    // Conveys data about the coupon.
    couponStatus: Array<CouponInformationTypeI1>
    
}

export interface conjunctiveTicketGroupTypeAttributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType_141910S {
    
    $attributes: StatusType_141910SAttributes
    
    // STATUS DETAILS
    statusInformation: Array<StatusDetailsType_205625C>
    
}

export interface StatusType_141910SAttributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType_205625C {
    
    $attributes: StatusDetailsType_205625CAttributes
    
    // list of status/qualifiers Either His for Historical or Crt for Current
    indicator: Array<string>
    
    
    action: Array<string>
    
    
    type: Array<string>
    
    
    description: Array<string>
    
}

export interface StatusDetailsType_205625CAttributes {
    
}

// To identify data specific to a value (flight) coupon.
export interface CouponInformationTypeI1 {
    
    $attributes: CouponInformationTypeI1Attributes
    
    // Conveys coupon details
    couponDetails: CouponInformationDetailsTypeI1
    
    
    otherCouponDetails: Array<CouponInformationDetailsTypeI1>
    
}

export interface CouponInformationTypeI1Attributes {
    
}

// To specify the coupon number, status, value, and other related information.
export interface CouponInformationDetailsTypeI1 {
    
    $attributes: CouponInformationDetailsTypeI1Attributes
    
    // Conveys coupon number
    cpnNumber: number
    
    // Conveys coupon status
    cpnStatus: Array<string>
    
    // segment tattoo associated to this coupon
    cpnSequenceNumber: number
    
}

export interface CouponInformationDetailsTypeI1Attributes {
    
}

// To specify the point of sale details.
export interface OriginatorOfRequestDetailsTypeI {
    
    $attributes: OriginatorOfRequestDetailsTypeIAttributes
    
    // Used to specify the originator System
    deliveringSystem: SystemDetailsTypeI_2502C
    
    // Originator Identification Details
    originIdentification: OriginatorIdentificationDetailsTypeI9
    
    // Details of the location
    locationDetails: Array<LocationTypeI9>
    
    // System Details - Used when cascading
    cascadingSystem: Array<SystemDetailsTypeI_2502C>
    
    // Originator Type Code. A for airline agent. T for travel Agent. E for internet.
    originatorTypeCode: Array<string>
    
    // Details on the originator
    originDetails: Array<OriginatorDetailsTypeI3>
    
    // Authority code of the requester (Area Code)+(Numeric Sine)+(Agent Initials)+(Duty Code) ex : B0001XVSU).
    originator: Array<string>
    
    // Identifier of the workstation (such as the NNLNIATA)
    communicationNumber: Array<string>
    
    // Group identification
    partyIdentification: Array<string>
    
}

export interface OriginatorOfRequestDetailsTypeIAttributes {
    
}

// To identify by code or name and location the system that originates or delivers the message for a third party.
export interface SystemDetailsTypeI_2502C {
    
    $attributes: SystemDetailsTypeI_2502CAttributes
    
    // 2-3 characters airline/CRS code, or bilaterally agreed code, of the system that originates the message when different from the originating system.
    companyId: string
    
    // 3 characters ATA/IATA airport/city code of the originating system.
    locationId: Array<string>
    
    // Location of the originating system.
    location: Array<string>
    
}

export interface SystemDetailsTypeI_2502CAttributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI9 {
    
    $attributes: OriginatorIdentificationDetailsTypeI9Attributes
    
    // ATA/IATA Id number or pseudo IATA number or ERSP.
    originatorId: Array<number>
    
    // First In-House Identifier. Office/Agency code assigned by the reservation system. Office Id in AMAdeus.
    inHouseIdentification1: Array<string>
    
    // Second In-House Identifier.
    inHouseIdentification2: Array<string>
    
    // Third in-house identifier
    inHouseIdentification3: Array<string>
    
}

export interface OriginatorIdentificationDetailsTypeI9Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI9 {
    
    $attributes: LocationTypeI9Attributes
    
    
    trueLocationId: Array<string>
    
    
    trueLocation: Array<string>
    
}

export interface LocationTypeI9Attributes {
    
}

// Characteristics of the originator of a request.
export interface OriginatorDetailsTypeI3 {
    
    $attributes: OriginatorDetailsTypeI3Attributes
    
    // ISO country code of the agent.
    codedCountry: Array<string>
    
    // ISO currency code.
    codedCurrency: Array<string>
    
    // ISO code of language.
    codedLanguage: Array<string>
    
}

export interface OriginatorDetailsTypeI3Attributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationType_167717S {
    
    $attributes: ReservationControlInformationType_167717SAttributes
    
    // Reservation number
    reservation: ReservationControlInformationDetailsType_220877C
    
}

export interface ReservationControlInformationType_167717SAttributes {
    
}

// To specify a traveler and personal details relating to the traveler
export interface TravellerInformationType3 {
    
    $attributes: TravellerInformationType3Attributes
    
    // passenger type code
    paxDetails: Array<TravellerSurnameInformationType2>
    
    // passenger type
    otherPaxDetails: Array<TravellerDetailsType6>
    
}

export interface TravellerInformationType3Attributes {
    
}


export interface TravellerSurnameInformationType2 {
    
    $attributes: TravellerSurnameInformationType2Attributes
    
    // Passenger name
    surname: Array<string>
    
    // PAX = PAX IN = Infant
    type: Array<string>
    
    
    quantity: Array<number>
    
    
    gender: Array<string>
    
}

export interface TravellerSurnameInformationType2Attributes {
    
}

// To identify the given/first name and the title of a traveller and the traveller type.
export interface TravellerDetailsType6 {
    
    $attributes: TravellerDetailsType6Attributes
    
    
    givenName: Array<string>
    
    // Passenger type (PTC)
    type: Array<string>
    
    
    uniqueCustomerIdentifier: Array<string>
    
    
    infantIndicator: Array<string>
    
    
    title: Array<string>
    
    
    age: Array<number>
    
}

export interface TravellerDetailsType6Attributes {
    
}

// To provide frequent traveller information for mileage accrual and account updating.
export interface FrequentTravellerVerificationType1 {
    
    $attributes: FrequentTravellerVerificationType1Attributes
    
    
    actionRequest: string
    
    
    tier: Array<string>
    
    
    companyDetails: Array<CompanyIdentificationTypeI11>
    
    
    accountDetails: Array<ProductAccountDetailsType1>
    
    
    otherProductsDetails: Array<ProductAccountDetailsType1>
    
    
    dateDetails: Array<ValidDateInformationTypeI>
    
    
    accountHolderDetails: Array<AccountHolderInformationTypeI>
    
}

export interface FrequentTravellerVerificationType1Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI11 {
    
    $attributes: CompanyIdentificationTypeI11Attributes
    
    
    marketingCompany: Array<string>
    
    
    operatingCompany: Array<string>
    
    
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI11Attributes {
    
}

// To specify frequent traveller card information.
export interface ProductAccountDetailsType1 {
    
    $attributes: ProductAccountDetailsType1Attributes
    
    
    referenceType: Array<string>
    
    
    frequentTravellerId: Array<string>
    
    
    category: Array<string>
    
    
    sequenceNumber: Array<string>
    
    
    versionNumber: Array<string>
    
    
    rateClass: Array<string>
    
    
    approvalCode: Array<string>
    
}

export interface ProductAccountDetailsType1Attributes {
    
}

// To specify validity information.
export interface ValidDateInformationTypeI {
    
    $attributes: ValidDateInformationTypeIAttributes
    
    
    firstDate: Array<string>
    
    
    secondDate: Array<string>
    
}

export interface ValidDateInformationTypeIAttributes {
    
}

// To specify frequent traveller cardholder information.
export interface AccountHolderInformationTypeI {
    
    $attributes: AccountHolderInformationTypeIAttributes
    
    
    surname: Array<string>
    
    
    givenName: Array<string>
    
    
    institution: Array<string>
    
}

export interface AccountHolderInformationTypeIAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType3 {
    
    $attributes: StructuredDateTimeInformationType3Attributes
    
    
    businessSemantic: Array<string>
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType6>
    
}

export interface StructuredDateTimeInformationType3Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType6 {
    
    $attributes: StructuredDateTimeType6Attributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<number>
    
}

export interface StructuredDateTimeType6Attributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType8 {
    
    $attributes: FreeTextInformationType8Attributes
    
    
    freeTextDetails: FreeTextDetailsType_220880C
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType8Attributes {
    
}


export interface FreeTextDetailsType_220880C {
    
    $attributes: FreeTextDetailsType_220880CAttributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
    
    status: Array<string>
    
    
    companyId: Array<string>
    
    
    language: Array<string>
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType_220880CAttributes {
    
}


export interface fareComponentDetailsType {
    
    $attributes: fareComponentDetailsTypeAttributes
    
    // element used to convey fare component identifier
    fareComponentId: ReferenceInfoType9
    
    // Conveys data about the coupon.
    couponStatus: Array<CouponInformationType>
    
    // Element used to convey fare component monetary information
    monetaryInformation: Array<MonetaryInformationType_192195S>
    
}

export interface fareComponentDetailsTypeAttributes {
    
}

// To identify data specific to a value (flight) coupon.
export interface CouponInformationType {
    
    $attributes: CouponInformationTypeAttributes
    
    
    couponDetails: Array<CouponInformationDetailsType>
    
    
    otherCouponDetails: Array<CouponInformationDetailsType>
    
}

export interface CouponInformationTypeAttributes {
    
}

// To specify the coupon number, status, value, and other related information.
export interface CouponInformationDetailsType {
    
    $attributes: CouponInformationDetailsTypeAttributes
    
    
    cpnNumber: Array<string>
    
    
    cpnStatus: Array<string>
    
    
    cpnAmount: Array<string>
    
    
    cpnExchangeMedia: Array<string>
    
    
    settlementAuthorization: Array<string>
    
    
    voluntaryIndic: Array<string>
    
    
    cpnPreviousStatus: Array<string>
    
    
    cpnSequenceNumber: Array<string>
    
    
    cpnReferenceNumber: Array<string>
    
    
    cpnInConnectionWithQualifier: Array<string>
    
}

export interface CouponInformationDetailsTypeAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_192195S {
    
    $attributes: MonetaryInformationType_192195SAttributes
    
    
    monetaryDetails: MonetaryInformationDetailsType4
    
}

export interface MonetaryInformationType_192195SAttributes {
    
}


export interface unusedTicketCouponsType {
    
    $attributes: unusedTicketCouponsTypeAttributes
    
    
    fareBasis: FareQualifierDetailsType3
    
    // Conveys information about the ticket flights
    flightInformation: Array<TravelProductInformationType3>
    
    // Conveys data about the coupon.
    couponStatus: Array<CouponInformationType>
    
}

export interface unusedTicketCouponsTypeAttributes {
    
}


export interface FareQualifierDetailsType3 {
    
    $attributes: FareQualifierDetailsType3Attributes
    
    
    movementType: Array<string>
    
    
    fareCategories: Array<FareCategoryCodesType1>
    
    
    fareDetails: Array<FareDetailsType4>
    
    
    additionalFareDetails: Array<AdditionalFareQualifierDetailsType>
    
    
    discountDetails: Array<DiscountPenaltyInformationType3>
    
}

export interface FareQualifierDetailsType3Attributes {
    
}

// To designate non-system specific combinations of fare types.
export interface FareCategoryCodesType1 {
    
    $attributes: FareCategoryCodesType1Attributes
    
    
    fareType: string
    
    
    otherFareType: Array<string>
    
}

export interface FareCategoryCodesType1Attributes {
    
}


export interface FareDetailsType4 {
    
    $attributes: FareDetailsType4Attributes
    
    
    qualifier: Array<string>
    
    
    rate: Array<number>
    
    
    country: Array<string>
    
    
    fareCategory: Array<string>
    
}

export interface FareDetailsType4Attributes {
    
}

// To specify the fare basis and ticket designator codes.
export interface AdditionalFareQualifierDetailsType {
    
    $attributes: AdditionalFareQualifierDetailsTypeAttributes
    
    
    rateClass: Array<string>
    
    
    commodityCategory: Array<string>
    
    
    pricingGroup: Array<string>
    
    
    secondRateClass: Array<string>
    
}

export interface AdditionalFareQualifierDetailsTypeAttributes {
    
}


export interface DiscountPenaltyInformationType3 {
    
    $attributes: DiscountPenaltyInformationType3Attributes
    
    
    fareQualifier: Array<string>
    
    
    rateCategory: Array<string>
    
    
    amount: Array<number>
    
    
    percentage: Array<number>
    
}

export interface DiscountPenaltyInformationType3Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationType3 {
    
    $attributes: TravelProductInformationType3Attributes
    
    
    flightDate: Array<ProductDateTimeTypeI9>
    
    
    boardPointDetails: Array<LocationTypeI9>
    
    
    offpointDetails: Array<LocationTypeI9>
    
    
    companyDetails: Array<CompanyIdentificationTypeI11>
    
    
    flightIdentification: Array<ProductIdentificationDetailsType3>
    
    
    flightTypeDetails: Array<ProductTypeDetailsType7>
    
    
    itemNumber: Array<number>
    
    
    specialSegment: Array<string>
    
    
    marriageDetails: Array<MarriageControlDetailsTypeI2>
    
}

export interface TravelProductInformationType3Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI9 {
    
    $attributes: ProductDateTimeTypeI9Attributes
    
    
    departureDate: Array<string>
    
    
    departureTime: Array<string>
    
    
    arrivalDate: Array<string>
    
    
    arrivalTime: Array<string>
    
    
    dateVariation: Array<number>
    
}

export interface ProductDateTimeTypeI9Attributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsType3 {
    
    $attributes: ProductIdentificationDetailsType3Attributes
    
    
    flightNumber: Array<string>
    
    
    bookingClass: Array<string>
    
    
    operationalSuffix: Array<string>
    
    
    modifier: Array<string>
    
}

export interface ProductIdentificationDetailsType3Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType7 {
    
    $attributes: ProductTypeDetailsType7Attributes
    
    // indicates whether the flight is domestic or international
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsType7Attributes {
    
}

// To identify details concerning the marriage status of travel product.
export interface MarriageControlDetailsTypeI2 {
    
    $attributes: MarriageControlDetailsTypeI2Attributes
    
    
    relation: Array<string>
    
    
    marriageIdentifier: Array<number>
    
    
    lineNumber: Array<number>
    
    
    otherRelation: Array<string>
    
    
    carrierCode: Array<string>
    
}

export interface MarriageControlDetailsTypeI2Attributes {
    
}


export interface fopParentTicketGroupType {
    
    $attributes: fopParentTicketGroupTypeAttributes
    
    // Will convey structured FOP information
    fopDetails: FormOfPaymentType1
    
    // will convey all the data related to the various codes used by the FOP package, billing, ETS...
    fopInformation: TicketingFormOfPaymentType1
    
    // will convey all the monetary informations related to the payment : amount, currency, sub-amounts
    monetaryInformation: Array<MonetaryInformationType6>
    
    // This segment conveys Old Form of Payment. Old FOP(s) are considered as one freeflow text even if there is more than one old form of payment. e.g.: FP O/CA+CCVI+/CH CA and CCVI are considered as freeflow text.
    oldFopFreeflow: Array<FreeTextInformationType8>
    
    // will convey the switches and data associated to the FOP table
    pnrSupplementaryData: Array<PNRSupplementaryDataType1>
    
}

export interface fopParentTicketGroupTypeAttributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentType1 {
    
    $attributes: FormOfPaymentType1Attributes
    
    // Details on the form of payment
    formOfPayment: Array<FormOfPaymentDetailsType1>
    
}

export interface FormOfPaymentType1Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsType1 {
    
    $attributes: FormOfPaymentDetailsType1Attributes
    
    
    type: string
    
    // indicates wether the transaction is a credit or debit.
    indicator: Array<string>
    
    // provides the code of the vendor/carrier code
    vendorCode: Array<string>
    
    
    creditCardNumber: Array<string>
    
    // expiry date of the credit card
    expiryDate: Array<string>
    
    
    approvalCode: Array<string>
    
    
    sourceOfApproval: Array<string>
    
    
    addressVerification: Array<string>
    
    
    customerAccount: Array<string>
    
    
    extendedPayment: Array<string>
    
    
    fopFreeText: Array<string>
    
    
    membershipStatus: Array<string>
    
    
    transactionInfo: Array<string>
    
    // stores a pin code attached to the account
    pinCode: Array<string>
    
    // Details pin code type (in case of encrypted pin code)
    pinCodeType: Array<string>
    
}

export interface FormOfPaymentDetailsType1Attributes {
    
}

// To convey details describing the form of payment and not found in the FOP segment
export interface TicketingFormOfPaymentType1 {
    
    $attributes: TicketingFormOfPaymentType1Attributes
    
    // Form of payment details
    fopDetails: Array<FormOfPaymentInformationType_220881C>
    
}

export interface TicketingFormOfPaymentType1Attributes {
    
}

// To convey informations related to the form of payment specific to reporting
export interface FormOfPaymentInformationType_220881C {
    
    $attributes: FormOfPaymentInformationType_220881CAttributes
    
    // FOP code.
    fopCode: Array<string>
    
    // Fop is a old / new fop.
    fopStatus: Array<string>
    
}

export interface FormOfPaymentInformationType_220881CAttributes {
    
}


export interface ruleListType {
    
    $attributes: ruleListTypeAttributes
    
    // element used to identify the rule to be applied.
    ruleType: InformationTypeDataTypeU
    
    // element used to convey date/time information
    dateDetails: Array<dateDetailsType>
    
    // element used to convey passenger name association
    passengerDetails: Array<passengerDetailsType1>
    
    // element used to convey flight information.
    flightDetails: Array<flightDetailsType5>
    
    // element used to convey specific information.
    otherDetails: Array<StatusType_141910S>
    
}

export interface ruleListTypeAttributes {
    
}

// To indicate the category of data, the language, and the format of the data.
export interface InformationTypeDataTypeU {
    
    $attributes: InformationTypeDataTypeUAttributes
    
    // Element used to convey rules data type.
    identification: Array<string>
    
}

export interface InformationTypeDataTypeUAttributes {
    
}


export interface dateDetailsType {
    
    $attributes: dateDetailsTypeAttributes
    
    // element used to convey date information.
    date: StructuredPeriodInformationType5
    
}

export interface dateDetailsTypeAttributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType5 {
    
    $attributes: StructuredPeriodInformationType5Attributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - Exception dates
    businessSemantic: Array<string>
    
    // Indicate if the time is expressed in UTC or in local time mode ( Codes U and L ). In the last case, the time zone information can be provided in the composite C89K.
    timeMode: Array<string>
    
    // Convey the begin date/time of a period.
    beginDateTime: Array<StructuredDateTimeType6>
    
    // Convey the end date/time of a period.
    endDateTime: Array<StructuredDateTimeType6>
    
    // It is used with a period to give a restriction for days impacted. It permits for example to indicate on which days, a flight operates.
    frequency: Array<FrequencyType3>
    
    // Reference : IATA SSIM Appendix F If it is not provided, the time is considered to be given in UTC.
    timeZoneInfo: Array<TimeZoneIinformationType1>
    
}

export interface StructuredPeriodInformationType5Attributes {
    
}

// Give the days of the week involved for a period
export interface FrequencyType3 {
    
    $attributes: FrequencyType3Attributes
    
    // Indicate if the sequence number represents days of the week or days of the month.
    qualifier: string
    
    // Used to represent days of the week or days of the month. For week : 1 is monday and 7 is sunday. For month : 1 is the first day of the month.
    value: Array<string>
    
}

export interface FrequencyType3Attributes {
    
}

// Specify in which time zone, the information is provided
export interface TimeZoneIinformationType1 {
    
    $attributes: TimeZoneIinformationType1Attributes
    
    // ISO country Code See SSIM appendix F
    countryCode: string
    
    // Time zone code. See SSIM appendix F.
    code: Array<number>
    
    // Time zone suffix to complete the time zone code when necessary. See SSIM appendix F.
    suffix: Array<string>
    
}

export interface TimeZoneIinformationType1Attributes {
    
}


export interface passengerDetailsType1 {
    
    $attributes: passengerDetailsType1Attributes
    
    // Passenger Name and Surname
    recipientNameSurname: TravellerInformationType3
    
}

export interface passengerDetailsType1Attributes {
    
}


export interface flightDetailsType5 {
    
    $attributes: flightDetailsType5Attributes
    
    // Conveys information about the ticket flights
    flightInformation: TravelProductInformationType3
    
}

export interface flightDetailsType5Attributes {
    
}

// will convey all credit card data needed for payment
export interface CreditCardDataGroupType3 {
    
    $attributes: CreditCardDataGroupType3Attributes
    
    // will convey all the data related to the credit card
    creditCardDetails: CreditCardDataType3
    
    // will convey both the CVV and the Credit card number Ids stored in the fortknox Database
    fortknoxIds: Array<ReferenceInfoType_190166S>
    
    // Contains card holder&#39;s address information.
    cardHolderAddress: Array<AddressType6>
    
    // This group will convey all parameters related to virtual credit card creation
    virtualCreditCardData: Array<virtualCreditCardDataType>
    
}

export interface CreditCardDataGroupType3Attributes {
    
}

// specify credit card data for credit card authorization - USED IN CCVRQT
export interface CreditCardDataType3 {
    
    $attributes: CreditCardDataType3Attributes
    
    
    ccInfo: Array<CreditCardInformationType3>
    
}

export interface CreditCardDataType3Attributes {
    
}

// credit card info
export interface CreditCardInformationType3 {
    
    $attributes: CreditCardInformationType3Attributes
    
    // Vendor code (VI,CA,AX.)
    vendorCode: Array<string>
    
    // may contain CC sub Types. eg: Maestro or Solo cards
    vendorCodeSubType: Array<string>
    
    // Card number Card number
    cardNumber: Array<string>
    
    // Conveys the security ID of the Credit Card (CVV,CVV2), 3-4 digits stored on the back of the card
    securityId: Array<string>
    
    // Expiry date : format MMYY
    expiryDate: Array<string>
    
    // This field indicates the date the Credit Card was issued. This data is present in case of (UK) maestro cards.
    startDate: Array<string>
    
    // This field indicates the date the Credit Card will not be valid anymore This data is present in case of (UK) maestro cards. May be different from the expiry date
    endDate: Array<string>
    
    // Conveys Credit card holder&#39;s name, as written on the card
    ccHolderName: Array<string>
    
    // will contain the code of the bank that issued the credit card
    issuingBankName: Array<string>
    
    // CC country of issuance details
    cardCountryOfIssuance: Array<string>
    
    // This is the Credit Card Issue number. This represents the number of time a card has been issued. 1 is for the first time then in case of card renewal or card loss this issue number will be increased Today this is applicable to maestro cards.
    issueNumber: Array<number>
    
    // Will convey the full name of the institution that issued he credit card
    issuingBankLongName: Array<string>
    
    // Stores the CC track 1 information (base64 encoded)
    track1: Array<string>
    
    // Stores the CC track 2 information (base64 encoded)
    track2: Array<string>
    
    // Stores the CC track 3 information (base64 encoded)
    track3: Array<string>
    
    // Stores the CC pin code information
    pinCode: Array<string>
    
    // All the tracks of a swipe credit card are contained here as one block.
    rawTrackData: Array<string>
    
    // The tier level (gold, platinium, etc...) can be used for fraud or authorization processes.
    tierLevel: Array<string>
    
}

export interface CreditCardInformationType3Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType_190166S {
    
    $attributes: ReferenceInfoType_190166SAttributes
    
    
    referenceDetails: ReferencingDetailsType_266037C
    
}

export interface ReferenceInfoType_190166SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_266037C {
    
    $attributes: ReferencingDetailsType_266037CAttributes
    
    // will store the type of the Id NOX or CVV
    type: string
    
    // value of the id
    value: string
    
}

export interface ReferencingDetailsType_266037CAttributes {
    
}


export interface virtualCreditCardDataType {
    
    $attributes: virtualCreditCardDataTypeAttributes
    
    
    virtualCreditCardParameters: VirtualCardParametersType
    
    // Used to specify the optional(s) validity date(s) of the Virtual Credit Card
    validityDate: Array<StructuredPeriodInformationType_175598S>
    
}

export interface virtualCreditCardDataTypeAttributes {
    
}

// Specify parameters for virtual credit card creation
export interface VirtualCardParametersType {
    
    $attributes: VirtualCardParametersTypeAttributes
    
    // This data composite is used to transmit parameters for Virtual Credit Card creation
    virtualCardInformation: Array<VirtualCardInformationType>
    
}

export interface VirtualCardParametersTypeAttributes {
    
}

// Specify parameters for virtual credit card creation
export interface VirtualCardInformationType {
    
    $attributes: VirtualCardInformationTypeAttributes
    
    // Vendor code (VI,CA,AX.) In the context of Virtual Credit Card, contains the desired vendor of the virtualized card. If CA is entered, the Virtual Credit Card provided will be a Mastercard.
    vendorCode: Array<string>
    
    // To transmit to the Virtual Credit Card provider the desired number of authorizations allowed on the Virtual Credit Card
    maximumAuthorizations: Array<number>
    
    // To specify a currency restriction in the Virtual Credit Card context.
    currency: Array<string>
    
}

export interface VirtualCardInformationTypeAttributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType_175598S {
    
    $attributes: StructuredPeriodInformationType_175598SAttributes
    
    // Convey the begin date/time of a period.
    beginDateTime: Array<StructuredDateTimeType_247346C>
    
    // Convey the end date/time of a period.
    endDateTime: Array<StructuredDateTimeType_247346C>
    
}

export interface StructuredPeriodInformationType_175598SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_247346C {
    
    $attributes: StructuredDateTimeType_247346CAttributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
    // Seconds between 0 and 59
    seconds: Array<string>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<string>
    
}

export interface StructuredDateTimeType_247346CAttributes {
    
}

// will convey all web account related MOP data
export interface WebAccountGroupType {
    
    $attributes: WebAccountGroupTypeAttributes
    
    // Customer phone (Mandatory) BuyerEmail (Conditional) Email address of the buyer as entered during checkout. Exple: Paypal uses this value to pre fill the PayPal membership sign in portion of the Paypal login page
    webAccountSign: PhoneAndEmailAddressType3
    
    // will convey the name of the payment provider
    paymentProvider: CompanyInformationType3
    
}

export interface WebAccountGroupTypeAttributes {
    
}

// To specify a phone or email address
export interface PhoneAndEmailAddressType3 {
    
    $attributes: PhoneAndEmailAddressType3Attributes
    
    // Phone contact type : 3 Business telephone number 4 Home telephone number 5 Telephone nature not known
    phoneOrEmailType: string
    
    // Structured telephone number
    telephoneNumberDetails: Array<StructuredTelephoneNumberType3>
    
    // Email of the buyer as entered during checkout. PayPal uses this value to pre-fill the Paypal membership sign-up portion of the Paypal login page.
    emailAddress: Array<string>
    
}

export interface PhoneAndEmailAddressType3Attributes {
    
}


export interface StructuredTelephoneNumberType3 {
    
    $attributes: StructuredTelephoneNumberType3Attributes
    
    // International dial code
    internationalDialCode: Array<string>
    
    // Local prefix code
    localPrefixCode: Array<string>
    
    // Area code
    areaCode: Array<string>
    
    // Telephone number
    telephoneNumber: string
    
}

export interface StructuredTelephoneNumberType3Attributes {
    
}

// will convey the Detailed Payment Data associated to a MOP
export interface DetailedPaymentDataType1 {
    
    $attributes: DetailedPaymentDataType1Attributes
    
    // This segment will convey the type of the FOP. Exple : CC credit card CA cash CH cheque WW web
    fopInformation: FormOfPaymentTypeI_68621S
    
    // This group will convey the detailed data of the payment done on the Web using fund transfer. First customer : iDEAL
    fundTransferDetailledData: Array<DetailedWebFundTransferType>
    
    // will convey the references of the payment done in the customer/airline accounts.
    asyncDetailledDataGroup: Array<AsynchPaymentStatusGroupType>
    
    // will allow the usage of FOP segment as trigger for GASS and GIVR groups
    dummy: DummySegmentTypeI7
    
    // will convey the references of the payment done in the customer/airline accounts.
    invoiceDetailedDataGroup: Array<InvoiceValidationGroupType>
    
    // This group will convey the detailed status of the credit card payment
    creditCardDetailedData: Array<CreditCardStatusGroupType1>
    
    // This group will convey the detailed data of the payment done via a web payment provider using accounts. First exple Paypal
    webAccountDetailledData: Array<WebAccountSuppDataGroupType>
    
    // This group is used to transmit the Virtual Credit Card data received : number of the virtual credit card, expiry data, adress for AVS, cardholder name.
    virtualCreditCardStatusGroup: Array<virtualCreditCardStatusGroupType>
    
}

export interface DetailedPaymentDataType1Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentTypeI_68621S {
    
    $attributes: FormOfPaymentTypeI_68621SAttributes
    
    // Generic status(new/old) and type(cash, cheque, card...) of the MOP
    formOfPayment: FormOfPaymentDetailsTypeI5
    
}

export interface FormOfPaymentTypeI_68621SAttributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsTypeI5 {
    
    $attributes: FormOfPaymentDetailsTypeI5Attributes
    
    // Generic type of the Mean of Payment used : CC credit Card CA cash CH cheque WW web payment... INV invoice
    type: string
    
}

export interface FormOfPaymentDetailsTypeI5Attributes {
    
}

// will convey all detailed payment data for web fund transfer
export interface DetailedWebFundTransferType {
    
    $attributes: DetailedWebFundTransferTypeAttributes
    
    // will convey the language used by the merchant site
    merchantSiteLanguage: LanguageBatchTypeU
    
    // will convey the merchant&#39;s website URL, in order for the PSP to know where to come back once payment authorisation has been done.
    returnURL: Array<CommunicationContactType_154707S>
    
    // will convey the issuer&#39;s URL and the acquirer&#39;s id
    redirectionData: Array<redirectionDataType>
    
    // in case of succesful transaction, it will convey consumer data: name, city and bank account number
    consumerData: Array<consumerDataType>
    
    // Will give us the status of the transfer : SUCCESS CANCELLED EXPIRED FAILURE OPEN
    transferStatus: Array<ResponseAnalysisDetailsType_154708S>
    
    // The group contains error codes and text returned when a problem occurred during the transaction.
    errorGroup: Array<PaymentErrorGroupType>
    
}

export interface DetailedWebFundTransferTypeAttributes {
    
}

// To specify a language.
export interface LanguageBatchTypeU {
    
    $attributes: LanguageBatchTypeUAttributes
    
    // will be 6 for our case
    languageQualifier: string
    
    // ISO639-1 value of the language Dutch = nl
    languageDetails: LanguageDetailsBatchTypeU
    
}

export interface LanguageBatchTypeUAttributes {
    
}

// To identify a language.
export interface LanguageDetailsBatchTypeU {
    
    $attributes: LanguageDetailsBatchTypeUAttributes
    
    // ISO639-1 value nl for Dutch
    languageCode: string
    
}

export interface LanguageDetailsBatchTypeUAttributes {
    
}

// Describes communication channel
export interface CommunicationContactType_154707S {
    
    $attributes: CommunicationContactType_154707SAttributes
    
    // Communication channel
    communication: CommunicationContactDetailsTypeU_107103C
    
}

export interface CommunicationContactType_154707SAttributes {
    
}

// Communication number of a department or employee in a specified channel.
export interface CommunicationContactDetailsTypeU_107103C {
    
    $attributes: CommunicationContactDetailsTypeU_107103CAttributes
    
    // will contain the url described by the urlType
    urlAddress: string
    
    // URL Address: identifier possible value is: - R: return url
    urlType: string
    
}

export interface CommunicationContactDetailsTypeU_107103CAttributes {
    
}


export interface redirectionDataType {
    
    $attributes: redirectionDataTypeAttributes
    
    // Id of the merchant&#39;s bank
    acquirerId: ReferenceInfoType_154714S
    
    // URL to which the customer will be redirected to
    issuerURLData: Array<CommunicationContactType_154713S>
    
}

export interface redirectionDataTypeAttributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_154714S {
    
    $attributes: ReferenceInfoType_154714SAttributes
    
    // REFERENCING DETAILS
    referenceDetails: ReferencingDetailsTypeI_107111C
    
}

export interface ReferenceInfoType_154714SAttributes {
    
}

// Describes communication channel
export interface CommunicationContactType_154713S {
    
    $attributes: CommunicationContactType_154713SAttributes
    
    // Communication channel
    communication: CommunicationContactDetailsTypeU_107110C
    
}

export interface CommunicationContactType_154713SAttributes {
    
}

// Communication number of a department or employee in a specified channel.
export interface CommunicationContactDetailsTypeU_107110C {
    
    $attributes: CommunicationContactDetailsTypeU_107110CAttributes
    
    // will convey the url of the page to be redirected to
    url: string
    
    // will be AH for World Wide Web
    codeQualifier: string
    
}

export interface CommunicationContactDetailsTypeU_107110CAttributes {
    
}


export interface consumerDataType {
    
    $attributes: consumerDataTypeAttributes
    
    // will convey the name of the consumer
    consumerName: TravellerInformationType_154716S
    
    // will convey the bank account of the consumer
    consumerAccount: ReferenceInfoType_154692S
    
    // will convey the city of the customer
    consumerAddress: AddressType_68661S
    
}

export interface consumerDataTypeAttributes {
    
}

// To specify a traveler and personal details relating to the traveler
export interface TravellerInformationType_154716S {
    
    $attributes: TravellerInformationType_154716SAttributes
    
    // name of the customer
    paxDetails: TravellerSurnameInformationType_220914C
    
}

export interface TravellerInformationType_154716SAttributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_154692S {
    
    $attributes: ReferenceInfoType_154692SAttributes
    
    // REFERENCING DETAILS
    referenceDetails: ReferencingDetailsTypeI_107087C
    
}

export interface ReferenceInfoType_154692SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_107087C {
    
    $attributes: ReferencingDetailsTypeI_107087CAttributes
    
    // will have the following values: XID Transaction identifier of the 3DS process CAAV authentication verification code for Visa AAV authentication verification code for MasterCard PAREQ authentication message PARES authentication response message
    value: string
    
}

export interface ReferencingDetailsTypeI_107087CAttributes {
    
}

// To specify an address
export interface AddressType_68661S {
    
    $attributes: AddressType_68661SAttributes
    
    // City name.
    city: string
    
}

export interface AddressType_68661SAttributes {
    
}

// To specify the type of query and the processing status associated with this response.
export interface ResponseAnalysisDetailsType_154708S {
    
    $attributes: ResponseAnalysisDetailsType_154708SAttributes
    
    // SUC Success. Payment is guaranteed CAN Cancelled. No payment has been made EXP Expired. No payment has been made FAI Failure. No reason about the payment failure OPE Open. Status not known, need to retry the enqiry
    statusCode: string
    
}

export interface ResponseAnalysisDetailsType_154708SAttributes {
    
}

// will convey the error occuring during the transaction
export interface PaymentErrorGroupType {
    
    $attributes: PaymentErrorGroupTypeAttributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType_154709S
    
    // The description of warning or error.
    errorWarningDescription: Array<FreeTextInformationType_154688S>
    
    // will convey supplementary information about the error, such as, proposal for reolution, cusotmized error message, validity of the retry possibility...
    errorSupplementaryData: Array<errorSupplementaryDataType>
    
}

export interface PaymentErrorGroupTypeAttributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType_154709S {
    
    $attributes: ApplicationErrorInformationType_154709SAttributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType_220911C
    
}

export interface ApplicationErrorInformationType_154709SAttributes {
    
}


export interface ApplicationErrorDetailType_220911C {
    
    $attributes: ApplicationErrorDetailType_220911CAttributes
    
    // error/warning message number identifying the error from the provider.
    errorCode: string
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: string
    
}

export interface ApplicationErrorDetailType_220911CAttributes {
    
}


export interface errorSupplementaryDataType {
    
    $attributes: errorSupplementaryDataTypeAttributes
    
    // will convey the following potential supplementary info : errorDetail suggestedAction consumerMessage
    errorSupplementaryMessages: AttributeType_154711S
    
    // will convey the suggested expiration period : it indicates the maximum date/time of validity at the acquirer, so that the merchant can offer a new transaction. It is the remaining time until the start of unavailability less 4 min.
    expirationDate: Array<StructuredDateTimeInformationType_154712S>
    
}

export interface errorSupplementaryDataTypeAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_154711S {
    
    $attributes: AttributeType_154711SAttributes
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU_107107C>
    
}

export interface AttributeType_154711SAttributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU_107107C {
    
    $attributes: AttributeInformationTypeU_107107CAttributes
    
    // DET error Details SUG1 suggested action part 1 SUG2 suggested action part 2 CON1 consumer message part1 CON2 consumer message part2
    attributeType: string
    
    // will conatin the formatted error message
    attributeDescription: string
    
}

export interface AttributeInformationTypeU_107107CAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_154712S {
    
    $attributes: StructuredDateTimeInformationType_154712SAttributes
    
    // Convey date and/or time.
    dateTime: StructuredDateTimeType_220913C
    
}

export interface StructuredDateTimeInformationType_154712SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_220913C {
    
    $attributes: StructuredDateTimeType_220913CAttributes
    
    // Year number.
    year: number
    
    // Month number in the year ( begins to 1 )
    month: number
    
    // Day number in the month ( begins to 1 )
    day: number
    
    // Hour between 0 and 23
    hour: number
    
    // Minutes between 0 and 59
    minutes: number
    
    // Seconds between 0 and 59
    seconds: number
    
}

export interface StructuredDateTimeType_220913CAttributes {
    
}


export interface AsynchPaymentStatusGroupType {
    
    $attributes: AsynchPaymentStatusGroupTypeAttributes
    
    // Asynchronous Payment approval reference number
    approvalReferenceNumber: GenericAuthorisationResultType1
    
    // URL provided by bank/ PSP link in case of asynchronous payment.
    asyncPaymentUrl: Array<CommunicationContactType2>
    
}

export interface AsynchPaymentStatusGroupTypeAttributes {
    
}

// will convey the approval data of the transaction
export interface GenericAuthorisationResultType1 {
    
    $attributes: GenericAuthorisationResultType1Attributes
    
    // transaction authorization approval data
    approvalCodeData: AuthorizationApprovalDataType1
    
}

export interface GenericAuthorisationResultType1Attributes {
    
}

// will convey the approval data
export interface AuthorizationApprovalDataType1 {
    
    $attributes: AuthorizationApprovalDataType1Attributes
    
    // will convey the value of the approval code of the payment authorisation
    approvalCode: string
    
    // Source of approval for the payment authorisation. A Automatically obtained by the system. M Manually entered by an agent.
    sourceOfApproval: Array<string>
    
}

export interface AuthorizationApprovalDataType1Attributes {
    
}

// Describes communication channel
export interface CommunicationContactType2 {
    
    $attributes: CommunicationContactType2Attributes
    
    // Communication channel
    communication: CommunicationContactDetailsType2
    
}

export interface CommunicationContactType2Attributes {
    
}

// Communication identifier such as URL address.
export interface CommunicationContactDetailsType2 {
    
    $attributes: CommunicationContactDetailsType2Attributes
    
    // url
    urlAddress: string
    
    // this type is used to identify the url : BO - Boleto FOP
    urlType: string
    
}

export interface CommunicationContactDetailsType2Attributes {
    
}

// References validation data of a INV Fop
export interface InvoiceValidationGroupType {
    
    $attributes: InvoiceValidationGroupTypeAttributes
    
    // will convey the approval code/status of the transaction
    approvalCodeDetails: GenericAuthorisationResultType_154696S
    
    // this document reference is generated during the account payment
    documentInformation: Array<DocumentInformationDetailsType>
    
    // Element used to convey transaction status.
    transactionStatus: Array<ErrorGroupType_174783G>
    
}

export interface InvoiceValidationGroupTypeAttributes {
    
}

// Convey the approval data of the transaction
export interface GenericAuthorisationResultType_154696S {
    
    $attributes: GenericAuthorisationResultType_154696SAttributes
    
    // transaction authorization approval data
    approvalCodeData: Array<AuthorizationApprovalDataType_220892C>
    
}

export interface GenericAuthorisationResultType_154696SAttributes {
    
}

// will convey the approval data
export interface AuthorizationApprovalDataType_220892C {
    
    $attributes: AuthorizationApprovalDataType_220892CAttributes
    
    // will convey the value of the approval code of the payment authorisation
    approvalCode: string
    
    // Source of approval for the payment authorisation. A Automatically obtained by the system. M Manually entered by an agent.
    sourceOfApproval: Array<string>
    
}

export interface AuthorizationApprovalDataType_220892CAttributes {
    
}

// To specify information concerning a document.
export interface DocumentInformationDetailsType {
    
    $attributes: DocumentInformationDetailsTypeAttributes
    
    // Document information
    documentDetails: DocumentDetailsTypeI1
    
}

export interface DocumentInformationDetailsTypeAttributes {
    
}

// Identification of document by number, status and date.
export interface DocumentDetailsTypeI1 {
    
    $attributes: DocumentDetailsTypeI1Attributes
    
    // Document number : correspond to invoice or credit note.
    number: string
    
}

export interface DocumentDetailsTypeI1Attributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType_174783G {
    
    $attributes: ErrorGroupType_174783GAttributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType_154697S
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType8>
    
}

export interface ErrorGroupType_174783GAttributes {
    
}

// will convey all the detailed payment status related to credit Card
export interface CreditCardStatusGroupType1 {
    
    $attributes: CreditCardStatusGroupType1Attributes
    
    // This segment is used to store specific data of links following ISO8583 standard.
    authorisationSupplementaryData: SpecificVisaLinkCreditCardInformationType1
    
    // will convey the approval code/source
    approvalDetails: Array<GenericAuthorisationResultType_154683S>
    
    // This segment conveys date and time information. You can specify the time mode used (GMT, UTC or Local)and what for it refers. - Transmission date and time This contains the date and time the request was submitted to the link (Visa, Nedbank...field 7). GMT can be used. - Local transaction date and time Date and time when Amadeus builds the authorization message (local according to the point of sale)(Visa, Nedbank...field 12/13) - Transaction receipt date and time date and time when amadeus receives the authorization message.
    localDateTime: Array<StructuredDateTimeInformationType_154684S>
    
    // Transaction Information: - type of authorization message submit for the given FOP - bulk, superbulk, no bulk process - STAN number (identifying a pair of Credit Card authorization request/response).
    authorisationInformation: Array<TransactionInformationForTicketingType1>
    
    // This group contains all data about the customer&#39;s browser.
    browserData: Array<browserDataType1>
    
    // this group will convey all the 3DS related data
    tdsInformation: Array<ThreeDomainSecureGroupType1>
    
    // This will allow the transmission of credit card data.
    cardSupplementaryData: Array<AttributeType_154682S>
    
    // will convey the various sub status that can be associated to a credit card payment CVV, AVS, AUT, ATN....
    transactionStatus: Array<ErrorGroupType3>
    
}

export interface CreditCardStatusGroupType1Attributes {
    
}

// To specify specific credit card information returned by VISA link only
export interface SpecificVisaLinkCreditCardInformationType1 {
    
    $attributes: SpecificVisaLinkCreditCardInformationType1Attributes
    
    // ISO8583 specific info
    msgRef: Array<MessageReferenceType1>
    
    // Response identification
    respIdentification: Array<ResponseIdentificationType1>
    
}

export interface SpecificVisaLinkCreditCardInformationType1Attributes {
    
}

// INFORMATION SPECIFIC TO VISA
export interface MessageReferenceType1 {
    
    $attributes: MessageReferenceType1Attributes
    
    // This number is used to identify and track ALL messages related to a given cardholder transaction (author, retry, reversal ...). It is usually composed of: - the date when the message was formatted followed by - the message number Field 37 Official definition of Retrieval Reference Number from ISO8583: Field 37 contains a number used with other key data elements to identify and track all messages related to a given cardholder transaction (referred to as a transaction set). It is usually assigned by the acquirer, but it may be assigned by a merchant or by an individual electronic terminal. V.I.P. will also generate the retrieval reference number for transactions it initiates. This field contains two parts. The first four digits are usually a yddd date (Julian date format). The date is defined to be the same day as the date in Field 7_Transmission Date and Time, of the original request. The last eight digits are a numeric transaction identification number. The value in field 37 can be based on the content of fields 7 and 11 in the original request or advice as shown in the recommendation below: . Positions 1_4: the yddd equivalent of the field 7 date . Positions 5_6: the hours from the time in field 7 . Positions 7_12: the value from field 11
    retrievalReferenceNumber: Array<string>
    
    // Authorization characteristics indicator Field 62.1 Possible values: A C E F K M S U V W R I P N T
    authorCharacteristicIndicator: Array<string>
    
    // Authorization response code Field 39
    authorResponseCode: Array<string>
    
    // Card Level Result (Product Identification value) Field 62.23
    cardLevelResult: Array<string>
    
    // Additional POS Information - Terminal Type Field 60.1 - Position 1 CAT (Cardholder-Activated Terminal indicator) or UAT (Unattended Acceptance Terminal)
    terminalType: Array<string>
    
}

export interface MessageReferenceType1Attributes {
    
}

// RESPONSE IDENTIFICATION
export interface ResponseIdentificationType1 {
    
    $attributes: ResponseIdentificationType1Attributes
    
    // Transaction identifier Field 62.2 Official definition: Visa-generated identifier that is unique for each original transaction. The transaction identifier (TID) is a key element that links original authorization requests to subsequent messages, such as reversals.
    transacIdentifier: Array<string>
    
    // Validation code Field 62.3
    validationCode: Array<string>
    
    // Gateway Transaction Identifier - Banknet reference number Field 62.17 - Position 8-13
    banknetRefNumber: Array<string>
    
    // Gateway Transaction Identifier - Banknet date in mmdd format Field 62.17 - Position 1-4
    banknetDate: Array<string>
    
}

export interface ResponseIdentificationType1Attributes {
    
}

// Convey the approval data of the transaction
export interface GenericAuthorisationResultType_154683S {
    
    $attributes: GenericAuthorisationResultType_154683SAttributes
    
    // transaction authorization approval data
    approvalCodeData: AuthorizationApprovalDataType_220892C
    
}

export interface GenericAuthorisationResultType_154683SAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_154684S {
    
    $attributes: StructuredDateTimeInformationType_154684SAttributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - LT : date and time corresponding to Authorization message built - T : date and time corresponding to Authorization message sent - AR : date and time corresponding to Authorization message receipt
    businessSemantic: Array<string>
    
    // Indicate if the time is expressed in UTC or in local time mode ( Codes U and L ). In the last case, the time zone information can be provided in the composite C89K.
    timeMode: Array<string>
    
    // Convey date and/or time.
    dateTime: StructuredDateTimeType_220893C
    
    // Reference : IATA SSIM Appendix F If it is not provided, the time is considered to be given in UTC.
    timeZoneInfo: Array<TimeZoneIinformationType1>
    
}

export interface StructuredDateTimeInformationType_154684SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_220893C {
    
    $attributes: StructuredDateTimeType_220893CAttributes
    
    // Year number.
    year: number
    
    // Month number in the year ( begins to 1 )
    month: number
    
    // Day number in the month ( begins to 1 )
    day: number
    
    // Hour between 0 and 23
    hour: Array<number>
    
    // Minutes between 0 and 59
    minutes: Array<number>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<number>
    
}

export interface StructuredDateTimeType_220893CAttributes {
    
}

// to specify details relating to the transaction
export interface TransactionInformationForTicketingType1 {
    
    $attributes: TransactionInformationForTicketingType1Attributes
    
    // Authorisation transaction details
    transactionDetails: TransactionInformationsType1
    
}

export interface TransactionInformationForTicketingType1Attributes {
    
}

// To convey details related to the transaction
export interface TransactionInformationsType1 {
    
    $attributes: TransactionInformationsType1Attributes
    
    // Authorization message type Eg 110: author according standard ISO8583 210: settlement according standard ISO858 ...
    code: Array<string>
    
    // Credit Card link used to perform authorization.
    type: Array<string>
    
    // Process indicator (bulkIndicator): - bulk - superbulk - no bulk.
    issueIndicator: Array<string>
    
    // This is a message number that uniquely identifies a cardholder transaction. According to the link this info can have various names: - STAN number(Systems Trace Audit Number) - ISO8583 (VISA,Nedbank, Credit Mutuel...) - Message number - APACS70 (Barclays,Euroline...) ... Official definition: This is a number assigned by the message initiator that uniquely identifies a cardholder transaction and all the message types (also known as system transactions) that it comprises, according to individual program rules. The trace number remains unchanged for all messages throughout the life of the transaction. For example, the same trace number is used in an authorization request and response, and in a subsequent reversal request and response, and in any advices of authorization or reversal.
    transmissionControlNumber: Array<string>
    
}

export interface TransactionInformationsType1Attributes {
    
}


export interface browserDataType1 {
    
    $attributes: browserDataType1Attributes
    
    // This segment contains data about the customer&#39;s browser : 0 PC (HTML) 1 Mobile Internet Device (WML)
    browserProperties: BrowserInformationType1
    
    // Contains in freeflow format data about the customer&#39;s browser. - userAgent - acceptHeaders This entities are independantly optional.
    freeFlowBrowserData: Array<FreeTextInformationType_154694S>
    
}

export interface browserDataType1Attributes {
    
}

// Conveys browser properties
export interface BrowserInformationType1 {
    
    $attributes: BrowserInformationType1Attributes
    
    // Indicates the type of cardholder device.
    deviceCategory: number
    
}

export interface BrowserInformationType1Attributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_154694S {
    
    $attributes: FreeTextInformationType_154694SAttributes
    
    // will contain the browser information
    freeTextDetails: FreeTextDetailsType_220902C
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType_154694SAttributes {
    
}


export interface FreeTextDetailsType_220902C {
    
    $attributes: FreeTextDetailsType_220902CAttributes
    
    // mutually defined ZZZ
    textSubjectQualifier: string
    
    // AH Browser Accept headers UA Browser User Agent
    informationType: string
    
    // Manual : M
    source: string
    
    // ZZZ mutually agreed
    encoding: string
    
}

export interface FreeTextDetailsType_220902CAttributes {
    
}

// will convey various 3DS data
export interface ThreeDomainSecureGroupType1 {
    
    $attributes: ThreeDomainSecureGroupType1Attributes
    
    // This segment conveys a set of data resulting from the 3DS authentication process
    authenticationData: CreditCardSecurityType1
    
    // Access Control Server&#39;s URL (up to 2048 characters).
    acsURL: Array<CommunicationContactType_154690S>
    
    // will convey the various messages/encrypted data used during the 3DS authentication processes
    tdsBlobData: Array<tdsBlobDataType1>
    
}

export interface ThreeDomainSecureGroupType1Attributes {
    
}

// Conveys data of the credit card authentication
export interface CreditCardSecurityType1 {
    
    $attributes: CreditCardSecurityType1Attributes
    
    // Conveys all data of authentication process. Only used today for &#34;Verified by Visa&#34; process
    authenticationDataDetails: Array<AuthenticationDataType1>
    
}

export interface CreditCardSecurityType1Attributes {
    
}

// Conveys CC authentication data
export interface AuthenticationDataType1 {
    
    $attributes: AuthenticationDataType1Attributes
    
    // VERes status (enrollment) Values : Y : authentication available N : cardholder not participating U : Unable to authenticate E : error message
    veres: Array<string>
    
    // PARes status (authentication). Values : Y : authentication successful N : authentication failed U : authentication could not be performed A : attempts processing performed
    pares: Array<string>
    
    // CC Directory Server performing the enrollment process: VISA, MasterCard
    creditCardCompany: string
    
    // To indicate whether the transaction was successful, different indicators for Visa/MasterCard. - ECI for VISA - UCAF collection indicator for Matercard
    authenticationIndicator: Array<string>
    
    // Indicates the algorithm used to generate the Cardholder Authentication Verification Value (CAAV = authentication code)
    caavAlgorithm: Array<number>
    
}

export interface AuthenticationDataType1Attributes {
    
}


export interface tdsBlobDataType1 {
    
    $attributes: tdsBlobDataType1Attributes
    
    // will identify the content of the BLB that follows
    tdsBlbIdentifier: ReferenceInfoType_154692S
    
    
    tdsBlbData: BinaryDataType1
    
}

export interface tdsBlobDataType1Attributes {
    
}

// to carry binary data within an Edifact segment
export interface BinaryDataType1 {
    
    $attributes: BinaryDataType1Attributes
    
    // Length of the BLB
    dataLength: number
    
    // type of the data
    dataType: Array<string>
    
    // used to store binary data
    binaryData: string
    
}

export interface BinaryDataType1Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_154682S {
    
    $attributes: AttributeType_154682SAttributes
    
    // Determines if the set of criteria corresponds to the message identification criteria or to normal criteria.
    criteriaSetType: Array<string>
    
    // List of attributes and status linked to credit card process. Most of them are link dependant.
    criteriaDetails: AttributeInformationTypeU5
    
}

export interface AttributeType_154682SAttributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType3 {
    
    $attributes: ErrorGroupType3Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType8
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType_154688S>
    
}

export interface ErrorGroupType3Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType8 {
    
    $attributes: ApplicationErrorInformationType8Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType_220899C
    
}

export interface ApplicationErrorInformationType8Attributes {
    
}


export interface ApplicationErrorDetailType_220899C {
    
    $attributes: ApplicationErrorDetailType_220899CAttributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: string
    
}

export interface ApplicationErrorDetailType_220899CAttributes {
    
}

// will convey Web Account detailed payment data
export interface WebAccountSuppDataGroupType {
    
    $attributes: WebAccountSuppDataGroupTypeAttributes
    
    // Will let us know if we are handling a Paypal payment process
    pspIndicator: StatusType_68646S
    
    // This segment is used to convey virtual fake C.C. for Paypal.
    uatpCard: Array<CreditCardDataType3>
    
    // this segment will convey status on: - shipping - address override
    paypalParameters: Array<StatusType_84988S>
    
    // It will convey the Psp&#39;s URL where the customer will be redirected to, in order to perform its payment Type will be PP Paypal url
    pspUrl: Array<CommunicationContactType_154699S>
    
    // Customer shipping address -Name -Street1 -Street2 CityName, StateOrProvince PostalCode Country
    shippingAddress: Array<AddressType_68644S>
    
    // Payer name returned by getExpressCheckoutDetails
    payerName: Array<TravellerInformationType_154701S>
    
    // Stores account number for Web access payment
    accountNumber: Array<ReferenceInfoType_154700S>
    
    // Will convey information about the web pages of the merchant
    merchantSiteDetails: Array<merchantSiteDetailsType>
    
    // This group is used to convey paypal error information.
    errorDescription: Array<errorDescriptionType1>
    
}

export interface WebAccountSuppDataGroupTypeAttributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType_84988S {
    
    $attributes: StatusType_84988SAttributes
    
    // STATUS DETAILS
    statusInformation: StatusDetailsTypeI_129334C
    
}

export interface StatusType_84988SAttributes {
    
}

// Describes communication channel
export interface CommunicationContactType_154699S {
    
    $attributes: CommunicationContactType_154699SAttributes
    
    // Communication channel
    communication: CommunicationContactDetailsTypeU_129344C
    
}

export interface CommunicationContactType_154699SAttributes {
    
}

// Communication number of a department or employee in a specified channel.
export interface CommunicationContactDetailsTypeU_129344C {
    
    $attributes: CommunicationContactDetailsTypeU_129344CAttributes
    
    // will contain the url described by the urlType
    urlAddress: string
    
    // URL Address: identifier possible values are: - R: return url - C: cancel url - U: customize url
    urlType: string
    
}

export interface CommunicationContactDetailsTypeU_129344CAttributes {
    
}

// To specify an address
export interface AddressType_68644S {
    
    $attributes: AddressType_68644SAttributes
    
    // Payer address usage
    addressUsageDetails: Array<AddressUsageTypeU1>
    
    // details of the payer address
    addressDetails: AddressDetailsTypeU3
    
    // City name.
    city: Array<string>
    
    // postal identification code.
    zipCode: Array<string>
    
    // To convey a sub-entity within a country : region, states..
    regionDetails: Array<CountrySubEntityDetailsTypeU3>
    
    // details of the shipping adress
    locationDetails: Array<LocationIdentificationTypeU3>
    
}

export interface AddressType_68644SAttributes {
    
}

// To describe the usage of an address
export interface AddressUsageTypeU1 {
    
    $attributes: AddressUsageTypeU1Attributes
    
    // Status of the street adress on file with the payment provider(Paypal for eg)
    status: Array<string>
    
}

export interface AddressUsageTypeU1Attributes {
    
}

// To specify a part of a country (eg county or part of a city).
export interface CountrySubEntityDetailsTypeU3 {
    
    $attributes: CountrySubEntityDetailsTypeU3Attributes
    
    // specifies the type of the sub-entity : region - county ...
    code: Array<string>
    
    // name of the region
    name: Array<string>
    
}

export interface CountrySubEntityDetailsTypeU3Attributes {
    
}

// Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name
export interface LocationIdentificationTypeU3 {
    
    $attributes: LocationIdentificationTypeU3Attributes
    
    // location name
    code: Array<string>
    
    // name of the location
    name: Array<string>
    
}

export interface LocationIdentificationTypeU3Attributes {
    
}

// To specify a traveler and personal details relating to the traveler
export interface TravellerInformationType_154701S {
    
    $attributes: TravellerInformationType_154701SAttributes
    
    // payer surname and attributes
    paxDetails: TravellerSurnameInformationType_220907C
    
    // will convey the supplementary data about payer stored in the PSP. For instance: Paypal Id, name,salutation
    otherPaxDetails: Array<TravellerDetailsTypeI_107098C>
    
}

export interface TravellerInformationType_154701SAttributes {
    
}


export interface TravellerSurnameInformationType_220907C {
    
    $attributes: TravellerSurnameInformationType_220907CAttributes
    
    // Passenger name
    surname: string
    
    // Customer type: A=adult C=child IN = infant
    type: Array<string>
    
}

export interface TravellerSurnameInformationType_220907CAttributes {
    
}

// To identify the given/first name and the title of a traveller and the traveller type.
export interface TravellerDetailsTypeI_107098C {
    
    $attributes: TravellerDetailsTypeI_107098CAttributes
    
    // first name of the payer
    givenName: string
    
}

export interface TravellerDetailsTypeI_107098CAttributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_154700S {
    
    $attributes: ReferenceInfoType_154700SAttributes
    
    // Payer User ID (web account)
    payerAccountId: Array<ReferencingDetailsTypeI_107111C>
    
}

export interface ReferenceInfoType_154700SAttributes {
    
}


export interface merchantSiteDetailsType {
    
    $attributes: merchantSiteDetailsTypeAttributes
    
    // Country code. Locale of pages displayed by Paypal during Express Checkout. Character length and limitations: Amy two char country code. The following two-chars are supported by PayPal: AT, AU, Be, CA, CH, CN, DE, ES, FR, GB, IT, NL, PL and US. Default is US.
    countryData: CountryInformationTypeU
    
    // TXF convey personalized web page color (Color to customise PSP payment page), for this we need three info about the color. (The three colors will be in hexa decimal in ASCII format). Set the border and background for the psp payment page. 1)cpp-header-border-color: Sets the border color around the header of the payment page. The border is a 2-pixel perimeter around the header space which is 750 pixels wide by 90 pixels high. Character length and limitations: 6 characters HTLM hexadecimal color code in ASCII. 2)cpp-header-back-color: Sets the background color for the header of the payment page. Character length and limitations: 6 characters HTLM hexadecimal color code in ASCII 3)cpp-payflow-color: Sets the background color for the payment page. Character length and limitations: 6 characters HTLM hexadecimal color code in ASCII
    cppPspColor: Array<FreeTextInformationType_154703S>
    
    // 1) ReturnURL URL to which the end-user&#39;s browser is returned after approving use of PayPal. The UI has to define all the needed parameters to the ReturnURL. 2) CancelURL URL to which the end-user is returned if he decides not to use PayPal or if PayPal is not able to authorize the end-user. The UI has to define all the needed parameters to the CancelURL. 3) cutomizeURL URL to which the end-user is returned if default paypal parameters are overridden.
    urls: Array<CommunicationContactType_154699S>
    
}

export interface merchantSiteDetailsTypeAttributes {
    
}

// To specify country and related information, i.e. date and time of summer or winter time transition and related time variation, currency and language(s).
export interface CountryInformationTypeU {
    
    $attributes: CountryInformationTypeUAttributes
    
    // Country code. Locale of pages displayed by Paypal during Express Checkout. Character length and limitations: Amy two char country code. The following two-chars are supported by PayPal: AT, AU, Be, CA, CH, CN, DE, ES, FR, GB, IT, NL, PL and US. Default is US.
    countryNameCode: string
    
}

export interface CountryInformationTypeUAttributes {
    
}


export interface errorDescriptionType1 {
    
    $attributes: errorDescriptionType1Attributes
    
    // This code identifies the Severity code types in terms of whether there is an API-level error or warning that needs to be communicated to the client.
    severityCodeType: ResponseAnalysisDetailsType1
    
    // will convey the error status of the payment : 2 error group per error : - long text Paypal - short text Paypal
    paymentError: Array<ErrorGroupType_174787G>
    
}

export interface errorDescriptionType1Attributes {
    
}

// To specify the type of query and the processing status associated with this response.
export interface ResponseAnalysisDetailsType1 {
    
    $attributes: ResponseAnalysisDetailsType1Attributes
    
    // Severity desciption : E
    responseType: Array<string>
    
    // Error message severity status
    statusCode: string
    
}

export interface ResponseAnalysisDetailsType1Attributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType_174787G {
    
    $attributes: ErrorGroupType_174787GAttributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType_154705S
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType_154706S>
    
}

export interface ErrorGroupType_174787GAttributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType_154705S {
    
    $attributes: ApplicationErrorInformationType_154705SAttributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType_220909C
    
}

export interface ApplicationErrorInformationType_154705SAttributes {
    
}


export interface ApplicationErrorDetailType_220909C {
    
    $attributes: ApplicationErrorDetailType_220909CAttributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list. 1A Amadeus PP Paypal
    errorCodeOwner: string
    
}

export interface ApplicationErrorDetailType_220909CAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_154706S {
    
    $attributes: FreeTextInformationType_154706SAttributes
    
    // Error description
    freeTextDetails: FreeTextDetailsType_220910C
    
    // Free text and message sequence numbers of the remarks.
    freeText: string
    
}

export interface FreeTextInformationType_154706SAttributes {
    
}


export interface FreeTextDetailsType_220910C {
    
    $attributes: FreeTextDetailsType_220910CAttributes
    
    // literal text
    textSubjectQualifier: string
    
    // type of information: SHT : paypal short text LGT : paypal long text CAN : 1A canned message
    informationType: Array<string>
    
    // source
    source: string
    
    // encoding
    encoding: string
    
}

export interface FreeTextDetailsType_220910CAttributes {
    
}


export interface virtualCreditCardStatusGroupType {
    
    $attributes: virtualCreditCardStatusGroupTypeAttributes
    
    
    virtualCreditCardParameters: VirtualCardParametersType_175504S
    
    // Contains the Virtual Credit Card Number, expiry date, CVV, vendor, holder name.
    virtualCreditCardData: Array<CreditCardDataType3>
    
    // will convey both the CVV and the Credit card number Ids stored in the fortknox Database
    fortknoxIds: Array<ReferenceInfoType_190166S>
    
    // Contains the adress associated to the Virtual Credit Card for AVS verification
    vCCAssociatedAdress: Array<AddressType6>
    
}

export interface virtualCreditCardStatusGroupTypeAttributes {
    
}

// Specify parameters for virtual credit card creation
export interface VirtualCardParametersType_175504S {
    
    $attributes: VirtualCardParametersType_175504SAttributes
    
    // This data composite is used to transmit parameters for Virtual Credit Card creation
    virtualCardInformation: VirtualCardInformationType_247217C
    
}

export interface VirtualCardParametersType_175504SAttributes {
    
}

// Specify parameters for virtual credit card creation
export interface VirtualCardInformationType_247217C {
    
    $attributes: VirtualCardInformationType_247217CAttributes
    
    // Vendor code (VI,CA,AX.) In the context of Virtual Credit Card, contains the desired vendor of the virtualized card. If CA is entered, the Virtual Credit Card provided will be a Mastercard.
    vendorCode: string
    
}

export interface VirtualCardInformationType_247217CAttributes {
    
}


export interface FOP_CreateFormOfPaymentReplyType {
    
    $attributes: FOP_CreateFormOfPaymentReplyTypeAttributes
    
    // will convey the reason of the error that occured during transmission
    transmissionError: Array<ErrorGroupType_96608G>
    
    // will convey Form of payment data
    fopDescription: Array<fopDescriptionType>
    
}

export interface FOP_CreateFormOfPaymentReplyTypeAttributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType_96608G {
    
    $attributes: ErrorGroupType_96608GAttributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType_76949S
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType_154688S1>
    
}

export interface ErrorGroupType_96608GAttributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType_76949S {
    
    $attributes: ApplicationErrorInformationType_76949SAttributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType_118902C
    
}

export interface ApplicationErrorInformationType_76949SAttributes {
    
}


export interface ApplicationErrorDetailType_118902C {
    
    $attributes: ApplicationErrorDetailType_118902CAttributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
}

export interface ApplicationErrorDetailType_118902CAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_154688S1 {
    
    $attributes: FreeTextInformationType_154688S1Attributes
    
    // error text description
    freeTextDetails: FreeTextDetailsType9
    
    // Free text and message sequence numbers of the remarks.
    freeText: string
    
}

export interface FreeTextInformationType_154688S1Attributes {
    
}


export interface FreeTextDetailsType9 {
    
    $attributes: FreeTextDetailsType9Attributes
    
    // mutually defined ZZZ
    textSubjectQualifier: string
    
    // Manual : M
    source: string
    
    // ZZZ mutually agreed
    encoding: string
    
}

export interface FreeTextDetailsType9Attributes {
    
}


export interface fopDescriptionType {
    
    $attributes: fopDescriptionTypeAttributes
    
    // Contains the FP/SFP tattoo
    fopReference: ElementManagementSegmentType5
    
    // will list all the passengers associated to the FOP element
    passengerAssociation: Array<ReferenceInformationType5>
    
    // will list the various links of the FOP element. it can be MCO, Segment... (pax reference is conveyed within PXR)
    pnrElementAssociation: Array<ReferenceInfoType_190198S>
    
    
    additionalMonetaryData: Array<CodedAttributeType_175463S>
    
    // Contains the FOP complete as displayed in the PNR.
    freeFlowFop: Array<FreeTextInformationType_154688S1>
    
    // will convey the reason of the error that occured during Form of Payment reading
    fpElementError: Array<ErrorGroupType_96609G>
    
    // This group conveys Method of payment information
    mopDescription: Array<mopDescriptionType1>
    
}

export interface fopDescriptionTypeAttributes {
    
}

// To specify the PNR segments/elements references and action to apply
export interface ElementManagementSegmentType5 {
    
    $attributes: ElementManagementSegmentType5Attributes
    
    
    reference: Array<ReferencingDetailsType_261040C1>
    
}

export interface ElementManagementSegmentType5Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_261040C1 {
    
    $attributes: ReferencingDetailsType_261040C1Attributes
    
    // Form of payment or Sales form of payment way of identification
    qualifier: string
    
    // Number attributed by the Server to reference the PNR segment/element Limited to the time the PNR is worked (First retrieve - End of Transaction)
    number: string
    
}

export interface ReferencingDetailsType_261040C1Attributes {
    
}

// Used to convey the passenger references.
export interface ReferenceInformationType5 {
    
    $attributes: ReferenceInformationType5Attributes
    
    // Used to convey the passenger tatoo or display number.
    passengerReference: ReferencingDetailsType_260700C1
    
}

export interface ReferenceInformationType5Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_260700C1 {
    
    $attributes: ReferencingDetailsType_260700C1Attributes
    
    // type of the passenger : INF infant PAX adult
    type: Array<string>
    
    // Conveys the value of PAX association
    value: string
    
}

export interface ReferencingDetailsType_260700C1Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType_190198S {
    
    $attributes: ReferenceInfoType_190198SAttributes
    
    
    referenceDetails: Array<ReferencingDetailsType_266070C>
    
}

export interface ReferenceInfoType_190198SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_266070C {
    
    $attributes: ReferencingDetailsType_266070CAttributes
    
    
    type: string
    
    
    value: string
    
}

export interface ReferencingDetailsType_266070CAttributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_175463S {
    
    $attributes: CodedAttributeType_175463SAttributes
    
    // provides details for the Attribute
    attributeDetails: CodedAttributeInformationType10
    
}

export interface CodedAttributeType_175463SAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType10 {
    
    $attributes: CodedAttributeInformationType10Attributes
    
    // provides the attribute Type
    attributeType: string
    
}

export interface CodedAttributeInformationType10Attributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType_96609G {
    
    $attributes: ErrorGroupType_96609GAttributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType_76949S
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType_154703S1>
    
}

export interface ErrorGroupType_96609GAttributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_154703S1 {
    
    $attributes: FreeTextInformationType_154703S1Attributes
    
    // will describe which kind of color we are using
    freeTextDetails: FreeTextDetailsType9
    
    // Free text describing the color
    freeText: Array<string>
    
}

export interface FreeTextInformationType_154703S1Attributes {
    
}


export interface mopDescriptionType1 {
    
    $attributes: mopDescriptionType1Attributes
    
    // Conveys the sequence number of the Form of Payment in the FP Line. It must be set to 1 if there is only 1 FOP in the FOP
    fopSequenceNumber: SequenceDetailsTypeU6
    
    // Element used to identify the FOP as a sub-element of FP line, or the MEP and PAI elements in case of a SFP.
    fopMasterElementReference: Array<ReferenceInfoType_185714S1>
    
    // Used to refer to an element StakeHolder of type Payer. It is the owner of the Method of Payment described in the GMOD or GPAY group.
    stakeholderPayerReference: Array<ReferenceInformationType5>
    
    // This group conveys Mean of payment general information.
    mopDetails: Array<mopDetailsType1>
    
    // will convey the reason of the error that occured during Method of Payment reading
    mopElementError: Array<ErrorGroupType_87970G1>
    
    // will contain all the data related to the payment transaction
    paymentModule: Array<PaymentGroupType2>
    
}

export interface mopDescriptionType1Attributes {
    
}

// To provide details relating to the sequence.
export interface SequenceDetailsTypeU6 {
    
    $attributes: SequenceDetailsTypeU6Attributes
    
    // Sequence Information
    sequenceDetails: Array<SequenceInformationTypeU6>
    
}

export interface SequenceDetailsTypeU6Attributes {
    
}

// Identification of a sequence and source for sequencing.
export interface SequenceInformationTypeU6 {
    
    $attributes: SequenceInformationTypeU6Attributes
    
    // Sequence number of the Mean Of Payment in the FOP line. There can be up to 3 New MOP and 3 Old MOP in a FOP line. Old Fops are considered as freeflow text.
    number: string
    
    // Element filled in case FOP is a sub element of another sequence
    identificationCode: Array<string>
    
}

export interface SequenceInformationTypeU6Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType_185714S1 {
    
    $attributes: ReferenceInfoType_185714S1Attributes
    
    // Element type and tatoo number of MEP and PAI element (for SFP).
    referenceDetails: Array<ReferencingDetailsType_260461C1>
    
}

export interface ReferenceInfoType_185714S1Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_260461C1 {
    
    $attributes: ReferencingDetailsType_260461C1Attributes
    
    // Sequence Number of the Master FOP element, or PAI element type, or MEP element type.
    type: Array<string>
    
    // value
    value: Array<string>
    
}

export interface ReferencingDetailsType_260461C1Attributes {
    
}


export interface mopDetailsType1 {
    
    $attributes: mopDetailsType1Attributes
    
    // will convey all the data related to the various codes used by the FOP package, billing, ETS...
    fopPNRDetails: TicketingFormOfPaymentType_87832S1
    
    // This segment conveys Old Form of Payment. Old FOP(s) are considered as one freeflow text even if there is more than one old form of payment. e.g.: FP O/CA+CCVI+/CH CA and CCVI are considered as freeflow text.
    oldFopFreeflow: Array<FreeTextInformationType_154688S1>
    
    // will convey the switches and data associated to the FOP table
    pnrSupplementaryData: Array<PNRSupplementaryDataType2>
    
}

export interface mopDetailsType1Attributes {
    
}

// To convey details describing the form of payment and not found in the FOP segment
export interface TicketingFormOfPaymentType_87832S1 {
    
    $attributes: TicketingFormOfPaymentType_87832S1Attributes
    
    // Form of payment details
    fopDetails: Array<FormOfPaymentInformationType2>
    
}

export interface TicketingFormOfPaymentType_87832S1Attributes {
    
}

// To convey informations related to the form of payment specific to reporting
export interface FormOfPaymentInformationType2 {
    
    $attributes: FormOfPaymentInformationType2Attributes
    
    // Format key that identify the FOP within a FOP table. (CCVI, ...)
    fopCode: Array<string>
    
    // Name of the FOP map table used in order to validate the FP element.
    fopMapTable: Array<string>
    
    // This corresponds to the fop billing code (CASH CA / Credit CC). This is only used in case of a MS reporting code. (it corresponds to XX of @FPMSXX tag of TPF tables)
    fopBillingCode: Array<string>
    
    // Fop is a Old / new fop.
    fopStatus: Array<string>
    
    // Corresponds to the EDIFACT code. This enables to identify the type of FOP that will be added in case of a structured EDIFACT (i.e. via PNRADD) addition of the FOP. (it corresponds to the @EDI tag of TPF tables) Here is an example: Customer is eager to add a structured cash FOP using an EDIFACT message. The fopEdiCode will be filled with CA which means cash. Then in the FOP table in charge of validating free flow and generating FOP free flow, the system will try to look for the FOP map having CA as fop EDI code. If we are in an Air France (AF) ATO/CTO: the system will get FP CA.... If we are in an Iberia (IB) ATO/CTO: the system will get FP CASH,.... If we are in an United Airline (UA) ATO/CTO: the system will get FP S.... ... (@EDI value)
    fopEdiCode: Array<string>
    
    // This corresponds to the fop code which is used on reporting side. (XX value of @FPXXxx)
    fopReportingCode: Array<string>
    
    // This is the FOP printed code (@PR value)
    fopPrintedCode: Array<string>
    
    // This is the FOP electronic ticketing code. This is used to classify any FOP from the FOP table and also to determine how the FOP should be transmitted to the airline concerned. Based on this, the absence of the switch would make the FOP disallowed for ETKT, for National System Ticketing Server Travel Agency locations and all Central Ticketing offices (@ET value)
    fopElecTicketingCode: Array<string>
    
}

export interface FormOfPaymentInformationType2Attributes {
    
}

// will convey the FOP table data
export interface PNRSupplementaryDataType2 {
    
    $attributes: PNRSupplementaryDataType2Attributes
    
    // will convey the values of the FOP data and switch maps
    dataAndSwitchMap: AttributeType_154671S1
    
}

export interface PNRSupplementaryDataType2Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_154671S1 {
    
    $attributes: AttributeType_154671S1Attributes
    
    // Type of information: - is this a switch? - is this a structured data?
    criteriaSetType: string
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU6>
    
}

export interface AttributeType_154671S1Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU6 {
    
    $attributes: AttributeInformationTypeU6Attributes
    
    // This is the data type. may contain: - the name of the switch (eg nonRefundableFop, foCheck ...) - the name of the data (eg bacchusDealNumber, ...)
    attributeType: string
    
    // This is the data value. This may contain: - a potential attribute of the switch - the value of the structured data of the FOP
    attributeDescription: Array<string>
    
}

export interface AttributeInformationTypeU6Attributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType_87970G1 {
    
    $attributes: ErrorGroupType_87970G1Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType_154697S1
    
    // The description of warning or error.
    errorWarningDescription: Array<FreeTextInformationType_154703S1>
    
}

export interface ErrorGroupType_87970G1Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType_154697S1 {
    
    $attributes: ApplicationErrorInformationType_154697S1Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType7
    
}

export interface ApplicationErrorInformationType_154697S1Attributes {
    
}


export interface ApplicationErrorDetailType7 {
    
    $attributes: ApplicationErrorDetailType7Attributes
    
    // Code identifying the data validation error condition. It will be a canned message number in our case
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType7Attributes {
    
}

// is the generic group to convey payment related data
export interface PaymentGroupType2 {
    
    $attributes: PaymentGroupType2Attributes
    
    // Used to specify processing options at FOP level
    groupUsage: CodedAttributeType_190204S1
    
    // will convey all data necessary for the paiment and not dependant from the Mean Of Payment
    paymentData: Array<PaymentDataGroupType2>
    
    // will convey the overall status of the payment
    paymentStatus: Array<PaymentStatusGroupType1>
    
    // it will convey the Descriptive Billing Information: ONO, GWT, best Fare indicator....
    paymentSupplementaryData: Array<CodedAttributeType9>
    
    // will convey all the specificities of the Mean of Payment
    mopInformation: Array<MeanOfPaymentDataType2>
    
    // will allow the usage of FOP segment as trigger for MOPD and MOPS groups
    dummy: DummySegmentTypeI8
    
    // will convey the result of the payment and related to the detailed Mean Of Payment
    mopDetailedData: Array<DetailedPaymentDataType2>
    
}

export interface PaymentGroupType2Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_190204S1 {
    
    $attributes: CodedAttributeType_190204S1Attributes
    
    // used to describe one processing option at FOP level
    attributeDetails: Array<CodedAttributeInformationType_266039C1>
    
}

export interface CodedAttributeType_190204S1Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_266039C1 {
    
    $attributes: CodedAttributeInformationType_266039C1Attributes
    
    // use to refer the processing option name.
    attributeType: string
    
    // if the option from data element Indicator is configurable, this data element contains the parameter.
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType_266039C1Attributes {
    
}

// it will conveys all payment data
export interface PaymentDataGroupType2 {
    
    $attributes: PaymentDataGroupType2Attributes
    
    // Contains merchant information (Entity selling a product/service for wich payment is requested: airline, insurance provider...).
    merchantInformation: CompanyInformationType_154718S1
    
    // will convey all the monetary informations related to the payment : amount, currency, sub-amounts
    monetaryInformation: Array<MonetaryInformationType_190206S1>
    
    // Used to convey currency conversion rates
    currenciesRatesGroup: Array<currenciesRatesGroupType1>
    
    
    sliderConversion: Array<SliderConversionType1>
    
    // Conveys Payment Record ID (used by Payment Manager) to identify payment in a unique manner. May convey also a &#34;correlator Id&#34; used by the calling application to reconciliate its payment data. And also the &#34;transaction Id&#34; generated by the third party system (bank/PSP/PAyPAL...)
    paymentId: Array<ItemReferencesAndVersionsType12>
    
    // It will describe the content of the extended payment : when it will start, the frequency and how many times it should occur
    extendedPaymentInfo: Array<FrequencyTypeU2>
    
    // The segment conveys the date/time of the transaction
    transactionDateTime: Array<StructuredDateTimeInformationType_154723S1>
    
    // Will show the duration of validity of the payment request, mesured from receipt by the issuer. The customer has to agree to the payment within this period. Expressed in seconds.
    expirationPeriod: Array<QuantityType2>
    
    // Distribution Channel information
    distributionChannelInformation: Array<TerminalIdentificationDescriptionType2>
    
    // will convey in free text the description of the purchase
    purchaseDescription: Array<FreeTextInformationType_154703S1>
    
    // Element used to convey explicit Payment association within a Pricing Context.
    association: Array<ReferenceInfoType10>
    
    // will convey all information needed to perform the checks requested by the banks/PSPs regarding the prevention of fraud.
    fraudScreeningData: Array<FraudScreeningGroupType2>
    
    // Will be used to convey information dedicated to the Payment.
    paymentDataMap: Array<AttributeType_154671S1>
    
}

export interface PaymentDataGroupType2Attributes {
    
}

// This segment is used to convey the merchant information
export interface CompanyInformationType_154718S1 {
    
    $attributes: CompanyInformationType_154718S1Attributes
    
    // This data element is used to convey the company code of a company Ex: AF for Air France MIL for millenium foundation
    companyCode: string
    
    // This data element is used to convey the numeric merchant ID.
    companyNumericCode: Array<string>
    
}

export interface CompanyInformationType_154718S1Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_190206S1 {
    
    $attributes: MonetaryInformationType_190206S1Attributes
    
    // Contains the currencies and the various amounts
    monetaryDetails: MonetaryInformationDetailsType_266075C1
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType_266075C1>
    
}

export interface MonetaryInformationType_190206S1Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_266075C1 {
    
    $attributes: MonetaryInformationDetailsType_266075C1Attributes
    
    // Here is the list and the purpose of each amount today stored in the FP: I Transaction total amount Total amount authorized in authorization transaction IPC Transaction total amount in PNR currency Total amount authorized is also stored in PNR currency. Indeed, reversal must be done with the rate of exchange valid at time of authorization and therefore this avoids storing the rate of exchange and performing amount conversion at reversal time. IT Initial TST total amount Amount of TST multiplied by the number of passengers associated to the TST ITC Initial TST total amount in PNR currency IT amount in PNR currency for same reason as IPC amount R Total amount / Remaining amount Current authorized amount. Originally it is the total amount authorized and then this amount may decrease in case of total/partial reversal. T Initial Tst Individual amount Amount of TST TPC Initial Tst Individual amount in PNR currency Amount of TST in PNR currency for same reason as IPC amount AUT Authorized Amount Maybe different from the one given in input(for exple, if on input we have 2pax and the amount per pax. In case of bulk, we will authorize the sum of both amounts) It can also be used for: Total Fare Amount 712 or additional collection amount A
    typeQualifier: string
    
    // Value of the amount. This is conveyed as a &#39;string&#39; and therefore several strings can stand for the same amount (eg. 14 , 1400, 14.00... could potentially stand for 14.00 EUR). This means that sender/receiver of this message will need to come to an agreement concerning the way the amount is transferred in this segment.
    amount: number
    
    // IATA alphabetic currency code. Eg: USD,GBP,EUR...
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsType_266075C1Attributes {
    
}


export interface currenciesRatesGroupType1 {
    
    $attributes: currenciesRatesGroupType1Attributes
    
    
    currenciesExchangeRate: CurrenciesType1
    
    // used to defined if the currency rate is informative, proposed, applied etc...
    rateType: CodedAttributeType_190204S1
    
}

export interface currenciesRatesGroupType1Attributes {
    
}

// To specify currencies used in the transaction and relevant details for the rate of exchange.
export interface CurrenciesType1 {
    
    $attributes: CurrenciesType1Attributes
    
    
    firstCurrencyDetails: Array<CurrencyDetailsTypeU1>
    
    
    secondCurrencyDetails: Array<CurrencyDetailsTypeU1>
    
    
    exchangeRate: Array<number>
    
}

export interface CurrenciesType1Attributes {
    
}

// The usage to which a currency relates
export interface CurrencyDetailsTypeU1 {
    
    $attributes: CurrencyDetailsTypeU1Attributes
    
    
    currencyQualifier: string
    
    
    currencyIsoCode: Array<string>
    
    
    currencyType: Array<string>
    
    
    currencyRate: Array<number>
    
}

export interface CurrencyDetailsTypeU1Attributes {
    
}

// Information relative to slider conversion
export interface SliderConversionType1 {
    
    $attributes: SliderConversionType1Attributes
    
    // Miles and cash slider mode. One of the following: CVT Converter Mode SLD Slider Mode With possible option : CBF Convert Base Fare First
    sliderMode: StatusDetailsType_275596C1
    
    // Used to convey - Slider rank - number of positions possible on the slider
    sliderPosition: Array<NumberOfUnitDetailsType5>
    
}

export interface SliderConversionType1Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType_275596C1 {
    
    $attributes: StatusDetailsType_275596C1Attributes
    
    // Mode to use to perform conversion : - SLD slider mode - CVT converter mode
    indicator: string
    
    // Option to use to perform conversion : - CBF Convert Base Fare First
    type: Array<string>
    
}

export interface StatusDetailsType_275596C1Attributes {
    
}

// Identification of number of units and its purpose.
export interface NumberOfUnitDetailsType5 {
    
    $attributes: NumberOfUnitDetailsType5Attributes
    
    
    numberOfUnit: Array<number>
    
    
    unitQualifier: Array<string>
    
}

export interface NumberOfUnitDetailsType5Attributes {
    
}

// Payment record unique identifier
export interface ItemReferencesAndVersionsType12 {
    
    $attributes: ItemReferencesAndVersionsType12Attributes
    
    // qualifies the type of the reference used. Here it could be: PRI Payment Record Id APP Application Correlator Id EXT Third party Record Id ...
    referenceType: string
    
    // The value of the payment record/correlator Id
    uniqueReference: string
    
}

export interface ItemReferencesAndVersionsType12Attributes {
    
}

// To specify a frequency and the time window in which it applies.
export interface FrequencyTypeU2 {
    
    $attributes: FrequencyTypeU2Attributes
    
    // extended payment characteristics
    extendedPaymentDetails: FrequencyDetailsTypeU2
    
}

export interface FrequencyTypeU2Attributes {
    
}

// To specify a frequency and the time window in which it applies
export interface FrequencyDetailsTypeU2 {
    
    $attributes: FrequencyDetailsTypeU2Attributes
    
    // Indicates number of instalments for the payment
    instalmentsNumber: number
    
    // Indicates frequency of instalments for the payment D daily M monthly W weekly
    instalmentsFrequency: Array<string>
    
    // Indicates when first instalment should take place
    instalmentsStartDate: Array<string>
    
    // indicates extended payment start date format
    instalmentsDatrDateFormat: Array<string>
    
}

export interface FrequencyDetailsTypeU2Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_154723S1 {
    
    $attributes: StructuredDateTimeInformationType_154723S1Attributes
    
    // This data element is used to provide the semantic of the date information provided. Examples : - GMT Transaction date - Local Transaction date ... Default being L local date and time
    businessSemantic: Array<string>
    
    // Convey date and/or time.
    dateTime: StructuredDateTimeType_220917C1
    
}

export interface StructuredDateTimeInformationType_154723S1Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_220917C1 {
    
    $attributes: StructuredDateTimeType_220917C1Attributes
    
    // Year number.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: number
    
    // Day number in the month ( begins to 1 )
    day: number
    
    // Hour between 0 and 23
    hour: Array<number>
    
    // Minutes between 0 and 59
    minutes: Array<number>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<number>
    
}

export interface StructuredDateTimeType_220917C1Attributes {
    
}

// To specify a pertinent quantity.
export interface QuantityType2 {
    
    $attributes: QuantityType2Attributes
    
    // To specify an appropriate quantity.
    quantityDetails: Array<QuantityDetailsTypeI4>
    
}

export interface QuantityType2Attributes {
    
}

// Quantity information in a transaction, qualified when relevant.
export interface QuantityDetailsTypeI4 {
    
    $attributes: QuantityDetailsTypeI4Attributes
    
    // it will be L for Life time period
    qualifier: string
    
    // duration expressed in Seconds during the consumer has to do the payment
    value: number
    
    // SEC for duration in seconds
    unit: string
    
}

export interface QuantityDetailsTypeI4Attributes {
    
}

// To specify information related to agent terminal
export interface TerminalIdentificationDescriptionType2 {
    
    $attributes: TerminalIdentificationDescriptionType2Attributes
    
    // Identification of the transaction initiator.
    terminalID: Array<string>
    
    // The distribution channel.
    distributionChannel: DistributionChannelType2
    
}

export interface TerminalIdentificationDescriptionType2Attributes {
    
}

// Distribution channel
export interface DistributionChannelType2 {
    
    $attributes: DistributionChannelType2Attributes
    
    // This field is used to indicate the type of channel used for authorization process: e-commerce (web / Internet), MOTO (Mail Order / telephone Order), Face to face ...) Example: 05 for API 0=MOTO (Mail Order / Telephone Order) 1=e-Commerce (Internet)
    distributionChannelField: number
    
    // Subgroup field.
    subGroup: Array<number>
    
    // Access Type.
    accessType: Array<number>
    
}

export interface DistributionChannelType2Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType10 {
    
    $attributes: ReferenceInfoType10Attributes
    
    // Reference details
    referenceDetails: Array<ReferencingDetailsType11>
    
    
    DummyNET: string
    
}

export interface ReferenceInfoType10Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType11 {
    
    $attributes: ReferencingDetailsType11Attributes
    
    // identifier
    type: Array<string>
    
    // fare component identifier
    value: Array<string>
    
}

export interface ReferencingDetailsType11Attributes {
    
}

// will convey all data needed to prevent the fraud on the payment
export interface FraudScreeningGroupType2 {
    
    $attributes: FraudScreeningGroupType2Attributes
    
    // This data element is used to indicate if risk management must be performed at authorization time: - Y means risk management data will be appended to author; - N means risk management data will not be appended;
    fraudScreening: StatusType_68675S1
    
    // this segment contains the IP address used in RMM (risk management module or fraud screening)
    ipAdress: Array<DeviceControlDetailsType2>
    
    // Merchant&#39;s website URL.
    merchantURL: Array<CommunicationContactType_154690S1>
    
    // will convey either the phone or the email adress of the payer
    payerPhoneOrEmail: Array<PhoneAndEmailAddressType_154728S1>
    
    // this segment contains the shopper session used in RMM (risk management module)
    shopperSession: Array<SystemDetailsInfoType4>
    
    // conveys information about payer LastName (surName) and FirstName (givenName)
    payerName: Array<TravellerInformationType_154732S1>
    
    // stores the payer date of birth
    payerDateOfBirth: Array<StructuredDateTimeInformationType_154730S1>
    
    // Information about the billing address (can be extracted from the AB PNR element)
    billingAddress: Array<AddressType7>
    
    // Used to store reference information on the payer for fraud screening purpose: social security number driving license information frequent flyer information
    formOfIdDetails: Array<ReferenceInfoType_154729S1>
    
    // Defines if the shopper is also a traveller or not.
    travelShopper: Array<StatusType7>
    
    // Details on the shopper: its customer ID reference, and if he successed to log on his account or not
    shopperDetails: Array<shopperDetailsType1>
    
    // Provide the security details: type and key for the fraud screening In case, a fraud partner uses different keys for its fraud screening, the group can be repeated 9 times.
    securityCode: Array<securityCodeType1>
    
}

export interface FraudScreeningGroupType2Attributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType_68675S1 {
    
    $attributes: StatusType_68675S1Attributes
    
    // will we perform the fraud screening ?
    statusInformation: StatusDetailsTypeI_107129C1
    
}

export interface StatusType_68675S1Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI_107129C1 {
    
    $attributes: StatusDetailsTypeI_107129C1Attributes
    
    // FRA for fraud screening
    indicator: string
    
    // This data element is used to indicate if risk management must be performed at authorization time: - Y means risk management data will be appended to author; - N means risk management data will not be appended;
    action: string
    
}

export interface StatusDetailsTypeI_107129C1Attributes {
    
}

// To specify control details for a device.
export interface DeviceControlDetailsType2 {
    
    $attributes: DeviceControlDetailsType2Attributes
    
    // Stores the identification of the device.
    deviceIdentification: Array<IdentificationNumberTypeI2>
    
}

export interface DeviceControlDetailsType2Attributes {
    
}

// Goods item identification number.
export interface IdentificationNumberTypeI2 {
    
    $attributes: IdentificationNumberTypeI2Attributes
    
    // will contain the IP adress of the shopper
    address: string
    
    // will contain IP for IP adress
    qualifier: string
    
}

export interface IdentificationNumberTypeI2Attributes {
    
}

// Describes communication channel
export interface CommunicationContactType_154690S1 {
    
    $attributes: CommunicationContactType_154690S1Attributes
    
    // Communication channel
    communication: CommunicationContactDetailsTypeU2
    
}

export interface CommunicationContactType_154690S1Attributes {
    
}

// Communication number of a department or employee in a specified channel.
export interface CommunicationContactDetailsTypeU2 {
    
    $attributes: CommunicationContactDetailsTypeU2Attributes
    
    // The communication address: an Url.
    internetAddress: string
    
    // will be AH for World Wide Web
    adressQualifier: string
    
}

export interface CommunicationContactDetailsTypeU2Attributes {
    
}

// To specify a phone or email address
export interface PhoneAndEmailAddressType_154728S1 {
    
    $attributes: PhoneAndEmailAddressType_154728S1Attributes
    
    // Phone or Email contact type
    phoneOrEmailType: string
    
    // Structured telephone number
    telephoneNumberDetails: Array<StructuredTelephoneNumberType_220921C1>
    
    // Email address
    emailAddress: Array<string>
    
}

export interface PhoneAndEmailAddressType_154728S1Attributes {
    
}


export interface StructuredTelephoneNumberType_220921C1 {
    
    $attributes: StructuredTelephoneNumberType_220921C1Attributes
    
    // Telephone number
    telephoneNumber: Array<string>
    
}

export interface StructuredTelephoneNumberType_220921C1Attributes {
    
}

// Used to specify a system
export interface SystemDetailsInfoType4 {
    
    $attributes: SystemDetailsInfoType4Attributes
    
    // LNIATA of the agent.
    workstationId: Array<string>
    
    // System delivering the shopper session ID
    deliveringSystem: Array<SystemDetailsTypeI4>
    
}

export interface SystemDetailsInfoType4Attributes {
    
}

// To identify by code or name and location the system that originates or delivers the message for a third party.
export interface SystemDetailsTypeI4 {
    
    $attributes: SystemDetailsTypeI4Attributes
    
    // will convey the name of the company ex: OPODO
    companyId: Array<string>
    
}

export interface SystemDetailsTypeI4Attributes {
    
}

// To specify a traveler and personal details relating to the traveler
export interface TravellerInformationType_154732S1 {
    
    $attributes: TravellerInformationType_154732S1Attributes
    
    // will convey the name of the pax
    ccHolderNameDetails: TravellerSurnameInformationType_220914C1
    
    // will convey the CC holder first name
    otherNameDetails: Array<TravellerDetailsTypeI7>
    
}

export interface TravellerInformationType_154732S1Attributes {
    
}


export interface TravellerSurnameInformationType_220914C1 {
    
    $attributes: TravellerSurnameInformationType_220914C1Attributes
    
    // Passenger name
    surname: string
    
}

export interface TravellerSurnameInformationType_220914C1Attributes {
    
}

// To identify the given/first name and the title of a traveller and the traveller type.
export interface TravellerDetailsTypeI7 {
    
    $attributes: TravellerDetailsTypeI7Attributes
    
    // passenger first name
    givenName: Array<string>
    
}

export interface TravellerDetailsTypeI7Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_154730S1 {
    
    $attributes: StructuredDateTimeInformationType_154730S1Attributes
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType_220922C1>
    
}

export interface StructuredDateTimeInformationType_154730S1Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_220922C1 {
    
    $attributes: StructuredDateTimeType_220922C1Attributes
    
    // Year number.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: Array<number>
    
    // Day number in the month ( begins to 1 )
    day: Array<number>
    
}

export interface StructuredDateTimeType_220922C1Attributes {
    
}

// To specify an address
export interface AddressType7 {
    
    $attributes: AddressType7Attributes
    
    // will convey the adress text
    addressDetails: Array<AddressDetailsTypeU4>
    
    // City name.
    city: Array<string>
    
    // postal identification code.
    zipCode: Array<string>
    
    // Country code. ISO 3166 code for the country
    countryCode: Array<string>
    
}

export interface AddressType7Attributes {
    
}

// To specify the details of an address.
export interface AddressDetailsTypeU4 {
    
    $attributes: AddressDetailsTypeU4Attributes
    
    // Address Format . Will be 5 unstructured
    format: string
    
    // Address Text. Any of the following address lines may start with a tag: Door number- Street- ExternalNumber- InternalNumber- County- Neighbourhood- State-
    line1: string
    
    
    line2: Array<string>
    
    
    line3: Array<string>
    
    
    line4: Array<string>
    
    
    line5: Array<string>
    
    
    line6: Array<string>
    
}

export interface AddressDetailsTypeU4Attributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_154729S1 {
    
    $attributes: ReferenceInfoType_154729S1Attributes
    
    // REFERENCING DETAILS
    referenceDetails: Array<ReferencingDetailsTypeI_107111C1>
    
}

export interface ReferenceInfoType_154729S1Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_107111C1 {
    
    $attributes: ReferencingDetailsTypeI_107111C1Attributes
    
    // ACQ for merchant&#39;s bank
    type: Array<string>
    
    // will contain the Id of the merchant&#39;s bank within the PSP First exmple: iDEAL
    value: Array<string>
    
}

export interface ReferencingDetailsTypeI_107111C1Attributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType7 {
    
    $attributes: StatusType7Attributes
    
    // STATUS DETAILS
    statusInformation: Array<StatusDetailsType6>
    
}

export interface StatusType7Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType6 {
    
    $attributes: StatusDetailsType6Attributes
    
    // Shopper has logged ot not logged on his account: YES / NO
    action: Array<string>
    
    // long free text
    description: Array<string>
    
}

export interface StatusDetailsType6Attributes {
    
}


export interface shopperDetailsType1 {
    
    $attributes: shopperDetailsType1Attributes
    
    // Account number of the shopper on the airline (in some cases, it could be the same as the frequent flyer number)
    shopperID: UserIdentificationType8
    
    // Defines if the shopper has been able to log on the airline&#39;s account or not
    shopperLogged: Array<StatusType7>
    
}

export interface shopperDetailsType1Attributes {
    
}

// This segment is used to identify a user.
export interface UserIdentificationType8 {
    
    $attributes: UserIdentificationType8Attributes
    
    // End-user
    originatorTypeCode: Array<string>
    
    // Customer ID
    originator: Array<string>
    
}

export interface UserIdentificationType8Attributes {
    
}


export interface securityCodeType1 {
    
    $attributes: securityCodeType1Attributes
    
    // Type of security used by the airline for the fraud screening. e.g.: Device Finger Print (DFP)
    securityType: SecurityScreeningType1
    
    // Security key provided for the fraud screening to Retail Decision, for example.
    securityKey: BinaryDataType_154733S1
    
}

export interface securityCodeType1Attributes {
    
}

// To identify Screening and Security details
export interface SecurityScreeningType1 {
    
    $attributes: SecurityScreeningType1Attributes
    
    // Security used for the fraud screening; e.g.: Device Finger Print
    screeningInstructions: Array<string>
    
}

export interface SecurityScreeningType1Attributes {
    
}

// to carry binary data within an Edifact segment
export interface BinaryDataType_154733S1 {
    
    $attributes: BinaryDataType_154733S1Attributes
    
    // Length of data stored in DataElem 114Z
    dataLength: number
    
    // type of the data B: Binary
    dataType: Array<string>
    
    // used to store binary data
    binaryData: string
    
}

export interface BinaryDataType_154733S1Attributes {
    
}

// will convey the status of the payment
export interface PaymentStatusGroupType1 {
    
    $attributes: PaymentStatusGroupType1Attributes
    
    // Will convey the status of the payment. If status is an Not OK then a GERR group will be present to describe more precisely the error. This field gives the type of status which can be in: - pre-validate - validate - update - etc... Several status can be stored at the same time. E.g. a PAY element in a PNR will store the pre-validate status and the validate status.
    paymentStatusInformation: ResponseAnalysisDetailsType_180157S1
    
    // Will convey the history of the statuses of the payment. This field gives the type of status which can be in: - pre-validate - validate - update - etc... Several status can be stored at the same time. E.g. a PAY element in a PNR will store the pre-validate status and the validate status.
    paymentStatusHistory: Array<ResponseAnalysisDetailsType_180157S1>
    
    // will convey the reason of the error that occured during the payment transaction
    paymentStatusError: Array<ErrorGroupType_87970G1>
    
    // will convey the value of the fraud screening checks done by the PSP/bank
    fraudScreeningResult: Array<MeasurementsType1>
    
}

export interface PaymentStatusGroupType1Attributes {
    
}

// To specify the type of query and the processing status associated with this response.
export interface ResponseAnalysisDetailsType_180157S1 {
    
    $attributes: ResponseAnalysisDetailsType_180157S1Attributes
    
    // Characteristic of the Payment Status. Exple : C Payment Created G Payment Got K Payment Captured D Payment Deleted U Payment Updated V Payment Validated R Payment Refund S Payment Reversed W Payment with Web redirection
    responseType: string
    
    // will be OK or NOK. In the case of NOK, the GERR will epxlain precisely the nature of the failure
    statusCode: string
    
}

export interface ResponseAnalysisDetailsType_180157S1Attributes {
    
}

// To specify Physical Measurements.
export interface MeasurementsType1 {
    
    $attributes: MeasurementsType1Attributes
    
    // defines the type of the given measure will be FRA in our case
    measurementQualifier: Array<string>
    
    // Details on Fraud screening result
    measurementDetails: Array<MeasurementDetailsTypeI1>
    
    // will convey the result of the fraud screening process on the PSP/bank side : will look like 300 Points
    valueRange: Array<ValueRangeTypeI2>
    
    
    surfaceLayerIndicator: Array<string>
    
}

export interface MeasurementsType1Attributes {
    
}

// Identification of measurement type.
export interface MeasurementDetailsTypeI1 {
    
    $attributes: MeasurementDetailsTypeI1Attributes
    
    // Fraud screening result description. This data is set in accordance with the fraud score set by the airline. OK : Fraud screening result approved KO : Fraud screening result declined WRN : Fraud screening result Warning
    significance: Array<string>
    
}

export interface MeasurementDetailsTypeI1Attributes {
    
}

// Measurement value and relevant minimum and maximum tolerances in that order.
export interface ValueRangeTypeI2 {
    
    $attributes: ValueRangeTypeI2Attributes
    
    // will be P for points in our case.
    unit: string
    
    // This data element contains the value of the risk management score
    value: Array<number>
    
}

export interface ValueRangeTypeI2Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType9 {
    
    $attributes: CodedAttributeType9Attributes
    
    // Usage of this element will be the transport of the DescriptiveBilingInformation first value will be QF
    attributeFunction: string
    
    // provides details for the Attribute
    attributeDetails: Array<CodedAttributeInformationType_220870C>
    
}

export interface CodedAttributeType9Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_220870C {
    
    $attributes: CodedAttributeInformationType_220870CAttributes
    
    // will convey the following QF data: ONOD onoData Order Number(Qantas specific) GWTD gwtData Government Warrant number(Qantas specific) HOLDN ccHolderName Conveys the CN (company name) (Qantas specific).This has sense only in case of automatic creation of attribute record (cards is a bets card). In the other cases this information cannot be filled. ONOR onoRequired This ONO indicator indicates whether or not ONO data is mandatory.(Information provided by Qantas IGW link) This has sense only in case of automatic creation of attribute record (cards is a bets card) GWTR gwtRequired This GWT indicator indicates whether or not GWT data is mandatory.(Information provided by Qantas IGW link) This has sense only in case of automatic creation of attribute record (cards is a bets card) CIND cind Conveys CIND indicator : - MANU - AUTO This indicates whether attributes records have been created manually (no bets card) or automatically (bets card). BFAREC bestFareCandidate Conveys best fare indicator: - Yes - No This indicates whether or not the card is best fare candidate. (this implies card is a bets card)
    attributeType: string
    
    // onoData Order Number(Qantas specific) gwtData Government Warrant number ccHolderName Conveys the CN onoRequired YES - NO gwtRequired YES - NO cind MANU - AUTO bestFareCandidate YES - NO
    attributeDescription: string
    
}

export interface CodedAttributeInformationType_220870CAttributes {
    
}

// will convey Mean Of Payment specific data
export interface MeanOfPaymentDataType2 {
    
    $attributes: MeanOfPaymentDataType2Attributes
    
    // his segment will convey the type of the FOP. Exple : CC credit card CA cash CH cheque SWI swipe card WA web account WB web bank(fund tranfer)
    fopInformation: FormOfPaymentType_190169S1
    
    // will convey all data needed for the payment on the Web using fund transfers. First customer is iDEAL
    fundTransferData: Array<WebFundTransferGroupType1>
    
    // Group containing one Asynchronous FOP to validate.
    asyncDataGroup: Array<AsynchPaymentGroupType1>
    
    // will allow the usage of FOP segment as trigger for GASY and GINV groups
    dummy: DummySegmentTypeI8
    
    // Group containing one Invoice FOP to validate.
    invoiceDataGroup: Array<InvoiceFopGroupType1>
    
    // will convey all credit card data needed for the payment
    creditCardData: Array<CreditCardDataGroupType4>
    
    // will convey all data needed for a payment done on the web using an account
    webAccountData: Array<WebAccountGroupType1>
    
}

export interface MeanOfPaymentDataType2Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentType_190169S1 {
    
    $attributes: FormOfPaymentType_190169S1Attributes
    
    // Details on the form of payment
    formOfPayment: FormOfPaymentDetailsType_266040C1
    
}

export interface FormOfPaymentType_190169S1Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsType_266040C1 {
    
    $attributes: FormOfPaymentDetailsType_266040C1Attributes
    
    
    type: string
    
}

export interface FormOfPaymentDetailsType_266040C1Attributes {
    
}

// will convey all MOP specific data for Web Fund Transfer
export interface WebFundTransferGroupType1 {
    
    $attributes: WebFundTransferGroupType1Attributes
    
    // will convey the bankId of the customer
    issuerId: ReferenceInfoType_154679S1
    
    // will convey the name of the payment provider
    paymentProvider: CompanyInformationType4
    
}

export interface WebFundTransferGroupType1Attributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_154679S1 {
    
    $attributes: ReferenceInfoType_154679S1Attributes
    
    // REFERENCING DETAILS
    referenceDetails: ReferencingDetailsTypeI11
    
}

export interface ReferenceInfoType_154679S1Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI11 {
    
    $attributes: ReferencingDetailsTypeI11Attributes
    
    // nature of the bank id. Here: CUS for customer bank
    type: string
    
    // Id of the issuing bank.
    value: string
    
}

export interface ReferencingDetailsTypeI11Attributes {
    
}

// This segment is used to convey the company information
export interface CompanyInformationType4 {
    
    $attributes: CompanyInformationType4Attributes
    
    // This data element is used to convey the company name of a company IDEAL PAYPAL ...
    companyName: string
    
}

export interface CompanyInformationType4Attributes {
    
}


export interface AsynchPaymentGroupType1 {
    
    $attributes: AsynchPaymentGroupType1Attributes
    
    // Stores account number and expiry date
    asunchronousPaymentDetails: FormOfPaymentTypeI_69625S1
    
}

export interface AsynchPaymentGroupType1Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentTypeI_69625S1 {
    
    $attributes: FormOfPaymentTypeI_69625S1Attributes
    
    // Stores account number and expiry date
    formOfPayment: FormOfPaymentDetailsTypeI_66014C1
    
}

export interface FormOfPaymentTypeI_69625S1Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsTypeI_66014C1 {
    
    $attributes: FormOfPaymentDetailsTypeI_66014C1Attributes
    
    // asynchronous
    type: string
    
    // Indicates the service provider processing the asynchronous FOP
    providerCode: Array<string>
    
    // Stores the asynchronous payment expiry date
    expiryDate: Array<string>
    
    // Stores the payer account number
    customerAccount: Array<string>
    
}

export interface FormOfPaymentDetailsTypeI_66014C1Attributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI8 {
    
    $attributes: DummySegmentTypeI8Attributes
    
}

export interface DummySegmentTypeI8Attributes {
    
}

// Represents Invoice fop to validate.
export interface InvoiceFopGroupType1 {
    
    $attributes: InvoiceFopGroupType1Attributes
    
    // Account, Transaction and Financial data.
    invoiceInformation: FormOfPaymentTypeI6
    
    // internal information, contains the provider and product type to be routed to. IE : LH / Prisa LH / Staff OS / Prisa
    routing: RoutingInformationTypeI3
    
    // Stores award code and I/U qualifier
    iruQualifier: Array<StatusType_68646S1>
    
    // This group is used to convey the FOP(s) type used with IRU FOP
    fopInformationGroup: Array<fopInformationGroupType1>
    
    // Used to add data related to FOP Account
    accountSupplementaryData: Array<AttributeType8>
    
    // PNR reference information
    bookingReference: Array<ReservationControlInformationType5>
    
    // In case of Ticketing follow up transactions (Refund/exchange/...) : information on ticket being processed.
    parentTicketGroup: Array<parentTicketGroupType1>
    
    // Element used to convey specific rules to be applied on the method of payment.
    ruleList: Array<ruleListType1>
    
}

export interface InvoiceFopGroupType1Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentTypeI6 {
    
    $attributes: FormOfPaymentTypeI6Attributes
    
    // Contains the Account data, the transaction data and financial data
    formOfPayment: FormOfPaymentDetailsTypeI_198021C1
    
    // Contains the Account data, the transaction data and financial data
    otherFormOfPayment: Array<FormOfPaymentDetailsTypeI_198021C1>
    
}

export interface FormOfPaymentTypeI6Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsTypeI_198021C1 {
    
    $attributes: FormOfPaymentDetailsTypeI_198021C1Attributes
    
    // FOP code taken from the FP elem in PNR (ie for PRISA : INV, INVAGT, INVIDA, INVBARTER, INVNAGT, INVGSA)
    type: string
    
    // Issue indicator : &#39;C&#39; -) collective invoice
    indicator: Array<string>
    
    // Airline code in case of IRU FOP
    merchantCode: Array<string>
    
    
    expiryDate: Array<string>
    
    // Contains the account number.
    customerAccount: string
    
    // Account type identifier : 1 -) customer 2 -) airline office ECL -) E-CreditLine IRU -) Frequent Flyer account
    membershipStatus: string
    
    // Transaction identifier
    transactionInfo: Array<string>
    
    // stores a pin code attached to the account (IRU MOP)
    pinCode: Array<string>
    
    // Details pin code type (in case of encrypted pin code)
    pinCodeType: Array<string>
    
}

export interface FormOfPaymentDetailsTypeI_198021C1Attributes {
    
}

// To provide routing information.
export interface RoutingInformationTypeI3 {
    
    $attributes: RoutingInformationTypeI3Attributes
    
    // Routing details
    routingDetails: ProductLocationDetailsTypeI3
    
}

export interface RoutingInformationTypeI3Attributes {
    
}

// To indicate a location and the type of location.
export interface ProductLocationDetailsTypeI3 {
    
    $attributes: ProductLocationDetailsTypeI3Attributes
    
    // product EBANK
    otherStation: string
    
}

export interface ProductLocationDetailsTypeI3Attributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType_68646S1 {
    
    $attributes: StatusType_68646S1Attributes
    
    // STATUS DETAILS
    statusInformation: Array<StatusDetailsTypeI5>
    
    
    DummyNET: string
    
}

export interface StatusType_68646S1Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI5 {
    
    $attributes: StatusDetailsTypeI5Attributes
    
    // Will define to content of the validation done with the payment provider on the web : PPP Paypal Payment express checkout or UATP express checkout. In the case of UATP we can also want to perform the authorisation of the credit card payment automatically EXP Express Checkout Or TPC UATP express checkout AUT Credit Card authorisation
    indicator: string
    
    // Will be N No or Y Yes
    action: string
    
    // description
    description: string
    
}

export interface StatusDetailsTypeI5Attributes {
    
}


export interface fopInformationGroupType1 {
    
    $attributes: fopInformationGroupType1Attributes
    
    // This segment is used to convey information on other FOP used with IRU one.
    fopInformation: TicketingFormOfPaymentType_87806S1
    
    // Amount paid by other FOP
    fopInformationAmount: MonetaryInformationType_87804S1
    
}

export interface fopInformationGroupType1Attributes {
    
}

// To convey details describing the form of payment and not found in the FOP segment
export interface TicketingFormOfPaymentType_87806S1 {
    
    $attributes: TicketingFormOfPaymentType_87806S1Attributes
    
    // Form of payment details
    fopDetails: Array<FormOfPaymentInformationType2>
    
}

export interface TicketingFormOfPaymentType_87806S1Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_87804S1 {
    
    $attributes: MonetaryInformationType_87804S1Attributes
    
    // monertary details
    monetaryDetails: MonetaryInformationDetailsTypeI9
    
}

export interface MonetaryInformationType_87804S1Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI9 {
    
    $attributes: MonetaryInformationDetailsTypeI9Attributes
    
    // amount qualifier of associated FOP: I : transaction total amount
    typeQualifier: string
    
    // amount
    amount: Array<string>
    
    // currency
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI9Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType8 {
    
    $attributes: AttributeType8Attributes
    
    // Type of Data related to FOP account, ex: ACC = account info
    criteriaSetType: Array<string>
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU6>
    
}

export interface AttributeType8Attributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationType5 {
    
    $attributes: ReservationControlInformationType5Attributes
    
    // PNR reference information
    reservation: ReservationControlInformationDetailsType3
    
}

export interface ReservationControlInformationType5Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsType3 {
    
    $attributes: ReservationControlInformationDetailsType3Attributes
    
    // Company Id
    companyId: Array<string>
    
    // PNR value
    controlNumber: Array<string>
    
    // Type
    controlType: Array<string>
    
    // original booking type.
    bfeType: Array<string>
    
}

export interface ReservationControlInformationDetailsType3Attributes {
    
}


export interface parentTicketGroupType1 {
    
    $attributes: parentTicketGroupType1Attributes
    
    // Can convey the edoc number or the primary ticket number
    documentNumber: TicketNumberType3
    
    // will convey all the monetary informations related to the payment : amount, currency, sub-amounts
    monetaryInformation: Array<MonetaryInformationType7>
    
    // Details of taxes: - old/new/refundable (O/X/R) taxes indicator - currency - tax amount - iso tax code - nature tax code We can have 198 taxes maximum: - 99 old and new - + 99 refundable
    taxInformation: Array<TaxType7>
    
    // This group is used to convey conjuntive tickets information.
    conjunctiveTicketGroup: Array<conjunctiveTicketGroupType1>
    
    // Office id and the sign of the originator
    originatorInfo: Array<OriginatorOfRequestDetailsTypeI1>
    
    // contains information on the PNR record locator involved in the payment
    eDocrecordLocator: Array<ReservationControlInformationType_167717S1>
    
    // Passenger Name and Surname
    recipientNameSurname: Array<TravellerInformationType4>
    
    // Frequent Flyer Number
    frequentFlyerNumber: Array<FrequentTravellerVerificationType2>
    
    // Ticket expiry and issuance date
    dates: Array<StructuredDateTimeInformationType4>
    
    // additional comments or print information
    additionalInformation: Array<FreeTextInformationType9>
    
    // Element used to convey fare component associations
    fareComponentDetails: Array<fareComponentDetailsType1>
    
    // Conveys data about the coupons contained in the unused ticket
    unusedTicketCoupons: Array<unusedTicketCouponsType1>
    
    // In case of Ticketing follow up transactions (Refund/exchange/...) : informative Form Of Payment used on ticket being processed.
    fopParentTicketGroup: Array<fopParentTicketGroupType1>
    
}

export interface parentTicketGroupType1Attributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberType3 {
    
    $attributes: TicketNumberType3Attributes
    
    
    documentDetails: TicketNumberDetailsType2
    
    // provides ticket status
    status: Array<string>
    
}

export interface TicketNumberType3Attributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsType2 {
    
    $attributes: TicketNumberDetailsType2Attributes
    
    // provides ticket number
    number: Array<number>
    
    
    type: Array<string>
    
    
    numberOfBooklets: Array<number>
    
    
    dataIndicator: Array<string>
    
    
    requestNotification: Array<string>
    
    
    inConnectionWith: Array<number>
    
}

export interface TicketNumberDetailsType2Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType7 {
    
    $attributes: MonetaryInformationType7Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsType5
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType5>
    
}

export interface MonetaryInformationType7Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType5 {
    
    $attributes: MonetaryInformationDetailsType5Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType5Attributes {
    
}

// To specify details relating to tax(es).
export interface TaxType7 {
    
    $attributes: TaxType7Attributes
    
    // Tax category to distinct old from new taxes
    taxCategory: Array<string>
    
    // Details of tax
    taxDetails: Array<TaxDetailsType4>
    
}

export interface TaxType7Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsType4 {
    
    $attributes: TaxDetailsType4Attributes
    
    // Tax amount
    rate: Array<string>
    
    // ISO tax code
    countryCode: Array<string>
    
    // Currency code
    currencyCode: Array<string>
    
    // Nature tax code
    type: Array<string>
    
}

export interface TaxDetailsType4Attributes {
    
}


export interface conjunctiveTicketGroupType1 {
    
    $attributes: conjunctiveTicketGroupType1Attributes
    
    // Element used to activate conjunctive ticket data.
    conjunctiveFlag: StatusType_141910S1
    
    // Conjunctive ticket number.
    conjunctiveDocumentNumber: TicketNumberType3
    
    // Conveys data about the coupon.
    couponStatus: Array<CouponInformationTypeI2>
    
}

export interface conjunctiveTicketGroupType1Attributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType_141910S1 {
    
    $attributes: StatusType_141910S1Attributes
    
    // STATUS DETAILS
    statusInformation: Array<StatusDetailsType_205625C1>
    
}

export interface StatusType_141910S1Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType_205625C1 {
    
    $attributes: StatusDetailsType_205625C1Attributes
    
    // list of status/qualifiers Either His for Historical or Crt for Current
    indicator: Array<string>
    
    
    action: Array<string>
    
    
    type: Array<string>
    
    
    description: Array<string>
    
}

export interface StatusDetailsType_205625C1Attributes {
    
}

// To identify data specific to a value (flight) coupon.
export interface CouponInformationTypeI2 {
    
    $attributes: CouponInformationTypeI2Attributes
    
    // Conveys coupon details
    couponDetails: CouponInformationDetailsTypeI2
    
    
    otherCouponDetails: Array<CouponInformationDetailsTypeI2>
    
}

export interface CouponInformationTypeI2Attributes {
    
}

// To specify the coupon number, status, value, and other related information.
export interface CouponInformationDetailsTypeI2 {
    
    $attributes: CouponInformationDetailsTypeI2Attributes
    
    // Conveys coupon number
    cpnNumber: number
    
    // Conveys coupon status
    cpnStatus: Array<string>
    
    // segment tattoo associated to this coupon
    cpnSequenceNumber: number
    
}

export interface CouponInformationDetailsTypeI2Attributes {
    
}

// To specify the point of sale details.
export interface OriginatorOfRequestDetailsTypeI1 {
    
    $attributes: OriginatorOfRequestDetailsTypeI1Attributes
    
    // Used to specify the originator System
    deliveringSystem: SystemDetailsTypeI_2502C1
    
    // Originator Identification Details
    originIdentification: OriginatorIdentificationDetailsTypeI10
    
    // Details of the location
    locationDetails: Array<LocationTypeI10>
    
    // System Details - Used when cascading
    cascadingSystem: Array<SystemDetailsTypeI_2502C1>
    
    // Originator Type Code. A for airline agent. T for travel Agent. E for internet.
    originatorTypeCode: Array<string>
    
    // Details on the originator
    originDetails: Array<OriginatorDetailsTypeI4>
    
    // Authority code of the requester (Area Code)+(Numeric Sine)+(Agent Initials)+(Duty Code) ex : B0001XVSU).
    originator: Array<string>
    
    // Identifier of the workstation (such as the NNLNIATA)
    communicationNumber: Array<string>
    
    // Group identification
    partyIdentification: Array<string>
    
}

export interface OriginatorOfRequestDetailsTypeI1Attributes {
    
}

// To identify by code or name and location the system that originates or delivers the message for a third party.
export interface SystemDetailsTypeI_2502C1 {
    
    $attributes: SystemDetailsTypeI_2502C1Attributes
    
    // 2-3 characters airline/CRS code, or bilaterally agreed code, of the system that originates the message when different from the originating system.
    companyId: string
    
    // 3 characters ATA/IATA airport/city code of the originating system.
    locationId: Array<string>
    
    // Location of the originating system.
    location: Array<string>
    
}

export interface SystemDetailsTypeI_2502C1Attributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI10 {
    
    $attributes: OriginatorIdentificationDetailsTypeI10Attributes
    
    // ATA/IATA Id number or pseudo IATA number or ERSP.
    originatorId: Array<number>
    
    // First In-House Identifier. Office/Agency code assigned by the reservation system. Office Id in AMAdeus.
    inHouseIdentification1: Array<string>
    
    // Second In-House Identifier.
    inHouseIdentification2: Array<string>
    
    // Third in-house identifier
    inHouseIdentification3: Array<string>
    
}

export interface OriginatorIdentificationDetailsTypeI10Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI10 {
    
    $attributes: LocationTypeI10Attributes
    
    
    trueLocationId: Array<string>
    
    
    trueLocation: Array<string>
    
}

export interface LocationTypeI10Attributes {
    
}

// Characteristics of the originator of a request.
export interface OriginatorDetailsTypeI4 {
    
    $attributes: OriginatorDetailsTypeI4Attributes
    
    // ISO country code of the agent.
    codedCountry: Array<string>
    
    // ISO currency code.
    codedCurrency: Array<string>
    
    // ISO code of language.
    codedLanguage: Array<string>
    
}

export interface OriginatorDetailsTypeI4Attributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationType_167717S1 {
    
    $attributes: ReservationControlInformationType_167717S1Attributes
    
    // Reservation number
    reservation: ReservationControlInformationDetailsType_220877C1
    
}

export interface ReservationControlInformationType_167717S1Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsType_220877C1 {
    
    $attributes: ReservationControlInformationDetailsType_220877C1Attributes
    
    
    companyId: Array<string>
    
    
    controlNumber: Array<string>
    
    
    controlType: Array<string>
    
    
    date: Array<string>
    
    
    time: Array<number>
    
    
    bfeType: Array<string>
    
}

export interface ReservationControlInformationDetailsType_220877C1Attributes {
    
}

// To specify a traveler and personal details relating to the traveler
export interface TravellerInformationType4 {
    
    $attributes: TravellerInformationType4Attributes
    
    // passenger type code
    paxDetails: Array<TravellerSurnameInformationType3>
    
    // passenger type
    otherPaxDetails: Array<TravellerDetailsType7>
    
}

export interface TravellerInformationType4Attributes {
    
}


export interface TravellerSurnameInformationType3 {
    
    $attributes: TravellerSurnameInformationType3Attributes
    
    // Passenger name
    surname: Array<string>
    
    // PAX = PAX IN = Infant
    type: Array<string>
    
    
    quantity: Array<number>
    
    
    gender: Array<string>
    
}

export interface TravellerSurnameInformationType3Attributes {
    
}

// To identify the given/first name and the title of a traveller and the traveller type.
export interface TravellerDetailsType7 {
    
    $attributes: TravellerDetailsType7Attributes
    
    
    givenName: Array<string>
    
    // Passenger type (PTC)
    type: Array<string>
    
    
    uniqueCustomerIdentifier: Array<string>
    
    
    infantIndicator: Array<string>
    
    
    title: Array<string>
    
    
    age: Array<number>
    
}

export interface TravellerDetailsType7Attributes {
    
}

// To provide frequent traveller information for mileage accrual and account updating.
export interface FrequentTravellerVerificationType2 {
    
    $attributes: FrequentTravellerVerificationType2Attributes
    
    
    actionRequest: string
    
    
    tier: Array<string>
    
    
    companyDetails: Array<CompanyIdentificationTypeI12>
    
    
    accountDetails: Array<ProductAccountDetailsType2>
    
    
    otherProductsDetails: Array<ProductAccountDetailsType2>
    
    
    dateDetails: Array<ValidDateInformationTypeI1>
    
    
    accountHolderDetails: Array<AccountHolderInformationTypeI1>
    
}

export interface FrequentTravellerVerificationType2Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI12 {
    
    $attributes: CompanyIdentificationTypeI12Attributes
    
    
    marketingCompany: Array<string>
    
    
    operatingCompany: Array<string>
    
    
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI12Attributes {
    
}

// To specify frequent traveller card information.
export interface ProductAccountDetailsType2 {
    
    $attributes: ProductAccountDetailsType2Attributes
    
    
    referenceType: Array<string>
    
    
    frequentTravellerId: Array<string>
    
    
    category: Array<string>
    
    
    sequenceNumber: Array<string>
    
    
    versionNumber: Array<string>
    
    
    rateClass: Array<string>
    
    
    approvalCode: Array<string>
    
}

export interface ProductAccountDetailsType2Attributes {
    
}

// To specify validity information.
export interface ValidDateInformationTypeI1 {
    
    $attributes: ValidDateInformationTypeI1Attributes
    
    
    firstDate: Array<string>
    
    
    secondDate: Array<string>
    
}

export interface ValidDateInformationTypeI1Attributes {
    
}

// To specify frequent traveller cardholder information.
export interface AccountHolderInformationTypeI1 {
    
    $attributes: AccountHolderInformationTypeI1Attributes
    
    
    surname: Array<string>
    
    
    givenName: Array<string>
    
    
    institution: Array<string>
    
}

export interface AccountHolderInformationTypeI1Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType4 {
    
    $attributes: StructuredDateTimeInformationType4Attributes
    
    
    businessSemantic: Array<string>
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType7>
    
}

export interface StructuredDateTimeInformationType4Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType7 {
    
    $attributes: StructuredDateTimeType7Attributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<number>
    
}

export interface StructuredDateTimeType7Attributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType9 {
    
    $attributes: FreeTextInformationType9Attributes
    
    
    freeTextDetails: FreeTextDetailsType_220880C1
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType9Attributes {
    
}


export interface FreeTextDetailsType_220880C1 {
    
    $attributes: FreeTextDetailsType_220880C1Attributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
    
    status: Array<string>
    
    
    companyId: Array<string>
    
    
    language: Array<string>
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType_220880C1Attributes {
    
}


export interface fareComponentDetailsType1 {
    
    $attributes: fareComponentDetailsType1Attributes
    
    // element used to convey fare component identifier
    fareComponentId: ReferenceInfoType10
    
    // Conveys data about the coupon.
    couponStatus: Array<CouponInformationType1>
    
    // Element used to convey fare component monetary information
    monetaryInformation: Array<MonetaryInformationType_192195S1>
    
}

export interface fareComponentDetailsType1Attributes {
    
}

// To identify data specific to a value (flight) coupon.
export interface CouponInformationType1 {
    
    $attributes: CouponInformationType1Attributes
    
    
    couponDetails: Array<CouponInformationDetailsType1>
    
    
    otherCouponDetails: Array<CouponInformationDetailsType1>
    
}

export interface CouponInformationType1Attributes {
    
}

// To specify the coupon number, status, value, and other related information.
export interface CouponInformationDetailsType1 {
    
    $attributes: CouponInformationDetailsType1Attributes
    
    
    cpnNumber: Array<string>
    
    
    cpnStatus: Array<string>
    
    
    cpnAmount: Array<string>
    
    
    cpnExchangeMedia: Array<string>
    
    
    settlementAuthorization: Array<string>
    
    
    voluntaryIndic: Array<string>
    
    
    cpnPreviousStatus: Array<string>
    
    
    cpnSequenceNumber: Array<string>
    
    
    cpnReferenceNumber: Array<string>
    
    
    cpnInConnectionWithQualifier: Array<string>
    
}

export interface CouponInformationDetailsType1Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_192195S1 {
    
    $attributes: MonetaryInformationType_192195S1Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsType5
    
}

export interface MonetaryInformationType_192195S1Attributes {
    
}


export interface unusedTicketCouponsType1 {
    
    $attributes: unusedTicketCouponsType1Attributes
    
    
    fareBasis: FareQualifierDetailsType4
    
    // Conveys information about the ticket flights
    flightInformation: Array<TravelProductInformationType4>
    
    // Conveys data about the coupon.
    couponStatus: Array<CouponInformationType1>
    
}

export interface unusedTicketCouponsType1Attributes {
    
}


export interface FareQualifierDetailsType4 {
    
    $attributes: FareQualifierDetailsType4Attributes
    
    
    movementType: Array<string>
    
    
    fareCategories: Array<FareCategoryCodesType2>
    
    
    fareDetails: Array<FareDetailsType5>
    
    
    additionalFareDetails: Array<AdditionalFareQualifierDetailsType1>
    
    
    discountDetails: Array<DiscountPenaltyInformationType4>
    
}

export interface FareQualifierDetailsType4Attributes {
    
}

// To designate non-system specific combinations of fare types.
export interface FareCategoryCodesType2 {
    
    $attributes: FareCategoryCodesType2Attributes
    
    
    fareType: string
    
    
    otherFareType: Array<string>
    
}

export interface FareCategoryCodesType2Attributes {
    
}


export interface FareDetailsType5 {
    
    $attributes: FareDetailsType5Attributes
    
    
    qualifier: Array<string>
    
    
    rate: Array<number>
    
    
    country: Array<string>
    
    
    fareCategory: Array<string>
    
}

export interface FareDetailsType5Attributes {
    
}

// To specify the fare basis and ticket designator codes.
export interface AdditionalFareQualifierDetailsType1 {
    
    $attributes: AdditionalFareQualifierDetailsType1Attributes
    
    
    rateClass: Array<string>
    
    
    commodityCategory: Array<string>
    
    
    pricingGroup: Array<string>
    
    
    secondRateClass: Array<string>
    
}

export interface AdditionalFareQualifierDetailsType1Attributes {
    
}


export interface DiscountPenaltyInformationType4 {
    
    $attributes: DiscountPenaltyInformationType4Attributes
    
    
    fareQualifier: Array<string>
    
    
    rateCategory: Array<string>
    
    
    amount: Array<number>
    
    
    percentage: Array<number>
    
}

export interface DiscountPenaltyInformationType4Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationType4 {
    
    $attributes: TravelProductInformationType4Attributes
    
    
    flightDate: Array<ProductDateTimeTypeI10>
    
    
    boardPointDetails: Array<LocationTypeI10>
    
    
    offpointDetails: Array<LocationTypeI10>
    
    
    companyDetails: Array<CompanyIdentificationTypeI12>
    
    
    flightIdentification: Array<ProductIdentificationDetailsType4>
    
    
    flightTypeDetails: Array<ProductTypeDetailsType8>
    
    
    itemNumber: Array<number>
    
    
    specialSegment: Array<string>
    
    
    marriageDetails: Array<MarriageControlDetailsTypeI3>
    
}

export interface TravelProductInformationType4Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI10 {
    
    $attributes: ProductDateTimeTypeI10Attributes
    
    
    departureDate: Array<string>
    
    
    departureTime: Array<string>
    
    
    arrivalDate: Array<string>
    
    
    arrivalTime: Array<string>
    
    
    dateVariation: Array<number>
    
}

export interface ProductDateTimeTypeI10Attributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsType4 {
    
    $attributes: ProductIdentificationDetailsType4Attributes
    
    
    flightNumber: Array<string>
    
    
    bookingClass: Array<string>
    
    
    operationalSuffix: Array<string>
    
    
    modifier: Array<string>
    
}

export interface ProductIdentificationDetailsType4Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType8 {
    
    $attributes: ProductTypeDetailsType8Attributes
    
    // indicates whether the flight is domestic or international
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsType8Attributes {
    
}

// To identify details concerning the marriage status of travel product.
export interface MarriageControlDetailsTypeI3 {
    
    $attributes: MarriageControlDetailsTypeI3Attributes
    
    
    relation: Array<string>
    
    
    marriageIdentifier: Array<number>
    
    
    lineNumber: Array<number>
    
    
    otherRelation: Array<string>
    
    
    carrierCode: Array<string>
    
}

export interface MarriageControlDetailsTypeI3Attributes {
    
}


export interface fopParentTicketGroupType1 {
    
    $attributes: fopParentTicketGroupType1Attributes
    
    // Will convey structured FOP information
    fopDetails: FormOfPaymentType2
    
    // will convey all the data related to the various codes used by the FOP package, billing, ETS...
    fopInformation: TicketingFormOfPaymentType2
    
    // will convey all the monetary informations related to the payment : amount, currency, sub-amounts
    monetaryInformation: Array<MonetaryInformationType7>
    
    // This segment conveys Old Form of Payment. Old FOP(s) are considered as one freeflow text even if there is more than one old form of payment. e.g.: FP O/CA+CCVI+/CH CA and CCVI are considered as freeflow text.
    oldFopFreeflow: Array<FreeTextInformationType9>
    
    // will convey the switches and data associated to the FOP table
    pnrSupplementaryData: Array<PNRSupplementaryDataType2>
    
}

export interface fopParentTicketGroupType1Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentType2 {
    
    $attributes: FormOfPaymentType2Attributes
    
    // Details on the form of payment
    formOfPayment: Array<FormOfPaymentDetailsType2>
    
}

export interface FormOfPaymentType2Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsType2 {
    
    $attributes: FormOfPaymentDetailsType2Attributes
    
    
    type: string
    
    // indicates wether the transaction is a credit or debit.
    indicator: Array<string>
    
    // provides the code of the vendor/carrier code
    vendorCode: Array<string>
    
    
    creditCardNumber: Array<string>
    
    // expiry date of the credit card
    expiryDate: Array<string>
    
    
    approvalCode: Array<string>
    
    
    sourceOfApproval: Array<string>
    
    
    addressVerification: Array<string>
    
    
    customerAccount: Array<string>
    
    
    extendedPayment: Array<string>
    
    
    fopFreeText: Array<string>
    
    
    membershipStatus: Array<string>
    
    
    transactionInfo: Array<string>
    
    // stores a pin code attached to the account
    pinCode: Array<string>
    
    // Details pin code type (in case of encrypted pin code)
    pinCodeType: Array<string>
    
}

export interface FormOfPaymentDetailsType2Attributes {
    
}

// To convey details describing the form of payment and not found in the FOP segment
export interface TicketingFormOfPaymentType2 {
    
    $attributes: TicketingFormOfPaymentType2Attributes
    
    // Form of payment details
    fopDetails: Array<FormOfPaymentInformationType_220881C1>
    
}

export interface TicketingFormOfPaymentType2Attributes {
    
}

// To convey informations related to the form of payment specific to reporting
export interface FormOfPaymentInformationType_220881C1 {
    
    $attributes: FormOfPaymentInformationType_220881C1Attributes
    
    // FOP code.
    fopCode: Array<string>
    
    // Fop is a old / new fop.
    fopStatus: Array<string>
    
}

export interface FormOfPaymentInformationType_220881C1Attributes {
    
}


export interface ruleListType1 {
    
    $attributes: ruleListType1Attributes
    
    // element used to identify the rule to be applied.
    ruleType: InformationTypeDataTypeU1
    
    // element used to convey date/time information
    dateDetails: Array<dateDetailsType1>
    
    // element used to convey passenger name association
    passengerDetails: Array<passengerDetailsType2>
    
    // element used to convey flight information.
    flightDetails: Array<flightDetailsType6>
    
    // element used to convey specific information.
    otherDetails: Array<StatusType_141910S1>
    
}

export interface ruleListType1Attributes {
    
}

// To indicate the category of data, the language, and the format of the data.
export interface InformationTypeDataTypeU1 {
    
    $attributes: InformationTypeDataTypeU1Attributes
    
    // Element used to convey rules data type.
    identification: Array<string>
    
}

export interface InformationTypeDataTypeU1Attributes {
    
}


export interface dateDetailsType1 {
    
    $attributes: dateDetailsType1Attributes
    
    // element used to convey date information.
    date: StructuredPeriodInformationType6
    
}

export interface dateDetailsType1Attributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType6 {
    
    $attributes: StructuredPeriodInformationType6Attributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - Exception dates
    businessSemantic: Array<string>
    
    // Indicate if the time is expressed in UTC or in local time mode ( Codes U and L ). In the last case, the time zone information can be provided in the composite C89K.
    timeMode: Array<string>
    
    // Convey the begin date/time of a period.
    beginDateTime: Array<StructuredDateTimeType7>
    
    // Convey the end date/time of a period.
    endDateTime: Array<StructuredDateTimeType7>
    
    // It is used with a period to give a restriction for days impacted. It permits for example to indicate on which days, a flight operates.
    frequency: Array<FrequencyType4>
    
    // Reference : IATA SSIM Appendix F If it is not provided, the time is considered to be given in UTC.
    timeZoneInfo: Array<TimeZoneIinformationType2>
    
}

export interface StructuredPeriodInformationType6Attributes {
    
}

// Give the days of the week involved for a period
export interface FrequencyType4 {
    
    $attributes: FrequencyType4Attributes
    
    // Indicate if the sequence number represents days of the week or days of the month.
    qualifier: string
    
    // Used to represent days of the week or days of the month. For week : 1 is monday and 7 is sunday. For month : 1 is the first day of the month.
    value: Array<string>
    
}

export interface FrequencyType4Attributes {
    
}

// Specify in which time zone, the information is provided
export interface TimeZoneIinformationType2 {
    
    $attributes: TimeZoneIinformationType2Attributes
    
    // ISO country Code See SSIM appendix F
    countryCode: string
    
    // Time zone code. See SSIM appendix F.
    code: Array<number>
    
    // Time zone suffix to complete the time zone code when necessary. See SSIM appendix F.
    suffix: Array<string>
    
}

export interface TimeZoneIinformationType2Attributes {
    
}


export interface passengerDetailsType2 {
    
    $attributes: passengerDetailsType2Attributes
    
    // Passenger Name and Surname
    recipientNameSurname: TravellerInformationType4
    
}

export interface passengerDetailsType2Attributes {
    
}


export interface flightDetailsType6 {
    
    $attributes: flightDetailsType6Attributes
    
    // Conveys information about the ticket flights
    flightInformation: TravelProductInformationType4
    
}

export interface flightDetailsType6Attributes {
    
}

// will convey all credit card data needed for payment
export interface CreditCardDataGroupType4 {
    
    $attributes: CreditCardDataGroupType4Attributes
    
    // will convey all the data related to the credit card
    creditCardDetails: CreditCardDataType4
    
    // will convey both the CVV and the Credit card number Ids stored in the fortknox Database
    fortknoxIds: Array<ReferenceInfoType_190166S1>
    
    // Contains card holder&#39;s address information.
    cardHolderAddress: Array<AddressType7>
    
    // This group will convey all parameters related to virtual credit card creation
    virtualCreditCardData: Array<virtualCreditCardDataType1>
    
}

export interface CreditCardDataGroupType4Attributes {
    
}

// specify credit card data for credit card authorization - USED IN CCVRQT
export interface CreditCardDataType4 {
    
    $attributes: CreditCardDataType4Attributes
    
    
    ccInfo: Array<CreditCardInformationType4>
    
}

export interface CreditCardDataType4Attributes {
    
}

// credit card info
export interface CreditCardInformationType4 {
    
    $attributes: CreditCardInformationType4Attributes
    
    // Vendor code (VI,CA,AX.)
    vendorCode: Array<string>
    
    // may contain CC sub Types. eg: Maestro or Solo cards
    vendorCodeSubType: Array<string>
    
    // Card number Card number
    cardNumber: Array<string>
    
    // Conveys the security ID of the Credit Card (CVV,CVV2), 3-4 digits stored on the back of the card
    securityId: Array<string>
    
    // Expiry date : format MMYY
    expiryDate: Array<string>
    
    // This field indicates the date the Credit Card was issued. This data is present in case of (UK) maestro cards.
    startDate: Array<string>
    
    // This field indicates the date the Credit Card will not be valid anymore This data is present in case of (UK) maestro cards. May be different from the expiry date
    endDate: Array<string>
    
    // Conveys Credit card holder&#39;s name, as written on the card
    ccHolderName: Array<string>
    
    // will contain the code of the bank that issued the credit card
    issuingBankName: Array<string>
    
    // CC country of issuance details
    cardCountryOfIssuance: Array<string>
    
    // This is the Credit Card Issue number. This represents the number of time a card has been issued. 1 is for the first time then in case of card renewal or card loss this issue number will be increased Today this is applicable to maestro cards.
    issueNumber: Array<number>
    
    // Will convey the full name of the institution that issued he credit card
    issuingBankLongName: Array<string>
    
    // Stores the CC track 1 information (base64 encoded)
    track1: Array<string>
    
    // Stores the CC track 2 information (base64 encoded)
    track2: Array<string>
    
    // Stores the CC track 3 information (base64 encoded)
    track3: Array<string>
    
    // Stores the CC pin code information
    pinCode: Array<string>
    
    // All the tracks of a swipe credit card are contained here as one block.
    rawTrackData: Array<string>
    
    // The tier level (gold, platinium, etc...) can be used for fraud or authorization processes.
    tierLevel: Array<string>
    
}

export interface CreditCardInformationType4Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType_190166S1 {
    
    $attributes: ReferenceInfoType_190166S1Attributes
    
    
    referenceDetails: ReferencingDetailsType_266037C1
    
}

export interface ReferenceInfoType_190166S1Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_266037C1 {
    
    $attributes: ReferencingDetailsType_266037C1Attributes
    
    // will store the type of the Id NOX or CVV
    type: string
    
    // value of the id
    value: string
    
}

export interface ReferencingDetailsType_266037C1Attributes {
    
}


export interface virtualCreditCardDataType1 {
    
    $attributes: virtualCreditCardDataType1Attributes
    
    
    virtualCreditCardParameters: VirtualCardParametersType1
    
    // Used to specify the optional(s) validity date(s) of the Virtual Credit Card
    validityDate: Array<StructuredPeriodInformationType_175598S1>
    
}

export interface virtualCreditCardDataType1Attributes {
    
}

// Specify parameters for virtual credit card creation
export interface VirtualCardParametersType1 {
    
    $attributes: VirtualCardParametersType1Attributes
    
    // This data composite is used to transmit parameters for Virtual Credit Card creation
    virtualCardInformation: Array<VirtualCardInformationType1>
    
}

export interface VirtualCardParametersType1Attributes {
    
}

// Specify parameters for virtual credit card creation
export interface VirtualCardInformationType1 {
    
    $attributes: VirtualCardInformationType1Attributes
    
    // Vendor code (VI,CA,AX.) In the context of Virtual Credit Card, contains the desired vendor of the virtualized card. If CA is entered, the Virtual Credit Card provided will be a Mastercard.
    vendorCode: Array<string>
    
    // To transmit to the Virtual Credit Card provider the desired number of authorizations allowed on the Virtual Credit Card
    maximumAuthorizations: Array<number>
    
    // To specify a currency restriction in the Virtual Credit Card context.
    currency: Array<string>
    
}

export interface VirtualCardInformationType1Attributes {
    
}

// This segment is designed to convey period in a structured way.
export interface StructuredPeriodInformationType_175598S1 {
    
    $attributes: StructuredPeriodInformationType_175598S1Attributes
    
    // Convey the begin date/time of a period.
    beginDateTime: Array<StructuredDateTimeType_247346C1>
    
    // Convey the end date/time of a period.
    endDateTime: Array<StructuredDateTimeType_247346C1>
    
}

export interface StructuredPeriodInformationType_175598S1Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_247346C1 {
    
    $attributes: StructuredDateTimeType_247346C1Attributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
    // Seconds between 0 and 59
    seconds: Array<string>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<string>
    
}

export interface StructuredDateTimeType_247346C1Attributes {
    
}

// will convey all web account related MOP data
export interface WebAccountGroupType1 {
    
    $attributes: WebAccountGroupType1Attributes
    
    // Customer phone (Mandatory) BuyerEmail (Conditional) Email address of the buyer as entered during checkout. Exple: Paypal uses this value to pre fill the PayPal membership sign in portion of the Paypal login page
    webAccountSign: PhoneAndEmailAddressType4
    
    // will convey the name of the payment provider
    paymentProvider: CompanyInformationType4
    
}

export interface WebAccountGroupType1Attributes {
    
}

// To specify a phone or email address
export interface PhoneAndEmailAddressType4 {
    
    $attributes: PhoneAndEmailAddressType4Attributes
    
    // Phone contact type : 3 Business telephone number 4 Home telephone number 5 Telephone nature not known
    phoneOrEmailType: string
    
    // Structured telephone number
    telephoneNumberDetails: Array<StructuredTelephoneNumberType4>
    
    // Email of the buyer as entered during checkout. PayPal uses this value to pre-fill the Paypal membership sign-up portion of the Paypal login page.
    emailAddress: Array<string>
    
}

export interface PhoneAndEmailAddressType4Attributes {
    
}


export interface StructuredTelephoneNumberType4 {
    
    $attributes: StructuredTelephoneNumberType4Attributes
    
    // International dial code
    internationalDialCode: Array<string>
    
    // Local prefix code
    localPrefixCode: Array<string>
    
    // Area code
    areaCode: Array<string>
    
    // Telephone number
    telephoneNumber: string
    
}

export interface StructuredTelephoneNumberType4Attributes {
    
}

// will convey the Detailed Payment Data associated to a MOP
export interface DetailedPaymentDataType2 {
    
    $attributes: DetailedPaymentDataType2Attributes
    
    // This segment will convey the type of the FOP. Exple : CC credit card CA cash CH cheque WW web
    fopInformation: FormOfPaymentTypeI_68621S1
    
    // This group will convey the detailed data of the payment done on the Web using fund transfer. First customer : iDEAL
    fundTransferDetailledData: Array<DetailedWebFundTransferType1>
    
    // will convey the references of the payment done in the customer/airline accounts.
    asyncDetailledDataGroup: Array<AsynchPaymentStatusGroupType1>
    
    // will allow the usage of FOP segment as trigger for GASS and GIVR groups
    dummy: DummySegmentTypeI8
    
    // will convey the references of the payment done in the customer/airline accounts.
    invoiceDetailedDataGroup: Array<InvoiceValidationGroupType1>
    
    // This group will convey the detailed status of the credit card payment
    creditCardDetailedData: Array<CreditCardStatusGroupType2>
    
    // This group will convey the detailed data of the payment done via a web payment provider using accounts. First exple Paypal
    webAccountDetailledData: Array<WebAccountSuppDataGroupType1>
    
    // This group is used to transmit the Virtual Credit Card data received : number of the virtual credit card, expiry data, adress for AVS, cardholder name.
    virtualCreditCardStatusGroup: Array<virtualCreditCardStatusGroupType1>
    
}

export interface DetailedPaymentDataType2Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentTypeI_68621S1 {
    
    $attributes: FormOfPaymentTypeI_68621S1Attributes
    
    // Generic status(new/old) and type(cash, cheque, card...) of the MOP
    formOfPayment: FormOfPaymentDetailsTypeI6
    
}

export interface FormOfPaymentTypeI_68621S1Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsTypeI6 {
    
    $attributes: FormOfPaymentDetailsTypeI6Attributes
    
    // Generic type of the Mean of Payment used : CC credit Card CA cash CH cheque WW web payment... INV invoice
    type: string
    
}

export interface FormOfPaymentDetailsTypeI6Attributes {
    
}

// will convey all detailed payment data for web fund transfer
export interface DetailedWebFundTransferType1 {
    
    $attributes: DetailedWebFundTransferType1Attributes
    
    // will convey the language used by the merchant site
    merchantSiteLanguage: LanguageBatchTypeU1
    
    // will convey the merchant&#39;s website URL, in order for the PSP to know where to come back once payment authorisation has been done.
    returnURL: Array<CommunicationContactType_154707S1>
    
    // will convey the issuer&#39;s URL and the acquirer&#39;s id
    redirectionData: Array<redirectionDataType1>
    
    // in case of succesful transaction, it will convey consumer data: name, city and bank account number
    consumerData: Array<consumerDataType1>
    
    // Will give us the status of the transfer : SUCCESS CANCELLED EXPIRED FAILURE OPEN
    transferStatus: Array<ResponseAnalysisDetailsType_154708S1>
    
    // The group contains error codes and text returned when a problem occurred during the transaction.
    errorGroup: Array<PaymentErrorGroupType1>
    
}

export interface DetailedWebFundTransferType1Attributes {
    
}

// To specify a language.
export interface LanguageBatchTypeU1 {
    
    $attributes: LanguageBatchTypeU1Attributes
    
    // will be 6 for our case
    languageQualifier: string
    
    // ISO639-1 value of the language Dutch = nl
    languageDetails: LanguageDetailsBatchTypeU1
    
}

export interface LanguageBatchTypeU1Attributes {
    
}

// To identify a language.
export interface LanguageDetailsBatchTypeU1 {
    
    $attributes: LanguageDetailsBatchTypeU1Attributes
    
    // ISO639-1 value nl for Dutch
    languageCode: string
    
}

export interface LanguageDetailsBatchTypeU1Attributes {
    
}

// Describes communication channel
export interface CommunicationContactType_154707S1 {
    
    $attributes: CommunicationContactType_154707S1Attributes
    
    // Communication channel
    communication: CommunicationContactDetailsTypeU_107103C1
    
}

export interface CommunicationContactType_154707S1Attributes {
    
}

// Communication number of a department or employee in a specified channel.
export interface CommunicationContactDetailsTypeU_107103C1 {
    
    $attributes: CommunicationContactDetailsTypeU_107103C1Attributes
    
    // will contain the url described by the urlType
    urlAddress: string
    
    // URL Address: identifier possible value is: - R: return url
    urlType: string
    
}

export interface CommunicationContactDetailsTypeU_107103C1Attributes {
    
}


export interface redirectionDataType1 {
    
    $attributes: redirectionDataType1Attributes
    
    // Id of the merchant&#39;s bank
    acquirerId: ReferenceInfoType_154714S1
    
    // URL to which the customer will be redirected to
    issuerURLData: Array<CommunicationContactType_154713S1>
    
}

export interface redirectionDataType1Attributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_154714S1 {
    
    $attributes: ReferenceInfoType_154714S1Attributes
    
    // REFERENCING DETAILS
    referenceDetails: ReferencingDetailsTypeI_107111C1
    
}

export interface ReferenceInfoType_154714S1Attributes {
    
}

// Describes communication channel
export interface CommunicationContactType_154713S1 {
    
    $attributes: CommunicationContactType_154713S1Attributes
    
    // Communication channel
    communication: CommunicationContactDetailsTypeU_107110C1
    
}

export interface CommunicationContactType_154713S1Attributes {
    
}

// Communication number of a department or employee in a specified channel.
export interface CommunicationContactDetailsTypeU_107110C1 {
    
    $attributes: CommunicationContactDetailsTypeU_107110C1Attributes
    
    // will convey the url of the page to be redirected to
    url: string
    
    // will be AH for World Wide Web
    codeQualifier: string
    
}

export interface CommunicationContactDetailsTypeU_107110C1Attributes {
    
}


export interface consumerDataType1 {
    
    $attributes: consumerDataType1Attributes
    
    // will convey the name of the consumer
    consumerName: TravellerInformationType_154716S1
    
    // will convey the bank account of the consumer
    consumerAccount: ReferenceInfoType_154692S1
    
    // will convey the city of the customer
    consumerAddress: AddressType_68661S1
    
}

export interface consumerDataType1Attributes {
    
}

// To specify a traveler and personal details relating to the traveler
export interface TravellerInformationType_154716S1 {
    
    $attributes: TravellerInformationType_154716S1Attributes
    
    // name of the customer
    paxDetails: TravellerSurnameInformationType_220914C1
    
}

export interface TravellerInformationType_154716S1Attributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_154692S1 {
    
    $attributes: ReferenceInfoType_154692S1Attributes
    
    // REFERENCING DETAILS
    referenceDetails: ReferencingDetailsTypeI_107087C1
    
}

export interface ReferenceInfoType_154692S1Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI_107087C1 {
    
    $attributes: ReferencingDetailsTypeI_107087C1Attributes
    
    // will have the following values: XID Transaction identifier of the 3DS process CAAV authentication verification code for Visa AAV authentication verification code for MasterCard PAREQ authentication message PARES authentication response message
    value: string
    
}

export interface ReferencingDetailsTypeI_107087C1Attributes {
    
}

// To specify an address
export interface AddressType_68661S1 {
    
    $attributes: AddressType_68661S1Attributes
    
    // City name.
    city: string
    
}

export interface AddressType_68661S1Attributes {
    
}

// To specify the type of query and the processing status associated with this response.
export interface ResponseAnalysisDetailsType_154708S1 {
    
    $attributes: ResponseAnalysisDetailsType_154708S1Attributes
    
    // SUC Success. Payment is guaranteed CAN Cancelled. No payment has been made EXP Expired. No payment has been made FAI Failure. No reason about the payment failure OPE Open. Status not known, need to retry the enqiry
    statusCode: string
    
}

export interface ResponseAnalysisDetailsType_154708S1Attributes {
    
}

// will convey the error occuring during the transaction
export interface PaymentErrorGroupType1 {
    
    $attributes: PaymentErrorGroupType1Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType_154709S1
    
    // The description of warning or error.
    errorWarningDescription: Array<FreeTextInformationType_154688S1>
    
    // will convey supplementary information about the error, such as, proposal for reolution, cusotmized error message, validity of the retry possibility...
    errorSupplementaryData: Array<errorSupplementaryDataType1>
    
}

export interface PaymentErrorGroupType1Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType_154709S1 {
    
    $attributes: ApplicationErrorInformationType_154709S1Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType_220911C1
    
}

export interface ApplicationErrorInformationType_154709S1Attributes {
    
}


export interface ApplicationErrorDetailType_220911C1 {
    
    $attributes: ApplicationErrorDetailType_220911C1Attributes
    
    // error/warning message number identifying the error from the provider.
    errorCode: string
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: string
    
}

export interface ApplicationErrorDetailType_220911C1Attributes {
    
}


export interface errorSupplementaryDataType1 {
    
    $attributes: errorSupplementaryDataType1Attributes
    
    // will convey the following potential supplementary info : errorDetail suggestedAction consumerMessage
    errorSupplementaryMessages: AttributeType_154711S1
    
    // will convey the suggested expiration period : it indicates the maximum date/time of validity at the acquirer, so that the merchant can offer a new transaction. It is the remaining time until the start of unavailability less 4 min.
    expirationDate: Array<StructuredDateTimeInformationType_154712S1>
    
}

export interface errorSupplementaryDataType1Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_154711S1 {
    
    $attributes: AttributeType_154711S1Attributes
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU_107107C1>
    
}

export interface AttributeType_154711S1Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU_107107C1 {
    
    $attributes: AttributeInformationTypeU_107107C1Attributes
    
    // DET error Details SUG1 suggested action part 1 SUG2 suggested action part 2 CON1 consumer message part1 CON2 consumer message part2
    attributeType: string
    
    // will conatin the formatted error message
    attributeDescription: string
    
}

export interface AttributeInformationTypeU_107107C1Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_154712S1 {
    
    $attributes: StructuredDateTimeInformationType_154712S1Attributes
    
    // Convey date and/or time.
    dateTime: StructuredDateTimeType_220913C1
    
}

export interface StructuredDateTimeInformationType_154712S1Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_220913C1 {
    
    $attributes: StructuredDateTimeType_220913C1Attributes
    
    // Year number.
    year: number
    
    // Month number in the year ( begins to 1 )
    month: number
    
    // Day number in the month ( begins to 1 )
    day: number
    
    // Hour between 0 and 23
    hour: number
    
    // Minutes between 0 and 59
    minutes: number
    
    // Seconds between 0 and 59
    seconds: number
    
}

export interface StructuredDateTimeType_220913C1Attributes {
    
}


export interface AsynchPaymentStatusGroupType1 {
    
    $attributes: AsynchPaymentStatusGroupType1Attributes
    
    // Asynchronous Payment approval reference number
    approvalReferenceNumber: GenericAuthorisationResultType2
    
    // URL provided by bank/ PSP link in case of asynchronous payment.
    asyncPaymentUrl: Array<CommunicationContactType3>
    
}

export interface AsynchPaymentStatusGroupType1Attributes {
    
}

// will convey the approval data of the transaction
export interface GenericAuthorisationResultType2 {
    
    $attributes: GenericAuthorisationResultType2Attributes
    
    // transaction authorization approval data
    approvalCodeData: AuthorizationApprovalDataType2
    
}

export interface GenericAuthorisationResultType2Attributes {
    
}

// will convey the approval data
export interface AuthorizationApprovalDataType2 {
    
    $attributes: AuthorizationApprovalDataType2Attributes
    
    // will convey the value of the approval code of the payment authorisation
    approvalCode: string
    
    // Source of approval for the payment authorisation. A Automatically obtained by the system. M Manually entered by an agent.
    sourceOfApproval: Array<string>
    
}

export interface AuthorizationApprovalDataType2Attributes {
    
}

// Describes communication channel
export interface CommunicationContactType3 {
    
    $attributes: CommunicationContactType3Attributes
    
    // Communication channel
    communication: CommunicationContactDetailsType3
    
}

export interface CommunicationContactType3Attributes {
    
}

// Communication identifier such as URL address.
export interface CommunicationContactDetailsType3 {
    
    $attributes: CommunicationContactDetailsType3Attributes
    
    // url
    urlAddress: string
    
    // this type is used to identify the url : BO - Boleto FOP
    urlType: string
    
}

export interface CommunicationContactDetailsType3Attributes {
    
}

// References validation data of a INV Fop
export interface InvoiceValidationGroupType1 {
    
    $attributes: InvoiceValidationGroupType1Attributes
    
    // will convey the approval code/status of the transaction
    approvalCodeDetails: GenericAuthorisationResultType_154696S1
    
    // this document reference is generated during the account payment
    documentInformation: Array<DocumentInformationDetailsType1>
    
    // Element used to convey transaction status.
    transactionStatus: Array<ErrorGroupType_174783G1>
    
}

export interface InvoiceValidationGroupType1Attributes {
    
}

// Convey the approval data of the transaction
export interface GenericAuthorisationResultType_154696S1 {
    
    $attributes: GenericAuthorisationResultType_154696S1Attributes
    
    // transaction authorization approval data
    approvalCodeData: Array<AuthorizationApprovalDataType_220892C1>
    
}

export interface GenericAuthorisationResultType_154696S1Attributes {
    
}

// will convey the approval data
export interface AuthorizationApprovalDataType_220892C1 {
    
    $attributes: AuthorizationApprovalDataType_220892C1Attributes
    
    // will convey the value of the approval code of the payment authorisation
    approvalCode: string
    
    // Source of approval for the payment authorisation. A Automatically obtained by the system. M Manually entered by an agent.
    sourceOfApproval: Array<string>
    
}

export interface AuthorizationApprovalDataType_220892C1Attributes {
    
}

// To specify information concerning a document.
export interface DocumentInformationDetailsType1 {
    
    $attributes: DocumentInformationDetailsType1Attributes
    
    // Document information
    documentDetails: DocumentDetailsTypeI2
    
}

export interface DocumentInformationDetailsType1Attributes {
    
}

// Identification of document by number, status and date.
export interface DocumentDetailsTypeI2 {
    
    $attributes: DocumentDetailsTypeI2Attributes
    
    // Document number : correspond to invoice or credit note.
    number: string
    
}

export interface DocumentDetailsTypeI2Attributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType_174783G1 {
    
    $attributes: ErrorGroupType_174783G1Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType_154697S1
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType9>
    
}

export interface ErrorGroupType_174783G1Attributes {
    
}

// will convey all the detailed payment status related to credit Card
export interface CreditCardStatusGroupType2 {
    
    $attributes: CreditCardStatusGroupType2Attributes
    
    // This segment is used to store specific data of links following ISO8583 standard.
    authorisationSupplementaryData: SpecificVisaLinkCreditCardInformationType2
    
    // will convey the approval code/source
    approvalDetails: Array<GenericAuthorisationResultType_154683S1>
    
    // This segment conveys date and time information. You can specify the time mode used (GMT, UTC or Local)and what for it refers. - Transmission date and time This contains the date and time the request was submitted to the link (Visa, Nedbank...field 7). GMT can be used. - Local transaction date and time Date and time when Amadeus builds the authorization message (local according to the point of sale)(Visa, Nedbank...field 12/13) - Transaction receipt date and time date and time when amadeus receives the authorization message.
    localDateTime: Array<StructuredDateTimeInformationType_154684S1>
    
    // Transaction Information: - type of authorization message submit for the given FOP - bulk, superbulk, no bulk process - STAN number (identifying a pair of Credit Card authorization request/response).
    authorisationInformation: Array<TransactionInformationForTicketingType2>
    
    // This group contains all data about the customer&#39;s browser.
    browserData: Array<browserDataType2>
    
    // this group will convey all the 3DS related data
    tdsInformation: Array<ThreeDomainSecureGroupType2>
    
    // This will allow the transmission of credit card data.
    cardSupplementaryData: Array<AttributeType_154682S1>
    
    // will convey the various sub status that can be associated to a credit card payment CVV, AVS, AUT, ATN....
    transactionStatus: Array<ErrorGroupType4>
    
}

export interface CreditCardStatusGroupType2Attributes {
    
}

// To specify specific credit card information returned by VISA link only
export interface SpecificVisaLinkCreditCardInformationType2 {
    
    $attributes: SpecificVisaLinkCreditCardInformationType2Attributes
    
    // ISO8583 specific info
    msgRef: Array<MessageReferenceType2>
    
    // Response identification
    respIdentification: Array<ResponseIdentificationType2>
    
}

export interface SpecificVisaLinkCreditCardInformationType2Attributes {
    
}

// INFORMATION SPECIFIC TO VISA
export interface MessageReferenceType2 {
    
    $attributes: MessageReferenceType2Attributes
    
    // This number is used to identify and track ALL messages related to a given cardholder transaction (author, retry, reversal ...). It is usually composed of: - the date when the message was formatted followed by - the message number Field 37 Official definition of Retrieval Reference Number from ISO8583: Field 37 contains a number used with other key data elements to identify and track all messages related to a given cardholder transaction (referred to as a transaction set). It is usually assigned by the acquirer, but it may be assigned by a merchant or by an individual electronic terminal. V.I.P. will also generate the retrieval reference number for transactions it initiates. This field contains two parts. The first four digits are usually a yddd date (Julian date format). The date is defined to be the same day as the date in Field 7_Transmission Date and Time, of the original request. The last eight digits are a numeric transaction identification number. The value in field 37 can be based on the content of fields 7 and 11 in the original request or advice as shown in the recommendation below: . Positions 1_4: the yddd equivalent of the field 7 date . Positions 5_6: the hours from the time in field 7 . Positions 7_12: the value from field 11
    retrievalReferenceNumber: Array<string>
    
    // Authorization characteristics indicator Field 62.1 Possible values: A C E F K M S U V W R I P N T
    authorCharacteristicIndicator: Array<string>
    
    // Authorization response code Field 39
    authorResponseCode: Array<string>
    
    // Card Level Result (Product Identification value) Field 62.23
    cardLevelResult: Array<string>
    
    // Additional POS Information - Terminal Type Field 60.1 - Position 1 CAT (Cardholder-Activated Terminal indicator) or UAT (Unattended Acceptance Terminal)
    terminalType: Array<string>
    
}

export interface MessageReferenceType2Attributes {
    
}

// RESPONSE IDENTIFICATION
export interface ResponseIdentificationType2 {
    
    $attributes: ResponseIdentificationType2Attributes
    
    // Transaction identifier Field 62.2 Official definition: Visa-generated identifier that is unique for each original transaction. The transaction identifier (TID) is a key element that links original authorization requests to subsequent messages, such as reversals.
    transacIdentifier: Array<string>
    
    // Validation code Field 62.3
    validationCode: Array<string>
    
    // Gateway Transaction Identifier - Banknet reference number Field 62.17 - Position 8-13
    banknetRefNumber: Array<string>
    
    // Gateway Transaction Identifier - Banknet date in mmdd format Field 62.17 - Position 1-4
    banknetDate: Array<string>
    
}

export interface ResponseIdentificationType2Attributes {
    
}

// Convey the approval data of the transaction
export interface GenericAuthorisationResultType_154683S1 {
    
    $attributes: GenericAuthorisationResultType_154683S1Attributes
    
    // transaction authorization approval data
    approvalCodeData: AuthorizationApprovalDataType_220892C1
    
}

export interface GenericAuthorisationResultType_154683S1Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_154684S1 {
    
    $attributes: StructuredDateTimeInformationType_154684S1Attributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - LT : date and time corresponding to Authorization message built - T : date and time corresponding to Authorization message sent - AR : date and time corresponding to Authorization message receipt
    businessSemantic: Array<string>
    
    // Indicate if the time is expressed in UTC or in local time mode ( Codes U and L ). In the last case, the time zone information can be provided in the composite C89K.
    timeMode: Array<string>
    
    // Convey date and/or time.
    dateTime: StructuredDateTimeType_220893C1
    
    // Reference : IATA SSIM Appendix F If it is not provided, the time is considered to be given in UTC.
    timeZoneInfo: Array<TimeZoneIinformationType2>
    
}

export interface StructuredDateTimeInformationType_154684S1Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_220893C1 {
    
    $attributes: StructuredDateTimeType_220893C1Attributes
    
    // Year number.
    year: number
    
    // Month number in the year ( begins to 1 )
    month: number
    
    // Day number in the month ( begins to 1 )
    day: number
    
    // Hour between 0 and 23
    hour: Array<number>
    
    // Minutes between 0 and 59
    minutes: Array<number>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<number>
    
}

export interface StructuredDateTimeType_220893C1Attributes {
    
}

// to specify details relating to the transaction
export interface TransactionInformationForTicketingType2 {
    
    $attributes: TransactionInformationForTicketingType2Attributes
    
    // Authorisation transaction details
    transactionDetails: TransactionInformationsType2
    
}

export interface TransactionInformationForTicketingType2Attributes {
    
}

// To convey details related to the transaction
export interface TransactionInformationsType2 {
    
    $attributes: TransactionInformationsType2Attributes
    
    // Authorization message type Eg 110: author according standard ISO8583 210: settlement according standard ISO858 ...
    code: Array<string>
    
    // Credit Card link used to perform authorization.
    type: Array<string>
    
    // Process indicator (bulkIndicator): - bulk - superbulk - no bulk.
    issueIndicator: Array<string>
    
    // This is a message number that uniquely identifies a cardholder transaction. According to the link this info can have various names: - STAN number(Systems Trace Audit Number) - ISO8583 (VISA,Nedbank, Credit Mutuel...) - Message number - APACS70 (Barclays,Euroline...) ... Official definition: This is a number assigned by the message initiator that uniquely identifies a cardholder transaction and all the message types (also known as system transactions) that it comprises, according to individual program rules. The trace number remains unchanged for all messages throughout the life of the transaction. For example, the same trace number is used in an authorization request and response, and in a subsequent reversal request and response, and in any advices of authorization or reversal.
    transmissionControlNumber: Array<string>
    
}

export interface TransactionInformationsType2Attributes {
    
}


export interface browserDataType2 {
    
    $attributes: browserDataType2Attributes
    
    // This segment contains data about the customer&#39;s browser : 0 PC (HTML) 1 Mobile Internet Device (WML)
    browserProperties: BrowserInformationType2
    
    // Contains in freeflow format data about the customer&#39;s browser. - userAgent - acceptHeaders This entities are independantly optional.
    freeFlowBrowserData: Array<FreeTextInformationType_154694S1>
    
}

export interface browserDataType2Attributes {
    
}

// Conveys browser properties
export interface BrowserInformationType2 {
    
    $attributes: BrowserInformationType2Attributes
    
    // Indicates the type of cardholder device.
    deviceCategory: number
    
}

export interface BrowserInformationType2Attributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_154694S1 {
    
    $attributes: FreeTextInformationType_154694S1Attributes
    
    // will contain the browser information
    freeTextDetails: FreeTextDetailsType_220902C1
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType_154694S1Attributes {
    
}


export interface FreeTextDetailsType_220902C1 {
    
    $attributes: FreeTextDetailsType_220902C1Attributes
    
    // mutually defined ZZZ
    textSubjectQualifier: string
    
    // AH Browser Accept headers UA Browser User Agent
    informationType: string
    
    // Manual : M
    source: string
    
    // ZZZ mutually agreed
    encoding: string
    
}

export interface FreeTextDetailsType_220902C1Attributes {
    
}

// will convey various 3DS data
export interface ThreeDomainSecureGroupType2 {
    
    $attributes: ThreeDomainSecureGroupType2Attributes
    
    // This segment conveys a set of data resulting from the 3DS authentication process
    authenticationData: CreditCardSecurityType2
    
    // Access Control Server&#39;s URL (up to 2048 characters).
    acsURL: Array<CommunicationContactType_154690S1>
    
    // will convey the various messages/encrypted data used during the 3DS authentication processes
    tdsBlobData: Array<tdsBlobDataType2>
    
}

export interface ThreeDomainSecureGroupType2Attributes {
    
}

// Conveys data of the credit card authentication
export interface CreditCardSecurityType2 {
    
    $attributes: CreditCardSecurityType2Attributes
    
    // Conveys all data of authentication process. Only used today for &#34;Verified by Visa&#34; process
    authenticationDataDetails: Array<AuthenticationDataType2>
    
}

export interface CreditCardSecurityType2Attributes {
    
}

// Conveys CC authentication data
export interface AuthenticationDataType2 {
    
    $attributes: AuthenticationDataType2Attributes
    
    // VERes status (enrollment) Values : Y : authentication available N : cardholder not participating U : Unable to authenticate E : error message
    veres: Array<string>
    
    // PARes status (authentication). Values : Y : authentication successful N : authentication failed U : authentication could not be performed A : attempts processing performed
    pares: Array<string>
    
    // CC Directory Server performing the enrollment process: VISA, MasterCard
    creditCardCompany: string
    
    // To indicate whether the transaction was successful, different indicators for Visa/MasterCard. - ECI for VISA - UCAF collection indicator for Matercard
    authenticationIndicator: Array<string>
    
    // Indicates the algorithm used to generate the Cardholder Authentication Verification Value (CAAV = authentication code)
    caavAlgorithm: Array<number>
    
}

export interface AuthenticationDataType2Attributes {
    
}


export interface tdsBlobDataType2 {
    
    $attributes: tdsBlobDataType2Attributes
    
    // will identify the content of the BLB that follows
    tdsBlbIdentifier: ReferenceInfoType_154692S1
    
    
    tdsBlbData: BinaryDataType2
    
}

export interface tdsBlobDataType2Attributes {
    
}

// to carry binary data within an Edifact segment
export interface BinaryDataType2 {
    
    $attributes: BinaryDataType2Attributes
    
    // Length of the BLB
    dataLength: number
    
    // type of the data
    dataType: Array<string>
    
    // used to store binary data
    binaryData: string
    
}

export interface BinaryDataType2Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_154682S1 {
    
    $attributes: AttributeType_154682S1Attributes
    
    // Determines if the set of criteria corresponds to the message identification criteria or to normal criteria.
    criteriaSetType: Array<string>
    
    // List of attributes and status linked to credit card process. Most of them are link dependant.
    criteriaDetails: AttributeInformationTypeU6
    
}

export interface AttributeType_154682S1Attributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType4 {
    
    $attributes: ErrorGroupType4Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType9
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType_154688S1>
    
}

export interface ErrorGroupType4Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType9 {
    
    $attributes: ApplicationErrorInformationType9Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType_220899C1
    
}

export interface ApplicationErrorInformationType9Attributes {
    
}


export interface ApplicationErrorDetailType_220899C1 {
    
    $attributes: ApplicationErrorDetailType_220899C1Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: string
    
}

export interface ApplicationErrorDetailType_220899C1Attributes {
    
}

// will convey Web Account detailed payment data
export interface WebAccountSuppDataGroupType1 {
    
    $attributes: WebAccountSuppDataGroupType1Attributes
    
    // Will let us know if we are handling a Paypal payment process
    pspIndicator: StatusType_68646S1
    
    // This segment is used to convey virtual fake C.C. for Paypal.
    uatpCard: Array<CreditCardDataType4>
    
    // this segment will convey status on: - shipping - address override
    paypalParameters: Array<StatusType_84988S1>
    
    // It will convey the Psp&#39;s URL where the customer will be redirected to, in order to perform its payment Type will be PP Paypal url
    pspUrl: Array<CommunicationContactType_154699S1>
    
    // Customer shipping address -Name -Street1 -Street2 CityName, StateOrProvince PostalCode Country
    shippingAddress: Array<AddressType_68644S1>
    
    // Payer name returned by getExpressCheckoutDetails
    payerName: Array<TravellerInformationType_154701S1>
    
    // Stores account number for Web access payment
    accountNumber: Array<ReferenceInfoType_154700S1>
    
    // Will convey information about the web pages of the merchant
    merchantSiteDetails: Array<merchantSiteDetailsType1>
    
    // This group is used to convey paypal error information.
    errorDescription: Array<errorDescriptionType2>
    
}

export interface WebAccountSuppDataGroupType1Attributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType_84988S1 {
    
    $attributes: StatusType_84988S1Attributes
    
    // STATUS DETAILS
    statusInformation: StatusDetailsTypeI_129365C
    
}

export interface StatusType_84988S1Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI_129365C {
    
    $attributes: StatusDetailsTypeI_129365CAttributes
    
    // indicator selection : AO : address override NS : no shipping
    indicator: Array<string>
    
    
    action: Array<string>
    
}

export interface StatusDetailsTypeI_129365CAttributes {
    
}

// Describes communication channel
export interface CommunicationContactType_154699S1 {
    
    $attributes: CommunicationContactType_154699S1Attributes
    
    // Communication channel
    communication: CommunicationContactDetailsTypeU_129344C1
    
}

export interface CommunicationContactType_154699S1Attributes {
    
}

// Communication number of a department or employee in a specified channel.
export interface CommunicationContactDetailsTypeU_129344C1 {
    
    $attributes: CommunicationContactDetailsTypeU_129344C1Attributes
    
    // will contain the url described by the urlType
    urlAddress: string
    
    // URL Address: identifier possible values are: - R: return url - C: cancel url - U: customize url
    urlType: string
    
}

export interface CommunicationContactDetailsTypeU_129344C1Attributes {
    
}

// To specify an address
export interface AddressType_68644S1 {
    
    $attributes: AddressType_68644S1Attributes
    
    // Payer address usage
    addressUsageDetails: Array<AddressUsageTypeU2>
    
    // details of the payer address
    addressDetails: AddressDetailsTypeU4
    
    // City name.
    city: Array<string>
    
    // postal identification code.
    zipCode: Array<string>
    
    // To convey a sub-entity within a country : region, states..
    regionDetails: Array<CountrySubEntityDetailsTypeU4>
    
    // details of the shipping adress
    locationDetails: Array<LocationIdentificationTypeU4>
    
}

export interface AddressType_68644S1Attributes {
    
}

// To describe the usage of an address
export interface AddressUsageTypeU2 {
    
    $attributes: AddressUsageTypeU2Attributes
    
    // Status of the street adress on file with the payment provider(Paypal for eg)
    status: Array<string>
    
}

export interface AddressUsageTypeU2Attributes {
    
}

// To specify a part of a country (eg county or part of a city).
export interface CountrySubEntityDetailsTypeU4 {
    
    $attributes: CountrySubEntityDetailsTypeU4Attributes
    
    // specifies the type of the sub-entity : region - county ...
    code: Array<string>
    
    // name of the region
    name: Array<string>
    
}

export interface CountrySubEntityDetailsTypeU4Attributes {
    
}

// Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name. Identification of a location by code or name
export interface LocationIdentificationTypeU4 {
    
    $attributes: LocationIdentificationTypeU4Attributes
    
    // location name
    code: Array<string>
    
    // name of the location
    name: Array<string>
    
}

export interface LocationIdentificationTypeU4Attributes {
    
}

// To specify a traveler and personal details relating to the traveler
export interface TravellerInformationType_154701S1 {
    
    $attributes: TravellerInformationType_154701S1Attributes
    
    // payer surname and attributes
    paxDetails: TravellerSurnameInformationType_220907C1
    
    // will convey the supplementary data about payer stored in the PSP. For instance: Paypal Id, name,salutation
    otherPaxDetails: Array<TravellerDetailsTypeI_107098C1>
    
}

export interface TravellerInformationType_154701S1Attributes {
    
}


export interface TravellerSurnameInformationType_220907C1 {
    
    $attributes: TravellerSurnameInformationType_220907C1Attributes
    
    // Passenger name
    surname: string
    
    // Customer type: A=adult C=child IN = infant
    type: Array<string>
    
}

export interface TravellerSurnameInformationType_220907C1Attributes {
    
}

// To identify the given/first name and the title of a traveller and the traveller type.
export interface TravellerDetailsTypeI_107098C1 {
    
    $attributes: TravellerDetailsTypeI_107098C1Attributes
    
    // first name of the payer
    givenName: string
    
}

export interface TravellerDetailsTypeI_107098C1Attributes {
    
}

// To specify an association between references given to travellers, to products, to services
export interface ReferenceInfoType_154700S1 {
    
    $attributes: ReferenceInfoType_154700S1Attributes
    
    // Payer User ID (web account)
    payerAccountId: Array<ReferencingDetailsTypeI_107111C1>
    
}

export interface ReferenceInfoType_154700S1Attributes {
    
}


export interface merchantSiteDetailsType1 {
    
    $attributes: merchantSiteDetailsType1Attributes
    
    // Country code. Locale of pages displayed by Paypal during Express Checkout. Character length and limitations: Amy two char country code. The following two-chars are supported by PayPal: AT, AU, Be, CA, CH, CN, DE, ES, FR, GB, IT, NL, PL and US. Default is US.
    countryData: CountryInformationTypeU1
    
    // TXF convey personalized web page color (Color to customise PSP payment page), for this we need three info about the color. (The three colors will be in hexa decimal in ASCII format). Set the border and background for the psp payment page. 1)cpp-header-border-color: Sets the border color around the header of the payment page. The border is a 2-pixel perimeter around the header space which is 750 pixels wide by 90 pixels high. Character length and limitations: 6 characters HTLM hexadecimal color code in ASCII. 2)cpp-header-back-color: Sets the background color for the header of the payment page. Character length and limitations: 6 characters HTLM hexadecimal color code in ASCII 3)cpp-payflow-color: Sets the background color for the payment page. Character length and limitations: 6 characters HTLM hexadecimal color code in ASCII
    cppPspColor: Array<FreeTextInformationType_154703S1>
    
    // 1) ReturnURL URL to which the end-user&#39;s browser is returned after approving use of PayPal. The UI has to define all the needed parameters to the ReturnURL. 2) CancelURL URL to which the end-user is returned if he decides not to use PayPal or if PayPal is not able to authorize the end-user. The UI has to define all the needed parameters to the CancelURL. 3) cutomizeURL URL to which the end-user is returned if default paypal parameters are overridden.
    urls: Array<CommunicationContactType_154699S1>
    
}

export interface merchantSiteDetailsType1Attributes {
    
}

// To specify country and related information, i.e. date and time of summer or winter time transition and related time variation, currency and language(s).
export interface CountryInformationTypeU1 {
    
    $attributes: CountryInformationTypeU1Attributes
    
    // Country code. Locale of pages displayed by Paypal during Express Checkout. Character length and limitations: Amy two char country code. The following two-chars are supported by PayPal: AT, AU, Be, CA, CH, CN, DE, ES, FR, GB, IT, NL, PL and US. Default is US.
    countryNameCode: string
    
}

export interface CountryInformationTypeU1Attributes {
    
}


export interface errorDescriptionType2 {
    
    $attributes: errorDescriptionType2Attributes
    
    // This code identifies the Severity code types in terms of whether there is an API-level error or warning that needs to be communicated to the client.
    severityCodeType: ResponseAnalysisDetailsType2
    
    // will convey the error status of the payment : 2 error group per error : - long text Paypal - short text Paypal
    paymentError: Array<ErrorGroupType_174787G1>
    
}

export interface errorDescriptionType2Attributes {
    
}

// To specify the type of query and the processing status associated with this response.
export interface ResponseAnalysisDetailsType2 {
    
    $attributes: ResponseAnalysisDetailsType2Attributes
    
    // Severity desciption : E
    responseType: Array<string>
    
    // Error message severity status
    statusCode: string
    
}

export interface ResponseAnalysisDetailsType2Attributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType_174787G1 {
    
    $attributes: ErrorGroupType_174787G1Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType_154705S1
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType_154706S1>
    
}

export interface ErrorGroupType_174787G1Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType_154705S1 {
    
    $attributes: ApplicationErrorInformationType_154705S1Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType_220909C1
    
}

export interface ApplicationErrorInformationType_154705S1Attributes {
    
}


export interface ApplicationErrorDetailType_220909C1 {
    
    $attributes: ApplicationErrorDetailType_220909C1Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list. 1A Amadeus PP Paypal
    errorCodeOwner: string
    
}

export interface ApplicationErrorDetailType_220909C1Attributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType_154706S1 {
    
    $attributes: FreeTextInformationType_154706S1Attributes
    
    // Error description
    freeTextDetails: FreeTextDetailsType_220910C1
    
    // Free text and message sequence numbers of the remarks.
    freeText: string
    
}

export interface FreeTextInformationType_154706S1Attributes {
    
}


export interface FreeTextDetailsType_220910C1 {
    
    $attributes: FreeTextDetailsType_220910C1Attributes
    
    // literal text
    textSubjectQualifier: string
    
    // type of information: SHT : paypal short text LGT : paypal long text CAN : 1A canned message
    informationType: Array<string>
    
    // source
    source: string
    
    // encoding
    encoding: string
    
}

export interface FreeTextDetailsType_220910C1Attributes {
    
}


export interface virtualCreditCardStatusGroupType1 {
    
    $attributes: virtualCreditCardStatusGroupType1Attributes
    
    
    virtualCreditCardParameters: VirtualCardParametersType_175504S1
    
    // Contains the Virtual Credit Card Number, expiry date, CVV, vendor, holder name.
    virtualCreditCardData: Array<CreditCardDataType4>
    
    // will convey both the CVV and the Credit card number Ids stored in the fortknox Database
    fortknoxIds: Array<ReferenceInfoType_190166S1>
    
    // Contains the adress associated to the Virtual Credit Card for AVS verification
    vCCAssociatedAdress: Array<AddressType7>
    
}

export interface virtualCreditCardStatusGroupType1Attributes {
    
}

// Specify parameters for virtual credit card creation
export interface VirtualCardParametersType_175504S1 {
    
    $attributes: VirtualCardParametersType_175504S1Attributes
    
    // This data composite is used to transmit parameters for Virtual Credit Card creation
    virtualCardInformation: VirtualCardInformationType_247217C1
    
}

export interface VirtualCardParametersType_175504S1Attributes {
    
}

// Specify parameters for virtual credit card creation
export interface VirtualCardInformationType_247217C1 {
    
    $attributes: VirtualCardInformationType_247217C1Attributes
    
    // Vendor code (VI,CA,AX.) In the context of Virtual Credit Card, contains the desired vendor of the virtualized card. If CA is entered, the Virtual Credit Card provided will be a Mastercard.
    vendorCode: string
    
}

export interface VirtualCardInformationType_247217C1Attributes {
    
}


export interface Fare_GetFareFamilyDescriptionType {
    
    $attributes: Fare_GetFareFamilyDescriptionTypeAttributes
    
    // To request fare description that was defined on a given date.
    bookingDateInformation: Array<StructuredDateTimeInformationType5>
    
    // If fare family description is requested after a pricing request, the reference of the recommendation for which fare family description is expected must be entered here. If fare family description is requested based on an existing TST, the reference of the TST for which fare family description is expected must be entered here.
    referenceInformation: Array<ReferenceInfoType11>
    
    // This indicator is used in case of re-pricing use case where fare family description used in original ticket and in the current re-pricing is requested.
    repricingIndicator: Array<CodedAttributeType10>
    
    // Ticket number is provided in re-pricing use case only when PNR context doesn&#39;t exist (standalone mode).
    documentInfo: Array<TicketNumberType4>
    
    // Used to request Fare family description based on options provided in input.
    standaloneDescriptionRequest: Array<standaloneDescriptionRequestType>
    
}

export interface Fare_GetFareFamilyDescriptionTypeAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType5 {
    
    $attributes: StructuredDateTimeInformationType5Attributes
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType8>
    
}

export interface StructuredDateTimeInformationType5Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType8 {
    
    $attributes: StructuredDateTimeType8Attributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
}

export interface StructuredDateTimeType8Attributes {
    
}

// To provide reference
export interface ReferenceInfoType11 {
    
    $attributes: ReferenceInfoType11Attributes
    
    
    referenceDetails: Array<ReferencingDetailsType12>
    
    
    DummyNET: string
    
}

export interface ReferenceInfoType11Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType12 {
    
    $attributes: ReferencingDetailsType12Attributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
}

export interface ReferencingDetailsType12Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType10 {
    
    $attributes: CodedAttributeType10Attributes
    
    
    attributeDetails: Array<CodedAttributeInformationType11>
    
}

export interface CodedAttributeType10Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType11 {
    
    $attributes: CodedAttributeInformationType11Attributes
    
    
    attributeType: string
    
    
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType11Attributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberType4 {
    
    $attributes: TicketNumberType4Attributes
    
    
    documentDetails: TicketNumberDetailsType3
    
}

export interface TicketNumberType4Attributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsType3 {
    
    $attributes: TicketNumberDetailsType3Attributes
    
    // provides ticket number
    number: Array<number>
    
    
    type: Array<string>
    
}

export interface TicketNumberDetailsType3Attributes {
    
}


export interface standaloneDescriptionRequestType {
    
    $attributes: standaloneDescriptionRequestTypeAttributes
    
    // Used to provide the Fare Family name.
    fareInformation: FareQualifierDetailsType5
    
    // To provide the origin and destination for which Fare Family description is requested
    itineraryInformation: OriginAndDestinationDetailsType
    
    // To provide the carrier for which Fare Family description is requested
    carrierInformation: TransportIdentifierType3
    
    // To request fare description that was applicable for a flight on a given date.
    flightDateInformation: Array<StructuredDateTimeInformationType5>
    
}

export interface standaloneDescriptionRequestTypeAttributes {
    
}


export interface FareQualifierDetailsType5 {
    
    $attributes: FareQualifierDetailsType5Attributes
    
    
    discountDetails: DiscountPenaltyInformationType5
    
}

export interface FareQualifierDetailsType5Attributes {
    
}


export interface DiscountPenaltyInformationType5 {
    
    $attributes: DiscountPenaltyInformationType5Attributes
    
    
    fareQualifier: Array<string>
    
    // Used to enter the Fare Family name
    rateCategory: Array<string>
    
}

export interface DiscountPenaltyInformationType5Attributes {
    
}

// To convey the origin and destination of a journey.
export interface OriginAndDestinationDetailsType {
    
    $attributes: OriginAndDestinationDetailsTypeAttributes
    
    
    origin: string
    
    
    destination: string
    
}

export interface OriginAndDestinationDetailsTypeAttributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType3 {
    
    $attributes: TransportIdentifierType3Attributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI13>
    
}

export interface TransportIdentifierType3Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI13 {
    
    $attributes: CompanyIdentificationTypeI13Attributes
    
    
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI13Attributes {
    
}


export interface Fare_GetFareFamilyDescriptionReplyType {
    
    $attributes: Fare_GetFareFamilyDescriptionReplyTypeAttributes
    
    // For errors at message level
    errorGroup: Array<ErrorGroupType5>
    
    // Description of a given Fare Family
    fareFamilyDescriptionGroup: Array<fareFamilyDescriptionGroupType>
    
}

export interface Fare_GetFareFamilyDescriptionReplyTypeAttributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType5 {
    
    $attributes: ErrorGroupType5Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType10
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType10>
    
}

export interface ErrorGroupType5Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType10 {
    
    $attributes: ApplicationErrorInformationType10Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType8
    
}

export interface ApplicationErrorInformationType10Attributes {
    
}


export interface ApplicationErrorDetailType8 {
    
    $attributes: ApplicationErrorDetailType8Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType8Attributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType10 {
    
    $attributes: FreeTextInformationType10Attributes
    
    
    freeTextDetails: FreeTextDetailsType10
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType10Attributes {
    
}


export interface FreeTextDetailsType10 {
    
    $attributes: FreeTextDetailsType10Attributes
    
    
    textSubjectQualifier: string
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType10Attributes {
    
}


export interface fareFamilyDescriptionGroupType {
    
    $attributes: fareFamilyDescriptionGroupTypeAttributes
    
    // Trigger Contains the number of the fare family for which description is returned
    referenceInformation: ItemNumberType5
    
    // Contains the name of the fare family for which description is returned.
    fareInformation: Array<FareQualifierDetailsType6>
    
    // This indicator is used to identify fare family desrciption used in the original (previous) ticket. It is used only in re-pricing use case.
    previousTicketIndicator: Array<CodedAttributeType11>
    
    // origin and destination for which Fare Family description has been requested
    itineraryInformation: Array<OriginAndDestinationDetailsType1>
    
    // Contains the name of the Carrier owner of the fare family for which description is returned.
    carrierInformation: Array<TransportIdentifierType4>
    
    // Free-Flow description of the fare family
    freeFlowDescription: Array<FreeTextInformationType_198124S>
    
    // Media reference ID for Fare Family.
    externalReferenceInfo: Array<ReferenceInfoType12>
    
    // structured description of the fare family
    ocFeeInformation: Array<ocFeeInformationType>
    
    // Error/warning for this fare family
    errorInformationFareFamily: Array<ErrorGroupType5>
    
}

export interface fareFamilyDescriptionGroupTypeAttributes {
    
}

// To specify an item number
export interface ItemNumberType5 {
    
    $attributes: ItemNumberType5Attributes
    
    
    itemNumberDetails: Array<ItemNumberIdentificationType5>
    
}

export interface ItemNumberType5Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType5 {
    
    $attributes: ItemNumberIdentificationType5Attributes
    
    
    number: Array<string>
    
}

export interface ItemNumberIdentificationType5Attributes {
    
}


export interface FareQualifierDetailsType6 {
    
    $attributes: FareQualifierDetailsType6Attributes
    
    
    discountDetails: DiscountPenaltyInformationType6
    
}

export interface FareQualifierDetailsType6Attributes {
    
}


export interface DiscountPenaltyInformationType6 {
    
    $attributes: DiscountPenaltyInformationType6Attributes
    
    
    fareQualifier: Array<string>
    
    // Used to enter the Fare Family name
    rateCategory: Array<string>
    
}

export interface DiscountPenaltyInformationType6Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType11 {
    
    $attributes: CodedAttributeType11Attributes
    
    
    attributeDetails: Array<CodedAttributeInformationType12>
    
}

export interface CodedAttributeType11Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType12 {
    
    $attributes: CodedAttributeInformationType12Attributes
    
    
    attributeType: string
    
    
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType12Attributes {
    
}

// To convey the origin and destination of a journey.
export interface OriginAndDestinationDetailsType1 {
    
    $attributes: OriginAndDestinationDetailsType1Attributes
    
    
    origin: string
    
    
    destination: string
    
}

export interface OriginAndDestinationDetailsType1Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType4 {
    
    $attributes: TransportIdentifierType4Attributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI14>
    
}

export interface TransportIdentifierType4Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI14 {
    
    $attributes: CompanyIdentificationTypeI14Attributes
    
    
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI14Attributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType_198124S {
    
    $attributes: FreeTextInformationType_198124SAttributes
    
    
    freeTextDetails: FreeTextDetailsType_275914C
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType_198124SAttributes {
    
}


export interface FreeTextDetailsType_275914C {
    
    $attributes: FreeTextDetailsType_275914CAttributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType_275914CAttributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType12 {
    
    $attributes: ReferenceInfoType12Attributes
    
    
    referenceDetails: Array<ReferencingDetailsType13>
    
}

export interface ReferenceInfoType12Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType13 {
    
    $attributes: ReferencingDetailsType13Attributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
}

export interface ReferencingDetailsType13Attributes {
    
}


export interface ocFeeInformationType {
    
    $attributes: ocFeeInformationTypeAttributes
    
    // fee type / description
    feeDescription: SpecificDataInformationType5
    
    // Service type, provider and group.
    serviceDetails: Array<SpecialRequirementsDetailsType6>
    
    // The description of the fee
    feeFreeFlowDescription: Array<FreeTextInformationType10>
    
    // Media reference ID for service.
    externalReferenceInfo: Array<ReferenceInfoType12>
    
    // Fee amount
    ocFeeAmount: Array<MonetaryInformationType8>
    
}

export interface ocFeeInformationTypeAttributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationType5 {
    
    $attributes: SpecificDataInformationType5Attributes
    
    
    dataTypeInformation: DataTypeInformationType5
    
    
    dataInformation: Array<DataInformationType4>
    
}

export interface SpecificDataInformationType5Attributes {
    
}

// To identify the type of data to be sent and to qualify the data when required.
export interface DataTypeInformationType5 {
    
    $attributes: DataTypeInformationType5Attributes
    
    // OC subcode
    type: string
    
    
    statusEvent: Array<string>
    
}

export interface DataTypeInformationType5Attributes {
    
}

// To identify specific data and a quantity related to the data.
export interface DataInformationType4 {
    
    $attributes: DataInformationType4Attributes
    
    // Service Application (Included, At Charge etc...)
    indicator: Array<string>
    
}

export interface DataInformationType4Attributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsType6 {
    
    $attributes: SpecialRequirementsDetailsType6Attributes
    
    // To specify the Service Requirement of the customer.
    specialRequirementsInfo: Array<SpecialRequirementsTypeDetailsType6>
    
}

export interface SpecialRequirementsDetailsType6Attributes {
    
}

// SPECIAL REQUIREMENTS TYPE DETAILS
export interface SpecialRequirementsTypeDetailsType6 {
    
    $attributes: SpecialRequirementsTypeDetailsType6Attributes
    
    // To specify the &#34;service Type&#34; of the fee
    ssrCode: Array<string>
    
    // Carrier owner of this service
    airlineCode: Array<string>
    
    // To specify the service group
    serviceType: Array<string>
    
    // To specify the service sub group
    otherServiceType: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsType6Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType8 {
    
    $attributes: MonetaryInformationType8Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsType6
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType6>
    
}

export interface MonetaryInformationType8Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType6 {
    
    $attributes: MonetaryInformationDetailsType6Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType6Attributes {
    
}


export interface Fare_InformativeBestPricingWithoutPNRType {
    
    $attributes: Fare_InformativeBestPricingWithoutPNRTypeAttributes
    
    
    originatorGroup: Array<originatorGroupType>
    
    // Passenger description
    passengersGroup: Array<passengersGroupType>
    
    // Itinerary description and pricing information related at flight level.
    segmentGroup: Array<segmentGroupType>
    
    
    pricingOptionGroup: Array<pricingOptionGroupType>
    
}

export interface Fare_InformativeBestPricingWithoutPNRTypeAttributes {
    
}


export interface originatorGroupType {
    
    $attributes: originatorGroupTypeAttributes
    
    // Supplementary protocol or business related information.
    additionalBusinessInformation: Array<AdditionalBusinessSourceInformationTypeI1>
    
}

export interface originatorGroupTypeAttributes {
    
}

// To specify additional originator and source information.
export interface AdditionalBusinessSourceInformationTypeI1 {
    
    $attributes: AdditionalBusinessSourceInformationTypeI1Attributes
    
    
    sourceType: SourceTypeDetailsTypeI2
    
    
    originatorDetails: Array<OriginatorIdentificationDetailsTypeI11>
    
    
    locationDetails: Array<LocationTypeI_58063C>
    
    
    countryCode: Array<string>
    
    
    systemCode: Array<string>
    
}

export interface AdditionalBusinessSourceInformationTypeI1Attributes {
    
}

// To identify the type of source.
export interface SourceTypeDetailsTypeI2 {
    
    $attributes: SourceTypeDetailsTypeI2Attributes
    
    
    sourceQualifier1: string
    
    
    sourceQualifier2: Array<string>
    
}

export interface SourceTypeDetailsTypeI2Attributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI11 {
    
    $attributes: OriginatorIdentificationDetailsTypeI11Attributes
    
    
    originatorId: Array<number>
    
    
    inHouseIdentification1: Array<string>
    
    
    inHouseIdentification2: Array<string>
    
    
    inHouseIdentification3: Array<string>
    
}

export interface OriginatorIdentificationDetailsTypeI11Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI_58063C {
    
    $attributes: LocationTypeI_58063CAttributes
    
    
    trueLocationId: Array<string>
    
    
    trueLocation: Array<string>
    
}

export interface LocationTypeI_58063CAttributes {
    
}


export interface passengersGroupType {
    
    $attributes: passengersGroupTypeAttributes
    
    // Contains: * Number of passengers in the group * Group tattoo
    segmentRepetitionControl: SegmentRepetitionControlTypeI4
    
    // Passengers&#39; tattoos provided by the carrier in case of LCC pricing with U2. NOT USED FOR FSC.
    travellersID: Array<SpecificTravellerTypeI>
    
    // PTC
    discountPtc: Array<FareInformationTypeI5>
    
}

export interface passengersGroupTypeAttributes {
    
}

// To indicate the number of segment group repetitions.
export interface SegmentRepetitionControlTypeI4 {
    
    $attributes: SegmentRepetitionControlTypeI4Attributes
    
    
    segmentControlDetails: Array<SegmentRepetitionControlDetailsTypeI4>
    
}

export interface SegmentRepetitionControlTypeI4Attributes {
    
}

// Information about the number of selection segments to be processed.
export interface SegmentRepetitionControlDetailsTypeI4 {
    
    $attributes: SegmentRepetitionControlDetailsTypeI4Attributes
    
    
    quantity: Array<number>
    
    
    numberOfUnits: Array<number>
    
    
    totalNumberOfItems: Array<number>
    
}

export interface SegmentRepetitionControlDetailsTypeI4Attributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerTypeI {
    
    $attributes: SpecificTravellerTypeIAttributes
    
    
    travellerDetails: Array<SpecificTravellerDetailsTypeI>
    
}

export interface SpecificTravellerTypeIAttributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerDetailsTypeI {
    
    $attributes: SpecificTravellerDetailsTypeIAttributes
    
    // Passenger Tattoos
    measurementValue: Array<number>
    
}

export interface SpecificTravellerDetailsTypeIAttributes {
    
}

// To specify fare details.
export interface FareInformationTypeI5 {
    
    $attributes: FareInformationTypeI5Attributes
    
    // PTC or fare discount
    valueQualifier: Array<string>
    
    
    fareDetails: Array<FareDetailsTypeI2>
    
    
    identityNumber: Array<string>
    
}

export interface FareInformationTypeI5Attributes {
    
}

// To specify the fare type and related information.
export interface FareDetailsTypeI2 {
    
    $attributes: FareDetailsTypeI2Attributes
    
    
    qualifier: Array<string>
    
}

export interface FareDetailsTypeI2Attributes {
    
}


export interface segmentGroupType {
    
    $attributes: segmentGroupTypeAttributes
    
    // Convey the information related to a segment (company, flight number, origin, destination...).
    segmentInformation: TravelProductInformationTypeI7
    
    // Used for technical stops, even if it is currently deprecated.
    additionnalSegmentDetails: Array<AdditionalProductDetailsTypeI6>
    
    // To store the flight inventory (opened classes and number of remaining seats) if known.
    inventory: Array<ProductInformationTypeI1>
    
}

export interface segmentGroupTypeAttributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI7 {
    
    $attributes: TravelProductInformationTypeI7Attributes
    
    
    flightDate: Array<ProductDateTimeTypeI11>
    
    
    boardPointDetails: Array<LocationTypeI11>
    
    
    offpointDetails: Array<LocationTypeI11>
    
    
    companyDetails: Array<CompanyIdentificationTypeI_217756C>
    
    
    flightIdentification: Array<ProductIdentificationDetailsTypeI9>
    
    
    flightTypeDetails: Array<ProductTypeDetailsTypeI6>
    
    // Connection indicators: order in the group.
    itemNumber: Array<number>
    
    
    specialSegment: Array<string>
    
}

export interface TravelProductInformationTypeI7Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI11 {
    
    $attributes: ProductDateTimeTypeI11Attributes
    
    
    departureDate: Array<string>
    
    
    departureTime: Array<string>
    
    
    arrivalDate: Array<string>
    
    
    arrivalTime: Array<string>
    
}

export interface ProductDateTimeTypeI11Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI11 {
    
    $attributes: LocationTypeI11Attributes
    
    
    trueLocationId: Array<string>
    
}

export interface LocationTypeI11Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI_217756C {
    
    $attributes: CompanyIdentificationTypeI_217756CAttributes
    
    
    marketingCompany: Array<string>
    
    
    operatingCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI_217756CAttributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI9 {
    
    $attributes: ProductIdentificationDetailsTypeI9Attributes
    
    
    flightNumber: string
    
    
    bookingClass: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI9Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsTypeI6 {
    
    $attributes: ProductTypeDetailsTypeI6Attributes
    
    
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsTypeI6Attributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsTypeI6 {
    
    $attributes: AdditionalProductDetailsTypeI6Attributes
    
    
    legDetails: Array<AdditionalProductTypeI6>
    
}

export interface AdditionalProductDetailsTypeI6Attributes {
    
}

// Additional details describing a specific means of transport.
export interface AdditionalProductTypeI6 {
    
    $attributes: AdditionalProductTypeI6Attributes
    
    
    equipment: Array<string>
    
    
    numberOfStops: Array<number>
    
}

export interface AdditionalProductTypeI6Attributes {
    
}

// To specify details related to availability status or cabin configuration for a product.
export interface ProductInformationTypeI1 {
    
    $attributes: ProductInformationTypeI1Attributes
    
    
    bookingClassDetails: Array<ProductDetailsTypeI1>
    
}

export interface ProductInformationTypeI1Attributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsTypeI1 {
    
    $attributes: ProductDetailsTypeI1Attributes
    
    
    designator: string
    
    
    availabilityStatus: Array<string>
    
    
    specialService: Array<string>
    
}

export interface ProductDetailsTypeI1Attributes {
    
}


export interface pricingOptionGroupType {
    
    $attributes: pricingOptionGroupTypeAttributes
    
    
    pricingOptionKey: PricingOptionKey
    
    
    optionDetail: Array<AttributeType9>
    
    
    carrierInformation: Array<TransportIdentifierType5>
    
    
    currency: Array<CurrenciesType2>
    
    
    penDisInformation: Array<DiscountAndPenaltyInformationType2>
    
    
    monetaryInformation: Array<MonetaryInformationType9>
    
    
    taxInformation: Array<DutyTaxFeeDetailsType1>
    
    
    dateInformation: Array<StructuredDateTimeInformationType6>
    
    
    frequentFlyerInformation: Array<FrequentTravellerIdentificationCodeType8>
    
    
    formOfPaymentInformation: Array<FormOfPaymentType3>
    
    
    locationInformation: Array<PlaceLocationIdentificationType1>
    
    
    paxSegTstReference: Array<ReferenceInfoType13>
    
}

export interface pricingOptionGroupTypeAttributes {
    
}


export interface PricingOptionKey {
    
    $attributes: PricingOptionKeyAttributes
    
    
    pricingOptionKey: string
    
}

export interface PricingOptionKeyAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType9 {
    
    $attributes: AttributeType9Attributes
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU7>
    
}

export interface AttributeType9Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU7 {
    
    $attributes: AttributeInformationTypeU7Attributes
    
    // Used for attribute value rather than attributeType
    attributeType: string
    
    
    attributeDescription: Array<string>
    
}

export interface AttributeInformationTypeU7Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType5 {
    
    $attributes: TransportIdentifierType5Attributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI15>
    
}

export interface TransportIdentifierType5Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI15 {
    
    $attributes: CompanyIdentificationTypeI15Attributes
    
    
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI15Attributes {
    
}

// To specify currencies used in the transaction and relevant details for the rate of exchange.
export interface CurrenciesType2 {
    
    $attributes: CurrenciesType2Attributes
    
    
    firstCurrencyDetails: Array<CurrencyDetailsTypeU2>
    
}

export interface CurrenciesType2Attributes {
    
}

// The usage to which a currency relates
export interface CurrencyDetailsTypeU2 {
    
    $attributes: CurrencyDetailsTypeU2Attributes
    
    
    currencyQualifier: string
    
    
    currencyIsoCode: Array<string>
    
}

export interface CurrencyDetailsTypeU2Attributes {
    
}


export interface DiscountAndPenaltyInformationType2 {
    
    $attributes: DiscountAndPenaltyInformationType2Attributes
    
    
    discountPenaltyQualifier: Array<string>
    
    
    discountPenaltyDetails: Array<DiscountPenaltyMonetaryInformationType2>
    
}

export interface DiscountAndPenaltyInformationType2Attributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationType2 {
    
    $attributes: DiscountPenaltyMonetaryInformationType2Attributes
    
    
    function: Array<string>
    
    
    amountType: Array<string>
    
    
    amount: Array<string>
    
    
    rate: Array<string>
    
    
    currency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationType2Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType9 {
    
    $attributes: MonetaryInformationType9Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsType7
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType7>
    
}

export interface MonetaryInformationType9Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType7 {
    
    $attributes: MonetaryInformationDetailsType7Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType7Attributes {
    
}

// To specify relevant duty/tax/fee information.
export interface DutyTaxFeeDetailsType1 {
    
    $attributes: DutyTaxFeeDetailsType1Attributes
    
    
    taxQualifier: string
    
    
    taxType: Array<DutyTaxFeeAccountDetailType>
    
    
    taxNature: Array<string>
    
    
    taxData: Array<DutyTaxFeeDetailType>
    
}

export interface DutyTaxFeeDetailsType1Attributes {
    
}


export interface DutyTaxFeeAccountDetailType {
    
    $attributes: DutyTaxFeeAccountDetailTypeAttributes
    
    
    isoCountry: string
    
}

export interface DutyTaxFeeAccountDetailTypeAttributes {
    
}


export interface DutyTaxFeeDetailType {
    
    $attributes: DutyTaxFeeDetailTypeAttributes
    
    
    taxRate: Array<string>
    
    
    taxValueQualifier: Array<string>
    
}

export interface DutyTaxFeeDetailTypeAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType6 {
    
    $attributes: StructuredDateTimeInformationType6Attributes
    
    
    businessSemantic: string
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType9>
    
}

export interface StructuredDateTimeInformationType6Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType9 {
    
    $attributes: StructuredDateTimeType9Attributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
}

export interface StructuredDateTimeType9Attributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType8 {
    
    $attributes: FrequentTravellerIdentificationCodeType8Attributes
    
    // Frequent Traveller Info
    frequentTravellerDetails: Array<FrequentTravellerIdentificationType7>
    
}

export interface FrequentTravellerIdentificationCodeType8Attributes {
    
}


export interface FrequentTravellerIdentificationType7 {
    
    $attributes: FrequentTravellerIdentificationType7Attributes
    
    // Carrier where the FQTV is registered.
    carrier: Array<string>
    
    
    number: Array<string>
    
    // To specify a Tier linked to the FQTV
    tierLevel: Array<string>
    
    // For example : priority code
    priorityCode: Array<string>
    
}

export interface FrequentTravellerIdentificationType7Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentType3 {
    
    $attributes: FormOfPaymentType3Attributes
    
    // Details on the form of payment
    formOfPayment: FormOfPaymentDetailsType3
    
    
    otherFormOfPayment: Array<FormOfPaymentDetailsType3>
    
}

export interface FormOfPaymentType3Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsType3 {
    
    $attributes: FormOfPaymentDetailsType3Attributes
    
    
    type: string
    
    // indicates wether the transaction is a credit or debit.
    indicator: Array<string>
    
    
    amount: Array<number>
    
    // provides the code of the vendor/carrier code
    vendorCode: Array<string>
    
    
    creditCardNumber: Array<string>
    
    // expiry date of the credit card
    expiryDate: Array<string>
    
    
    approvalCode: Array<string>
    
    
    sourceOfApproval: Array<string>
    
    
    authorisedAmount: Array<number>
    
    
    addressVerification: Array<string>
    
    
    customerAccount: Array<string>
    
    
    extendedPayment: Array<string>
    
    
    fopFreeText: Array<string>
    
    
    membershipStatus: Array<string>
    
    
    transactionInfo: Array<string>
    
    // stores a pin code attached to the account
    pinCode: Array<string>
    
    // Details pin code type (in case of encrypted pin code)
    pinCodeType: Array<string>
    
}

export interface FormOfPaymentDetailsType3Attributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType1 {
    
    $attributes: PlaceLocationIdentificationType1Attributes
    
    
    locationType: string
    
    
    firstLocationDetails: Array<RelatedLocationOneIdentificationType1>
    
    
    secondLocationDetails: Array<RelatedLocationTwoIdentificationType1>
    
}

export interface PlaceLocationIdentificationType1Attributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationType1 {
    
    $attributes: RelatedLocationOneIdentificationType1Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationOneIdentificationType1Attributes {
    
}

// Identification of second related location by code or name.
export interface RelatedLocationTwoIdentificationType1 {
    
    $attributes: RelatedLocationTwoIdentificationType1Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationTwoIdentificationType1Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType13 {
    
    $attributes: ReferenceInfoType13Attributes
    
    
    referenceDetails: Array<ReferencingDetailsType14>
    
}

export interface ReferenceInfoType13Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType14 {
    
    $attributes: ReferencingDetailsType14Attributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
}

export interface ReferencingDetailsType14Attributes {
    
}


export interface Fare_InformativeBestPricingWithoutPNRReplyType {
    
    $attributes: Fare_InformativeBestPricingWithoutPNRReplyTypeAttributes
    
    // Contains general information about the message, especially the use case. Tells if the request was correctly performed of not.
    messageDetails: MessageActionDetailsTypeI4
    
    
    errorGroup: Array<ErrorGroupType6>
    
    
    mainGroup: Array<mainGroupType>
    
}

export interface Fare_InformativeBestPricingWithoutPNRReplyTypeAttributes {
    
}

// To specify the message type and business function.
export interface MessageActionDetailsTypeI4 {
    
    $attributes: MessageActionDetailsTypeI4Attributes
    
    
    messageFunctionDetails: Array<MessageFunctionBusinessDetailsTypeI4>
    
    
    responseType: Array<string>
    
}

export interface MessageActionDetailsTypeI4Attributes {
    
}

// To indicate the type and function of a message or part of a message.
export interface MessageFunctionBusinessDetailsTypeI4 {
    
    $attributes: MessageFunctionBusinessDetailsTypeI4Attributes
    
    
    businessFunction: Array<string>
    
    
    messageFunction: Array<string>
    
    
    responsibleAgency: Array<string>
    
    
    additionalMessageFunction: Array<string>
    
}

export interface MessageFunctionBusinessDetailsTypeI4Attributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType6 {
    
    $attributes: ErrorGroupType6Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType11
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType11>
    
}

export interface ErrorGroupType6Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType11 {
    
    $attributes: ApplicationErrorInformationType11Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType9
    
}

export interface ApplicationErrorInformationType11Attributes {
    
}


export interface ApplicationErrorDetailType9 {
    
    $attributes: ApplicationErrorDetailType9Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType9Attributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType11 {
    
    $attributes: FreeTextInformationType11Attributes
    
    
    freeTextDetails: Array<FreeTextDetailsType11>
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType11Attributes {
    
}


export interface FreeTextDetailsType11 {
    
    $attributes: FreeTextDetailsType11Attributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
    
    status: Array<string>
    
    
    companyId: Array<string>
    
    
    language: Array<string>
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType11Attributes {
    
}


export interface mainGroupType {
    
    $attributes: mainGroupTypeAttributes
    
    // A useless separator.
    dummySegment: DummySegmentTypeI9
    
    // Convertion rates and currency information.
    convertionRate: Array<ConversionRateTypeI3>
    
    
    generalIndicatorsGroup: Array<generalIndicatorsGroupType>
    
    
    pricingGroupLevelGroup: Array<pricingGroupLevelGroupType>
    
}

export interface mainGroupTypeAttributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI9 {
    
    $attributes: DummySegmentTypeI9Attributes
    
}

export interface DummySegmentTypeI9Attributes {
    
}

// To specify details of a conversion rate related to an amount.
export interface ConversionRateTypeI3 {
    
    $attributes: ConversionRateTypeI3Attributes
    
    
    conversionRateDetails: ConversionRateDetailsTypeI3
    
    
    otherConvRateDetails: Array<ConversionRateDetailsTypeI3>
    
}

export interface ConversionRateTypeI3Attributes {
    
}

// To specify the conversion rate and the monetary amount.
export interface ConversionRateDetailsTypeI3 {
    
    $attributes: ConversionRateDetailsTypeI3Attributes
    
    
    conversionType: Array<string>
    
    
    currency: Array<string>
    
    
    rateType: Array<string>
    
    
    pricingAmount: Array<number>
    
    
    convertedValueAmount: Array<number>
    
    
    dutyTaxFeeType: Array<string>
    
    
    measurementValue: Array<number>
    
    
    measurementSignificance: Array<string>
    
}

export interface ConversionRateDetailsTypeI3Attributes {
    
}


export interface generalIndicatorsGroupType {
    
    $attributes: generalIndicatorsGroupTypeAttributes
    
    // Contains pricing indicators such as SITI, SOTO... and International flag.
    generalIndicators: PricingTicketingDetailsTypeI2
    
}

export interface generalIndicatorsGroupTypeAttributes {
    
}

// To convey pricing and date information related to a ticket.
export interface PricingTicketingDetailsTypeI2 {
    
    $attributes: PricingTicketingDetailsTypeI2Attributes
    
    
    priceTicketDetails: Array<PricingTicketingInformationTypeI1>
    
    
    priceTariffType: Array<string>
    
    
    productDateTimeDetails: Array<ProductDateTimeTypeI12>
    
    
    companyDetails: Array<CompanyIdentificationTypeI_58119C>
    
    
    companyNumberDetails: Array<CompanyIdentificationNumbersTypeI>
    
    
    locationDetails: Array<LocationDetailsTypeI3>
    
    
    otherLocationDetails: Array<LocationDetailsTypeI3>
    
    
    idNumber: Array<number>
    
    
    monetaryAmount: Array<number>
    
}

export interface PricingTicketingDetailsTypeI2Attributes {
    
}

// To specify indicators related to pricing and ticketing.
export interface PricingTicketingInformationTypeI1 {
    
    $attributes: PricingTicketingInformationTypeI1Attributes
    
    
    indicators: Array<string>
    
}

export interface PricingTicketingInformationTypeI1Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI12 {
    
    $attributes: ProductDateTimeTypeI12Attributes
    
    
    departureDate: Array<string>
    
    
    departureTime: Array<number>
    
    
    arrivalDate: Array<string>
    
    
    arrivalTime: Array<number>
    
    
    dateVariation: Array<number>
    
}

export interface ProductDateTimeTypeI12Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI_58119C {
    
    $attributes: CompanyIdentificationTypeI_58119CAttributes
    
    
    marketingCompany: Array<string>
    
    
    operatingCompany: Array<string>
    
    
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI_58119CAttributes {
    
}

// Number to identify a company and any associated companies.
export interface CompanyIdentificationNumbersTypeI {
    
    $attributes: CompanyIdentificationNumbersTypeIAttributes
    
    
    identifier: string
    
    
    otherIdentifier: Array<string>
    
}

export interface CompanyIdentificationNumbersTypeIAttributes {
    
}

// To specify a location and related country.
export interface LocationDetailsTypeI3 {
    
    $attributes: LocationDetailsTypeI3Attributes
    
    
    city: Array<string>
    
    
    country: Array<string>
    
}

export interface LocationDetailsTypeI3Attributes {
    
}


export interface pricingGroupLevelGroupType {
    
    $attributes: pricingGroupLevelGroupTypeAttributes
    
    // Number of pax in this fare group
    numberOfPax: SegmentRepetitionControlTypeI5
    
    // * IDs of the passengers (same as in the request) * Carrier-related tattoo for LCC pricing (NOT IMPLEMENTED)
    passengersID: Array<SpecificTravellerTypeI1>
    
    
    fareInfoGroup: fareInfoGroupType
    
}

export interface pricingGroupLevelGroupTypeAttributes {
    
}

// To indicate the number of segment group repetitions.
export interface SegmentRepetitionControlTypeI5 {
    
    $attributes: SegmentRepetitionControlTypeI5Attributes
    
    
    segmentControlDetails: Array<SegmentRepetitionControlDetailsTypeI5>
    
}

export interface SegmentRepetitionControlTypeI5Attributes {
    
}

// Information about the number of selection segments to be processed.
export interface SegmentRepetitionControlDetailsTypeI5 {
    
    $attributes: SegmentRepetitionControlDetailsTypeI5Attributes
    
    
    quantity: Array<number>
    
    
    numberOfUnits: Array<number>
    
    
    totalNumberOfItems: Array<number>
    
}

export interface SegmentRepetitionControlDetailsTypeI5Attributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerTypeI1 {
    
    $attributes: SpecificTravellerTypeI1Attributes
    
    
    travellerDetails: Array<SpecificTravellerDetailsTypeI1>
    
    
    DummyNET: string
    
}

export interface SpecificTravellerTypeI1Attributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerDetailsTypeI1 {
    
    $attributes: SpecificTravellerDetailsTypeI1Attributes
    
    
    referenceNumber: Array<string>
    
    
    measurementValue: Array<number>
    
    
    firstDate: Array<string>
    
    
    surname: Array<string>
    
    
    firstName: Array<string>
    
}

export interface SpecificTravellerDetailsTypeI1Attributes {
    
}


export interface fareInfoGroupType {
    
    $attributes: fareInfoGroupTypeAttributes
    
    // Fae indicators
    emptySegment: FareInformationTypeI6
    
    // Contains pricing-related indicators: * &#34;Fare Basis in fare calc&#34; flag * Last ticketing date * Type of fare priced * Non-Homogenous Reco(BestBuy only) * Rebooking required (BestBuy only) ... and many more
    pricingIndicators: Array<PricingTicketingDetailsType3>
    
    
    fareAmount: Array<MonetaryInformationType_187658S>
    
    // Used to store text data such as: * Horizontal fare calulation line * Mileage fare calculation line * Endorsement information ...
    textData: Array<InteractiveFreeTextTypeI6>
    
    
    surchargesGroup: Array<surchargesGroupType>
    
    
    corporateGroup: Array<corporateGroupType>
    
    
    negoFareGroup: Array<negoFareGroupType>
    
    
    segmentLevelGroup: Array<segmentLevelGroupType>
    
    // NOT IMPLEMENTED
    structuredFareCalcGroup: Array<structuredFareCalcGroupType>
    
    // This group contains the breakdown related to carrier fees. A series of data elements representing data required to collect non-airport/government fees, store the fee data, and track the revenue separate from the ticket revenue without requiring a secondary document be issued.
    carrierFeeGroup: Array<carrierFeeGroupType>
    
    // Details at fare component level or at bound level.
    fareComponentDetailsGroup: Array<FareComponentDetailsType1>
    
}

export interface fareInfoGroupTypeAttributes {
    
}

// To specify fare details.
export interface FareInformationTypeI6 {
    
    $attributes: FareInformationTypeI6Attributes
    
    // Not used
    valueQualifier: Array<string>
    
    // Not used
    value: Array<number>
    
    // Fare information
    fareDetails: Array<FareDetailsTypeI3>
    
    // Not used
    identityNumber: Array<string>
    
    // Not used
    fareTypeGrouping: Array<FareTypeGroupingInformationTypeI>
    
    // Not used
    rateCategory: Array<string>
    
}

export interface FareInformationTypeI6Attributes {
    
}

// To specify the fare type and related information.
export interface FareDetailsTypeI3 {
    
    $attributes: FareDetailsTypeI3Attributes
    
    // Not used
    qualifier: Array<string>
    
    // Not used
    rate: Array<number>
    
    // Not used
    country: Array<string>
    
    // Fare indicators
    fareCategory: Array<string>
    
}

export interface FareDetailsTypeI3Attributes {
    
}

// To designate system specific combinations of fare types and fare groupings
export interface FareTypeGroupingInformationTypeI {
    
    $attributes: FareTypeGroupingInformationTypeIAttributes
    
    
    pricingGroup: Array<string>
    
}

export interface FareTypeGroupingInformationTypeIAttributes {
    
}

// To convey pricing and date information related to a ticket.
export interface PricingTicketingDetailsType3 {
    
    $attributes: PricingTicketingDetailsType3Attributes
    
    
    priceTicketDetails: Array<PricingTicketingInformationTypeI1>
    
    // PRIVATE &#34;P&#34; ATAF &#34;A&#34; IATA &#34;I&#34; NEGO CONS &#34;M&#34; NEGO &#34;N&#34; DDF &#34;U&#34; DDF CORP &#34;D&#34; TOUR &#34;T&#34; DDF INC TOUR &#34;K&#34; DDF BULK TOUR &#34;L&#34; OVERRIDE &#34;O&#34;
    priceTariffType: Array<string>
    
    
    productDateTimeDetails: Array<ProductDateTimeTypeI12>
    
    
    companyDetails: Array<CompanyIdentificationTypeI_58119C>
    
    
    companyNumberDetails: Array<CompanyIdentificationNumbersTypeI>
    
    
    locationDetails: Array<LocationDetailsTypeI3>
    
    
    otherLocationDetails: Array<LocationDetailsTypeI3>
    
    
    idNumber: Array<string>
    
    
    monetaryAmount: Array<number>
    
}

export interface PricingTicketingDetailsType3Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_187658S {
    
    $attributes: MonetaryInformationType_187658SAttributes
    
    
    monetaryDetails: MonetaryInformationDetailsType_223871C
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType_223871C>
    
}

export interface MonetaryInformationType_187658SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_223871C {
    
    $attributes: MonetaryInformationDetailsType_223871CAttributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType_223871CAttributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextTypeI6 {
    
    $attributes: InteractiveFreeTextTypeI6Attributes
    
    
    freeTextQualification: Array<FreeTextQualificationTypeI6>
    
    
    freeText: Array<string>
    
}

export interface InteractiveFreeTextTypeI6Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationTypeI6 {
    
    $attributes: FreeTextQualificationTypeI6Attributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
    
    status: Array<string>
    
    
    companyId: Array<string>
    
    
    language: Array<string>
    
}

export interface FreeTextQualificationTypeI6Attributes {
    
}


export interface surchargesGroupType {
    
    $attributes: surchargesGroupTypeAttributes
    
    // Stores the data related to taxes.
    taxesAmount: TaxTypeI2
    
    // Stores the information related to the penalties: amount or rate, currency...
    penaltiesAmount: Array<DiscountAndPenaltyInformationTypeI>
    
    // To store the Passenger Facility Charges.
    pfcAmount: Array<MonetaryInformationTypeI8>
    
}

export interface surchargesGroupTypeAttributes {
    
}

// To specify details relating to tax(es).
export interface TaxTypeI2 {
    
    $attributes: TaxTypeI2Attributes
    
    
    taxCategory: Array<string>
    
    
    taxDetails: Array<TaxDetailsTypeI4>
    
}

export interface TaxTypeI2Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsTypeI4 {
    
    $attributes: TaxDetailsTypeI4Attributes
    
    
    rate: Array<string>
    
    
    countryCode: Array<string>
    
    
    currencyCode: Array<string>
    
    
    type: Array<string>
    
}

export interface TaxDetailsTypeI4Attributes {
    
}

// To specify information about discounts and penalties
export interface DiscountAndPenaltyInformationTypeI {
    
    $attributes: DiscountAndPenaltyInformationTypeIAttributes
    
    
    discountPenaltyQualifier: Array<string>
    
    
    discountPenaltyDetails: Array<DiscountPenaltyMonetaryInformationTypeI>
    
}

export interface DiscountAndPenaltyInformationTypeIAttributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationTypeI {
    
    $attributes: DiscountPenaltyMonetaryInformationTypeIAttributes
    
    
    function: Array<string>
    
    
    amountType: Array<string>
    
    
    amount: Array<number>
    
    
    rate: Array<string>
    
    
    currency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationTypeIAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI8 {
    
    $attributes: MonetaryInformationTypeI8Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsTypeI10
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsTypeI10>
    
}

export interface MonetaryInformationTypeI8Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI10 {
    
    $attributes: MonetaryInformationDetailsTypeI10Attributes
    
    
    typeQualifier: string
    
    
    amount: Array<string>
    
    
    currency: Array<string>
    
    
    location: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI10Attributes {
    
}


export interface corporateGroupType {
    
    $attributes: corporateGroupTypeAttributes
    
    // Stores data qualifying a corporate fare: * Type of fare (Nego/Unifare) * Associated contract number or company name
    corporateData: FareCalculationCodeDetailsTypeI
    
}

export interface corporateGroupTypeAttributes {
    
}

// To specify fare calculation information.
export interface FareCalculationCodeDetailsTypeI {
    
    $attributes: FareCalculationCodeDetailsTypeIAttributes
    
    
    chargeCategory: Array<string>
    
    
    amount: Array<number>
    
    
    locationCode: Array<string>
    
    
    otherLocationCode: Array<string>
    
    
    rate: Array<number>
    
}

export interface FareCalculationCodeDetailsTypeIAttributes {
    
}


export interface negoFareGroupType {
    
    $attributes: negoFareGroupTypeAttributes
    
    
    negoFareIndicators: PricingTicketingSubsequentTypeI
    
    
    extNegoFareIndicators: Array<FareQualifierDetailsTypeI2>
    
    // Amount of the negociated fares
    negoFareAmount: Array<DiscountAndPenaltyInformationTypeI>
    
    // Text informations : indicates to ticketing what to print in Fare and Total boxes.
    negoFareText: Array<InteractiveFreeTextTypeI6>
    
}

export interface negoFareGroupTypeAttributes {
    
}

// To convey additional information related to a ticket.
export interface PricingTicketingSubsequentTypeI {
    
    $attributes: PricingTicketingSubsequentTypeIAttributes
    
    
    itemNumber: Array<string>
    
    
    fareBasisDetails: Array<RateTariffClassInformationTypeI1>
    
    
    fareValue: Array<number>
    
    
    priceType: Array<string>
    
    
    specialCondition: Array<string>
    
    
    otherSpecialCondition: Array<string>
    
    
    additionalSpecialCondition: Array<string>
    
    
    taxCategory: Array<string>
    
}

export interface PricingTicketingSubsequentTypeIAttributes {
    
}

// To identify the current and/or original fare basis code.
export interface RateTariffClassInformationTypeI1 {
    
    $attributes: RateTariffClassInformationTypeI1Attributes
    
    
    rateTariffClass: Array<string>
    
    
    rateTariffIndicator: Array<string>
    
    
    otherRateTariffClass: Array<string>
    
    
    otherRateTariffIndicator: Array<string>
    
}

export interface RateTariffClassInformationTypeI1Attributes {
    
}

// To specify the details which qualify a fare
export interface FareQualifierDetailsTypeI2 {
    
    $attributes: FareQualifierDetailsTypeI2Attributes
    
    
    movementType: Array<string>
    
    
    fareCategories: Array<FareCategoryCodesTypeI3>
    
    
    fareDetails: Array<FareDetailsTypeI3>
    
    
    additionalFareDetails: Array<AdditionalFareQualifierDetailsTypeI3>
    
    
    discountDetails: Array<DiscountPenaltyInformationTypeI>
    
}

export interface FareQualifierDetailsTypeI2Attributes {
    
}

// To designate non-system specific combinations of fare types.
export interface FareCategoryCodesTypeI3 {
    
    $attributes: FareCategoryCodesTypeI3Attributes
    
    
    fareType: string
    
    
    otherFareType: Array<string>
    
}

export interface FareCategoryCodesTypeI3Attributes {
    
}

// To specify the fare basis and ticket designator codes.
export interface AdditionalFareQualifierDetailsTypeI3 {
    
    $attributes: AdditionalFareQualifierDetailsTypeI3Attributes
    
    
    rateClass: Array<string>
    
    
    commodityCategory: Array<string>
    
    
    pricingGroup: Array<string>
    
    
    secondRateClass: Array<string>
    
}

export interface AdditionalFareQualifierDetailsTypeI3Attributes {
    
}

// To indicate the discounts and penalties by fare type.
export interface DiscountPenaltyInformationTypeI {
    
    $attributes: DiscountPenaltyInformationTypeIAttributes
    
    
    fareQualifier: string
    
    
    rateCategory: Array<string>
    
    
    amount: Array<number>
    
    
    percentage: Array<number>
    
}

export interface DiscountPenaltyInformationTypeIAttributes {
    
}


export interface segmentLevelGroupType {
    
    $attributes: segmentLevelGroupTypeAttributes
    
    // Information about a segment: dates, carrier, board/off point...
    segmentInformation: TravelProductInformationTypeI_33489S
    
    // Contains the following pieces of information: * Ticket designator * NVA date * NVB date * Split PNR indicator * Slice And Dice indicator
    additionalInformation: Array<PricingTicketingDetailsType3>
    
    // Contains the following pieces of information: * Transportation class * Fare Basis * Fare by Rule flag
    fareBasis: Array<FareQualifierDetailsTypeI2>
    
    // This group gives the Cabin corresponding to each class of service.
    cabinGroup: Array<cabinGroupType>
    
    // Baggage allowance in a given measurement unit.
    baggageAllowance: Array<ExcessBaggageTypeI1>
    
    // PTC associated to this segment in this fare group.
    ptcSegment: Array<NumberOfUnitsTypeI1>
    
    // Coupon value/TPM for national fares
    couponInformation: Array<QuantityTypeI3>
    
}

export interface segmentLevelGroupTypeAttributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI_33489S {
    
    $attributes: TravelProductInformationTypeI_33489SAttributes
    
    
    flightDate: Array<ProductDateTimeTypeI12>
    
    
    boardPointDetails: Array<LocationTypeI_58141C>
    
    
    offpointDetails: Array<LocationTypeI_58141C>
    
    
    companyDetails: Array<CompanyIdentificationTypeI_58119C>
    
    
    flightIdentification: Array<ProductIdentificationDetailsTypeI10>
    
    
    flightTypeDetails: Array<ProductTypeDetailsTypeI7>
    
    
    itemNumber: Array<number>
    
    
    specialSegment: Array<string>
    
    
    marriageDetails: Array<MarriageControlDetailsTypeI4>
    
}

export interface TravelProductInformationTypeI_33489SAttributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI_58141C {
    
    $attributes: LocationTypeI_58141CAttributes
    
    
    trueLocationId: Array<string>
    
    
    trueLocation: Array<string>
    
}

export interface LocationTypeI_58141CAttributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI10 {
    
    $attributes: ProductIdentificationDetailsTypeI10Attributes
    
    
    flightNumber: string
    
    
    bookingClass: Array<string>
    
    
    operationalSuffix: Array<string>
    
    
    modifier: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI10Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsTypeI7 {
    
    $attributes: ProductTypeDetailsTypeI7Attributes
    
    
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsTypeI7Attributes {
    
}

// To identify details concerning the marriage status of travel product.
export interface MarriageControlDetailsTypeI4 {
    
    $attributes: MarriageControlDetailsTypeI4Attributes
    
    
    relation: Array<string>
    
    
    marriageIdentifier: Array<number>
    
    
    lineNumber: Array<number>
    
    
    otherRelation: Array<string>
    
    
    carrierCode: Array<string>
    
}

export interface MarriageControlDetailsTypeI4Attributes {
    
}


export interface cabinGroupType {
    
    $attributes: cabinGroupTypeAttributes
    
    // *Booking class used for Best pricing *Cabin associated to the class
    cabinSegment: ProductInformationTypeI2
    
}

export interface cabinGroupTypeAttributes {
    
}

// To specify details related to availability status or cabin configuration for a product.
export interface ProductInformationTypeI2 {
    
    $attributes: ProductInformationTypeI2Attributes
    
    
    productDetailsQualifier: Array<string>
    
    
    bookingClassDetails: Array<ProductDetailsTypeI2>
    
}

export interface ProductInformationTypeI2Attributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsTypeI2 {
    
    $attributes: ProductDetailsTypeI2Attributes
    
    
    designator: string
    
    
    availabilityStatus: Array<string>
    
    
    specialService: Array<string>
    
    
    option: Array<string>
    
}

export interface ProductDetailsTypeI2Attributes {
    
}

// To specify information concerning excess baggage charges and the associated baggage details.
export interface ExcessBaggageTypeI1 {
    
    $attributes: ExcessBaggageTypeI1Attributes
    
    
    excessBaggageDetails: Array<ExcessBaggageDetailsTypeI1>
    
    
    baggageDetails: Array<BaggageDetailsTypeI1>
    
    
    otherBaggageDetails: Array<BaggageDetailsTypeI1>
    
    
    extraBaggageDetails: Array<BaggageDetailsTypeI1>
    
    
    bagTagDetails: Array<BagtagDetailsTypeI>
    
}

export interface ExcessBaggageTypeI1Attributes {
    
}

// To specify details concerning a traveller&#39;s excess baggage.
export interface ExcessBaggageDetailsTypeI1 {
    
    $attributes: ExcessBaggageDetailsTypeI1Attributes
    
    
    currency: Array<string>
    
    
    amount: Array<number>
    
    
    processIndicator: Array<string>
    
}

export interface ExcessBaggageDetailsTypeI1Attributes {
    
}

// To specify the number and weight of baggage.
export interface BaggageDetailsTypeI1 {
    
    $attributes: BaggageDetailsTypeI1Attributes
    
    
    freeAllowance: Array<number>
    
    
    measurement: Array<number>
    
    
    quantityCode: Array<string>
    
    
    unitQualifier: Array<string>
    
    
    processIndicator: Array<string>
    
}

export interface BaggageDetailsTypeI1Attributes {
    
}

// To identify baggage by company identification, serial numbers, and destination.
export interface BagtagDetailsTypeI {
    
    $attributes: BagtagDetailsTypeIAttributes
    
    
    company: Array<string>
    
    
    identifier: Array<string>
    
    
    number: Array<number>
    
    
    location: Array<string>
    
    
    companyNumber: Array<string>
    
    
    indicator: Array<string>
    
    
    characteristic: Array<string>
    
    
    specialRequirement: Array<string>
    
    
    measurement: Array<number>
    
    
    unitQualifier: Array<string>
    
    
    description: Array<string>
    
}

export interface BagtagDetailsTypeIAttributes {
    
}

// To specify the number of units required.
export interface NumberOfUnitsTypeI1 {
    
    $attributes: NumberOfUnitsTypeI1Attributes
    
    
    quantityDetails: NumberOfUnitDetailsTypeI4
    
    
    otherQuantityDetails: Array<NumberOfUnitDetailsTypeI4>
    
}

export interface NumberOfUnitsTypeI1Attributes {
    
}

// Identification of number of units and its purpose.
export interface NumberOfUnitDetailsTypeI4 {
    
    $attributes: NumberOfUnitDetailsTypeI4Attributes
    
    
    numberOfUnit: Array<number>
    
    
    unitQualifier: Array<string>
    
}

export interface NumberOfUnitDetailsTypeI4Attributes {
    
}

// To specify a pertinent quantity.
export interface QuantityTypeI3 {
    
    $attributes: QuantityTypeI3Attributes
    
    
    quantityDetails: QuantityDetailsTypeI5
    
    
    otherquantityDetails: Array<QuantityDetailsTypeI5>
    
}

export interface QuantityTypeI3Attributes {
    
}

// Quantity information in a transaction, qualified when relevant.
export interface QuantityDetailsTypeI5 {
    
    $attributes: QuantityDetailsTypeI5Attributes
    
    
    qualifier: string
    
    
    value: number
    
    
    unit: Array<string>
    
}

export interface QuantityDetailsTypeI5Attributes {
    
}


export interface structuredFareCalcGroupType {
    
    $attributes: structuredFareCalcGroupTypeAttributes
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structureFareCalcRoot: FareComponentInformationTypeI
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    group27: Array<group27Type>
    
}

export interface structuredFareCalcGroupTypeAttributes {
    
}

// To specify fare component data.
export interface FareComponentInformationTypeI {
    
    $attributes: FareComponentInformationTypeIAttributes
    
    
    fareComponentDetails: Array<FareComponentDetailsTypeI>
    
    // Ticket document number
    ticketNumber: Array<string>
    
}

export interface FareComponentInformationTypeIAttributes {
    
}


export interface FareComponentDetailsTypeI {
    
    $attributes: FareComponentDetailsTypeIAttributes
    
    // Type of data _ fare calc or exchanged residual fare data
    dataType: Array<string>
    
    // Fare component count
    count: Array<number>
    
    // Price quote date
    pricingDate: Array<string>
    
    // Account code
    accountCode: Array<string>
    
    // Input designator
    inputDesignator: Array<string>
    
}

export interface FareComponentDetailsTypeIAttributes {
    
}


export interface group27Type {
    
    $attributes: group27TypeAttributes
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG27EQN: NumberOfUnitsTypeI1
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    group28: Array<group28Type>
    
    // Dummy segment to differentiate MON in group 29 and 28
    dummySegmentGroup27: DummySegmentTypeI9
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG27MON: Array<MonetaryInformationTypeI8>
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG27TXD: Array<TaxTypeI2>
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG27CVR: Array<ConversionRateTypeI3>
    
}

export interface group27TypeAttributes {
    
}


export interface group28Type {
    
    $attributes: group28TypeAttributes
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG28ITM: ItemNumberTypeI
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    group29: Array<group29Type>
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG28MON: Array<MonetaryInformationTypeI8>
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG28PTS: Array<PricingTicketingSubsequentTypeI>
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG28FCC: Array<FareCalculationCodeDetailsTypeI>
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG28PTK: Array<PricingTicketingDetailsTypeI2>
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG28FRU: Array<FareRulesInformationTypeI>
    
}

export interface group28TypeAttributes {
    
}

// To specify an item number
export interface ItemNumberTypeI {
    
    $attributes: ItemNumberTypeIAttributes
    
    
    itemNumberDetails: Array<ItemNumberIdentificationTypeI>
    
}

export interface ItemNumberTypeIAttributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationTypeI {
    
    $attributes: ItemNumberIdentificationTypeIAttributes
    
    
    number: Array<string>
    
    
    type: Array<string>
    
    
    qualifier: Array<string>
    
    
    responsibleAgency: Array<string>
    
}

export interface ItemNumberIdentificationTypeIAttributes {
    
}


export interface group29Type {
    
    $attributes: group29TypeAttributes
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG28ADT: ActionDetailsTypeI1
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG28TVL: Array<TravelProductInformationTypeI_33489S>
    
}

export interface group29TypeAttributes {
    
}

// To specify the action that should be taken on a selected reference number.
export interface ActionDetailsTypeI1 {
    
    $attributes: ActionDetailsTypeI1Attributes
    
    
    numberOfItemsDetails: Array<ProcessingInformationTypeI1>
    
    
    lastItemsDetails: Array<ReferenceTypeI>
    
}

export interface ActionDetailsTypeI1Attributes {
    
}

// To identify the action to be taken and the selection criteria.
export interface ProcessingInformationTypeI1 {
    
    $attributes: ProcessingInformationTypeI1Attributes
    
    
    actionQualifier: Array<string>
    
    
    referenceQualifier: Array<string>
    
    
    numberOfItems: Array<string>
    
}

export interface ProcessingInformationTypeI1Attributes {
    
}

// To specify which number in a sequence of references and/or the reference number.
export interface ReferenceTypeI {
    
    $attributes: ReferenceTypeIAttributes
    
    
    numberOfItems: Array<string>
    
    
    lastItemIdentifier: Array<string>
    
}

export interface ReferenceTypeIAttributes {
    
}

// To specify the tariff, fare supplier, and paragraph number for a fare rule.
export interface FareRulesInformationTypeI {
    
    $attributes: FareRulesInformationTypeIAttributes
    
    
    tariffClassId: Array<string>
    
    
    companyDetails: Array<CompanyIdentificationTypeI_58119C>
    
    
    ruleSectionId: Array<string>
    
}

export interface FareRulesInformationTypeIAttributes {
    
}


export interface carrierFeeGroupType {
    
    $attributes: carrierFeeGroupTypeAttributes
    
    // Nature of the fee (OB, OC, ...)
    feeType: SelectionDetailsTypeI5
    
    // Details for each fee
    feeDetails: Array<feeDetailsType4>
    
}

export interface carrierFeeGroupTypeAttributes {
    
}

// To specify the details for making a selection.
export interface SelectionDetailsTypeI5 {
    
    $attributes: SelectionDetailsTypeI5Attributes
    
    
    selectionDetails: SelectionDetailsInformationTypeI8
    
    
    otherSelectionDetails: Array<SelectionDetailsInformationTypeI8>
    
}

export interface SelectionDetailsTypeI5Attributes {
    
}

// To specify a selected option and associated information.
export interface SelectionDetailsInformationTypeI8 {
    
    $attributes: SelectionDetailsInformationTypeI8Attributes
    
    
    option: string
    
    
    optionInformation: Array<string>
    
}

export interface SelectionDetailsInformationTypeI8Attributes {
    
}


export interface feeDetailsType4 {
    
    $attributes: feeDetailsType4Attributes
    
    // Fee information
    feeInfo: SpecificDataInformationTypeI1
    
    // Fee associated amounts: amount with/without tax, total tax amount
    feeAmounts: Array<MonetaryInformationTypeI8>
    
    // taxes related to this fee
    feeTaxes: Array<TaxTypeI2>
    
    // Attributes of this fee (commercial description, ...)
    feeDescription: Array<InteractiveFreeTextTypeI6>
    
}

export interface feeDetailsType4Attributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationTypeI1 {
    
    $attributes: SpecificDataInformationTypeI1Attributes
    
    
    dataTypeInformation: DataTypeInformationTypeI1
    
    
    dataInformation: Array<DataInformationTypeI1>
    
}

export interface SpecificDataInformationTypeI1Attributes {
    
}

// To identify the type of data to be sent and to qualify the data when required.
export interface DataTypeInformationTypeI1 {
    
    $attributes: DataTypeInformationTypeI1Attributes
    
    
    type: string
    
    
    statusEvent: Array<string>
    
}

export interface DataTypeInformationTypeI1Attributes {
    
}

// To identify specific data and a quantity related to the data.
export interface DataInformationTypeI1 {
    
    $attributes: DataInformationTypeI1Attributes
    
    
    indicator: Array<string>
    
    
    value: Array<number>
    
    
    unit: Array<string>
    
}

export interface DataInformationTypeI1Attributes {
    
}


export interface FareComponentDetailsType1 {
    
    $attributes: FareComponentDetailsType1Attributes
    
    
    fareComponentID: ItemNumberType6
    
    // Market information related to the fare component or to the bound.
    marketFareComponent: Array<TravelProductInformationTypeI8>
    
    // Monetary Information.
    monetaryInformation: Array<MonetaryInformationType10>
    
    // Component Class information
    componentClassInfo: Array<PricingOrTicketingSubsequentType1>
    
    // Fare Qualifier Detail
    fareQualifiersDetail: Array<FareQualifierDetailsType7>
    
    // Details of the fare family used for this fare component
    fareFamilyDetails: Array<FareFamilyType5>
    
    // Carrier owner of the fare family
    fareFamilyOwner: Array<TransportIdentifierType6>
    
    // Used to specify coupons included in the fare component or in the bound.
    couponDetailsGroup: Array<CouponDetailsType1>
    
}

export interface FareComponentDetailsType1Attributes {
    
}

// To specify an item number
export interface ItemNumberType6 {
    
    $attributes: ItemNumberType6Attributes
    
    // Item identification: number of the fare component or of the bound.
    itemNumberDetails: Array<ItemNumberIdentificationType6>
    
}

export interface ItemNumberType6Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType6 {
    
    $attributes: ItemNumberIdentificationType6Attributes
    
    // Item identification: number of the fare component or of the bound.
    number: Array<string>
    
    // Item type: fare component (FC) or bound (BND).
    type: Array<string>
    
}

export interface ItemNumberIdentificationType6Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI8 {
    
    $attributes: TravelProductInformationTypeI8Attributes
    
    
    boardPointDetails: Array<LocationTypeI12>
    
    
    offpointDetails: Array<LocationTypeI12>
    
}

export interface TravelProductInformationTypeI8Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI12 {
    
    $attributes: LocationTypeI12Attributes
    
    
    trueLocationId: Array<string>
    
}

export interface LocationTypeI12Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType10 {
    
    $attributes: MonetaryInformationType10Attributes
    
    // Monetary information per fare component
    monetaryDetails: MonetaryInformationDetailsType8
    
    // Other monetary information per fare component
    otherMonetaryDetails: Array<MonetaryInformationDetailsType8>
    
}

export interface MonetaryInformationType10Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType8 {
    
    $attributes: MonetaryInformationDetailsType8Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsType8Attributes {
    
}

// To convey additional information related to a ticket
export interface PricingOrTicketingSubsequentType1 {
    
    $attributes: PricingOrTicketingSubsequentType1Attributes
    
    // RATE OR TARIFF CLASS INFORMATION
    fareBasisDetails: Array<RateTariffClassInformationType1>
    
}

export interface PricingOrTicketingSubsequentType1Attributes {
    
}

// To identify the current and/or original fare basis code.
export interface RateTariffClassInformationType1 {
    
    $attributes: RateTariffClassInformationType1Attributes
    
    // Fare Basis Code
    rateTariffClass: Array<string>
    
    // Ticket Designator
    otherRateTariffClass: Array<string>
    
}

export interface RateTariffClassInformationType1Attributes {
    
}


export interface FareQualifierDetailsType7 {
    
    $attributes: FareQualifierDetailsType7Attributes
    
    
    discountDetails: Array<DiscountPenaltyInformationType7>
    
}

export interface FareQualifierDetailsType7Attributes {
    
}


export interface DiscountPenaltyInformationType7 {
    
    $attributes: DiscountPenaltyInformationType7Attributes
    
    
    fareQualifier: Array<string>
    
}

export interface DiscountPenaltyInformationType7Attributes {
    
}

// NEW FARE SEACH
export interface FareFamilyType5 {
    
    $attributes: FareFamilyType5Attributes
    
    // Fare Family Short Name
    fareFamilyname: Array<string>
    
    // HIERARCHICAL ORDER WITHIN FARE FAMILY
    hierarchy: Array<number>
    
    // Indicates Commercial Fare Family Short names
    commercialFamilyDetails: Array<FareFamilyDetailsType5>
    
}

export interface FareFamilyType5Attributes {
    
}

// NEW FARE SEARCH
export interface FareFamilyDetailsType5 {
    
    $attributes: FareFamilyDetailsType5Attributes
    
    // Commercial fare Family Short name
    commercialFamily: string
    
}

export interface FareFamilyDetailsType5Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType6 {
    
    $attributes: TransportIdentifierType6Attributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI16>
    
}

export interface TransportIdentifierType6Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI16 {
    
    $attributes: CompanyIdentificationTypeI16Attributes
    
    // Carrier owner fo the fare family
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI16Attributes {
    
}


export interface CouponDetailsType1 {
    
    $attributes: CouponDetailsType1Attributes
    
    // Tattoo + type of the product identifying the coupon.
    productId: ReferenceInfoType14
    
    // Flight Connection Type
    flightConnectionType: Array<TravelProductInformationType5>
    
}

export interface CouponDetailsType1Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType14 {
    
    $attributes: ReferenceInfoType14Attributes
    
    
    referenceDetails: ReferencingDetailsType15
    
}

export interface ReferenceInfoType14Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType15 {
    
    $attributes: ReferencingDetailsType15Attributes
    
    
    type: string
    
    
    value: string
    
}

export interface ReferencingDetailsType15Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationType5 {
    
    $attributes: TravelProductInformationType5Attributes
    
    
    boardPointDetails: Array<LocationTypeI12>
    
    
    offpointDetails: Array<LocationTypeI12>
    
    // TST Connection Type
    flightTypeDetails: Array<ProductTypeDetailsType9>
    
}

export interface TravelProductInformationType5Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType9 {
    
    $attributes: ProductTypeDetailsType9Attributes
    
    // TST Connection Type
    flightIndicator: string
    
}

export interface ProductTypeDetailsType9Attributes {
    
}


export interface Fare_InformativePricingWithoutPNRType {
    
    $attributes: Fare_InformativePricingWithoutPNRTypeAttributes
    
    
    originatorGroup: Array<originatorGroupType1>
    
    // Passengers description
    passengersGroup: Array<passengersGroupType1>
    
    // Itinerary description and pricing information related at flight level.
    segmentGroup: Array<segmentGroupType1>
    
    
    pricingOptionGroup: Array<pricingOptionGroupType1>
    
}

export interface Fare_InformativePricingWithoutPNRTypeAttributes {
    
}


export interface originatorGroupType1 {
    
    $attributes: originatorGroupType1Attributes
    
    // Supplementary protocol or business related information.
    additionalBusinessInformation: Array<AdditionalBusinessSourceInformationTypeI2>
    
}

export interface originatorGroupType1Attributes {
    
}

// To specify additional originator and source information.
export interface AdditionalBusinessSourceInformationTypeI2 {
    
    $attributes: AdditionalBusinessSourceInformationTypeI2Attributes
    
    
    sourceType: SourceTypeDetailsTypeI3
    
    
    originatorDetails: Array<OriginatorIdentificationDetailsTypeI12>
    
    
    locationDetails: Array<LocationTypeI13>
    
    
    countryCode: Array<string>
    
    
    systemCode: Array<string>
    
}

export interface AdditionalBusinessSourceInformationTypeI2Attributes {
    
}

// To identify the type of source.
export interface SourceTypeDetailsTypeI3 {
    
    $attributes: SourceTypeDetailsTypeI3Attributes
    
    
    sourceQualifier1: string
    
    
    sourceQualifier2: Array<string>
    
}

export interface SourceTypeDetailsTypeI3Attributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI12 {
    
    $attributes: OriginatorIdentificationDetailsTypeI12Attributes
    
    
    originatorId: Array<number>
    
    
    inHouseIdentification1: Array<string>
    
    
    inHouseIdentification2: Array<string>
    
    
    inHouseIdentification3: Array<string>
    
}

export interface OriginatorIdentificationDetailsTypeI12Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI13 {
    
    $attributes: LocationTypeI13Attributes
    
    
    trueLocationId: Array<string>
    
    
    trueLocation: Array<string>
    
}

export interface LocationTypeI13Attributes {
    
}


export interface passengersGroupType1 {
    
    $attributes: passengersGroupType1Attributes
    
    // Contains: * Number of passengers in the group * Group tattoo
    segmentRepetitionControl: SegmentRepetitionControlTypeI6
    
    // Passengers&#39; tattoos provided by the carrier in case of LCC pricing with U2. NOT USED FOR FSC.
    travellersID: Array<SpecificTravellerTypeI2>
    
    // PTC
    discountPtc: Array<FareInformationTypeI7>
    
}

export interface passengersGroupType1Attributes {
    
}

// To indicate the number of segment group repetitions.
export interface SegmentRepetitionControlTypeI6 {
    
    $attributes: SegmentRepetitionControlTypeI6Attributes
    
    
    segmentControlDetails: Array<SegmentRepetitionControlDetailsTypeI6>
    
}

export interface SegmentRepetitionControlTypeI6Attributes {
    
}

// Information about the number of selection segments to be processed.
export interface SegmentRepetitionControlDetailsTypeI6 {
    
    $attributes: SegmentRepetitionControlDetailsTypeI6Attributes
    
    // NOT USED AT TVL LEVEL!
    quantity: Array<number>
    
    // NOT USED AT TVL LEVEL!
    numberOfUnits: Array<number>
    
}

export interface SegmentRepetitionControlDetailsTypeI6Attributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerTypeI2 {
    
    $attributes: SpecificTravellerTypeI2Attributes
    
    
    travellerDetails: Array<SpecificTravellerDetailsTypeI2>
    
}

export interface SpecificTravellerTypeI2Attributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerDetailsTypeI2 {
    
    $attributes: SpecificTravellerDetailsTypeI2Attributes
    
    // Passenger Tattoos
    measurementValue: Array<number>
    
}

export interface SpecificTravellerDetailsTypeI2Attributes {
    
}

// To specify fare details.
export interface FareInformationTypeI7 {
    
    $attributes: FareInformationTypeI7Attributes
    
    // PTC or fare discount
    valueQualifier: Array<string>
    
    
    fareDetails: Array<FareDetailsTypeI4>
    
    
    identityNumber: Array<string>
    
}

export interface FareInformationTypeI7Attributes {
    
}

// To specify the fare type and related information.
export interface FareDetailsTypeI4 {
    
    $attributes: FareDetailsTypeI4Attributes
    
    
    qualifier: Array<string>
    
}

export interface FareDetailsTypeI4Attributes {
    
}


export interface segmentGroupType1 {
    
    $attributes: segmentGroupType1Attributes
    
    // Convey the information related to a segment (company, flight number, origin, destination...).
    segmentInformation: TravelProductInformationTypeI9
    
    // Used for technical stops, even if it is currently deprecated.
    additionnalSegmentDetails: Array<AdditionalProductDetailsTypeI7>
    
    // To store the flight inventory (opened classes and number of remaining seats) if known.
    inventory: Array<ProductInformationTypeI3>
    
}

export interface segmentGroupType1Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI9 {
    
    $attributes: TravelProductInformationTypeI9Attributes
    
    
    flightDate: Array<ProductDateTimeTypeI13>
    
    
    boardPointDetails: Array<LocationTypeI_217754C>
    
    
    offpointDetails: Array<LocationTypeI_217754C>
    
    
    companyDetails: Array<CompanyIdentificationTypeI_217756C1>
    
    
    flightIdentification: Array<ProductIdentificationDetailsTypeI11>
    
    
    flightTypeDetails: Array<ProductTypeDetailsTypeI8>
    
    // Connection indicators: order in the group.
    itemNumber: Array<number>
    
    
    specialSegment: Array<string>
    
}

export interface TravelProductInformationTypeI9Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI13 {
    
    $attributes: ProductDateTimeTypeI13Attributes
    
    
    departureDate: Array<string>
    
    
    departureTime: Array<string>
    
    
    arrivalDate: Array<string>
    
    
    arrivalTime: Array<string>
    
}

export interface ProductDateTimeTypeI13Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI_217754C {
    
    $attributes: LocationTypeI_217754CAttributes
    
    
    trueLocationId: Array<string>
    
}

export interface LocationTypeI_217754CAttributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI_217756C1 {
    
    $attributes: CompanyIdentificationTypeI_217756C1Attributes
    
    
    marketingCompany: Array<string>
    
    
    operatingCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI_217756C1Attributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI11 {
    
    $attributes: ProductIdentificationDetailsTypeI11Attributes
    
    
    flightNumber: string
    
    
    bookingClass: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI11Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsTypeI8 {
    
    $attributes: ProductTypeDetailsTypeI8Attributes
    
    
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsTypeI8Attributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsTypeI7 {
    
    $attributes: AdditionalProductDetailsTypeI7Attributes
    
    
    legDetails: Array<AdditionalProductTypeI7>
    
}

export interface AdditionalProductDetailsTypeI7Attributes {
    
}

// Additional details describing a specific means of transport.
export interface AdditionalProductTypeI7 {
    
    $attributes: AdditionalProductTypeI7Attributes
    
    
    equipment: Array<string>
    
    
    numberOfStops: Array<number>
    
}

export interface AdditionalProductTypeI7Attributes {
    
}

// To specify details related to availability status or cabin configuration for a product.
export interface ProductInformationTypeI3 {
    
    $attributes: ProductInformationTypeI3Attributes
    
    
    bookingClassDetails: Array<ProductDetailsTypeI3>
    
}

export interface ProductInformationTypeI3Attributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsTypeI3 {
    
    $attributes: ProductDetailsTypeI3Attributes
    
    
    designator: string
    
    
    availabilityStatus: Array<string>
    
    
    specialService: Array<string>
    
}

export interface ProductDetailsTypeI3Attributes {
    
}


export interface pricingOptionGroupType1 {
    
    $attributes: pricingOptionGroupType1Attributes
    
    
    pricingOptionKey: PricingOptionKey1
    
    
    optionDetail: Array<AttributeType10>
    
    
    carrierInformation: Array<TransportIdentifierType7>
    
    
    currency: Array<CurrenciesType3>
    
    
    penDisInformation: Array<DiscountAndPenaltyInformationType3>
    
    
    monetaryInformation: Array<MonetaryInformationType11>
    
    
    taxInformation: Array<DutyTaxFeeDetailsType2>
    
    
    dateInformation: Array<StructuredDateTimeInformationType7>
    
    
    frequentFlyerInformation: Array<FrequentTravellerIdentificationCodeType9>
    
    
    formOfPaymentInformation: Array<FormOfPaymentType4>
    
    
    locationInformation: Array<PlaceLocationIdentificationType2>
    
    
    paxSegTstReference: Array<ReferenceInfoType15>
    
}

export interface pricingOptionGroupType1Attributes {
    
}


export interface PricingOptionKey1 {
    
    $attributes: PricingOptionKey1Attributes
    
    
    pricingOptionKey: string
    
}

export interface PricingOptionKey1Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType10 {
    
    $attributes: AttributeType10Attributes
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU8>
    
}

export interface AttributeType10Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU8 {
    
    $attributes: AttributeInformationTypeU8Attributes
    
    // Used for attribute value rather than attributeType
    attributeType: string
    
    
    attributeDescription: Array<string>
    
}

export interface AttributeInformationTypeU8Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType7 {
    
    $attributes: TransportIdentifierType7Attributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI17>
    
}

export interface TransportIdentifierType7Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI17 {
    
    $attributes: CompanyIdentificationTypeI17Attributes
    
    
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI17Attributes {
    
}

// To specify currencies used in the transaction and relevant details for the rate of exchange.
export interface CurrenciesType3 {
    
    $attributes: CurrenciesType3Attributes
    
    
    firstCurrencyDetails: Array<CurrencyDetailsTypeU3>
    
}

export interface CurrenciesType3Attributes {
    
}

// The usage to which a currency relates
export interface CurrencyDetailsTypeU3 {
    
    $attributes: CurrencyDetailsTypeU3Attributes
    
    
    currencyQualifier: string
    
    
    currencyIsoCode: Array<string>
    
}

export interface CurrencyDetailsTypeU3Attributes {
    
}


export interface DiscountAndPenaltyInformationType3 {
    
    $attributes: DiscountAndPenaltyInformationType3Attributes
    
    
    discountPenaltyQualifier: Array<string>
    
    
    discountPenaltyDetails: Array<DiscountPenaltyMonetaryInformationType3>
    
}

export interface DiscountAndPenaltyInformationType3Attributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationType3 {
    
    $attributes: DiscountPenaltyMonetaryInformationType3Attributes
    
    
    function: Array<string>
    
    
    amountType: Array<string>
    
    
    amount: Array<string>
    
    
    rate: Array<string>
    
    
    currency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationType3Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType11 {
    
    $attributes: MonetaryInformationType11Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsType9
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType9>
    
}

export interface MonetaryInformationType11Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType9 {
    
    $attributes: MonetaryInformationDetailsType9Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType9Attributes {
    
}

// To specify relevant duty/tax/fee information.
export interface DutyTaxFeeDetailsType2 {
    
    $attributes: DutyTaxFeeDetailsType2Attributes
    
    
    taxQualifier: string
    
    
    taxType: Array<DutyTaxFeeAccountDetailType1>
    
    
    taxNature: Array<string>
    
    
    taxData: Array<DutyTaxFeeDetailType1>
    
}

export interface DutyTaxFeeDetailsType2Attributes {
    
}


export interface DutyTaxFeeAccountDetailType1 {
    
    $attributes: DutyTaxFeeAccountDetailType1Attributes
    
    
    isoCountry: string
    
}

export interface DutyTaxFeeAccountDetailType1Attributes {
    
}


export interface DutyTaxFeeDetailType1 {
    
    $attributes: DutyTaxFeeDetailType1Attributes
    
    
    taxRate: Array<string>
    
    
    taxValueQualifier: Array<string>
    
}

export interface DutyTaxFeeDetailType1Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType7 {
    
    $attributes: StructuredDateTimeInformationType7Attributes
    
    
    businessSemantic: string
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType10>
    
}

export interface StructuredDateTimeInformationType7Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType10 {
    
    $attributes: StructuredDateTimeType10Attributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
}

export interface StructuredDateTimeType10Attributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType9 {
    
    $attributes: FrequentTravellerIdentificationCodeType9Attributes
    
    // Frequent Traveller Info
    frequentTravellerDetails: Array<FrequentTravellerIdentificationType8>
    
}

export interface FrequentTravellerIdentificationCodeType9Attributes {
    
}


export interface FrequentTravellerIdentificationType8 {
    
    $attributes: FrequentTravellerIdentificationType8Attributes
    
    // Carrier where the FQTV is registered.
    carrier: Array<string>
    
    
    number: Array<string>
    
    // To specify a Tier linked to the FQTV
    tierLevel: Array<string>
    
    // For example : priority code
    priorityCode: Array<string>
    
}

export interface FrequentTravellerIdentificationType8Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentType4 {
    
    $attributes: FormOfPaymentType4Attributes
    
    // Details on the form of payment
    formOfPayment: FormOfPaymentDetailsType4
    
    
    otherFormOfPayment: Array<FormOfPaymentDetailsType4>
    
}

export interface FormOfPaymentType4Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsType4 {
    
    $attributes: FormOfPaymentDetailsType4Attributes
    
    
    type: string
    
    // indicates wether the transaction is a credit or debit.
    indicator: Array<string>
    
    
    amount: Array<number>
    
    // provides the code of the vendor/carrier code
    vendorCode: Array<string>
    
    
    creditCardNumber: Array<string>
    
    // expiry date of the credit card
    expiryDate: Array<string>
    
    
    approvalCode: Array<string>
    
    
    sourceOfApproval: Array<string>
    
    
    authorisedAmount: Array<number>
    
    
    addressVerification: Array<string>
    
    
    customerAccount: Array<string>
    
    
    extendedPayment: Array<string>
    
    
    fopFreeText: Array<string>
    
    
    membershipStatus: Array<string>
    
    
    transactionInfo: Array<string>
    
    // stores a pin code attached to the account
    pinCode: Array<string>
    
    // Details pin code type (in case of encrypted pin code)
    pinCodeType: Array<string>
    
}

export interface FormOfPaymentDetailsType4Attributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType2 {
    
    $attributes: PlaceLocationIdentificationType2Attributes
    
    
    locationType: string
    
    
    firstLocationDetails: Array<RelatedLocationOneIdentificationType2>
    
    
    secondLocationDetails: Array<RelatedLocationTwoIdentificationType2>
    
}

export interface PlaceLocationIdentificationType2Attributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationType2 {
    
    $attributes: RelatedLocationOneIdentificationType2Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationOneIdentificationType2Attributes {
    
}

// Identification of second related location by code or name.
export interface RelatedLocationTwoIdentificationType2 {
    
    $attributes: RelatedLocationTwoIdentificationType2Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationTwoIdentificationType2Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType15 {
    
    $attributes: ReferenceInfoType15Attributes
    
    
    referenceDetails: Array<ReferencingDetailsType16>
    
}

export interface ReferenceInfoType15Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType16 {
    
    $attributes: ReferencingDetailsType16Attributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
}

export interface ReferencingDetailsType16Attributes {
    
}


export interface Fare_InformativePricingWithoutPNRReplyType {
    
    $attributes: Fare_InformativePricingWithoutPNRReplyTypeAttributes
    
    // Contains general information about the message, especially the use case. Tells if the request was correctly performed of not.
    messageDetails: MessageActionDetailsTypeI5
    
    
    errorGroup: Array<ErrorGroupType7>
    
    
    mainGroup: Array<mainGroupType1>
    
}

export interface Fare_InformativePricingWithoutPNRReplyTypeAttributes {
    
}

// To specify the message type and business function.
export interface MessageActionDetailsTypeI5 {
    
    $attributes: MessageActionDetailsTypeI5Attributes
    
    
    messageFunctionDetails: Array<MessageFunctionBusinessDetailsTypeI5>
    
    
    responseType: Array<string>
    
}

export interface MessageActionDetailsTypeI5Attributes {
    
}

// To indicate the type and function of a message or part of a message.
export interface MessageFunctionBusinessDetailsTypeI5 {
    
    $attributes: MessageFunctionBusinessDetailsTypeI5Attributes
    
    
    businessFunction: Array<string>
    
    
    messageFunction: Array<string>
    
    
    responsibleAgency: Array<string>
    
    
    additionalMessageFunction: Array<string>
    
}

export interface MessageFunctionBusinessDetailsTypeI5Attributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType7 {
    
    $attributes: ErrorGroupType7Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType12
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType12>
    
}

export interface ErrorGroupType7Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType12 {
    
    $attributes: ApplicationErrorInformationType12Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType10
    
}

export interface ApplicationErrorInformationType12Attributes {
    
}


export interface ApplicationErrorDetailType10 {
    
    $attributes: ApplicationErrorDetailType10Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType10Attributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType12 {
    
    $attributes: FreeTextInformationType12Attributes
    
    
    freeTextDetails: FreeTextDetailsType12
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType12Attributes {
    
}


export interface FreeTextDetailsType12 {
    
    $attributes: FreeTextDetailsType12Attributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
    
    status: Array<string>
    
    
    companyId: Array<string>
    
    
    language: Array<string>
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType12Attributes {
    
}


export interface mainGroupType1 {
    
    $attributes: mainGroupType1Attributes
    
    // A useless separator.
    dummySegment: DummySegmentTypeI10
    
    // Convertion rates and currency information.
    convertionRate: Array<ConversionRateTypeI4>
    
    
    generalIndicatorsGroup: Array<generalIndicatorsGroupType1>
    
    
    pricingGroupLevelGroup: Array<pricingGroupLevelGroupType1>
    
}

export interface mainGroupType1Attributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI10 {
    
    $attributes: DummySegmentTypeI10Attributes
    
}

export interface DummySegmentTypeI10Attributes {
    
}

// To specify details of a conversion rate related to an amount.
export interface ConversionRateTypeI4 {
    
    $attributes: ConversionRateTypeI4Attributes
    
    
    conversionRateDetails: ConversionRateDetailsTypeI4
    
    
    otherConvRateDetails: Array<ConversionRateDetailsTypeI4>
    
}

export interface ConversionRateTypeI4Attributes {
    
}

// To specify the conversion rate and the monetary amount.
export interface ConversionRateDetailsTypeI4 {
    
    $attributes: ConversionRateDetailsTypeI4Attributes
    
    
    conversionType: Array<string>
    
    
    currency: Array<string>
    
    
    rateType: Array<string>
    
    
    pricingAmount: Array<number>
    
    
    convertedValueAmount: Array<number>
    
    
    dutyTaxFeeType: Array<string>
    
    
    measurementValue: Array<number>
    
    
    measurementSignificance: Array<string>
    
}

export interface ConversionRateDetailsTypeI4Attributes {
    
}


export interface generalIndicatorsGroupType1 {
    
    $attributes: generalIndicatorsGroupType1Attributes
    
    // Contains pricing indicators such as SITI, SOTO... and International flag.
    generalIndicators: PricingTicketingDetailsTypeI3
    
}

export interface generalIndicatorsGroupType1Attributes {
    
}

// To convey pricing and date information related to a ticket.
export interface PricingTicketingDetailsTypeI3 {
    
    $attributes: PricingTicketingDetailsTypeI3Attributes
    
    
    priceTicketDetails: Array<PricingTicketingInformationTypeI2>
    
    // PRIVATE &#34;P&#34; ATAF &#34;A&#34; IATA &#34;I&#34; NEGO CONS &#34;M&#34; NEGO &#34;N&#34; DDF &#34;U&#34; DDF CORP &#34;D&#34; TOUR &#34;T&#34; DDF INC TOUR &#34;K&#34; DDF BULK TOUR &#34;L&#34; OVERRIDE &#34;O&#34;
    priceTariffType: Array<string>
    
    
    productDateTimeDetails: Array<ProductDateTimeTypeI14>
    
    
    companyDetails: Array<CompanyIdentificationTypeI18>
    
    
    companyNumberDetails: Array<CompanyIdentificationNumbersTypeI1>
    
    
    locationDetails: Array<LocationDetailsTypeI4>
    
    
    otherLocationDetails: Array<LocationDetailsTypeI4>
    
    
    idNumber: Array<string>
    
    
    monetaryAmount: Array<number>
    
}

export interface PricingTicketingDetailsTypeI3Attributes {
    
}

// To specify indicators related to pricing and ticketing.
export interface PricingTicketingInformationTypeI2 {
    
    $attributes: PricingTicketingInformationTypeI2Attributes
    
    
    indicators: Array<string>
    
}

export interface PricingTicketingInformationTypeI2Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI14 {
    
    $attributes: ProductDateTimeTypeI14Attributes
    
    
    departureDate: Array<string>
    
    
    departureTime: Array<number>
    
    
    arrivalDate: Array<string>
    
    
    arrivalTime: Array<number>
    
    
    dateVariation: Array<number>
    
}

export interface ProductDateTimeTypeI14Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI18 {
    
    $attributes: CompanyIdentificationTypeI18Attributes
    
    
    marketingCompany: Array<string>
    
    
    operatingCompany: Array<string>
    
    
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI18Attributes {
    
}

// Number to identify a company and any associated companies.
export interface CompanyIdentificationNumbersTypeI1 {
    
    $attributes: CompanyIdentificationNumbersTypeI1Attributes
    
    
    identifier: string
    
    
    otherIdentifier: Array<string>
    
}

export interface CompanyIdentificationNumbersTypeI1Attributes {
    
}

// To specify a location and related country.
export interface LocationDetailsTypeI4 {
    
    $attributes: LocationDetailsTypeI4Attributes
    
    
    city: Array<string>
    
    
    country: Array<string>
    
}

export interface LocationDetailsTypeI4Attributes {
    
}


export interface pricingGroupLevelGroupType1 {
    
    $attributes: pricingGroupLevelGroupType1Attributes
    
    // Number of pax in this fare group
    numberOfPax: SegmentRepetitionControlTypeI7
    
    // * IDs of the passengers (same as in the request) * Carrier-related tattoo for LCC pricing (NOT IMPLEMENTED)
    passengersID: Array<SpecificTravellerTypeI3>
    
    
    fareInfoGroup: fareInfoGroupType1
    
}

export interface pricingGroupLevelGroupType1Attributes {
    
}

// To indicate the number of segment group repetitions.
export interface SegmentRepetitionControlTypeI7 {
    
    $attributes: SegmentRepetitionControlTypeI7Attributes
    
    
    segmentControlDetails: Array<SegmentRepetitionControlDetailsTypeI7>
    
}

export interface SegmentRepetitionControlTypeI7Attributes {
    
}

// Information about the number of selection segments to be processed.
export interface SegmentRepetitionControlDetailsTypeI7 {
    
    $attributes: SegmentRepetitionControlDetailsTypeI7Attributes
    
    
    quantity: Array<number>
    
    
    numberOfUnits: Array<number>
    
    
    totalNumberOfItems: Array<number>
    
}

export interface SegmentRepetitionControlDetailsTypeI7Attributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerTypeI3 {
    
    $attributes: SpecificTravellerTypeI3Attributes
    
    
    travellerDetails: Array<SpecificTravellerDetailsTypeI3>
    
    
    DummyNET: string
    
}

export interface SpecificTravellerTypeI3Attributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerDetailsTypeI3 {
    
    $attributes: SpecificTravellerDetailsTypeI3Attributes
    
    
    referenceNumber: Array<string>
    
    
    measurementValue: Array<number>
    
    
    firstDate: Array<string>
    
    
    surname: Array<string>
    
    
    firstName: Array<string>
    
}

export interface SpecificTravellerDetailsTypeI3Attributes {
    
}


export interface fareInfoGroupType1 {
    
    $attributes: fareInfoGroupType1Attributes
    
    // Fare information
    emptySegment: FareInformationTypeI8
    
    // Contains the following pieces of information: * Ticket designator * NVA date * NVB date
    pricingIndicators: Array<PricingTicketingDetailsTypeI3>
    
    
    fareAmount: Array<MonetaryInformationType_187661S>
    
    // Used to store text data such as: * Horizontal fare calulation line * Mileage fare calculation line * Endorsement information ...
    textData: Array<InteractiveFreeTextTypeI7>
    
    
    surchargesGroup: Array<surchargesGroupType1>
    
    
    corporateGroup: Array<corporateGroupType1>
    
    
    negoFareGroup: Array<negoFareGroupType1>
    
    
    segmentLevelGroup: Array<segmentLevelGroupType1>
    
    // NOT IMPLEMENTED
    structuredFareCalcGroup: Array<structuredFareCalcGroupType1>
    
    // This group contains the breakdown related to carrier fees. A series of data elements representing data required to collect non-airport/government fees, store the fee data, and track the revenue separate from the ticket revenue without requiring a secondary document be issued.
    carrierFeeGroup: Array<carrierFeeGroupType1>
    
    // Details at fare component level or at bound level.
    fareComponentDetailsGroup: Array<FareComponentDetailsType2>
    
}

export interface fareInfoGroupType1Attributes {
    
}

// To specify fare details.
export interface FareInformationTypeI8 {
    
    $attributes: FareInformationTypeI8Attributes
    
    // Not used
    valueQualifier: Array<string>
    
    // Not used
    value: Array<number>
    
    // Fare information
    fareDetails: Array<FareDetailsTypeI5>
    
    
    identityNumber: Array<string>
    
    // Not used
    fareTypeGrouping: Array<FareTypeGroupingInformationTypeI1>
    
    // Not used
    rateCategory: Array<string>
    
}

export interface FareInformationTypeI8Attributes {
    
}

// To specify the fare type and related information.
export interface FareDetailsTypeI5 {
    
    $attributes: FareDetailsTypeI5Attributes
    
    
    qualifier: Array<string>
    
    
    rate: Array<number>
    
    
    country: Array<string>
    
    
    fareCategory: Array<string>
    
}

export interface FareDetailsTypeI5Attributes {
    
}

// To designate system specific combinations of fare types and fare groupings
export interface FareTypeGroupingInformationTypeI1 {
    
    $attributes: FareTypeGroupingInformationTypeI1Attributes
    
    
    pricingGroup: Array<string>
    
}

export interface FareTypeGroupingInformationTypeI1Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_187661S {
    
    $attributes: MonetaryInformationType_187661SAttributes
    
    
    monetaryDetails: MonetaryInformationDetailsType_223867C
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType_223867C>
    
}

export interface MonetaryInformationType_187661SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_223867C {
    
    $attributes: MonetaryInformationDetailsType_223867CAttributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType_223867CAttributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextTypeI7 {
    
    $attributes: InteractiveFreeTextTypeI7Attributes
    
    
    freeTextQualification: Array<FreeTextQualificationTypeI7>
    
    
    freeText: Array<string>
    
}

export interface InteractiveFreeTextTypeI7Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationTypeI7 {
    
    $attributes: FreeTextQualificationTypeI7Attributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
    
    status: Array<string>
    
    
    companyId: Array<string>
    
    
    language: Array<string>
    
}

export interface FreeTextQualificationTypeI7Attributes {
    
}


export interface surchargesGroupType1 {
    
    $attributes: surchargesGroupType1Attributes
    
    // Stores the data related to taxes.
    taxesAmount: TaxTypeI3
    
    // Stores the information related to the penalties: amount or rate, currency...
    penaltiesAmount: Array<DiscountAndPenaltyInformationTypeI1>
    
    // To store the Passenger Facility Charges.
    pfcAmount: Array<MonetaryInformationTypeI9>
    
}

export interface surchargesGroupType1Attributes {
    
}

// To specify details relating to tax(es).
export interface TaxTypeI3 {
    
    $attributes: TaxTypeI3Attributes
    
    
    taxCategory: Array<string>
    
    
    taxDetails: Array<TaxDetailsTypeI5>
    
}

export interface TaxTypeI3Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsTypeI5 {
    
    $attributes: TaxDetailsTypeI5Attributes
    
    
    rate: Array<string>
    
    
    countryCode: Array<string>
    
    
    currencyCode: Array<string>
    
    
    type: Array<string>
    
}

export interface TaxDetailsTypeI5Attributes {
    
}

// To specify information about discounts and penalties
export interface DiscountAndPenaltyInformationTypeI1 {
    
    $attributes: DiscountAndPenaltyInformationTypeI1Attributes
    
    
    discountPenaltyQualifier: Array<string>
    
    
    discountPenaltyDetails: Array<DiscountPenaltyMonetaryInformationTypeI1>
    
}

export interface DiscountAndPenaltyInformationTypeI1Attributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationTypeI1 {
    
    $attributes: DiscountPenaltyMonetaryInformationTypeI1Attributes
    
    
    function: Array<string>
    
    
    amountType: Array<string>
    
    
    amount: Array<number>
    
    
    rate: Array<string>
    
    
    currency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationTypeI1Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI9 {
    
    $attributes: MonetaryInformationTypeI9Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsTypeI11
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsTypeI11>
    
}

export interface MonetaryInformationTypeI9Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI11 {
    
    $attributes: MonetaryInformationDetailsTypeI11Attributes
    
    
    typeQualifier: string
    
    
    amount: Array<string>
    
    
    currency: Array<string>
    
    
    location: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI11Attributes {
    
}


export interface corporateGroupType1 {
    
    $attributes: corporateGroupType1Attributes
    
    // Stores data qualifying a corporate fare: * Type of fare (Nego/Unifare) * Associated contract number or company name
    corporateData: FareCalculationCodeDetailsTypeI1
    
}

export interface corporateGroupType1Attributes {
    
}

// To specify fare calculation information.
export interface FareCalculationCodeDetailsTypeI1 {
    
    $attributes: FareCalculationCodeDetailsTypeI1Attributes
    
    
    chargeCategory: Array<string>
    
    
    amount: Array<number>
    
    
    locationCode: Array<string>
    
    
    otherLocationCode: Array<string>
    
    
    rate: Array<number>
    
}

export interface FareCalculationCodeDetailsTypeI1Attributes {
    
}


export interface negoFareGroupType1 {
    
    $attributes: negoFareGroupType1Attributes
    
    
    negoFareIndicators: PricingTicketingSubsequentTypeI1
    
    
    extNegoFareIndicators: Array<FareQualifierDetailsTypeI3>
    
    // Amount of the negociated fares
    negoFareAmount: Array<DiscountAndPenaltyInformationTypeI1>
    
    // Text informations : indicates to ticketing what to print in Fare and Total boxes.
    negoFareText: Array<InteractiveFreeTextTypeI7>
    
}

export interface negoFareGroupType1Attributes {
    
}

// To convey additional information related to a ticket.
export interface PricingTicketingSubsequentTypeI1 {
    
    $attributes: PricingTicketingSubsequentTypeI1Attributes
    
    
    itemNumber: Array<string>
    
    
    fareBasisDetails: Array<RateTariffClassInformationTypeI2>
    
    
    fareValue: Array<number>
    
    
    priceType: Array<string>
    
    
    specialCondition: Array<string>
    
    
    otherSpecialCondition: Array<string>
    
    
    additionalSpecialCondition: Array<string>
    
    
    taxCategory: Array<string>
    
}

export interface PricingTicketingSubsequentTypeI1Attributes {
    
}

// To identify the current and/or original fare basis code.
export interface RateTariffClassInformationTypeI2 {
    
    $attributes: RateTariffClassInformationTypeI2Attributes
    
    
    rateTariffClass: Array<string>
    
    
    rateTariffIndicator: Array<string>
    
    
    otherRateTariffClass: Array<string>
    
    
    otherRateTariffIndicator: Array<string>
    
}

export interface RateTariffClassInformationTypeI2Attributes {
    
}

// To specify the details which qualify a fare
export interface FareQualifierDetailsTypeI3 {
    
    $attributes: FareQualifierDetailsTypeI3Attributes
    
    
    movementType: Array<string>
    
    
    fareCategories: Array<FareCategoryCodesTypeI4>
    
    
    fareDetails: Array<FareDetailsTypeI5>
    
    
    additionalFareDetails: Array<AdditionalFareQualifierDetailsTypeI4>
    
    
    discountDetails: Array<DiscountPenaltyInformationTypeI1>
    
}

export interface FareQualifierDetailsTypeI3Attributes {
    
}

// To designate non-system specific combinations of fare types.
export interface FareCategoryCodesTypeI4 {
    
    $attributes: FareCategoryCodesTypeI4Attributes
    
    
    fareType: string
    
    
    otherFareType: Array<string>
    
}

export interface FareCategoryCodesTypeI4Attributes {
    
}

// To specify the fare basis and ticket designator codes.
export interface AdditionalFareQualifierDetailsTypeI4 {
    
    $attributes: AdditionalFareQualifierDetailsTypeI4Attributes
    
    
    rateClass: Array<string>
    
    
    commodityCategory: Array<string>
    
    
    pricingGroup: Array<string>
    
    
    secondRateClass: Array<string>
    
}

export interface AdditionalFareQualifierDetailsTypeI4Attributes {
    
}

// To indicate the discounts and penalties by fare type.
export interface DiscountPenaltyInformationTypeI1 {
    
    $attributes: DiscountPenaltyInformationTypeI1Attributes
    
    
    fareQualifier: string
    
    
    rateCategory: Array<string>
    
    
    amount: Array<number>
    
    
    percentage: Array<number>
    
}

export interface DiscountPenaltyInformationTypeI1Attributes {
    
}


export interface segmentLevelGroupType1 {
    
    $attributes: segmentLevelGroupType1Attributes
    
    // Information about a segment: dates, carrier, board/off point...
    segmentInformation: TravelProductInformationTypeI_69238S
    
    // Contains the following pieces of information: * Ticket designator * NVA date * NVB date
    additionalInformation: Array<PricingTicketingDetailsTypeI3>
    
    // Contains the following pieces of information: * Transportation class * Fare Basis * Fare by Rule flag
    fareBasis: Array<FareQualifierDetailsTypeI3>
    
    // This group gives the Cabin corresponding to each class of service.
    cabinGroup: Array<cabinGroupType1>
    
    // Baggage allowance in a given measurement unit.
    baggageAllowance: Array<ExcessBaggageTypeI2>
    
    // PTC associated to this segment in this fare group.
    ptcSegment: Array<NumberOfUnitsTypeI2>
    
    // Coupon value/TPM for national fares
    couponInformation: Array<QuantityTypeI4>
    
}

export interface segmentLevelGroupType1Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI_69238S {
    
    $attributes: TravelProductInformationTypeI_69238SAttributes
    
    
    flightDate: Array<ProductDateTimeTypeI14>
    
    
    boardPointDetails: Array<LocationTypeI14>
    
    
    offpointDetails: Array<LocationTypeI14>
    
    
    companyDetails: Array<CompanyIdentificationTypeI18>
    
    
    flightIdentification: Array<ProductIdentificationDetailsTypeI12>
    
    
    flightTypeDetails: Array<ProductTypeDetailsTypeI9>
    
    
    itemNumber: Array<number>
    
    
    specialSegment: Array<string>
    
    
    marriageDetails: Array<MarriageControlDetailsTypeI5>
    
}

export interface TravelProductInformationTypeI_69238SAttributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI14 {
    
    $attributes: LocationTypeI14Attributes
    
    
    trueLocationId: Array<string>
    
    
    trueLocation: Array<string>
    
}

export interface LocationTypeI14Attributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI12 {
    
    $attributes: ProductIdentificationDetailsTypeI12Attributes
    
    
    flightNumber: string
    
    
    bookingClass: Array<string>
    
    
    operationalSuffix: Array<string>
    
    
    modifier: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI12Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsTypeI9 {
    
    $attributes: ProductTypeDetailsTypeI9Attributes
    
    
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsTypeI9Attributes {
    
}

// To identify details concerning the marriage status of travel product.
export interface MarriageControlDetailsTypeI5 {
    
    $attributes: MarriageControlDetailsTypeI5Attributes
    
    
    relation: Array<string>
    
    
    marriageIdentifier: Array<number>
    
    
    lineNumber: Array<number>
    
    
    otherRelation: Array<string>
    
    
    carrierCode: Array<string>
    
}

export interface MarriageControlDetailsTypeI5Attributes {
    
}


export interface cabinGroupType1 {
    
    $attributes: cabinGroupType1Attributes
    
    // This segment gives the cabin information
    cabinSegment: ProductInformationTypeI4
    
}

export interface cabinGroupType1Attributes {
    
}

// To specify details related to availability status or cabin configuration for a product.
export interface ProductInformationTypeI4 {
    
    $attributes: ProductInformationTypeI4Attributes
    
    
    productDetailsQualifier: Array<string>
    
    
    bookingClassDetails: Array<ProductDetailsTypeI4>
    
}

export interface ProductInformationTypeI4Attributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsTypeI4 {
    
    $attributes: ProductDetailsTypeI4Attributes
    
    
    designator: string
    
    
    availabilityStatus: Array<string>
    
    
    specialService: Array<string>
    
    
    option: Array<string>
    
}

export interface ProductDetailsTypeI4Attributes {
    
}

// To specify information concerning excess baggage charges and the associated baggage details.
export interface ExcessBaggageTypeI2 {
    
    $attributes: ExcessBaggageTypeI2Attributes
    
    
    excessBaggageDetails: Array<ExcessBaggageDetailsTypeI2>
    
    
    baggageDetails: Array<BaggageDetailsTypeI2>
    
    
    otherBaggageDetails: Array<BaggageDetailsTypeI2>
    
    
    extraBaggageDetails: Array<BaggageDetailsTypeI2>
    
    
    bagTagDetails: Array<BagtagDetailsTypeI1>
    
}

export interface ExcessBaggageTypeI2Attributes {
    
}

// To specify details concerning a traveller&#39;s excess baggage.
export interface ExcessBaggageDetailsTypeI2 {
    
    $attributes: ExcessBaggageDetailsTypeI2Attributes
    
    
    currency: Array<string>
    
    
    amount: Array<number>
    
    
    processIndicator: Array<string>
    
}

export interface ExcessBaggageDetailsTypeI2Attributes {
    
}

// To specify the number and weight of baggage.
export interface BaggageDetailsTypeI2 {
    
    $attributes: BaggageDetailsTypeI2Attributes
    
    
    freeAllowance: Array<number>
    
    
    measurement: Array<number>
    
    
    quantityCode: Array<string>
    
    
    unitQualifier: Array<string>
    
    
    processIndicator: Array<string>
    
}

export interface BaggageDetailsTypeI2Attributes {
    
}

// To identify baggage by company identification, serial numbers, and destination.
export interface BagtagDetailsTypeI1 {
    
    $attributes: BagtagDetailsTypeI1Attributes
    
    
    company: Array<string>
    
    
    identifier: Array<string>
    
    
    number: Array<number>
    
    
    location: Array<string>
    
    
    companyNumber: Array<string>
    
    
    indicator: Array<string>
    
    
    characteristic: Array<string>
    
    
    specialRequirement: Array<string>
    
    
    measurement: Array<number>
    
    
    unitQualifier: Array<string>
    
    
    description: Array<string>
    
}

export interface BagtagDetailsTypeI1Attributes {
    
}

// To specify the number of units required.
export interface NumberOfUnitsTypeI2 {
    
    $attributes: NumberOfUnitsTypeI2Attributes
    
    
    quantityDetails: NumberOfUnitDetailsTypeI5
    
    
    otherQuantityDetails: Array<NumberOfUnitDetailsTypeI5>
    
}

export interface NumberOfUnitsTypeI2Attributes {
    
}

// Identification of number of units and its purpose.
export interface NumberOfUnitDetailsTypeI5 {
    
    $attributes: NumberOfUnitDetailsTypeI5Attributes
    
    
    numberOfUnit: Array<number>
    
    
    unitQualifier: Array<string>
    
}

export interface NumberOfUnitDetailsTypeI5Attributes {
    
}

// To specify a pertinent quantity.
export interface QuantityTypeI4 {
    
    $attributes: QuantityTypeI4Attributes
    
    
    quantityDetails: QuantityDetailsTypeI6
    
    
    otherquantityDetails: Array<QuantityDetailsTypeI6>
    
}

export interface QuantityTypeI4Attributes {
    
}

// Quantity information in a transaction, qualified when relevant.
export interface QuantityDetailsTypeI6 {
    
    $attributes: QuantityDetailsTypeI6Attributes
    
    
    qualifier: string
    
    
    value: number
    
    
    unit: Array<string>
    
}

export interface QuantityDetailsTypeI6Attributes {
    
}


export interface structuredFareCalcGroupType1 {
    
    $attributes: structuredFareCalcGroupType1Attributes
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structureFareCalcRoot: FareComponentInformationTypeI1
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    group27: Array<group27Type1>
    
}

export interface structuredFareCalcGroupType1Attributes {
    
}

// To specify fare component data.
export interface FareComponentInformationTypeI1 {
    
    $attributes: FareComponentInformationTypeI1Attributes
    
    
    fareComponentDetails: Array<FareComponentDetailsTypeI1>
    
    // Ticket document number
    ticketNumber: Array<string>
    
}

export interface FareComponentInformationTypeI1Attributes {
    
}


export interface FareComponentDetailsTypeI1 {
    
    $attributes: FareComponentDetailsTypeI1Attributes
    
    // Type of data _ fare calc or exchanged residual fare data
    dataType: Array<string>
    
    // Fare component count
    count: Array<number>
    
    // Price quote date
    pricingDate: Array<string>
    
    // Account code
    accountCode: Array<string>
    
    // Input designator
    inputDesignator: Array<string>
    
}

export interface FareComponentDetailsTypeI1Attributes {
    
}


export interface group27Type1 {
    
    $attributes: group27Type1Attributes
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG27EQN: NumberOfUnitsTypeI2
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    group28: Array<group28Type1>
    
    // Dummy segment to differentiate MON in group 29 and 28
    dummySegmentGroup27: DummySegmentTypeI10
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG27MON: Array<MonetaryInformationTypeI9>
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG27TXD: Array<TaxTypeI3>
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG27CVR: Array<ConversionRateTypeI4>
    
}

export interface group27Type1Attributes {
    
}


export interface group28Type1 {
    
    $attributes: group28Type1Attributes
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG28ITM: ItemNumberTypeI1
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    group29: Array<group29Type1>
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG28MON: Array<MonetaryInformationTypeI9>
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG28PTS: Array<PricingTicketingSubsequentTypeI1>
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG28FCC: Array<FareCalculationCodeDetailsTypeI1>
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG28PTK: Array<PricingTicketingDetailsTypeI3>
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG28FRU: Array<FareRulesInformationTypeI1>
    
}

export interface group28Type1Attributes {
    
}

// To specify an item number
export interface ItemNumberTypeI1 {
    
    $attributes: ItemNumberTypeI1Attributes
    
    
    itemNumberDetails: Array<ItemNumberIdentificationTypeI1>
    
}

export interface ItemNumberTypeI1Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationTypeI1 {
    
    $attributes: ItemNumberIdentificationTypeI1Attributes
    
    
    number: Array<string>
    
    
    type: Array<string>
    
    
    qualifier: Array<string>
    
    
    responsibleAgency: Array<string>
    
}

export interface ItemNumberIdentificationTypeI1Attributes {
    
}


export interface group29Type1 {
    
    $attributes: group29Type1Attributes
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG28ADT: ActionDetailsTypeI2
    
    // Reserved for a future use to store a structured fare calculation line. NOT IMPLEMENTED.
    structuredFareCalcG28TVL: Array<TravelProductInformationTypeI_69238S>
    
}

export interface group29Type1Attributes {
    
}

// To specify the action that should be taken on a selected reference number.
export interface ActionDetailsTypeI2 {
    
    $attributes: ActionDetailsTypeI2Attributes
    
    
    numberOfItemsDetails: Array<ProcessingInformationTypeI2>
    
    
    lastItemsDetails: Array<ReferenceTypeI1>
    
}

export interface ActionDetailsTypeI2Attributes {
    
}

// To identify the action to be taken and the selection criteria.
export interface ProcessingInformationTypeI2 {
    
    $attributes: ProcessingInformationTypeI2Attributes
    
    
    actionQualifier: Array<string>
    
    
    referenceQualifier: Array<string>
    
    
    numberOfItems: Array<string>
    
}

export interface ProcessingInformationTypeI2Attributes {
    
}

// To specify which number in a sequence of references and/or the reference number.
export interface ReferenceTypeI1 {
    
    $attributes: ReferenceTypeI1Attributes
    
    
    numberOfItems: Array<string>
    
    
    lastItemIdentifier: Array<string>
    
}

export interface ReferenceTypeI1Attributes {
    
}

// To specify the tariff, fare supplier, and paragraph number for a fare rule.
export interface FareRulesInformationTypeI1 {
    
    $attributes: FareRulesInformationTypeI1Attributes
    
    
    tariffClassId: Array<string>
    
    
    companyDetails: Array<CompanyIdentificationTypeI18>
    
    
    ruleSectionId: Array<string>
    
}

export interface FareRulesInformationTypeI1Attributes {
    
}


export interface carrierFeeGroupType1 {
    
    $attributes: carrierFeeGroupType1Attributes
    
    // Nature of the fee (OB, OC, ...)
    feeType: SelectionDetailsTypeI6
    
    // Details for each fee
    feeDetails: Array<feeDetailsType5>
    
}

export interface carrierFeeGroupType1Attributes {
    
}

// To specify the details for making a selection.
export interface SelectionDetailsTypeI6 {
    
    $attributes: SelectionDetailsTypeI6Attributes
    
    
    selectionDetails: SelectionDetailsInformationTypeI9
    
    
    otherSelectionDetails: Array<SelectionDetailsInformationTypeI9>
    
}

export interface SelectionDetailsTypeI6Attributes {
    
}

// To specify a selected option and associated information.
export interface SelectionDetailsInformationTypeI9 {
    
    $attributes: SelectionDetailsInformationTypeI9Attributes
    
    
    option: string
    
    
    optionInformation: Array<string>
    
}

export interface SelectionDetailsInformationTypeI9Attributes {
    
}


export interface feeDetailsType5 {
    
    $attributes: feeDetailsType5Attributes
    
    // Fee information
    feeInfo: SpecificDataInformationTypeI2
    
    // Fee associated amounts: amount with/without tax, total tax amount
    feeAmounts: Array<MonetaryInformationTypeI9>
    
    // taxes related to this fee
    feeTaxes: Array<TaxTypeI3>
    
    // Attributes of this fee (commercial description, ...)
    feeDescription: Array<InteractiveFreeTextTypeI7>
    
}

export interface feeDetailsType5Attributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationTypeI2 {
    
    $attributes: SpecificDataInformationTypeI2Attributes
    
    
    dataTypeInformation: DataTypeInformationTypeI2
    
    
    dataInformation: Array<DataInformationTypeI2>
    
}

export interface SpecificDataInformationTypeI2Attributes {
    
}

// To identify the type of data to be sent and to qualify the data when required.
export interface DataTypeInformationTypeI2 {
    
    $attributes: DataTypeInformationTypeI2Attributes
    
    
    type: string
    
    
    statusEvent: Array<string>
    
}

export interface DataTypeInformationTypeI2Attributes {
    
}

// To identify specific data and a quantity related to the data.
export interface DataInformationTypeI2 {
    
    $attributes: DataInformationTypeI2Attributes
    
    
    indicator: Array<string>
    
    
    value: Array<number>
    
    
    unit: Array<string>
    
}

export interface DataInformationTypeI2Attributes {
    
}


export interface FareComponentDetailsType2 {
    
    $attributes: FareComponentDetailsType2Attributes
    
    
    fareComponentID: ItemNumberType7
    
    // Market information related to the fare component or to the bound.
    marketFareComponent: Array<TravelProductInformationTypeI10>
    
    // Monetary Information.
    monetaryInformation: Array<MonetaryInformationType12>
    
    // Component Class information
    componentClassInfo: Array<PricingOrTicketingSubsequentType2>
    
    // Fare Qualifier Detail
    fareQualifiersDetail: Array<FareQualifierDetailsType8>
    
    // Details of the fare family used for this fare component
    fareFamilyDetails: Array<FareFamilyType6>
    
    // Carrier owner of the fare family
    fareFamilyOwner: Array<TransportIdentifierType8>
    
    // Used to specify coupons included in the fare component or in the bound.
    couponDetailsGroup: Array<CouponDetailsType2>
    
}

export interface FareComponentDetailsType2Attributes {
    
}

// To specify an item number
export interface ItemNumberType7 {
    
    $attributes: ItemNumberType7Attributes
    
    // Item identification: number of the fare component or of the bound.
    itemNumberDetails: Array<ItemNumberIdentificationType7>
    
}

export interface ItemNumberType7Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType7 {
    
    $attributes: ItemNumberIdentificationType7Attributes
    
    // Item identification: number of the fare component or of the bound.
    number: Array<string>
    
    // Item type: fare component (FC) or bound (BND).
    type: Array<string>
    
}

export interface ItemNumberIdentificationType7Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI10 {
    
    $attributes: TravelProductInformationTypeI10Attributes
    
    
    boardPointDetails: Array<LocationTypeI_208252C1>
    
    
    offpointDetails: Array<LocationTypeI_208252C1>
    
}

export interface TravelProductInformationTypeI10Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI_208252C1 {
    
    $attributes: LocationTypeI_208252C1Attributes
    
    
    trueLocationId: Array<string>
    
}

export interface LocationTypeI_208252C1Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType12 {
    
    $attributes: MonetaryInformationType12Attributes
    
    // Monetary information per fare component
    monetaryDetails: MonetaryInformationDetailsType10
    
    // Other monetary information per fare component
    otherMonetaryDetails: Array<MonetaryInformationDetailsType10>
    
}

export interface MonetaryInformationType12Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType10 {
    
    $attributes: MonetaryInformationDetailsType10Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsType10Attributes {
    
}

// To convey additional information related to a ticket
export interface PricingOrTicketingSubsequentType2 {
    
    $attributes: PricingOrTicketingSubsequentType2Attributes
    
    // RATE OR TARIFF CLASS INFORMATION
    fareBasisDetails: Array<RateTariffClassInformationType2>
    
}

export interface PricingOrTicketingSubsequentType2Attributes {
    
}

// To identify the current and/or original fare basis code.
export interface RateTariffClassInformationType2 {
    
    $attributes: RateTariffClassInformationType2Attributes
    
    // Fare Basis Code
    rateTariffClass: Array<string>
    
    // Ticket Designator
    otherRateTariffClass: Array<string>
    
}

export interface RateTariffClassInformationType2Attributes {
    
}


export interface FareQualifierDetailsType8 {
    
    $attributes: FareQualifierDetailsType8Attributes
    
    
    discountDetails: Array<DiscountPenaltyInformationType8>
    
}

export interface FareQualifierDetailsType8Attributes {
    
}


export interface DiscountPenaltyInformationType8 {
    
    $attributes: DiscountPenaltyInformationType8Attributes
    
    
    fareQualifier: Array<string>
    
}

export interface DiscountPenaltyInformationType8Attributes {
    
}

// NEW FARE SEACH
export interface FareFamilyType6 {
    
    $attributes: FareFamilyType6Attributes
    
    // Fare Family Short Name
    fareFamilyname: Array<string>
    
    // HIERARCHICAL ORDER WITHIN FARE FAMILY
    hierarchy: Array<number>
    
    // Indicates Commercial Fare Family Short names
    commercialFamilyDetails: Array<FareFamilyDetailsType6>
    
}

export interface FareFamilyType6Attributes {
    
}

// NEW FARE SEARCH
export interface FareFamilyDetailsType6 {
    
    $attributes: FareFamilyDetailsType6Attributes
    
    // Commercial fare Family Short name
    commercialFamily: string
    
}

export interface FareFamilyDetailsType6Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType8 {
    
    $attributes: TransportIdentifierType8Attributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI_222513C1>
    
}

export interface TransportIdentifierType8Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI_222513C1 {
    
    $attributes: CompanyIdentificationTypeI_222513C1Attributes
    
    // Carrier owner fo the fare family
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI_222513C1Attributes {
    
}


export interface CouponDetailsType2 {
    
    $attributes: CouponDetailsType2Attributes
    
    // Tattoo + type of the product identifying the coupon.
    productId: ReferenceInfoType16
    
    // Flight Connection Type
    flightConnectionType: Array<TravelProductInformationType6>
    
    
    couponTaxDetailsGroup: Array<couponTaxDetailsGroupType1>
    
}

export interface CouponDetailsType2Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType16 {
    
    $attributes: ReferenceInfoType16Attributes
    
    
    referenceDetails: ReferencingDetailsType17
    
}

export interface ReferenceInfoType16Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType17 {
    
    $attributes: ReferencingDetailsType17Attributes
    
    
    type: string
    
    
    value: string
    
}

export interface ReferencingDetailsType17Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationType6 {
    
    $attributes: TravelProductInformationType6Attributes
    
    
    boardPointDetails: Array<LocationTypeI_208252C1>
    
    
    offpointDetails: Array<LocationTypeI_208252C1>
    
    // TST Connection Type
    flightTypeDetails: Array<ProductTypeDetailsType10>
    
}

export interface TravelProductInformationType6Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType10 {
    
    $attributes: ProductTypeDetailsType10Attributes
    
    // TST Connection Type
    flightIndicator: string
    
}

export interface ProductTypeDetailsType10Attributes {
    
}


export interface couponTaxDetailsGroupType1 {
    
    $attributes: couponTaxDetailsGroupType1Attributes
    
    // Trigger for tax functionality
    taxTriggerInfo: DutyTaxFeeDetailsType3
    
    
    taxDetails: Array<TaxType8>
    
    
    monetaryInfo: Array<MonetaryInformationType_193831S1>
    
    // Location info
    locationInfo: Array<PlaceLocationIdentificationType3>
    
}

export interface couponTaxDetailsGroupType1Attributes {
    
}

// To specify relevant duty/tax/fee information.
export interface DutyTaxFeeDetailsType3 {
    
    $attributes: DutyTaxFeeDetailsType3Attributes
    
    // Tax qualifier
    taxQualifier: string
    
}

export interface DutyTaxFeeDetailsType3Attributes {
    
}

// To specify details relating to tax(es).
export interface TaxType8 {
    
    $attributes: TaxType8Attributes
    
    
    taxCategory: Array<string>
    
    
    taxDetails: Array<TaxDetailsType5>
    
}

export interface TaxType8Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsType5 {
    
    $attributes: TaxDetailsType5Attributes
    
    
    countryCode: Array<string>
    
    
    type: Array<string>
    
}

export interface TaxDetailsType5Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_193831S1 {
    
    $attributes: MonetaryInformationType_193831S1Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsType_270802C1
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType_270802C1>
    
}

export interface MonetaryInformationType_193831S1Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_270802C1 {
    
    $attributes: MonetaryInformationDetailsType_270802C1Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType_270802C1Attributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType3 {
    
    $attributes: PlaceLocationIdentificationType3Attributes
    
    
    locationType: string
    
    
    locationDescription: Array<LocationIdentificationBatchType1>
    
}

export interface PlaceLocationIdentificationType3Attributes {
    
}

// Identification of a location by code or name
export interface LocationIdentificationBatchType1 {
    
    $attributes: LocationIdentificationBatchType1Attributes
    
    
    code: Array<string>
    
}

export interface LocationIdentificationBatchType1Attributes {
    
}


export interface PNR_ListType {
    
    $attributes: PNR_ListTypeAttributes
    
    // provide free from or coded text information
    freeFormText: Array<InteractiveFreeTextTypeI8>
    
    
    citypair: citypairType
    
    // to specify the error or information
    errorInformation: Array<ApplicationErrorInformationTypeI2>
    
}

export interface PNR_ListTypeAttributes {
    
}

// To provide free form or coded text information
export interface InteractiveFreeTextTypeI8 {
    
    $attributes: InteractiveFreeTextTypeI8Attributes
    
    // FREE TEXT QUALIFICATION
    freetextDetail: Array<FreeTextQualificationTypeI8>
    
    // free text
    text: Array<string>
    
}

export interface InteractiveFreeTextTypeI8Attributes {
    
}


export interface FreeTextQualificationTypeI8 {
    
    $attributes: FreeTextQualificationTypeI8Attributes
    
    // Identifies whether the free text is coded or not coded 3 for Literal text
    subjectQualifier: string
    
    // Coded text, or specifies type of information in the free text
    type: Array<string>
    
}

export interface FreeTextQualificationTypeI8Attributes {
    
}


export interface citypairType {
    
    $attributes: citypairTypeAttributes
    
    // origin and destination
    originDestinationMarker: OriginAndDestinationDetailsTypeI5
    
    
    travellerInformationSection: Array<travellerInformationSectionType>
    
}

export interface citypairTypeAttributes {
    
}

// To convey the origin and destination of a journey
export interface OriginAndDestinationDetailsTypeI5 {
    
    $attributes: OriginAndDestinationDetailsTypeI5Attributes
    
}

export interface OriginAndDestinationDetailsTypeI5Attributes {
    
}


export interface travellerInformationSectionType {
    
    $attributes: travellerInformationSectionTypeAttributes
    
    // To specify a traveler and personal details relating to the traveler.
    travellerInformation: TravellerInformationTypeI5
    
    // To indicate quantity and action required in relation to a product
    relatedProduct: Array<RelatedProductInformationTypeI7>
    
    // To specify details related to a product
    travelProduct: Array<TravelProductInformationTypeI11>
    
    // to specify a reference to a reservation
    reservationInfo: ReservationControlInformationTypeI16
    
    // to specify details related to availability status or cabin configuration for a product
    productInfo: Array<ProductInformationTypeI5>
    
    // to specify the message type and business function
    messageAction: Array<MessageActionDetailsTypeI6>
    
}

export interface travellerInformationSectionTypeAttributes {
    
}

// To specify travelers and personal details relating to the travelers
export interface TravellerInformationTypeI5 {
    
    $attributes: TravellerInformationTypeI5Attributes
    
    // TRAVELLER SURNAME INFORMATION
    traveller: TravellerSurnameInformationTypeI6
    
    // TRAVELLER DETAILS
    passenger: Array<TravellerDetailsTypeI8>
    
}

export interface TravellerInformationTypeI5Attributes {
    
}


export interface TravellerSurnameInformationTypeI6 {
    
    $attributes: TravellerSurnameInformationTypeI6Attributes
    
    // Traveller last name
    surname: string
    
}

export interface TravellerSurnameInformationTypeI6Attributes {
    
}


export interface TravellerDetailsTypeI8 {
    
    $attributes: TravellerDetailsTypeI8Attributes
    
    // Traveller First Name
    firstName: string
    
}

export interface TravellerDetailsTypeI8Attributes {
    
}

// To indicate quantity and action required in relation to a product
export interface RelatedProductInformationTypeI7 {
    
    $attributes: RelatedProductInformationTypeI7Attributes
    
    // Number in party
    quantity: Array<number>
    
    // Status, coded , cancel indicator , XX-cancel Airimp code
    status: Array<string>
    
}

export interface RelatedProductInformationTypeI7Attributes {
    
}

// To specify details related to a product
export interface TravelProductInformationTypeI11 {
    
    $attributes: TravelProductInformationTypeI11Attributes
    
    // PRODUCT DATE OR TIME
    product: Array<ProductDateTimeTypeI15>
    
    // LOCATION
    boardpointDetail: Array<LocationTypeI15>
    
    // LOCATION
    offpointDetail: Array<LocationTypeI15>
    
    // COMPANY IDENTIFICATION
    companyDetail: Array<CompanyIdentificationTypeI19>
    
    // PRODUCT IDENTIFICATION DETAILS
    productDetails: Array<ProductIdentificationDetailsTypeI13>
    
}

export interface TravelProductInformationTypeI11Attributes {
    
}


export interface ProductDateTimeTypeI15 {
    
    $attributes: ProductDateTimeTypeI15Attributes
    
    // departure date of the flight
    depDate: string
    
}

export interface ProductDateTimeTypeI15Attributes {
    
}


export interface LocationTypeI15 {
    
    $attributes: LocationTypeI15Attributes
    
    // Board point For non air segment, e.g. SUR, can be alphanumeric. 5 chars long Board and Off points for SNCF TRN segment
    cityCode: string
    
}

export interface LocationTypeI15Attributes {
    
}


export interface CompanyIdentificationTypeI19 {
    
    $attributes: CompanyIdentificationTypeI19Attributes
    
    // Company identification , airline code
    identification: string
    
}

export interface CompanyIdentificationTypeI19Attributes {
    
}


export interface ProductIdentificationDetailsTypeI13 {
    
    $attributes: ProductIdentificationDetailsTypeI13Attributes
    
    // Product Idenfication -Flight number or OPEN (ARNK is not a possible value since no SI in similar name list)
    identification: string
    
    // Flight number alpha suffix A, B, C, D, E
    subtype: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI13Attributes {
    
}

// To specify a reference to a reservation
export interface ReservationControlInformationTypeI16 {
    
    $attributes: ReservationControlInformationTypeI16Attributes
    
    // RESERVATION CONTROL INFORMATION
    reservation: Array<ReservationControlInformationDetailsTypeI17>
    
}

export interface ReservationControlInformationTypeI16Attributes {
    
}


export interface ReservationControlInformationDetailsTypeI17 {
    
    $attributes: ReservationControlInformationDetailsTypeI17Attributes
    
    // Company identification - 1A for amadeus
    companyId: string
    
    // Reservation control number - amadeus record locator of the requested PNR
    controlNumber: string
    
}

export interface ReservationControlInformationDetailsTypeI17Attributes {
    
}

// To specify details related to availability status or cabin configuration for a product
export interface ProductInformationTypeI5 {
    
    $attributes: ProductInformationTypeI5Attributes
    
    // PRODUCT DETAILS
    product: Array<ProductDetailsTypeI5>
    
}

export interface ProductInformationTypeI5Attributes {
    
}


export interface ProductDetailsTypeI5 {
    
    $attributes: ProductDetailsTypeI5Attributes
    
    // Characteritic identification - class of service
    identification: string
    
    // Item description identification - N for Night class
    description: Array<string>
    
}

export interface ProductDetailsTypeI5Attributes {
    
}

// To specify the message type and business function
export interface MessageActionDetailsTypeI6 {
    
    $attributes: MessageActionDetailsTypeI6Attributes
    
    // MESSAGE FUNCTION OR BUSINESS DETAILS
    business: MessageFunctionBusinessDetailsTypeI6
    
}

export interface MessageActionDetailsTypeI6Attributes {
    
}


export interface MessageFunctionBusinessDetailsTypeI6 {
    
    $attributes: MessageFunctionBusinessDetailsTypeI6Attributes
    
    // Business function, coded
    function: Array<string>
    
}

export interface MessageFunctionBusinessDetailsTypeI6Attributes {
    
}

// To specify the message type
export interface ApplicationErrorInformationTypeI2 {
    
    $attributes: ApplicationErrorInformationTypeI2Attributes
    
    // APPLICATION ERROR DETAIL
    errorDetail: ApplicationErrorDetailTypeI2
    
}

export interface ApplicationErrorInformationTypeI2Attributes {
    
}


export interface ApplicationErrorDetailTypeI2 {
    
    $attributes: ApplicationErrorDetailTypeI2Attributes
    
    // Application error, coded - 366 for name list too long
    errorCode: string
    
    // Code list qualifier - INF for information code , WEC for warning code
    qualifier: string
    
    // Code list responsible agency, coded
    responsibleAgency: string
    
}

export interface ApplicationErrorDetailTypeI2Attributes {
    
}


export interface Fare_PricePNRWithBookingClassType {
    
    $attributes: Fare_PricePNRWithBookingClassTypeAttributes
    
    
    pricingOptionGroup: Array<pricingOptionGroupType2>
    
}

export interface Fare_PricePNRWithBookingClassTypeAttributes {
    
}


export interface pricingOptionGroupType2 {
    
    $attributes: pricingOptionGroupType2Attributes
    
    
    pricingOptionKey: PricingOptionKey2
    
    
    optionDetail: Array<AttributeType11>
    
    
    carrierInformation: Array<TransportIdentifierType9>
    
    
    currency: Array<CurrenciesType4>
    
    
    penDisInformation: Array<DiscountAndPenaltyInformationType4>
    
    
    monetaryInformation: Array<MonetaryInformationType13>
    
    
    taxInformation: Array<DutyTaxFeeDetailsType4>
    
    
    dateInformation: Array<StructuredDateTimeInformationType8>
    
    
    frequentFlyerInformation: Array<FrequentTravellerIdentificationCodeType10>
    
    
    formOfPaymentInformation: Array<FormOfPaymentType5>
    
    
    locationInformation: Array<PlaceLocationIdentificationType4>
    
    
    paxSegTstReference: Array<ReferenceInfoType17>
    
}

export interface pricingOptionGroupType2Attributes {
    
}


export interface PricingOptionKey2 {
    
    $attributes: PricingOptionKey2Attributes
    
    
    pricingOptionKey: string
    
}

export interface PricingOptionKey2Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType11 {
    
    $attributes: AttributeType11Attributes
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU9>
    
}

export interface AttributeType11Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU9 {
    
    $attributes: AttributeInformationTypeU9Attributes
    
    // Used for attribute value rather than attributeType
    attributeType: string
    
    
    attributeDescription: Array<string>
    
}

export interface AttributeInformationTypeU9Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType9 {
    
    $attributes: TransportIdentifierType9Attributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI20>
    
}

export interface TransportIdentifierType9Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI20 {
    
    $attributes: CompanyIdentificationTypeI20Attributes
    
    
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI20Attributes {
    
}

// To specify currencies used in the transaction and relevant details for the rate of exchange.
export interface CurrenciesType4 {
    
    $attributes: CurrenciesType4Attributes
    
    
    firstCurrencyDetails: Array<CurrencyDetailsTypeU4>
    
}

export interface CurrenciesType4Attributes {
    
}

// The usage to which a currency relates
export interface CurrencyDetailsTypeU4 {
    
    $attributes: CurrencyDetailsTypeU4Attributes
    
    
    currencyQualifier: string
    
    
    currencyIsoCode: Array<string>
    
}

export interface CurrencyDetailsTypeU4Attributes {
    
}


export interface DiscountAndPenaltyInformationType4 {
    
    $attributes: DiscountAndPenaltyInformationType4Attributes
    
    
    discountPenaltyQualifier: Array<string>
    
    
    discountPenaltyDetails: Array<DiscountPenaltyMonetaryInformationType4>
    
}

export interface DiscountAndPenaltyInformationType4Attributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationType4 {
    
    $attributes: DiscountPenaltyMonetaryInformationType4Attributes
    
    
    function: Array<string>
    
    
    amountType: Array<string>
    
    
    amount: Array<string>
    
    
    rate: Array<string>
    
    
    currency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationType4Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType13 {
    
    $attributes: MonetaryInformationType13Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsType11
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType11>
    
}

export interface MonetaryInformationType13Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType11 {
    
    $attributes: MonetaryInformationDetailsType11Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType11Attributes {
    
}

// To specify relevant duty/tax/fee information.
export interface DutyTaxFeeDetailsType4 {
    
    $attributes: DutyTaxFeeDetailsType4Attributes
    
    
    taxQualifier: string
    
    
    taxType: Array<DutyTaxFeeAccountDetailType2>
    
    
    taxNature: Array<string>
    
    
    taxData: Array<DutyTaxFeeDetailType2>
    
}

export interface DutyTaxFeeDetailsType4Attributes {
    
}


export interface DutyTaxFeeAccountDetailType2 {
    
    $attributes: DutyTaxFeeAccountDetailType2Attributes
    
    
    isoCountry: string
    
}

export interface DutyTaxFeeAccountDetailType2Attributes {
    
}


export interface DutyTaxFeeDetailType2 {
    
    $attributes: DutyTaxFeeDetailType2Attributes
    
    
    taxRate: Array<string>
    
    
    taxValueQualifier: Array<string>
    
}

export interface DutyTaxFeeDetailType2Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType8 {
    
    $attributes: StructuredDateTimeInformationType8Attributes
    
    
    businessSemantic: string
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType11>
    
}

export interface StructuredDateTimeInformationType8Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType11 {
    
    $attributes: StructuredDateTimeType11Attributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
}

export interface StructuredDateTimeType11Attributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType10 {
    
    $attributes: FrequentTravellerIdentificationCodeType10Attributes
    
    // Frequent Traveller Info
    frequentTravellerDetails: Array<FrequentTravellerIdentificationType9>
    
}

export interface FrequentTravellerIdentificationCodeType10Attributes {
    
}


export interface FrequentTravellerIdentificationType9 {
    
    $attributes: FrequentTravellerIdentificationType9Attributes
    
    // Carrier where the FQTV is registered.
    carrier: Array<string>
    
    
    number: Array<string>
    
    // To specify a Tier linked to the FQTV
    tierLevel: Array<string>
    
    // For example : priority code
    priorityCode: Array<string>
    
}

export interface FrequentTravellerIdentificationType9Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentType5 {
    
    $attributes: FormOfPaymentType5Attributes
    
    // Details on the form of payment
    formOfPayment: FormOfPaymentDetailsType5
    
    
    otherFormOfPayment: Array<FormOfPaymentDetailsType5>
    
}

export interface FormOfPaymentType5Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsType5 {
    
    $attributes: FormOfPaymentDetailsType5Attributes
    
    
    type: string
    
    
    amount: Array<number>
    
    
    creditCardNumber: Array<string>
    
}

export interface FormOfPaymentDetailsType5Attributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType4 {
    
    $attributes: PlaceLocationIdentificationType4Attributes
    
    
    locationType: string
    
    
    firstLocationDetails: Array<RelatedLocationOneIdentificationType3>
    
    
    secondLocationDetails: Array<RelatedLocationTwoIdentificationType3>
    
}

export interface PlaceLocationIdentificationType4Attributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationType3 {
    
    $attributes: RelatedLocationOneIdentificationType3Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationOneIdentificationType3Attributes {
    
}

// Identification of second related location by code or name.
export interface RelatedLocationTwoIdentificationType3 {
    
    $attributes: RelatedLocationTwoIdentificationType3Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationTwoIdentificationType3Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType17 {
    
    $attributes: ReferenceInfoType17Attributes
    
    
    referenceDetails: Array<ReferencingDetailsType18>
    
}

export interface ReferenceInfoType17Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType18 {
    
    $attributes: ReferencingDetailsType18Attributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
}

export interface ReferencingDetailsType18Attributes {
    
}


export interface Fare_PricePNRWithBookingClassReplyType {
    
    $attributes: Fare_PricePNRWithBookingClassReplyTypeAttributes
    
    
    applicationError: Array<ErrorGroupType8>
    
    // PNR record locator information for this transaction. This PNR record locator is used for tracing purpose.
    pnrLocatorData: Array<ReservationControlInformationTypeI17>
    
    // List of fares returned by Fare Quote server for the current PNR
    fareList: Array<fareListType>
    
}

export interface Fare_PricePNRWithBookingClassReplyTypeAttributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType8 {
    
    $attributes: ErrorGroupType8Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType_84497S
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType13>
    
}

export interface ErrorGroupType8Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType_84497S {
    
    $attributes: ApplicationErrorInformationType_84497SAttributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType11
    
}

export interface ApplicationErrorInformationType_84497SAttributes {
    
}


export interface ApplicationErrorDetailType11 {
    
    $attributes: ApplicationErrorDetailType11Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType11Attributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType13 {
    
    $attributes: FreeTextInformationType13Attributes
    
    
    freeTextDetails: Array<FreeTextDetailsType13>
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType13Attributes {
    
}


export interface FreeTextDetailsType13 {
    
    $attributes: FreeTextDetailsType13Attributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
    
    status: Array<string>
    
    
    companyId: Array<string>
    
    
    language: Array<string>
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType13Attributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI17 {
    
    $attributes: ReservationControlInformationTypeI17Attributes
    
    // Reservation control information
    reservationInformation: ReservationControlInformationDetailsTypeI18
    
}

export interface ReservationControlInformationTypeI17Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI18 {
    
    $attributes: ReservationControlInformationDetailsTypeI18Attributes
    
    // Record locator.
    controlNumber: string
    
}

export interface ReservationControlInformationDetailsTypeI18Attributes {
    
}


export interface fareListType {
    
    $attributes: fareListTypeAttributes
    
    // Pricing information such as pricing rule and sales indicator.
    pricingInformation: PricingTicketingSubsequentTypeI2
    
    // Fare reference number. Ordering information is not relevant here.
    fareReference: ItemReferencesAndVersionsType_94584S
    
    // Fare Indicators
    fareIndicators: Array<FareInformationType4>
    
    // Last date to ticket the fare.
    lastTktDate: Array<StructuredDateTimeInformationType_199533S>
    
    // Validating carrier identification.
    validatingCarrier: Array<TransportIdentifierType10>
    
    // Passenger/segment association of the fare is specified here.
    paxSegReference: ReferenceInformationTypeI9
    
    
    fareDataInformation: Array<MonetaryInformationType_198917S>
    
    // Tax fare data detailed information
    taxInformation: Array<taxInformationType>
    
    // Banker&#39;s rates are used to convert amounts of the TST (converts base fare to equivalent fare) 1st C661 : 1st bankers&#39; rate which is a percentage (no currency) 2nd C661 : 2nd bankers&#39; rate which is currency+amount.
    bankerRates: Array<ConversionRateTypeI5>
    
    // Passenger information related to the fare
    passengerInformation: Array<passengerInformationType>
    
    // Origin and destination of the fare. 1st C3225 occurence : origin city. 2nd C3225 occurence : destination city
    originDestination: Array<OriginAndDestinationDetailsTypeI6>
    
    // Segments detail information related to the fare
    segmentInformation: Array<segmentInformationType2>
    
    // Other pricing information such as endorsement, tour name...
    otherPricingInfo: Array<CodedAttributeType_39223S>
    
    // Warning information concerning the fare.
    warningInformation: Array<warningInformationType>
    
    // Automatic Reissue Informations
    automaticReissueInfo: Array<automaticReissueInfoType>
    
    // Corporate number
    corporateInfo: Array<CorporateFareInformationType2>
    
    // A series of data elements representing data required to collect non-airport/government fees, store the fee data, and track the revenue separate from the ticket revenue without requiring a secondary document be issued.
    feeBreakdown: Array<feeBreakdownType>
    
    // convey the mileage information
    mileage: Array<AdditionalProductDetailsTypeI8>
    
    // Details at fare component or at bound level.
    fareComponentDetailsGroup: Array<FareComponentDetailsType3>
    
    
    endFareList: DummySegmentTypeI11
    
}

export interface fareListTypeAttributes {
    
}

// To specify pricing indicator information.
export interface PricingTicketingSubsequentTypeI2 {
    
    $attributes: PricingTicketingSubsequentTypeI2Attributes
    
    // Information on TST type.
    tstInformation: RateTariffClassInformationTypeI3
    
    // International sales indicator
    salesIndicator: Array<string>
    
    // Fare calculation mode indicator. This indicator specifies the type fare.
    fcmi: string
    
    // Information of original fare used to create TST. The TST is created from Best Fare ( possible or available).
    bestFareType: Array<string>
    
}

export interface PricingTicketingSubsequentTypeI2Attributes {
    
}

// To identify the current and/or original fare basis code.
export interface RateTariffClassInformationTypeI3 {
    
    $attributes: RateTariffClassInformationTypeI3Attributes
    
    // Indicator qualifying the type of TST (basically manual or automatic)
    tstIndicator: string
    
}

export interface RateTariffClassInformationTypeI3Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType_94584S {
    
    $attributes: ItemReferencesAndVersionsType_94584SAttributes
    
    // qualifies the type of the reference used. Code set to define
    referenceType: Array<string>
    
    // Tattoo number
    uniqueReference: Array<number>
    
}

export interface ItemReferencesAndVersionsType_94584SAttributes {
    
}


export interface FareInformationType4 {
    
    $attributes: FareInformationType4Attributes
    
    
    fareDetails: Array<FareDetailsType6>
    
}

export interface FareInformationType4Attributes {
    
}


export interface FareDetailsType6 {
    
    $attributes: FareDetailsType6Attributes
    
    // fare indicators
    fareCategory: Array<string>
    
}

export interface FareDetailsType6Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_199533S {
    
    $attributes: StructuredDateTimeInformationType_199533SAttributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - Impacted period - Departure date - Estimated arrival date and time
    businessSemantic: Array<string>
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType_277474C>
    
}

export interface StructuredDateTimeInformationType_199533SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_277474C {
    
    $attributes: StructuredDateTimeType_277474CAttributes
    
    // Year number. The format is a little long for short term usage but it can be reduced by implementation if required.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<number>
    
}

export interface StructuredDateTimeType_277474CAttributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType10 {
    
    $attributes: TransportIdentifierType10Attributes
    
    // Information related to validating carrier.
    carrierInformation: Array<CompanyIdentificationTypeI21>
    
}

export interface TransportIdentifierType10Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI21 {
    
    $attributes: CompanyIdentificationTypeI21Attributes
    
    // Carrier code
    carrierCode: Array<string>
    
}

export interface CompanyIdentificationTypeI21Attributes {
    
}

// To provide specific reference identification.
export interface ReferenceInformationTypeI9 {
    
    $attributes: ReferenceInformationTypeI9Attributes
    
    // Passenger/segment/TST/fare reference details
    refDetails: Array<ReferencingDetailsTypeI12>
    
}

export interface ReferenceInformationTypeI9Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI12 {
    
    $attributes: ReferencingDetailsTypeI12Attributes
    
    // Qualifyer of the reference (Pax/Seg/Tst/Fare tattoo)
    refQualifier: Array<string>
    
    // Passenger/segment/TST/fare tattoo reference number
    refNumber: Array<number>
    
}

export interface ReferencingDetailsTypeI12Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_198917S {
    
    $attributes: MonetaryInformationType_198917SAttributes
    
    
    fareDataMainInformation: MonetaryInformationDetailsType_262564C
    
    
    fareDataSupInformation: Array<MonetaryInformationDetailsType_262564C>
    
}

export interface MonetaryInformationType_198917SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_262564C {
    
    $attributes: MonetaryInformationDetailsType_262564CAttributes
    
    
    fareDataQualifier: string
    
    // Amount
    fareAmount: Array<string>
    
    // Currency
    fareCurrency: Array<string>
    
    // location
    fareLocation: Array<string>
    
}

export interface MonetaryInformationDetailsType_262564CAttributes {
    
}


export interface taxInformationType {
    
    $attributes: taxInformationTypeAttributes
    
    // Tax details
    taxDetails: DutyTaxFeeDetailsTypeU
    
    // Amount details. If the tax is a passenger facility charge (PFC) the detail of the airports related taxes is given here.
    amountDetails: Array<MonetaryInformationTypeI10>
    
}

export interface taxInformationTypeAttributes {
    
}

// To transmit tax data as it should appear in the tax boxes of the ticket.
export interface DutyTaxFeeDetailsTypeU {
    
    $attributes: DutyTaxFeeDetailsTypeUAttributes
    
    // Tax data qualifier
    taxQualifier: string
    
    // Tax type identification
    taxIdentification: DutyTaxFeeTypeDetailsTypeU
    
    // Type of the tax
    taxType: Array<DutyTaxFeeAccountDetailTypeU>
    
    // Nature of the tax
    taxNature: Array<string>
    
    // Exempt tax indicator. If an tax is Exempted no amount is provided for this tax.
    taxExempt: Array<string>
    
}

export interface DutyTaxFeeDetailsTypeUAttributes {
    
}


export interface DutyTaxFeeTypeDetailsTypeU {
    
    $attributes: DutyTaxFeeTypeDetailsTypeUAttributes
    
    // Tax type identifier
    taxIdentifier: string
    
}

export interface DutyTaxFeeTypeDetailsTypeUAttributes {
    
}


export interface DutyTaxFeeAccountDetailTypeU {
    
    $attributes: DutyTaxFeeAccountDetailTypeUAttributes
    
    // Iso country of the tax
    isoCountry: string
    
}

export interface DutyTaxFeeAccountDetailTypeUAttributes {
    
}

// To convey monetary amount information.
export interface MonetaryInformationTypeI10 {
    
    $attributes: MonetaryInformationTypeI10Attributes
    
    // Main fare data infomation, can b thee base or the total fare information which are mandatory anyway
    fareDataMainInformation: MonetaryInformationDetailsTypeI12
    
    // Supplementary fare data information
    fareDataSupInformation: Array<MonetaryInformationDetailsTypeI12>
    
}

export interface MonetaryInformationTypeI10Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI12 {
    
    $attributes: MonetaryInformationDetailsTypeI12Attributes
    
    // Qualify the type of fare defined in this composite
    fareDataQualifier: string
    
    // Fare data amount
    fareAmount: Array<string>
    
    // Fare data currency code
    fareCurrency: Array<string>
    
    // Location of the fare data (PFCs specific)
    fareLocation: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI12Attributes {
    
}

// To specify details of conversion rates.
export interface ConversionRateTypeI5 {
    
    $attributes: ConversionRateTypeI5Attributes
    
    // First rate detail.
    firstRateDetail: ConversionRateDetailsTypeI5
    
    // Second rate detail.
    secondRateDetail: Array<ConversionRateDetailsTypeI5>
    
}

export interface ConversionRateTypeI5Attributes {
    
}

// To specify the conversion rate and the monetary amount.
export interface ConversionRateDetailsTypeI5 {
    
    $attributes: ConversionRateDetailsTypeI5Attributes
    
    // Currency of the rate
    currencyCode: Array<string>
    
    // Amount/percentage
    amount: Array<number>
    
}

export interface ConversionRateDetailsTypeI5Attributes {
    
}


export interface passengerInformationType {
    
    $attributes: passengerInformationTypeAttributes
    
    // Penalty/discount details specified in the request.
    penDisInformation: DiscountAndPenaltyInformationTypeI_6128S
    
    // Reference of passengers that have a type code.
    passengerReference: Array<ReferenceInformationTypeI9>
    
}

export interface passengerInformationTypeAttributes {
    
}

// To specify information about discounts and penalties
export interface DiscountAndPenaltyInformationTypeI_6128S {
    
    $attributes: DiscountAndPenaltyInformationTypeI_6128SAttributes
    
    // Qualify the type of information. Penalties are not passenger associated and are pure monetary information. Discount are passenger associated but only discount code is specified.
    infoQualifier: Array<string>
    
    // Used to specify penalty information.
    penDisData: Array<DiscountPenaltyMonetaryInformationTypeI2>
    
}

export interface DiscountAndPenaltyInformationTypeI_6128SAttributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationTypeI2 {
    
    $attributes: DiscountPenaltyMonetaryInformationTypeI2Attributes
    
    // Type of penalty.
    penaltyType: Array<string>
    
    // The penalty amount can be described differently: amount/percentage.
    penaltyQualifier: Array<string>
    
    // Amount of the penalty.
    penaltyAmount: Array<number>
    
    // This discount code is defined by the airlines. This cannot be coded as airlines might apply any combination of letters for their discounts.
    discountCode: Array<string>
    
    // Penalty currency code.
    penaltyCurrency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationTypeI2Attributes {
    
}

// To convey the origin and destination of a journey.
export interface OriginAndDestinationDetailsTypeI6 {
    
    $attributes: OriginAndDestinationDetailsTypeI6Attributes
    
    // Code of the city.
    cityCode: Array<string>
    
}

export interface OriginAndDestinationDetailsTypeI6Attributes {
    
}


export interface segmentInformationType2 {
    
    $attributes: segmentInformationType2Attributes
    
    // Connection information.
    connexInformation: ConnectionTypeI2
    
    // Details on open segments added to the price calculation. These open segments exist only in the fare calculated, they have no equivalent in the PNR itinerary. This segment gives also information on booking class for best buy transactions.
    segDetails: Array<TravelProductInformationTypeI_26322S>
    
    // Fare basis information
    fareQualifier: Array<FareQualifierDetailsTypeI4>
    
    
    cabinGroup: Array<cabinGroupType2>
    
    // Validity information for this fare
    validityInformation: Array<StructuredDateTimeInformationType9>
    
    // Baggage allowance information
    bagAllowanceInformation: Array<ExcessBaggageTypeI3>
    
    // Reference of the segment associated to the group.
    segmentReference: Array<ReferenceInformationTypeI9>
    
    // The segment order in the pricing response can be different than the one of the PNR itinerary (segments are reordered at price calculation time). This order inform,ation is conveyed by the sequence number. If this order information is not present then the order is by default the one of the PNR.
    sequenceInformation: Array<ItemReferencesAndVersionsType13>
    
}

export interface segmentInformationType2Attributes {
    
}

// To specify connection designator.
export interface ConnectionTypeI2 {
    
    $attributes: ConnectionTypeI2Attributes
    
    // Connection details
    connecDetails: ConnectionDetailsTypeI2
    
}

export interface ConnectionTypeI2Attributes {
    
}

// To specify the location, product supplier and time for a connection with the next means of transport.
export interface ConnectionDetailsTypeI2 {
    
    $attributes: ConnectionDetailsTypeI2Attributes
    
    // Specify ARNK and surface segments not included in the fare routing.
    routingInformation: Array<string>
    
    // Type of connection for the flight
    connexType: Array<string>
    
}

export interface ConnectionDetailsTypeI2Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI_26322S {
    
    $attributes: TravelProductInformationTypeI_26322SAttributes
    
    // City of departure for this extra segment.
    departureCity: Array<LocationTypeI_47688C>
    
    // City of arrival for this extra segment.
    arrivalCity: Array<LocationTypeI_47688C>
    
    // Airline detail information of the extra segment.
    airlineDetail: Array<CompanyIdentificationTypeI21>
    
    // Segment detail information.
    segmentDetail: Array<ProductIdentificationDetailsTypeI14>
    
    // Ticketing status for this segment. Relevant only in case of reply.
    ticketingStatus: Array<string>
    
}

export interface TravelProductInformationTypeI_26322SAttributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI_47688C {
    
    $attributes: LocationTypeI_47688CAttributes
    
    // Code of the city.
    cityCode: Array<string>
    
}

export interface LocationTypeI_47688CAttributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI14 {
    
    $attributes: ProductIdentificationDetailsTypeI14Attributes
    
    // OPEN or AIR are the two identifications accepted. OPEN means the segment described here is an open segment. AIR means that it is a valid AIR segment.
    identification: string
    
    // to describe the transportation class.
    bookingClass: Array<string>
    
    // Class of service to use in order to price the extra segment.
    classOfService: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI14Attributes {
    
}

// To specify the fare basis information
export interface FareQualifierDetailsTypeI4 {
    
    $attributes: FareQualifierDetailsTypeI4Attributes
    
    // Type of movement for this segment to take into account by Fare Quote to calculate the fare.
    movementType: Array<string>
    
    // Fare basis detail
    fareBasisDetails: Array<AdditionalFareQualifierDetailsTypeI5>
    
    // Discount data for zap off to apply to price calculation.
    zapOffDetails: Array<DiscountPenaltyInformationTypeI2>
    
}

export interface FareQualifierDetailsTypeI4Attributes {
    
}

// To specify the fare basis and ticket designator codes.
export interface AdditionalFareQualifierDetailsTypeI5 {
    
    $attributes: AdditionalFareQualifierDetailsTypeI5Attributes
    
    // Primary code of the fare basis. This is not a codeset but a free flow text field.
    primaryCode: Array<string>
    
    // Fare basis code of the fare basis. This is not a codeset but a free flow text field.
    fareBasisCode: Array<string>
    
    // Ticket designator of the fare basis
    ticketDesignator: Array<string>
    
    // For any query : discount ticket designator to be assigned by Fare Quote server. For any response : priced PTCs
    discTktDesignator: Array<string>
    
}

export interface AdditionalFareQualifierDetailsTypeI5Attributes {
    
}

// To indicate the discounts and penalties by fare type.
export interface DiscountPenaltyInformationTypeI2 {
    
    $attributes: DiscountPenaltyInformationTypeI2Attributes
    
    // Discount off type.
    zapOffType: string
    
    // Discount amount
    zapOffAmount: Array<number>
    
    // Discount percentage.
    zapOffPercentage: Array<number>
    
}

export interface DiscountPenaltyInformationTypeI2Attributes {
    
}


export interface cabinGroupType2 {
    
    $attributes: cabinGroupType2Attributes
    
    // This segment gives the cabin information
    cabinSegment: ProductInformationTypeI6
    
}

export interface cabinGroupType2Attributes {
    
}

// To specify details related to availability status or cabin configuration for a product.
export interface ProductInformationTypeI6 {
    
    $attributes: ProductInformationTypeI6Attributes
    
    
    productDetailsQualifier: Array<string>
    
    
    bookingClassDetails: Array<ProductDetailsTypeI6>
    
}

export interface ProductInformationTypeI6Attributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsTypeI6 {
    
    $attributes: ProductDetailsTypeI6Attributes
    
    
    designator: string
    
    
    availabilityStatus: Array<string>
    
    
    specialService: Array<string>
    
    
    option: Array<string>
    
}

export interface ProductDetailsTypeI6Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType9 {
    
    $attributes: StructuredDateTimeInformationType9Attributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - Impacted period - Departure date - Estimated arrival date and time
    businessSemantic: Array<string>
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType12>
    
}

export interface StructuredDateTimeInformationType9Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType12 {
    
    $attributes: StructuredDateTimeType12Attributes
    
    // Year number. The format is a little long for short term usage but it can be reduced by implementation if required.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
}

export interface StructuredDateTimeType12Attributes {
    
}

// To specify information concerning baggage allowance details.
export interface ExcessBaggageTypeI3 {
    
    $attributes: ExcessBaggageTypeI3Attributes
    
    // Baggage allowance information details
    bagAllowanceDetails: Array<BaggageDetailsTypeI3>
    
}

export interface ExcessBaggageTypeI3Attributes {
    
}

// To specify the number and weight of baggage.
export interface BaggageDetailsTypeI3 {
    
    $attributes: BaggageDetailsTypeI3Attributes
    
    // Baggage allowance quantity (piece concept)
    baggageQuantity: Array<number>
    
    // Baggage allowance weight
    baggageWeight: Array<number>
    
    // Baggage allowance type (weight/number)
    baggageType: Array<string>
    
    // Measurement unit for weighing baggage allowance
    measureUnit: Array<string>
    
}

export interface BaggageDetailsTypeI3Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType13 {
    
    $attributes: ItemReferencesAndVersionsType13Attributes
    
    // Identification details : order number
    sequenceSection: Array<UniqueIdDescriptionType5>
    
}

export interface ItemReferencesAndVersionsType13Attributes {
    
}


export interface UniqueIdDescriptionType5 {
    
    $attributes: UniqueIdDescriptionType5Attributes
    
    // Number specifying the ordering information of the item described within a group.
    sequenceNumber: Array<number>
    
}

export interface UniqueIdDescriptionType5Attributes {
    
}

// Used to specify pricing options by key/value.
export interface CodedAttributeType_39223S {
    
    $attributes: CodedAttributeType_39223SAttributes
    
    // provides details for the Attribute
    attributeDetails: Array<CodedAttributeInformationType_66047C>
    
    
    DummyNET: string
    
}

export interface CodedAttributeType_39223SAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_66047C {
    
    $attributes: CodedAttributeInformationType_66047CAttributes
    
    // provides the attribute Type
    attributeType: string
    
    // provides a description for the attribute
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType_66047CAttributes {
    
}


export interface warningInformationType {
    
    $attributes: warningInformationTypeAttributes
    
    // Fare warning information code.
    warningCode: ApplicationErrorInformationType13
    
    // Description in free flow text of the warning concerning the fare.
    warningText: Array<InteractiveFreeTextTypeI_6759S>
    
}

export interface warningInformationTypeAttributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType13 {
    
    $attributes: ApplicationErrorInformationType13Attributes
    
    // Application error details.
    applicationErrorDetail: ApplicationErrorDetailType_48648C
    
}

export interface ApplicationErrorInformationType13Attributes {
    
}


export interface ApplicationErrorDetailType_48648C {
    
    $attributes: ApplicationErrorDetailType_48648CAttributes
    
    // Code identifying the data validation error condition.
    applicationErrorCode: string
    
    // Identification of a code list.
    codeListQualifier: Array<string>
    
    // Code identifying the agency responsible for a code list.
    codeListResponsibleAgency: Array<string>
    
}

export interface ApplicationErrorDetailType_48648CAttributes {
    
}

// To provide error free text information.
export interface InteractiveFreeTextTypeI_6759S {
    
    $attributes: InteractiveFreeTextTypeI_6759SAttributes
    
    // Free flow text describing the error
    errorFreeText: Array<string>
    
}

export interface InteractiveFreeTextTypeI_6759SAttributes {
    
}


export interface automaticReissueInfoType {
    
    $attributes: automaticReissueInfoTypeAttributes
    
    // This segment contains the original ticket number.
    ticketInfo: TicketNumberTypeI4
    
    // This segment contains the coupon number (in absolute) corresponding to the first coupon for use from the last flawn segment.
    couponInfo: CouponInformationTypeI3
    
    // provide the range for paper reissuance
    paperCouponRange: Array<paperCouponRangeType>
    
    // Base fare Information
    baseFareInfo: MonetaryInformationTypeI_20897S
    
    // Discount and penalty group.
    firstDpiGroup: firstDpiGroupType
    
    // Discount and penalty group.
    secondDpiGroup: secondDpiGroupType
    
    // this segment conveys specific reissue attributes like Revalidation flag.
    reissueAttributes: Array<CodedAttributeType12>
    
}

export interface automaticReissueInfoTypeAttributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberTypeI4 {
    
    $attributes: TicketNumberTypeI4Attributes
    
    // Details on the document
    documentDetails: TicketNumberDetailsTypeI4
    
}

export interface TicketNumberTypeI4Attributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsTypeI4 {
    
    $attributes: TicketNumberDetailsTypeI4Attributes
    
    // Ticket number
    number: string
    
    // ticket type
    type: Array<string>
    
}

export interface TicketNumberDetailsTypeI4Attributes {
    
}

// To identify data specific to a value (flight) coupon.
export interface CouponInformationTypeI3 {
    
    $attributes: CouponInformationTypeI3Attributes
    
    // Details on coupon
    couponDetails: CouponInformationDetailsTypeI3
    
    // Details on coupon
    otherCouponDetails: Array<CouponInformationDetailsTypeI3>
    
}

export interface CouponInformationTypeI3Attributes {
    
}

// To specify the coupon number, status, value, and other related information.
export interface CouponInformationDetailsTypeI3 {
    
    $attributes: CouponInformationDetailsTypeI3Attributes
    
    // Coupon number
    cpnNumber: string
    
}

export interface CouponInformationDetailsTypeI3Attributes {
    
}


export interface paperCouponRangeType {
    
    $attributes: paperCouponRangeTypeAttributes
    
    // This segment contains the original ticket number.
    ticketInfo: TicketNumberTypeI4
    
    // This segment contains the coupon number (in absolute) corresponding to the first coupon for use from the last flawn segment.
    couponInfo: CouponInformationTypeI3
    
}

export interface paperCouponRangeTypeAttributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI_20897S {
    
    $attributes: MonetaryInformationTypeI_20897SAttributes
    
    // monetaryDetails
    monetaryDetails: MonetaryInformationDetailsTypeI_37257C
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsTypeI_37257C>
    
}

export interface MonetaryInformationTypeI_20897SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI_37257C {
    
    $attributes: MonetaryInformationDetailsTypeI_37257CAttributes
    
    // Type qualifier
    typeQualifier: string
    
    // amount
    amount: string
    
    // currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI_37257CAttributes {
    
}


export interface firstDpiGroupType {
    
    $attributes: firstDpiGroupTypeAttributes
    
    // Penalty amount in reissue currency
    reIssuePenalty: DiscountAndPenaltyInformationTypeI2
    
    // Reissue Informations
    reissueInfo: MonetaryInformationTypeI_20897S
    
    // Old Tax informations
    oldTaxInfo: MonetaryInformationTypeI_20897S
    
    // Balance Reissue Informations
    reissueBalanceInfo: MonetaryInformationTypeI_20897S
    
}

export interface firstDpiGroupTypeAttributes {
    
}

// To specify information about discounts and penalties
export interface DiscountAndPenaltyInformationTypeI2 {
    
    $attributes: DiscountAndPenaltyInformationTypeI2Attributes
    
    // Used to specify penalty information
    penDisData: Array<DiscountPenaltyMonetaryInformationTypeI_29792C>
    
}

export interface DiscountAndPenaltyInformationTypeI2Attributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationTypeI_29792C {
    
    $attributes: DiscountPenaltyMonetaryInformationTypeI_29792CAttributes
    
    // The amount Type can be a percentage or an amount
    penaltyQualifier: Array<string>
    
    // specify the value
    penaltyAmount: Array<number>
    
    // penalty currency code
    penaltyCurrency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationTypeI_29792CAttributes {
    
}


export interface secondDpiGroupType {
    
    $attributes: secondDpiGroupTypeAttributes
    
    // Discount and penalty info.
    penalty: DiscountAndPenaltyInformationTypeI2
    
    // Residual Value information
    residualValueInfo: MonetaryInformationTypeI_20897S
    
    // Old Tax informations
    oldTaxInfo: MonetaryInformationTypeI_20897S
    
    // Balance issue Informations
    issueBalanceInfo: MonetaryInformationTypeI_20897S
    
}

export interface secondDpiGroupTypeAttributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType12 {
    
    $attributes: CodedAttributeType12Attributes
    
    // provides details for the Attribute
    attributeDetails: Array<CodedAttributeInformationType13>
    
}

export interface CodedAttributeType12Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType13 {
    
    $attributes: CodedAttributeInformationType13Attributes
    
    // provides the attribute Type
    attributeType: string
    
    // provides a description for the attribute
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType13Attributes {
    
}

// To specify corporate fare information
export interface CorporateFareInformationType2 {
    
    $attributes: CorporateFareInformationType2Attributes
    
    
    corporateFareIdentifiers: Array<CorporateFareIdentifiersTypeI>
    
}

export interface CorporateFareInformationType2Attributes {
    
}


export interface CorporateFareIdentifiersTypeI {
    
    $attributes: CorporateFareIdentifiersTypeIAttributes
    
    
    fareQualifier: Array<string>
    
    
    corporateID: Array<string>
    
}

export interface CorporateFareIdentifiersTypeIAttributes {
    
}


export interface feeBreakdownType {
    
    $attributes: feeBreakdownTypeAttributes
    
    // Nature of the fee (OB, OC)
    feeType: SelectionDetailsTypeI7
    
    // Details for each fee
    feeDetails: Array<feeDetailsType6>
    
}

export interface feeBreakdownTypeAttributes {
    
}

// To specify the Carrier Fee type
export interface SelectionDetailsTypeI7 {
    
    $attributes: SelectionDetailsTypeI7Attributes
    
    
    selectionDetails: SelectionDetailsInformationTypeI10
    
}

export interface SelectionDetailsTypeI7Attributes {
    
}

// To specify a selected option and associated information.
export interface SelectionDetailsInformationTypeI10 {
    
    $attributes: SelectionDetailsInformationTypeI10Attributes
    
    
    option: string
    
}

export interface SelectionDetailsInformationTypeI10Attributes {
    
}


export interface feeDetailsType6 {
    
    $attributes: feeDetailsType6Attributes
    
    // Fee information
    feeInfo: SpecificDataInformationTypeI3
    
    // Attributes of this fee (commercial description)
    feeDescription: Array<InteractiveFreeTextTypeI9>
    
    // Fee associated amounts: amount with/without tax, total tax amount
    feeAmounts: Array<MonetaryInformationTypeI_39230S>
    
    // taxes related to this fee
    feeTaxes: Array<TaxTypeI4>
    
}

export interface feeDetailsType6Attributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationTypeI3 {
    
    $attributes: SpecificDataInformationTypeI3Attributes
    
    // Carrier fee code
    dataTypeInformation: DataTypeInformationTypeI3
    
    // Carrier fee application code (NI, NR, CM, NC)
    dataInformation: Array<DataInformationTypeI3>
    
}

export interface SpecificDataInformationTypeI3Attributes {
    
}

// To identify the type of data to be sent and to qualify the data when required.
export interface DataTypeInformationTypeI3 {
    
    $attributes: DataTypeInformationTypeI3Attributes
    
    // fee subcode
    type: string
    
}

export interface DataTypeInformationTypeI3Attributes {
    
}

// To identify specific data and a quantity related to the data.
export interface DataInformationTypeI3 {
    
    $attributes: DataInformationTypeI3Attributes
    
    // fee attribute
    indicator: Array<string>
    
}

export interface DataInformationTypeI3Attributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextTypeI9 {
    
    $attributes: InteractiveFreeTextTypeI9Attributes
    
    
    freeTextQualification: Array<FreeTextQualificationTypeI9>
    
    
    freeText: string
    
}

export interface InteractiveFreeTextTypeI9Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationTypeI9 {
    
    $attributes: FreeTextQualificationTypeI9Attributes
    
    
    textSubjectQualifier: string
    
}

export interface FreeTextQualificationTypeI9Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI_39230S {
    
    $attributes: MonetaryInformationTypeI_39230SAttributes
    
    // Monetary info
    monetaryDetails: Array<MonetaryInformationDetailsTypeI_63727C>
    
}

export interface MonetaryInformationTypeI_39230SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI_63727C {
    
    $attributes: MonetaryInformationDetailsTypeI_63727CAttributes
    
    // Qualifier
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
    // Location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI_63727CAttributes {
    
}

// To specify details relating to tax(es).
export interface TaxTypeI4 {
    
    $attributes: TaxTypeI4Attributes
    
    // Tax details
    taxDetails: Array<TaxDetailsTypeI6>
    
    
    DummyNET: string
    
}

export interface TaxTypeI4Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsTypeI6 {
    
    $attributes: TaxDetailsTypeI6Attributes
    
    // Tax Amount
    rate: Array<string>
    
    // ISO code identifying Country
    countryCode: Array<string>
    
    // ISO code identifying currency
    currencyCode: Array<string>
    
    // Tax designator code
    type: Array<string>
    
    // tax designator code.
    secondType: Array<string>
    
}

export interface TaxDetailsTypeI6Attributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsTypeI8 {
    
    $attributes: AdditionalProductDetailsTypeI8Attributes
    
    
    mileageTimeDetails: Array<MileageTimeDetailsTypeI4>
    
}

export interface AdditionalProductDetailsTypeI8Attributes {
    
}

// Information about the distance/duration of a trip.
export interface MileageTimeDetailsTypeI4 {
    
    $attributes: MileageTimeDetailsTypeI4Attributes
    
    // mileage total associated to the TST
    totalMileage: number
    
}

export interface MileageTimeDetailsTypeI4Attributes {
    
}


export interface FareComponentDetailsType3 {
    
    $attributes: FareComponentDetailsType3Attributes
    
    
    fareComponentID: ItemNumberType8
    
    // Market information related to the fare component or to the bound.
    marketFareComponent: Array<TravelProductInformationTypeI12>
    
    // Monetary Information.
    monetaryInformation: Array<MonetaryInformationType_198918S>
    
    // Component Class information
    componentClassInfo: Array<PricingOrTicketingSubsequentType3>
    
    // Fare Qualifier Detail
    fareQualifiersDetail: Array<FareQualifierDetailsType9>
    
    // Details of the fare family used for this fare component
    fareFamilyDetails: Array<FareFamilyType7>
    
    // Carrier owner of the fare family
    fareFamilyOwner: Array<TransportIdentifierType_156079S>
    
    // Used to specify coupons included in the fare component or in the bound.
    couponDetailsGroup: Array<CouponDetailsType3>
    
}

export interface FareComponentDetailsType3Attributes {
    
}

// To specify an item number
export interface ItemNumberType8 {
    
    $attributes: ItemNumberType8Attributes
    
    // Item identification: number of the fare component or of the bound.
    itemNumberDetails: Array<ItemNumberIdentificationType8>
    
}

export interface ItemNumberType8Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType8 {
    
    $attributes: ItemNumberIdentificationType8Attributes
    
    // Item identification: number of the fare component or of the bound.
    number: Array<string>
    
    // Item type: fare component (FC) or bound (BND).
    type: Array<string>
    
}

export interface ItemNumberIdentificationType8Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI12 {
    
    $attributes: TravelProductInformationTypeI12Attributes
    
    
    boardPointDetails: Array<LocationTypeI16>
    
    
    offpointDetails: Array<LocationTypeI16>
    
}

export interface TravelProductInformationTypeI12Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI16 {
    
    $attributes: LocationTypeI16Attributes
    
    
    trueLocationId: Array<string>
    
}

export interface LocationTypeI16Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_198918S {
    
    $attributes: MonetaryInformationType_198918SAttributes
    
    // Monetary information per fare component
    monetaryDetails: MonetaryInformationDetailsType12
    
    // Other monetary information per fare component
    otherMonetaryDetails: Array<MonetaryInformationDetailsType12>
    
}

export interface MonetaryInformationType_198918SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType12 {
    
    $attributes: MonetaryInformationDetailsType12Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsType12Attributes {
    
}

// To convey additional information related to a ticket
export interface PricingOrTicketingSubsequentType3 {
    
    $attributes: PricingOrTicketingSubsequentType3Attributes
    
    // RATE OR TARIFF CLASS INFORMATION
    fareBasisDetails: Array<RateTariffClassInformationType3>
    
}

export interface PricingOrTicketingSubsequentType3Attributes {
    
}

// To identify the current and/or original fare basis code.
export interface RateTariffClassInformationType3 {
    
    $attributes: RateTariffClassInformationType3Attributes
    
    // Fare Basis Code
    rateTariffClass: Array<string>
    
    // Ticket Designator
    otherRateTariffClass: Array<string>
    
}

export interface RateTariffClassInformationType3Attributes {
    
}


export interface FareQualifierDetailsType9 {
    
    $attributes: FareQualifierDetailsType9Attributes
    
    
    discountDetails: Array<DiscountPenaltyInformationType9>
    
}

export interface FareQualifierDetailsType9Attributes {
    
}


export interface DiscountPenaltyInformationType9 {
    
    $attributes: DiscountPenaltyInformationType9Attributes
    
    
    fareQualifier: Array<string>
    
}

export interface DiscountPenaltyInformationType9Attributes {
    
}

// NEW FARE SEACH
export interface FareFamilyType7 {
    
    $attributes: FareFamilyType7Attributes
    
    // Fare Family Short Name
    fareFamilyname: Array<string>
    
    // HIERARCHICAL ORDER WITHIN FARE FAMILY
    hierarchy: Array<number>
    
    // Indicates Commercial Fare Family Short names
    commercialFamilyDetails: Array<FareFamilyDetailsType7>
    
}

export interface FareFamilyType7Attributes {
    
}

// NEW FARE SEARCH
export interface FareFamilyDetailsType7 {
    
    $attributes: FareFamilyDetailsType7Attributes
    
    // Commercial fare Family Short name
    commercialFamily: string
    
}

export interface FareFamilyDetailsType7Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType_156079S {
    
    $attributes: TransportIdentifierType_156079SAttributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI_222513C2>
    
}

export interface TransportIdentifierType_156079SAttributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI_222513C2 {
    
    $attributes: CompanyIdentificationTypeI_222513C2Attributes
    
    // Carrier owner fo the fare family
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI_222513C2Attributes {
    
}


export interface CouponDetailsType3 {
    
    $attributes: CouponDetailsType3Attributes
    
    // Tattoo + type of the product identifying the coupon.
    productId: ReferenceInfoType18
    
    // Flight Connection Type
    flightConnectionType: Array<TravelProductInformationType7>
    
    
    couponTaxDetailsGroup: Array<couponTaxDetailsGroupType2>
    
}

export interface CouponDetailsType3Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType18 {
    
    $attributes: ReferenceInfoType18Attributes
    
    
    referenceDetails: ReferencingDetailsType19
    
}

export interface ReferenceInfoType18Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType19 {
    
    $attributes: ReferencingDetailsType19Attributes
    
    
    type: string
    
    
    value: string
    
}

export interface ReferencingDetailsType19Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationType7 {
    
    $attributes: TravelProductInformationType7Attributes
    
    
    boardPointDetails: Array<LocationTypeI16>
    
    
    offpointDetails: Array<LocationTypeI16>
    
    // TST Connection Type
    flightTypeDetails: Array<ProductTypeDetailsType11>
    
}

export interface TravelProductInformationType7Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType11 {
    
    $attributes: ProductTypeDetailsType11Attributes
    
    // TST Connection Type
    flightIndicator: string
    
}

export interface ProductTypeDetailsType11Attributes {
    
}


export interface couponTaxDetailsGroupType2 {
    
    $attributes: couponTaxDetailsGroupType2Attributes
    
    // Trigger for tax functionality
    taxTriggerInfo: DutyTaxFeeDetailsType5
    
    
    taxDetails: Array<TaxType9>
    
    
    monetaryInfo: Array<MonetaryInformationType14>
    
    // Location info
    locationInfo: Array<PlaceLocationIdentificationType5>
    
}

export interface couponTaxDetailsGroupType2Attributes {
    
}

// To specify relevant duty/tax/fee information.
export interface DutyTaxFeeDetailsType5 {
    
    $attributes: DutyTaxFeeDetailsType5Attributes
    
    // Tax qualifier
    taxQualifier: string
    
}

export interface DutyTaxFeeDetailsType5Attributes {
    
}

// To specify details relating to tax(es).
export interface TaxType9 {
    
    $attributes: TaxType9Attributes
    
    
    taxCategory: Array<string>
    
    
    taxDetails: Array<TaxDetailsType6>
    
}

export interface TaxType9Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsType6 {
    
    $attributes: TaxDetailsType6Attributes
    
    
    countryCode: Array<string>
    
    
    type: Array<string>
    
}

export interface TaxDetailsType6Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType14 {
    
    $attributes: MonetaryInformationType14Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsType_270392C
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType_270392C>
    
}

export interface MonetaryInformationType14Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_270392C {
    
    $attributes: MonetaryInformationDetailsType_270392CAttributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType_270392CAttributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType5 {
    
    $attributes: PlaceLocationIdentificationType5Attributes
    
    
    locationType: string
    
    
    locationDescription: Array<LocationIdentificationBatchType2>
    
}

export interface PlaceLocationIdentificationType5Attributes {
    
}

// Identification of a location by code or name
export interface LocationIdentificationBatchType2 {
    
    $attributes: LocationIdentificationBatchType2Attributes
    
    
    code: Array<string>
    
}

export interface LocationIdentificationBatchType2Attributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI11 {
    
    $attributes: DummySegmentTypeI11Attributes
    
}

export interface DummySegmentTypeI11Attributes {
    
}


export interface Service_IntegratedCatalogueType {
    
    $attributes: Service_IntegratedCatalogueTypeAttributes
    
    // Pricing Options Group
    pricingOption: Array<pricingOptionType>
    
}

export interface Service_IntegratedCatalogueTypeAttributes {
    
}


export interface pricingOptionType {
    
    $attributes: pricingOptionTypeAttributes
    
    // the smart name of the option
    pricingOptionKey: PricingOptionKeyType
    
    // in case the option value takes a free text
    optionDetail: Array<AttributeType12>
    
    // in case the option value takes a carrier code
    carrierInformation: Array<TransportIdentifierType11>
    
    // in case the option value takes a currency code
    currency: Array<CurrenciesType5>
    
    // in case the option value takes a date
    dateInformation: Array<StructuredDateTimeInformationType10>
    
    // in case the option deals with Frequent Flyer Information
    frequentFlyerInformation: Array<FrequentTravellerIdentificationCodeType11>
    
    // in case the option deals with Form Of Payment
    formOfPaymentInformation: Array<FormOfPaymentType6>
    
    // in case the option value takes location code.
    locationInformation: Array<PlaceLocationIdentificationType6>
    
    // in case the option value takes a ticket number.
    ticketInformation: Array<TicketNumberTypeI5>
    
    // PNR record locator
    reservationInformation: Array<ReservationControlInformationType6>
    
    // to associate the option to a passenger or a segment.
    paxSegTstReference: Array<ReferenceInfoType19>
    
}

export interface pricingOptionTypeAttributes {
    
}


export interface PricingOptionKeyType {
    
    $attributes: PricingOptionKeyTypeAttributes
    
    
    pricingOptionKey: string
    
}

export interface PricingOptionKeyTypeAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType12 {
    
    $attributes: AttributeType12Attributes
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU10>
    
}

export interface AttributeType12Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU10 {
    
    $attributes: AttributeInformationTypeU10Attributes
    
    // Used for attribute value rather than attributeType
    attributeType: string
    
    
    attributeDescription: Array<string>
    
}

export interface AttributeInformationTypeU10Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType11 {
    
    $attributes: TransportIdentifierType11Attributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI22>
    
}

export interface TransportIdentifierType11Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI22 {
    
    $attributes: CompanyIdentificationTypeI22Attributes
    
    
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI22Attributes {
    
}

// To specify currencies used in the transaction and relevant details for the rate of exchange.
export interface CurrenciesType5 {
    
    $attributes: CurrenciesType5Attributes
    
    
    firstCurrencyDetails: Array<CurrencyDetailsTypeU5>
    
}

export interface CurrenciesType5Attributes {
    
}

// The usage to which a currency relates
export interface CurrencyDetailsTypeU5 {
    
    $attributes: CurrencyDetailsTypeU5Attributes
    
    
    currencyQualifier: string
    
    
    currencyIsoCode: Array<string>
    
}

export interface CurrencyDetailsTypeU5Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType10 {
    
    $attributes: StructuredDateTimeInformationType10Attributes
    
    
    businessSemantic: string
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType13>
    
}

export interface StructuredDateTimeInformationType10Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType13 {
    
    $attributes: StructuredDateTimeType13Attributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
}

export interface StructuredDateTimeType13Attributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType11 {
    
    $attributes: FrequentTravellerIdentificationCodeType11Attributes
    
    // Frequent Traveller Info
    frequentTravellerDetails: Array<FrequentTravellerIdentificationType10>
    
}

export interface FrequentTravellerIdentificationCodeType11Attributes {
    
}


export interface FrequentTravellerIdentificationType10 {
    
    $attributes: FrequentTravellerIdentificationType10Attributes
    
    // Carrier where the FQTV is registered.
    carrier: Array<string>
    
    
    number: Array<string>
    
    // To specify a Tier linked to the FQTV
    tierLevel: Array<string>
    
    // For example : priority code
    priorityCode: Array<string>
    
}

export interface FrequentTravellerIdentificationType10Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentType6 {
    
    $attributes: FormOfPaymentType6Attributes
    
    // Details on the form of payment
    formOfPayment: FormOfPaymentDetailsType6
    
    
    otherFormOfPayment: Array<FormOfPaymentDetailsType6>
    
}

export interface FormOfPaymentType6Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsType6 {
    
    $attributes: FormOfPaymentDetailsType6Attributes
    
    
    type: string
    
    
    amount: Array<number>
    
    
    creditCardNumber: Array<string>
    
}

export interface FormOfPaymentDetailsType6Attributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType6 {
    
    $attributes: PlaceLocationIdentificationType6Attributes
    
    
    locationType: string
    
    
    firstLocationDetails: Array<RelatedLocationOneIdentificationType4>
    
    
    secondLocationDetails: Array<RelatedLocationTwoIdentificationType4>
    
}

export interface PlaceLocationIdentificationType6Attributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationType4 {
    
    $attributes: RelatedLocationOneIdentificationType4Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationOneIdentificationType4Attributes {
    
}

// Identification of second related location by code or name.
export interface RelatedLocationTwoIdentificationType4 {
    
    $attributes: RelatedLocationTwoIdentificationType4Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationTwoIdentificationType4Attributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberTypeI5 {
    
    $attributes: TicketNumberTypeI5Attributes
    
    
    documentDetails: TicketNumberDetailsTypeI5
    
    
    status: Array<string>
    
}

export interface TicketNumberTypeI5Attributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsTypeI5 {
    
    $attributes: TicketNumberDetailsTypeI5Attributes
    
    
    number: Array<string>
    
    
    type: Array<string>
    
    // number of booklets
    numberOfBooklets: Array<number>
    
    
    dataIndicator: Array<string>
    
    
    requestNotification: Array<string>
    
}

export interface TicketNumberDetailsTypeI5Attributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationType6 {
    
    $attributes: ReservationControlInformationType6Attributes
    
    
    reservation: Array<ReservationControlInformationDetailsType4>
    
}

export interface ReservationControlInformationType6Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsType4 {
    
    $attributes: ReservationControlInformationDetailsType4Attributes
    
    
    controlNumber: Array<string>
    
}

export interface ReservationControlInformationDetailsType4Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType19 {
    
    $attributes: ReferenceInfoType19Attributes
    
    
    referenceDetails: Array<ReferencingDetailsType20>
    
}

export interface ReferenceInfoType19Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType20 {
    
    $attributes: ReferencingDetailsType20Attributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
}

export interface ReferencingDetailsType20Attributes {
    
}


export interface Service_IntegratedCatalogueReplyType {
    
    $attributes: Service_IntegratedCatalogueReplyTypeAttributes
    
    // Error group.
    errorGroup: Array<ErrorGroupType9>
    
    // Sale and ticketing information
    pricingIndicator: Array<PricingTicketingDetailsType4>
    
    
    pricingDate: Array<DateAndTimeInformationType6>
    
    
    passengerGroup: Array<passengerGroupType>
    
    
    flightInfo: Array<flightInfoType1>
    
    
    portions: Array<portionsType>
    
    
    ssrInformation: Array<ssrInformationType>
    
    
    serviceGroup: Array<serviceGroupType>
    
}

export interface Service_IntegratedCatalogueReplyTypeAttributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType9 {
    
    $attributes: ErrorGroupType9Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType14
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType14>
    
}

export interface ErrorGroupType9Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType14 {
    
    $attributes: ApplicationErrorInformationType14Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType12
    
}

export interface ApplicationErrorInformationType14Attributes {
    
}


export interface ApplicationErrorDetailType12 {
    
    $attributes: ApplicationErrorDetailType12Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType12Attributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType14 {
    
    $attributes: FreeTextInformationType14Attributes
    
    // free text information
    freeTextDetails: FreeTextDetailsType14
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType14Attributes {
    
}


export interface FreeTextDetailsType14 {
    
    $attributes: FreeTextDetailsType14Attributes
    
    // textSubjectQualifier
    textSubjectQualifier: string
    
    // type of information
    informationType: Array<string>
    
    // status
    status: Array<string>
    
    // companyId
    companyId: Array<string>
    
    // language
    language: Array<string>
    
    // source
    source: string
    
    // encoding
    encoding: string
    
}

export interface FreeTextDetailsType14Attributes {
    
}

// To convey pricing and date information related to a ticket.
export interface PricingTicketingDetailsType4 {
    
    $attributes: PricingTicketingDetailsType4Attributes
    
    // Price ticket details
    priceTicketDetails: Array<PricingTicketingInformationType4>
    
    // Selling location details
    sellingLocationDetails: Array<LocationDetailsTypeI5>
    
}

export interface PricingTicketingDetailsType4Attributes {
    
}

// To specify indicators related to pricing and ticketing.
export interface PricingTicketingInformationType4 {
    
    $attributes: PricingTicketingInformationType4Attributes
    
    // Indicators like type of fare, sold/ticketed inside/outside, electronic ticketing restrictions, possible restrictions warning, additional information concerning Last Ticketing date
    indicators: Array<string>
    
}

export interface PricingTicketingInformationType4Attributes {
    
}

// To specify a location and related country.
export interface LocationDetailsTypeI5 {
    
    $attributes: LocationDetailsTypeI5Attributes
    
    // City
    city: Array<string>
    
    // Country
    country: Array<string>
    
}

export interface LocationDetailsTypeI5Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeInformationType6 {
    
    $attributes: DateAndTimeInformationType6Attributes
    
    // Date and time details
    dateAndTimeDetails: Array<DateAndTimeDetailsType5>
    
}

export interface DateAndTimeInformationType6Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeDetailsType5 {
    
    $attributes: DateAndTimeDetailsType5Attributes
    
    // Qualifier
    qualifier: Array<string>
    
    // Date
    date: Array<string>
    
    // Time
    time: Array<string>
    
    // Other qualifier
    otherQualifier: Array<string>
    
    // Other time
    otherTime: Array<string>
    
    // Movement type
    movementType: Array<string>
    
    // Location
    location: Array<string>
    
}

export interface DateAndTimeDetailsType5Attributes {
    
}


export interface passengerGroupType {
    
    $attributes: passengerGroupTypeAttributes
    
    
    paxReference: ReferenceInformationType6
    
    
    discountCodes: Array<DiscountDataType>
    
    
    frequentTravellerGroup: Array<frequentTravellerGroupType>
    
}

export interface passengerGroupTypeAttributes {
    
}

// Used to convey the passenger references.
export interface ReferenceInformationType6 {
    
    $attributes: ReferenceInformationType6Attributes
    
    // Used to convey the passenger tatoo or display number.
    passengerReference: ReferencingDetailsTypeI13
    
}

export interface ReferenceInformationType6Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI13 {
    
    $attributes: ReferencingDetailsTypeI13Attributes
    
    // Specifies the type of the passenger
    type: string
    
    // Tattoo or reference number.
    value: string
    
}

export interface ReferencingDetailsTypeI13Attributes {
    
}

// List applicable redemption/upgrade promotions
export interface DiscountDataType {
    
    $attributes: DiscountDataTypeAttributes
    
    
    discountGroup: Array<DiscountGroupType>
    
    // Promotion name (free text)
    discountName: Array<string>
    
}

export interface DiscountDataTypeAttributes {
    
}


export interface DiscountGroupType {
    
    $attributes: DiscountGroupTypeAttributes
    
    
    startDate: Array<string>
    
    
    endDate: Array<string>
    
}

export interface DiscountGroupTypeAttributes {
    
}


export interface frequentTravellerGroupType {
    
    $attributes: frequentTravellerGroupTypeAttributes
    
    
    frequentTravellerInfo: FrequentTravellerIdentificationCodeType12
    
    
    balance: Array<MonetaryInformationType15>
    
}

export interface frequentTravellerGroupTypeAttributes {
    
}

// To specify frequent traveler information.
export interface FrequentTravellerIdentificationCodeType12 {
    
    $attributes: FrequentTravellerIdentificationCodeType12Attributes
    
    // Frequent traveller identification
    frequentTravellerDetails: FrequentTravellerIdentificationType11
    
}

export interface FrequentTravellerIdentificationCodeType12Attributes {
    
}

// Identification of the frequent traveller number by company code with the capability to reference a specific traveller.
export interface FrequentTravellerIdentificationType11 {
    
    $attributes: FrequentTravellerIdentificationType11Attributes
    
    // Airline code
    carrier: string
    
    // Frequent traveller number
    number: Array<string>
    
    // Tier level
    tierLevel: Array<string>
    
    // Priority code
    priorityCode: Array<string>
    
    // Customer value
    customerValue: Array<number>
    
    // type
    type: Array<string>
    
}

export interface FrequentTravellerIdentificationType11Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType15 {
    
    $attributes: MonetaryInformationType15Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsType13
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType13>
    
}

export interface MonetaryInformationType15Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType13 {
    
    $attributes: MonetaryInformationDetailsType13Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType13Attributes {
    
}


export interface flightInfoType1 {
    
    $attributes: flightInfoType1Attributes
    
    // Involved flight information
    flightDetails: TravelProductInformationType8
    
    
    travelItineraryInfo: Array<TravelItineraryInformationTypeI1>
    
    // Flight mileage information
    additionalFlightInfo: Array<AdditionalProductDetailsTypeI9>
    
    // Convey codeshare Info
    codeshareInfo: Array<CommercialAgreementsType4>
    
}

export interface flightInfoType1Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationType8 {
    
    $attributes: TravelProductInformationType8Attributes
    
    // Flight date
    flightDate: Array<ProductDateTimeType6>
    
    // Board point details
    boardPointDetails: Array<LocationType3>
    
    // Off point details
    offpointDetails: Array<LocationType3>
    
    // Company details
    companyDetails: Array<CompanyIdentificationType6>
    
    // Flight identification
    flightIdentification: Array<ProductIdentificationDetailsType5>
    
    // Flight type details
    flightTypeDetails: Array<ProductTypeDetailsType12>
    
    // Item number
    itemNumber: number
    
}

export interface TravelProductInformationType8Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeType6 {
    
    $attributes: ProductDateTimeType6Attributes
    
    // Departure date
    departureDate: Array<string>
    
    // Departure time
    departureTime: Array<string>
    
    // Arrival date
    arrivalDate: Array<string>
    
    // Arrival time
    arrivalTime: Array<string>
    
}

export interface ProductDateTimeType6Attributes {
    
}

// To identify a location by code or name.
export interface LocationType3 {
    
    $attributes: LocationType3Attributes
    
    // True location id
    trueLocationId: Array<string>
    
}

export interface LocationType3Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationType6 {
    
    $attributes: CompanyIdentificationType6Attributes
    
    // Marketing company
    marketingCompany: Array<string>
    
    // Operating company
    operatingCompany: Array<string>
    
    // Other company
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationType6Attributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsType5 {
    
    $attributes: ProductIdentificationDetailsType5Attributes
    
    // Flight number
    flightNumber: Array<string>
    
    // Booking class
    bookingClass: Array<string>
    
}

export interface ProductIdentificationDetailsType5Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType12 {
    
    $attributes: ProductTypeDetailsType12Attributes
    
    // Booking access identifier
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsType12Attributes {
    
}

// To specify a segment of an itinerary and related details.
export interface TravelItineraryInformationTypeI1 {
    
    $attributes: TravelItineraryInformationTypeI1Attributes
    
    // Cabin designator
    cabinDesignator: Array<string>
    
    // Product type details
    productTypeDetails: Array<ProductTypeDetailsType_254225C>
    
}

export interface TravelItineraryInformationTypeI1Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType_254225C {
    
    $attributes: ProductTypeDetailsType_254225CAttributes
    
    // Flight indicator
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsType_254225CAttributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsTypeI9 {
    
    $attributes: AdditionalProductDetailsTypeI9Attributes
    
    // Leg details
    legDetails: Array<AdditionalProductTypeI8>
    
}

export interface AdditionalProductDetailsTypeI9Attributes {
    
}

// Additional details describing a specific means of transport.
export interface AdditionalProductTypeI8 {
    
    $attributes: AdditionalProductTypeI8Attributes
    
    // Equipment
    equipment: Array<string>
    
}

export interface AdditionalProductTypeI8Attributes {
    
}

// To specify commercial agreements between two or more companies related to joint, shared, lease operations etc.
export interface CommercialAgreementsType4 {
    
    $attributes: CommercialAgreementsType4Attributes
    
    
    codeshareDetails: Array<CompanyRoleIdentificationType4>
    
    
    otherCodeshareDetails: Array<CompanyRoleIdentificationType4>
    
}

export interface CommercialAgreementsType4Attributes {
    
}

// To indicate commercial agreements related to the service being provided.
export interface CompanyRoleIdentificationType4 {
    
    $attributes: CompanyRoleIdentificationType4Attributes
    
    
    transportStageQualifier: Array<string>
    
    // company identification
    airlineDesignator: Array<string>
    
    // flight number
    flightNumber: Array<string>
    
    // suffix
    operationalSuffix: Array<string>
    
}

export interface CompanyRoleIdentificationType4Attributes {
    
}


export interface portionsType {
    
    $attributes: portionsTypeAttributes
    
    // Segment association
    travelPortions: ReferenceInfoType20
    
    
    flightAssociation: Array<RangeDetailsType>
    
}

export interface portionsTypeAttributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInfoType20 {
    
    $attributes: ReferenceInfoType20Attributes
    
    // Reference details
    referenceDetails: Array<ReferencingDetailsType21>
    
    
    DummyNET: string
    
}

export interface ReferenceInfoType20Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType21 {
    
    $attributes: ReferencingDetailsType21Attributes
    
    // Car/value code, ...
    type: Array<string>
    
    // Value
    value: Array<string>
    
}

export interface ReferencingDetailsType21Attributes {
    
}

// Range of elements
export interface RangeDetailsType {
    
    $attributes: RangeDetailsTypeAttributes
    
    
    rangeQualifier: Array<string>
    
    
    rangeDetails: Array<RangeType>
    
}

export interface RangeDetailsTypeAttributes {
    
}

// Range minimum and maximum limits.
export interface RangeType {
    
    $attributes: RangeTypeAttributes
    
    // Data type
    dataType: Array<string>
    
    // Min
    min: Array<number>
    
    // Max
    max: Array<number>
    
}

export interface RangeTypeAttributes {
    
}


export interface ssrInformationType {
    
    $attributes: ssrInformationTypeAttributes
    
    // Specify the SSR code, the table type and the service type
    serviceRequest: SpecialRequirementsDetailsType_174527S
    
    // Second level of errors groups
    errorFunctional: Array<ErrorGroupType9>
    
    // SSR Information Details about Booking Format
    ssrInformationDetails: Array<ssrInformationDetailsType>
    
}

export interface ssrInformationTypeAttributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsType_174527S {
    
    $attributes: SpecialRequirementsDetailsType_174527SAttributes
    
    // To specify the Service Requirement of the customer.
    specialRequirementsInfo: Array<SpecialRequirementsTypeDetailsType7>
    
    // To specify the Seat Number.
    seatDetails: Array<SpecialRequirementsDataDetailsType5>
    
}

export interface SpecialRequirementsDetailsType_174527SAttributes {
    
}

// SPECIAL REQUIREMENTS TYPE DETAILS
export interface SpecialRequirementsTypeDetailsType7 {
    
    $attributes: SpecialRequirementsTypeDetailsType7Attributes
    
    // To specify the Code of the SSR/OSI/SK.
    ssrCode: Array<string>
    
    // To specify the status of the Service: HK: Confirmed
    actionCode: Array<string>
    
    // To specify, for some SSR, the number of items involved (e.g.: for PETS, BIKE....)
    numberInParty: Array<number>
    
    // To specify to which carrier the service applies.
    airlineCode: Array<string>
    
    // To specify if the service is an: - SSR - OSI - SK
    serviceType: Array<string>
    
    // Processing indicator, coded
    otherServiceType: Array<string>
    
    // Place/location identification
    boardPoint: Array<string>
    
    // Place/location identification
    offPoint: Array<string>
    
    // Free Text attached to the Service.
    serviceFreeText: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsType7Attributes {
    
}

// Special requirements data details
export interface SpecialRequirementsDataDetailsType5 {
    
    $attributes: SpecialRequirementsDataDetailsType5Attributes
    
    // Seat number
    seatNumber: Array<string>
    
    // Mesure unit qualifier
    measureUnitQualifier: Array<string>
    
    // Customer ranking value
    crossRef: Array<string>
    
    // SSR seat characteristic
    seatCharacteristics: Array<string>
    
}

export interface SpecialRequirementsDataDetailsType5Attributes {
    
}


export interface ssrInformationDetailsType {
    
    $attributes: ssrInformationDetailsTypeAttributes
    
    // Specify the characteristics of the SSR Table such as if the free text is allowed.
    settingsDetails: StatusType8
    
    
    ssrFormattedFreetext: Array<StructureComponentDefinitionType>
    
}

export interface ssrInformationDetailsTypeAttributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType8 {
    
    $attributes: StatusType8Attributes
    
    // STATUS DETAILS
    statusInformation: Array<StatusDetailsType7>
    
}

export interface StatusType8Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType7 {
    
    $attributes: StatusDetailsType7Attributes
    
    // list of status/qualifiers Either His for Historical or Crt for Current
    indicator: Array<string>
    
    
    action: Array<string>
    
    
    type: Array<string>
    
    
    description: Array<string>
    
}

export interface StatusDetailsType7Attributes {
    
}

// To specify a component of a data structure (e.g. an array or table).
export interface StructureComponentDefinitionType {
    
    $attributes: StructureComponentDefinitionTypeAttributes
    
    // Specifies the type of data structure of the element
    function: string
    
    
    componentId: StructureComponentIdentificationType
    
    
    status: Array<string>
    
    
    position: Array<PositionIdentificationBatchTypeU>
    
    
    description: CharacteristicDescriptionType
    
}

export interface StructureComponentDefinitionTypeAttributes {
    
}

// The identification of a structure component.
export interface StructureComponentIdentificationType {
    
    $attributes: StructureComponentIdentificationTypeAttributes
    
    // Generic value is FMT(formatted text). 4 letter codes are used to identify the keywords inside the formatted text.
    identifier: string
    
}

export interface StructureComponentIdentificationTypeAttributes {
    
}

// To identify the position of an object in a structure containing the object.
export interface PositionIdentificationBatchTypeU {
    
    $attributes: PositionIdentificationBatchTypeUAttributes
    
    // Root level is 0. For each next level, this value is increased by one.
    level: Array<string>
    
}

export interface PositionIdentificationBatchTypeUAttributes {
    
}

// To provide a description of a characteristic.
export interface CharacteristicDescriptionType {
    
    $attributes: CharacteristicDescriptionTypeAttributes
    
    // Generic value is FFT (formatted freetext). Value KW is used for the keywords.
    identification: string
    
    // The detailed format represented by a regular expression.
    mainDesc: string
    
    // The description of the keyword.
    otherDesc: Array<string>
    
}

export interface CharacteristicDescriptionTypeAttributes {
    
}


export interface serviceGroupType {
    
    $attributes: serviceGroupTypeAttributes
    
    // Unique service ID.
    serviceId: ItemNumberType9
    
    
    passengerAndFlightAssociation: Array<RangeDetailsType>
    
    // UCI or DID to identify passengers
    uniquePassengerId: Array<ReferenceInfoType20>
    
    // Service association
    serviceAssociation: Array<ItemReferencesAndVersionsType_192370S>
    
    // RFIC/RFISC
    serviceCodes: PricingOrTicketingSubsequentType4
    
    
    serviceDetailsGroup: Array<serviceDetailsGroupType>
    
    // Service attributes details
    serviceAttributes: Array<AttributeType13>
    
    // Used to carry SSR indicators.
    ssrIndicatorList: Array<ssrIndicatorListType>
    
    // Used to carry date and time information related to service recommendation.
    dateGroup: Array<dateGroupType>
    
    
    mediaContentGroup: Array<mediaContentGroupType>
    
    // Commercial and/or Pricing description
    serviceDecriptionInfo: Array<InteractiveFreeTextType3>
    
    
    ageAggregation: Array<NumberOfUnitsType3>
    
    // Group used to carry quota information
    quotaGroup: Array<quotaGroupType>
    
    
    svcLocation: Array<PlaceLocationIdentificationType7>
    
    
    baggageDescriptionGroup: Array<baggageDescriptionGroupType>
    
    // This group carries all pricing information related to a given service.
    pricingGroup: Array<pricingGroupType>
    
    // Error group.
    errorGroup: Array<ErrorGroupType9>
    
}

export interface serviceGroupTypeAttributes {
    
}

// To specify an item number
export interface ItemNumberType9 {
    
    $attributes: ItemNumberType9Attributes
    
    // Item number details
    itemNumberDetails: Array<ItemNumberIdentificationType9>
    
}

export interface ItemNumberType9Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType9 {
    
    $attributes: ItemNumberIdentificationType9Attributes
    
    // Fare component number
    number: Array<string>
    
    // Type
    type: Array<string>
    
}

export interface ItemNumberIdentificationType9Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType_192370S {
    
    $attributes: ItemReferencesAndVersionsType_192370SAttributes
    
    
    uniqueReference: Array<number>
    
    
    actionCategory: Array<string>
    
    
    idSection: Array<UniqueIdDescriptionType6>
    
}

export interface ItemReferencesAndVersionsType_192370SAttributes {
    
}


export interface UniqueIdDescriptionType6 {
    
    $attributes: UniqueIdDescriptionType6Attributes
    
    // Qualifier of the service
    referenceQualifier: Array<string>
    
    // ID of the service recommendation
    primeId: Array<string>
    
}

export interface UniqueIdDescriptionType6Attributes {
    
}

// To convey additional information related to a ticket.
export interface PricingOrTicketingSubsequentType4 {
    
    $attributes: PricingOrTicketingSubsequentType4Attributes
    
    
    specialCondition: Array<string>
    
    
    otherSpecialCondition: Array<string>
    
    
    additionalSpecialCondition: Array<string>
    
}

export interface PricingOrTicketingSubsequentType4Attributes {
    
}


export interface serviceDetailsGroupType {
    
    $attributes: serviceDetailsGroupTypeAttributes
    
    // Service details
    serviceDetails: SpecialRequirementsDetailsType7
    
    
    flightAssociation: Array<RangeDetailsType>
    
}

export interface serviceDetailsGroupTypeAttributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsType7 {
    
    $attributes: SpecialRequirementsDetailsType7Attributes
    
    // To specify the Service Requirement of the customer
    specialRequirementsInfo: SpecialRequirementsTypeDetailsType_245333C
    
    
    seatDetails: Array<SpecialRequirementsDataDetailsType5>
    
}

export interface SpecialRequirementsDetailsType7Attributes {
    
}


export interface SpecialRequirementsTypeDetailsType_245333C {
    
    $attributes: SpecialRequirementsTypeDetailsType_245333CAttributes
    
    // SSR or SVC code to be used to book the service (ex. XBAG, VGML, SPEQ..)
    ssrCode: Array<string>
    
    // Service Classification code F flight related service M Merchandise A checked allowance B carryon allowance P prepaid baggage C excess baggage
    actionCode: Array<string>
    
    // To specify, for some SSR, the number of items involved at Ticket level (for Ticket Related services only)
    numberInParty: Array<number>
    
    // To specify to which carrier the service is bookable
    airlineCode: Array<string>
    
    // Specify the Service Group (ex. BG for baggage, PT for pets, ML for meals, SP for sport, ecc.)
    serviceType: Array<string>
    
    // Specify the Service Sub-Group
    otherServiceType: Array<string>
    
    // Free Text attached to the Service
    serviceFreeText: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsType_245333CAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType13 {
    
    $attributes: AttributeType13Attributes
    
    
    criteriaSetType: Array<string>
    
    // Criteria details
    criteriaDetails: Array<AttributeInformationType4>
    
}

export interface AttributeType13Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationType4 {
    
    $attributes: AttributeInformationType4Attributes
    
    // Attribute type
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface AttributeInformationType4Attributes {
    
}


export interface ssrIndicatorListType {
    
    $attributes: ssrIndicatorListTypeAttributes
    
    // Used to carry attributes from the SSR table.
    serviceAttributes: CodedAttributeType13
    
    // Used for segment association.
    segmentReference: Array<ReferenceInfoType20>
    
}

export interface ssrIndicatorListTypeAttributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType13 {
    
    $attributes: CodedAttributeType13Attributes
    
    
    attributeFunction: Array<string>
    
    
    attributeDetails: Array<CodedAttributeInformationType14>
    
}

export interface CodedAttributeType13Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType14 {
    
    $attributes: CodedAttributeInformationType14Attributes
    
    
    attributeType: string
    
    
    attributeDescription: Array<string>
    
    
    language: Array<string>
    
    
    encoding: Array<string>
    
    
    source: Array<string>
    
}

export interface CodedAttributeInformationType14Attributes {
    
}


export interface dateGroupType {
    
    $attributes: dateGroupTypeAttributes
    
    // Date information.
    dateInfo: StructuredDateTimeInformationType11
    
    // Used for segment association.
    segmentReference: Array<ReferenceInfoType20>
    
}

export interface dateGroupTypeAttributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType11 {
    
    $attributes: StructuredDateTimeInformationType11Attributes
    
    // Business semantic.
    businessSemantic: Array<string>
    
    // Indicate if the time is expressed in UTC or in local time mode ( Codes U and L ).
    timeMode: Array<string>
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType14>
    
    // Reference : IATA SSIM Appendix F If it is not provided, the time is considered to be given in UTC.
    timeZoneInfo: Array<TimeZoneIinformationType3>
    
}

export interface StructuredDateTimeInformationType11Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType14 {
    
    $attributes: StructuredDateTimeType14Attributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<number>
    
}

export interface StructuredDateTimeType14Attributes {
    
}

// Specify in which time zone, the information is provided
export interface TimeZoneIinformationType3 {
    
    $attributes: TimeZoneIinformationType3Attributes
    
    // ISO country Code See SSIM appendix F
    countryCode: string
    
    // Time zone code. See SSIM appendix F.
    code: Array<number>
    
    // Time zone suffix to complete the time zone code when necessary. See SSIM appendix F.
    suffix: Array<string>
    
}

export interface TimeZoneIinformationType3Attributes {
    
}


export interface mediaContentGroupType {
    
    $attributes: mediaContentGroupTypeAttributes
    
    // contains the reference of the media
    mediaReference: ItemReferencesAndVersionsType_192375S
    
    // This segment is used to carry url links to service media content.
    mediaId: Array<CommunicationContactType4>
    
    // Segment association
    segmentReference: Array<ReferenceInfoType20>
    
}

export interface mediaContentGroupTypeAttributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType_192375S {
    
    $attributes: ItemReferencesAndVersionsType_192375SAttributes
    
    
    referenceType: Array<string>
    
    
    uniqueReference: Array<number>
    
    
    actionCategory: Array<string>
    
    
    idSection: Array<UniqueIdDescriptionType_269144C>
    
}

export interface ItemReferencesAndVersionsType_192375SAttributes {
    
}


export interface UniqueIdDescriptionType_269144C {
    
    $attributes: UniqueIdDescriptionType_269144CAttributes
    
    // System responsible of the associated version number: - &#34;1ARES&#34; for CS RES system - &#34;DCSLON&#34; for current NGDCS in London -... New values may be added when needed
    systemQualifier: Array<string>
    
    // ID sequence number
    versionNumber: Array<string>
    
    
    referenceQualifier: Array<string>
    
    // ID (DID, IID, SID number or any uniquer identifier)
    primeId: Array<string>
    
    // ID
    secondaryId: Array<string>
    
    // ID Description
    description: Array<string>
    
}

export interface UniqueIdDescriptionType_269144CAttributes {
    
}

// Describes communication channel
export interface CommunicationContactType4 {
    
    $attributes: CommunicationContactType4Attributes
    
    // Communication channel
    communication: CommunicationContactDetailsType4
    
}

export interface CommunicationContactType4Attributes {
    
}

// Communication identifier such as URL address.
export interface CommunicationContactDetailsType4 {
    
    $attributes: CommunicationContactDetailsType4Attributes
    
    // url
    urlAddress: string
    
    // this type is used to identify the url : BO - Boleto FOP
    urlType: string
    
}

export interface CommunicationContactDetailsType4Attributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextType3 {
    
    $attributes: InteractiveFreeTextType3Attributes
    
    // Free text qualification
    freeTextQualification: Array<FreeTextQualificationType4>
    
    // Free text
    freeText: Array<string>
    
}

export interface InteractiveFreeTextType3Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationType4 {
    
    $attributes: FreeTextQualificationType4Attributes
    
    // Text subject qualifier
    textSubjectQualifier: string
    
    // Add code sets in the list
    informationType: Array<string>
    
}

export interface FreeTextQualificationType4Attributes {
    
}

// To specify the number of units required.
export interface NumberOfUnitsType3 {
    
    $attributes: NumberOfUnitsType3Attributes
    
    // Quantity details
    quantityDetails: Array<NumberOfUnitDetailsType6>
    
}

export interface NumberOfUnitsType3Attributes {
    
}

// Identification of number of units and its purpose.
export interface NumberOfUnitDetailsType6 {
    
    $attributes: NumberOfUnitDetailsType6Attributes
    
    // Number of unit
    numberOfUnit: Array<number>
    
    // Unit qualifier
    unitQualifier: Array<string>
    
}

export interface NumberOfUnitDetailsType6Attributes {
    
}


export interface quotaGroupType {
    
    $attributes: quotaGroupTypeAttributes
    
    // This segment carries the quota number.
    serviceQuota: SpecialRequirementsQuotaType1
    
    // This segment carries the upgrade booking class.
    bookingClassUpgrade: Array<ProductInformationType3>
    
    // This segment carries upgrade cabin information in case of upgrade recommendation.
    cabinClassFact: Array<CabinClassServicesType>
    
    // Segment association
    segmentReference: Array<ReferenceInfoType20>
    
}

export interface quotaGroupTypeAttributes {
    
}

// To specify special requests or services quota information related to a fligth.
export interface SpecialRequirementsQuotaType1 {
    
    $attributes: SpecialRequirementsQuotaType1Attributes
    
    // This composite enables user to convey quota-related information.
    quotaInfo: QuotaRelatedInformationType2
    
}

export interface SpecialRequirementsQuotaType1Attributes {
    
}

// Used to convey quota information.
export interface QuotaRelatedInformationType2 {
    
    $attributes: QuotaRelatedInformationType2Attributes
    
    // Quantity that is available.
    availability: Array<number>
    
    // Status which should be replied when quota are reached, for example UN.
    quotaReachedReplyStatus: Array<string>
    
}

export interface QuotaRelatedInformationType2Attributes {
    
}

// To specify details related to availability status or cabin configuration for a product.
export interface ProductInformationType3 {
    
    $attributes: ProductInformationType3Attributes
    
    // Details of query : Cabin or Booking Codes
    productDetailsQualifier: Array<string>
    
    // Booking Code Details
    bookingClassDetails: Array<ProductDetailsType5>
    
}

export interface ProductInformationType3Attributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsType5 {
    
    $attributes: ProductDetailsType5Attributes
    
    // Booking code
    designator: string
    
    // Availability status
    availabilityStatus: Array<string>
    
    // Special service
    specialService: Array<string>
    
    // Contains the RBD modifier as Night Class
    option: Array<string>
    
}

export interface ProductDetailsType5Attributes {
    
}

// Convey services for cabin or class
export interface CabinClassServicesType {
    
    $attributes: CabinClassServicesTypeAttributes
    
    // Type of service used
    serviceType: string
    
    // List of services/features associated to cabin/class
    cabinClassInfo: Array<CabinClassFeaturesType>
    
}

export interface CabinClassServicesTypeAttributes {
    
}

// List of services/features associated to cabin/class
export interface CabinClassFeaturesType {
    
    $attributes: CabinClassFeaturesTypeAttributes
    
    // Cabin or class level
    level: Array<string>
    
    // Identify the features associated to the class/cabin
    service: string
    
    // Description of the service
    description: Array<string>
    
    // Cabin/Class code designator
    designator: Array<string>
    
}

export interface CabinClassFeaturesTypeAttributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType7 {
    
    $attributes: PlaceLocationIdentificationType7Attributes
    
    
    locationType: string
    
    
    locationDescription: Array<LocationIdentificationBatchType3>
    
    
    firstLocationDetails: Array<RelatedLocationOneIdentificationType5>
    
    
    secondLocationDetails: Array<RelatedLocationTwoIdentificationType5>
    
    
    relationType: Array<string>
    
}

export interface PlaceLocationIdentificationType7Attributes {
    
}

// Identification of a location by code or name
export interface LocationIdentificationBatchType3 {
    
    $attributes: LocationIdentificationBatchType3Attributes
    
    
    code: Array<string>
    
    
    qualifier: Array<string>
    
    
    agency: Array<string>
    
    
    name: Array<string>
    
}

export interface LocationIdentificationBatchType3Attributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationType5 {
    
    $attributes: RelatedLocationOneIdentificationType5Attributes
    
    
    code: Array<string>
    
    
    qualifier: Array<string>
    
    
    agency: Array<string>
    
    
    name: Array<string>
    
}

export interface RelatedLocationOneIdentificationType5Attributes {
    
}

// Identification of second related location by code or name.
export interface RelatedLocationTwoIdentificationType5 {
    
    $attributes: RelatedLocationTwoIdentificationType5Attributes
    
    
    code: Array<string>
    
    
    qualifier: Array<string>
    
    
    agency: Array<string>
    
    
    name: Array<string>
    
}

export interface RelatedLocationTwoIdentificationType5Attributes {
    
}


export interface baggageDescriptionGroupType {
    
    $attributes: baggageDescriptionGroupTypeAttributes
    
    
    baggageData: ExcessBaggageType2
    
    
    range: Array<RangeDetailsType_191709S>
    
    // Baggage attributes details
    baggageAttributes: Array<AttributeType13>
    
}

export interface baggageDescriptionGroupTypeAttributes {
    
}

// To specify information concerning excess baggage charges and the associated baggage details.
export interface ExcessBaggageType2 {
    
    $attributes: ExcessBaggageType2Attributes
    
    
    baggageDetails: Array<BaggageDetailsType3>
    
    
    otherBaggageDetails: Array<BaggageDetailsType3>
    
    
    extraBaggageDetails: Array<BaggageDetailsType3>
    
}

export interface ExcessBaggageType2Attributes {
    
}

// To specify the number and weight of baggage.
export interface BaggageDetailsType3 {
    
    $attributes: BaggageDetailsType3Attributes
    
    // Number of pieces or weight
    freeAllowance: Array<number>
    
    // Measurement
    measurement: Array<number>
    
    // Nature of the free allowance ( Number of pieces or weight)
    quantityCode: Array<string>
    
    // Unit qualifier
    unitQualifier: Array<string>
    
    // Process indicator
    processIndicator: Array<string>
    
}

export interface BaggageDetailsType3Attributes {
    
}

// Range of elements
export interface RangeDetailsType_191709S {
    
    $attributes: RangeDetailsType_191709SAttributes
    
    
    rangeQualifier: Array<string>
    
    
    rangeDetails: Array<RangeType>
    
}

export interface RangeDetailsType_191709SAttributes {
    
}


export interface pricingGroupType {
    
    $attributes: pricingGroupTypeAttributes
    
    // Convey codeshare Info
    codeshareCarrierInfo: CommercialAgreementsType4
    
    
    computedTaxSubDetails: Array<MonetaryInformationType15>
    
    // Passenger association
    passengerReference: Array<ReferenceInfoType20>
    
    // Additional conversion details
    additionalConversionDetails: Array<ConversionRateType2>
    
    
    feeApplication: Array<SpecificDataInformationType6>
    
    // Group used to carry information on fare construction: segments included in the fare calculation.
    couponInfoGroup: Array<couponInfoGroupType>
    
}

export interface pricingGroupTypeAttributes {
    
}

// To specify details of a conversion rate related to an amount.
export interface ConversionRateType2 {
    
    $attributes: ConversionRateType2Attributes
    
    
    conversionRateDetails: ConversionRateDetailsType2
    
    
    otherConvRateDetails: Array<ConversionRateDetailsType2>
    
}

export interface ConversionRateType2Attributes {
    
}

// To specify the conversion rate and the monetary amount.
export interface ConversionRateDetailsType2 {
    
    $attributes: ConversionRateDetailsType2Attributes
    
    
    conversionType: Array<string>
    
    
    currency: Array<string>
    
    
    rateType: Array<string>
    
    
    pricingAmount: Array<number>
    
    
    convertedValueAmount: Array<number>
    
    
    dutyTaxFeeType: Array<string>
    
    
    measurementValue: Array<number>
    
    
    measurementSignificance: Array<string>
    
}

export interface ConversionRateDetailsType2Attributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationType6 {
    
    $attributes: SpecificDataInformationType6Attributes
    
    // Carrier fee description
    dataTypeInformation: DataTypeInformationType6
    
}

export interface SpecificDataInformationType6Attributes {
    
}

// To identify the type of data to be sent and to qualify the data when required.
export interface DataTypeInformationType6 {
    
    $attributes: DataTypeInformationType6Attributes
    
    // Carrier fee code
    subType: string
    
    // Status (automated, manually added, exempted). Default is automated
    status: Array<string>
    
}

export interface DataTypeInformationType6Attributes {
    
}


export interface couponInfoGroupType {
    
    $attributes: couponInfoGroupTypeAttributes
    
    
    coupon: ItemReferencesAndVersionsType14
    
    
    monetaryInfo: MonetaryInformationType15
    
    // attribute linked to the fare
    fareAttribute: Array<AttributeType13>
    
    // Segment association
    segmentCouponReference: Array<ReferenceInfoType20>
    
    
    taxInfo: Array<taxInfoType>
    
}

export interface couponInfoGroupTypeAttributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType14 {
    
    $attributes: ItemReferencesAndVersionsType14Attributes
    
    // PQR for Offers or TST
    referenceType: Array<string>
    
    // Pricing record (TST or PQR) Tattoo
    uniqueReference: Array<number>
    
}

export interface ItemReferencesAndVersionsType14Attributes {
    
}


export interface taxInfoType {
    
    $attributes: taxInfoTypeAttributes
    
    // Computed tax list information at itinerary level
    computedTaxListInfo: TaxType10
    
    // VAT, penalties for the elementary tax
    computedDiscountAndPenaltyInfo: Array<DiscountAndPenaltyInformationType5>
    
    
    computedTaxSubDetails: Array<MonetaryInformationType15>
    
}

export interface taxInfoTypeAttributes {
    
}

// To specify details relating to tax(es).
export interface TaxType10 {
    
    $attributes: TaxType10Attributes
    
    // Tax category
    taxCategory: Array<string>
    
    // Tax details
    taxDetails: Array<TaxDetailsType7>
    
}

export interface TaxType10Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsType7 {
    
    $attributes: TaxDetailsType7Attributes
    
    // Amount
    rate: Array<string>
    
    // Country code
    countryCode: Array<string>
    
    // Currency code
    currencyCode: Array<string>
    
    // Type
    type: Array<string>
    
}

export interface TaxDetailsType7Attributes {
    
}

// To specify information about discounts and penalties
export interface DiscountAndPenaltyInformationType5 {
    
    $attributes: DiscountAndPenaltyInformationType5Attributes
    
    // Discount penalty qualifier
    discountPenaltyQualifier: Array<string>
    
    // Discount penalty details
    discountPenaltyDetails: Array<DiscountPenaltyMonetaryInformationType5>
    
}

export interface DiscountAndPenaltyInformationType5Attributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationType5 {
    
    $attributes: DiscountPenaltyMonetaryInformationType5Attributes
    
    // Penalty information
    function: Array<string>
    
    // Amount or percentage indicator
    amountType: Array<string>
    
    // Penalty amount or percentage
    amount: Array<number>
    
    // Rate
    rate: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationType5Attributes {
    
}


export interface Service_IntegratedPricingType {
    
    $attributes: Service_IntegratedPricingTypeAttributes
    
    // Pricing Options Group
    pricingOption: Array<PricingOptionGroup>
    
}

export interface Service_IntegratedPricingTypeAttributes {
    
}


export interface PricingOptionGroup {
    
    $attributes: PricingOptionGroupAttributes
    
    // the smart name of the option
    pricingOptionKey: PricingOptionKey3
    
    // in case the option value takes a free text
    optionDetail: Array<AttributeType14>
    
    // in case the option value takes a carrier code
    carrierInformation: Array<TransportIdentifierType12>
    
    // in case the option value takes a currency code
    currency: Array<CurrenciesType6>
    
    // in case the option value takes a date
    dateInformation: Array<StructuredDateTimeInformationType12>
    
    // in case the option deals with Frequent Flyer Information
    frequentFlyerInformation: Array<FrequentTravellerIdentificationCodeType13>
    
    
    formOfPaymentInformation: Array<FormOfPaymentType7>
    
    // in case the option value takes location code.
    locationInformation: Array<PlaceLocationIdentificationType8>
    
    // in case the option value takes a ticket number.
    ticketInformation: Array<TicketNumberTypeI6>
    
    // to associate the option to a passenger or a segment.
    paxSegTstReference: Array<ReferenceInfoType21>
    
}

export interface PricingOptionGroupAttributes {
    
}


export interface PricingOptionKey3 {
    
    $attributes: PricingOptionKey3Attributes
    
    
    pricingOptionKey: string
    
}

export interface PricingOptionKey3Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType14 {
    
    $attributes: AttributeType14Attributes
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU11>
    
}

export interface AttributeType14Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU11 {
    
    $attributes: AttributeInformationTypeU11Attributes
    
    // Used for attribute value rather than attributeType
    attributeType: string
    
    
    attributeDescription: Array<string>
    
}

export interface AttributeInformationTypeU11Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType12 {
    
    $attributes: TransportIdentifierType12Attributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI23>
    
}

export interface TransportIdentifierType12Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI23 {
    
    $attributes: CompanyIdentificationTypeI23Attributes
    
    
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI23Attributes {
    
}

// To specify currencies used in the transaction and relevant details for the rate of exchange.
export interface CurrenciesType6 {
    
    $attributes: CurrenciesType6Attributes
    
    
    firstCurrencyDetails: Array<CurrencyDetailsTypeU6>
    
}

export interface CurrenciesType6Attributes {
    
}

// The usage to which a currency relates
export interface CurrencyDetailsTypeU6 {
    
    $attributes: CurrencyDetailsTypeU6Attributes
    
    
    currencyQualifier: string
    
    
    currencyIsoCode: Array<string>
    
}

export interface CurrencyDetailsTypeU6Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType12 {
    
    $attributes: StructuredDateTimeInformationType12Attributes
    
    
    businessSemantic: string
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType15>
    
}

export interface StructuredDateTimeInformationType12Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType15 {
    
    $attributes: StructuredDateTimeType15Attributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
}

export interface StructuredDateTimeType15Attributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType13 {
    
    $attributes: FrequentTravellerIdentificationCodeType13Attributes
    
    // Frequent Traveller Info
    frequentTravellerDetails: Array<FrequentTravellerIdentificationType12>
    
}

export interface FrequentTravellerIdentificationCodeType13Attributes {
    
}


export interface FrequentTravellerIdentificationType12 {
    
    $attributes: FrequentTravellerIdentificationType12Attributes
    
    // Carrier where the FQTV is registered.
    carrier: Array<string>
    
    
    number: Array<string>
    
    // To specify a Tier linked to the FQTV
    tierLevel: Array<string>
    
    // For example : priority code
    priorityCode: Array<string>
    
}

export interface FrequentTravellerIdentificationType12Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentType7 {
    
    $attributes: FormOfPaymentType7Attributes
    
    // Details on the form of payment
    formOfPayment: FormOfPaymentDetailsType7
    
    
    otherFormOfPayment: Array<FormOfPaymentDetailsType7>
    
}

export interface FormOfPaymentType7Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsType7 {
    
    $attributes: FormOfPaymentDetailsType7Attributes
    
    
    type: string
    
    // indicates wether the transaction is a credit or debit.
    indicator: Array<string>
    
    
    amount: Array<number>
    
    // provides the code of the vendor/carrier code
    vendorCode: Array<string>
    
    
    creditCardNumber: Array<string>
    
    // expiry date of the credit card
    expiryDate: Array<string>
    
    
    approvalCode: Array<string>
    
    
    sourceOfApproval: Array<string>
    
    
    authorisedAmount: Array<number>
    
    
    addressVerification: Array<string>
    
    
    customerAccount: Array<string>
    
    
    extendedPayment: Array<string>
    
    
    fopFreeText: Array<string>
    
    
    membershipStatus: Array<string>
    
    
    transactionInfo: Array<string>
    
    // stores a pin code attached to the account
    pinCode: Array<string>
    
    // Details pin code type (in case of encrypted pin code)
    pinCodeType: Array<string>
    
}

export interface FormOfPaymentDetailsType7Attributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType8 {
    
    $attributes: PlaceLocationIdentificationType8Attributes
    
    
    locationType: string
    
    
    firstLocationDetails: Array<RelatedLocationOneIdentificationType6>
    
    
    secondLocationDetails: Array<RelatedLocationTwoIdentificationType6>
    
}

export interface PlaceLocationIdentificationType8Attributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationType6 {
    
    $attributes: RelatedLocationOneIdentificationType6Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationOneIdentificationType6Attributes {
    
}

// Identification of second related location by code or name.
export interface RelatedLocationTwoIdentificationType6 {
    
    $attributes: RelatedLocationTwoIdentificationType6Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationTwoIdentificationType6Attributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberTypeI6 {
    
    $attributes: TicketNumberTypeI6Attributes
    
    
    documentDetails: TicketNumberDetailsTypeI6
    
    
    status: Array<string>
    
}

export interface TicketNumberTypeI6Attributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsTypeI6 {
    
    $attributes: TicketNumberDetailsTypeI6Attributes
    
    
    number: Array<string>
    
    
    type: Array<string>
    
    // number of booklets
    numberOfBooklets: Array<number>
    
    
    dataIndicator: Array<string>
    
    
    requestNotification: Array<string>
    
}

export interface TicketNumberDetailsTypeI6Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType21 {
    
    $attributes: ReferenceInfoType21Attributes
    
    
    referenceDetails: Array<ReferencingDetailsType22>
    
}

export interface ReferenceInfoType21Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType22 {
    
    $attributes: ReferencingDetailsType22Attributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
}

export interface ReferencingDetailsType22Attributes {
    
}


export interface Service_IntegratedPricingReplyType {
    
    $attributes: Service_IntegratedPricingReplyTypeAttributes
    
    
    errorGroup: Array<ErrorGroupType10>
    
    // all fares info group
    allFaresInfoGroup: Array<FaresInfoType>
    
}

export interface Service_IntegratedPricingReplyTypeAttributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType10 {
    
    $attributes: ErrorGroupType10Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType15
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType15>
    
}

export interface ErrorGroupType10Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType15 {
    
    $attributes: ApplicationErrorInformationType15Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType13
    
}

export interface ApplicationErrorInformationType15Attributes {
    
}


export interface ApplicationErrorDetailType13 {
    
    $attributes: ApplicationErrorDetailType13Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType13Attributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType15 {
    
    $attributes: FreeTextInformationType15Attributes
    
    
    freeTextDetails: FreeTextDetailsType15
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType15Attributes {
    
}


export interface FreeTextDetailsType15 {
    
    $attributes: FreeTextDetailsType15Attributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
    
    status: Array<string>
    
    
    companyId: Array<string>
    
    
    language: Array<string>
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType15Attributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface FaresInfoType {
    
    $attributes: FaresInfoTypeAttributes
    
    // Marker all fares
    markerAllFares: DummySegmentTypeI12
    
    // Type of the response
    responseTypeInfo: Array<StatusType9>
    
    // Response identification information
    responseIdentInfo: Array<ItemNumberType10>
    
    // Currency of travel origin, currency of sale
    involvedCurrenciesInfo: Array<ConversionRateType3>
    
    // Monetary information
    monetaryInfo: Array<MonetaryInformationType16>
    
    // Computed tax information group at itinerary level
    computedTaxInfoGroup: Array<GeneralTaxInfoType>
    
    // Ticketing information group
    ticketingInfoGroup: Array<TicketingInfoType>
    
    // Flight information group
    flightInfoGroup: Array<FlightInformationType>
    
    // Service information details group
    serviceInformationGroup: Array<ServiceInfoType>
    
    // Fare product information group
    fareProductInfoGroup: Array<FareProductDataType>
    
    // Error information group at service request level
    serviceRequestRejectGroup: Array<ServiceRequestRejectType>
    
}

export interface FaresInfoTypeAttributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI12 {
    
    $attributes: DummySegmentTypeI12Attributes
    
}

export interface DummySegmentTypeI12Attributes {
    
}

// To identify a status and related information.
export interface StatusType9 {
    
    $attributes: StatusType9Attributes
    
    // Status details
    statusDetails: Array<StatusDetailsType8>
    
}

export interface StatusType9Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType8 {
    
    $attributes: StatusDetailsType8Attributes
    
    // Indicator
    indicator: Array<string>
    
}

export interface StatusDetailsType8Attributes {
    
}

// To specify an item number
export interface ItemNumberType10 {
    
    $attributes: ItemNumberType10Attributes
    
    // Item number details
    itemNumberDetails: Array<ItemNumberIdentificationType10>
    
}

export interface ItemNumberType10Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType10 {
    
    $attributes: ItemNumberIdentificationType10Attributes
    
    // Fare component number
    number: Array<string>
    
    // Type
    type: Array<string>
    
}

export interface ItemNumberIdentificationType10Attributes {
    
}

// To specify details of a conversion rate related to an amount.
export interface ConversionRateType3 {
    
    $attributes: ConversionRateType3Attributes
    
    // Conversion rate details
    conversionRateDetails: Array<ConversionRateDetailsType3>
    
}

export interface ConversionRateType3Attributes {
    
}

// To specify the conversion rate and the monetary amount.
export interface ConversionRateDetailsType3 {
    
    $attributes: ConversionRateDetailsType3Attributes
    
    // Conversion type
    conversionType: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface ConversionRateDetailsType3Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType16 {
    
    $attributes: MonetaryInformationType16Attributes
    
    // Monetary details
    monetaryDetails: Array<MonetaryInformationDetailsType_231248C>
    
}

export interface MonetaryInformationType16Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_231248C {
    
    $attributes: MonetaryInformationDetailsType_231248CAttributes
    
    // Type qualifier
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsType_231248CAttributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface GeneralTaxInfoType {
    
    $attributes: GeneralTaxInfoTypeAttributes
    
    // Computed tax list information at itinerary level
    computedTaxListInfo: TaxDetailsType_163207S
    
    // Tax sub details for ZP and PFC
    computedTaxSubDetails: Array<MonetaryInformationType_163167S>
    
}

export interface GeneralTaxInfoTypeAttributes {
    
}

// To specify details relating to tax(es).
export interface TaxDetailsType_163207S {
    
    $attributes: TaxDetailsType_163207SAttributes
    
    // Tax details
    taxDetails: Array<TaxDetailsType8>
    
}

export interface TaxDetailsType_163207SAttributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsType8 {
    
    $attributes: TaxDetailsType8Attributes
    
    // Amount
    rate: Array<string>
    
    // Country code
    countryCode: Array<string>
    
    // Currency code
    currencyCode: Array<string>
    
    // Type
    type: Array<string>
    
    // Indicator
    indicator: Array<string>
    
}

export interface TaxDetailsType8Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_163167S {
    
    $attributes: MonetaryInformationType_163167SAttributes
    
    // Monetary details
    monetaryDetails: Array<MonetaryInformationDetailsType_231249C>
    
    
    DummyNET: string
    
}

export interface MonetaryInformationType_163167SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_231249C {
    
    $attributes: MonetaryInformationDetailsType_231249CAttributes
    
    // Type qualifier
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType_231249CAttributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface TicketingInfoType {
    
    $attributes: TicketingInfoTypeAttributes
    
    // Sale and ticketing information
    pricingTicketingDetails: PricingTicketingDetailsType5
    
}

export interface TicketingInfoTypeAttributes {
    
}

// To convey pricing and date information related to a ticket.
export interface PricingTicketingDetailsType5 {
    
    $attributes: PricingTicketingDetailsType5Attributes
    
    // Price ticket details
    priceTicketDetails: Array<PricingTicketingInformationType5>
    
    // Selling location details
    sellingLocationDetails: Array<LocationDetailsTypeI6>
    
}

export interface PricingTicketingDetailsType5Attributes {
    
}

// To specify indicators related to pricing and ticketing.
export interface PricingTicketingInformationType5 {
    
    $attributes: PricingTicketingInformationType5Attributes
    
    // Indicators like type of fare, sold/ticketed inside/outside, electronic ticketing restrictions, possible restrictions warning, additional information concerning Last Ticketing date
    indicators: Array<string>
    
}

export interface PricingTicketingInformationType5Attributes {
    
}

// To specify a location and related country.
export interface LocationDetailsTypeI6 {
    
    $attributes: LocationDetailsTypeI6Attributes
    
    // City
    city: Array<string>
    
    // Country
    country: Array<string>
    
}

export interface LocationDetailsTypeI6Attributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface FlightInformationType {
    
    $attributes: FlightInformationTypeAttributes
    
    // Involved flight information
    involvedFlightInfo: TravelProductInformationType9
    
    // Related product information
    relatedProductInfo: Array<RelatedProductInformationTypeI8>
    
    // Flight mileage information
    additionalFlightInfo: Array<AdditionalProductDetailsTypeI10>
    
    // Itinerary information group
    itineraryInfoGroup: Array<ItineraryInfoType>
    
}

export interface FlightInformationTypeAttributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationType9 {
    
    $attributes: TravelProductInformationType9Attributes
    
    // Flight date
    flightDate: Array<ProductDateTimeType_231252C>
    
    // Board point details
    boardPointDetails: Array<LocationType4>
    
    // Off point details
    offpointDetails: Array<LocationType4>
    
    // Company details
    companyDetails: Array<CompanyIdentificationType7>
    
    // Flight identification
    flightIdentification: Array<ProductIdentificationDetailsType_231256C>
    
    // Flight type details
    flightTypeDetails: Array<ProductTypeDetailsType13>
    
}

export interface TravelProductInformationType9Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeType_231252C {
    
    $attributes: ProductDateTimeType_231252CAttributes
    
    // Departure date
    departureDate: Array<string>
    
    // Departure time
    departureTime: Array<string>
    
    // Arrival date
    arrivalDate: Array<string>
    
    // Arrival time
    arrivalTime: Array<string>
    
}

export interface ProductDateTimeType_231252CAttributes {
    
}

// To identify a location by code or name.
export interface LocationType4 {
    
    $attributes: LocationType4Attributes
    
    // True location id
    trueLocationId: Array<string>
    
}

export interface LocationType4Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationType7 {
    
    $attributes: CompanyIdentificationType7Attributes
    
    // Marketing company
    marketingCompany: Array<string>
    
    // Operating company
    operatingCompany: Array<string>
    
}

export interface CompanyIdentificationType7Attributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsType_231256C {
    
    $attributes: ProductIdentificationDetailsType_231256CAttributes
    
    // Flight number
    flightNumber: string
    
    // Booking class
    bookingClass: Array<string>
    
}

export interface ProductIdentificationDetailsType_231256CAttributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType13 {
    
    $attributes: ProductTypeDetailsType13Attributes
    
    // Booking access identifier
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsType13Attributes {
    
}

// To indicate quantity and action required in relation to a product.
export interface RelatedProductInformationTypeI8 {
    
    $attributes: RelatedProductInformationTypeI8Attributes
    
    // Segment identification
    statusCode: Array<string>
    
}

export interface RelatedProductInformationTypeI8Attributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsTypeI10 {
    
    $attributes: AdditionalProductDetailsTypeI10Attributes
    
    // Leg details
    legDetails: Array<AdditionalProductTypeI9>
    
}

export interface AdditionalProductDetailsTypeI10Attributes {
    
}

// Additional details describing a specific means of transport.
export interface AdditionalProductTypeI9 {
    
    $attributes: AdditionalProductTypeI9Attributes
    
    // Equipment
    equipment: Array<string>
    
}

export interface AdditionalProductTypeI9Attributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface ItineraryInfoType {
    
    $attributes: ItineraryInfoTypeAttributes
    
    // Information related to the flight in the itinerary
    travelItineraryInfo: TravellerInsuranceInformationType1
    
}

export interface ItineraryInfoTypeAttributes {
    
}

// To specify a segment of an itinerary and related details.
export interface TravellerInsuranceInformationType1 {
    
    $attributes: TravellerInsuranceInformationType1Attributes
    
    // Segment item number
    segmentItemNumber: Array<string>
    
    // Numeric reference id
    numericReferenceId: Array<number>
    
    // Cabin designator
    cabinDesignator: Array<string>
    
}

export interface TravellerInsuranceInformationType1Attributes {
    
}


export interface ServiceInfoType {
    
    $attributes: ServiceInfoTypeAttributes
    
    // Nature of the service (OB, OC)
    serviceTypeInfo: SelectionDetailsType6
    
    // Description of the service request
    serviceInformationDetailsGroup: Array<ServiceInfoDetailsType>
    
}

export interface ServiceInfoTypeAttributes {
    
}

// To specify the details for making a selection.
export interface SelectionDetailsType6 {
    
    $attributes: SelectionDetailsType6Attributes
    
    // Carrier fees details
    carrierFeeDetails: SelectionDetailsInformationType5
    
}

export interface SelectionDetailsType6Attributes {
    
}

// To specify a selected option and associated information.
export interface SelectionDetailsInformationType5 {
    
    $attributes: SelectionDetailsInformationType5Attributes
    
    // Carrier fee type
    type: string
    
}

export interface SelectionDetailsInformationType5Attributes {
    
}


export interface ServiceInfoDetailsType {
    
    $attributes: ServiceInfoDetailsTypeAttributes
    
    // Service information
    serviceInfo: SpecificDataInformationType7
    
    // Owner
    serviceOwner: Array<UserIdentificationType9>
    
    // Version date/hour
    serviceDateAndTimeVersion: Array<DateAndTimeInformationType7>
    
    // Service details
    serviceDetails: Array<SpecialRequirementsDetailsType8>
    
    // Upgrade to RBD
    proposedServiceProductInfo: Array<ProductInformationType_163234S>
    
    // Service attributes details
    serviceAttributes: Array<AttributeType15>
    
    // Service fare details
    serviceFareDetails: Array<FareQualifierDetailsType10>
    
    // Commercial description
    serviceDescriptionInfo: Array<InteractiveFreeTextType4>
    
}

export interface ServiceInfoDetailsTypeAttributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationType7 {
    
    $attributes: SpecificDataInformationType7Attributes
    
    // Carrier fee description
    dataTypeInformation: DataTypeInformationType7
    
}

export interface SpecificDataInformationType7Attributes {
    
}

// To identify the type of data to be sent and to qualify the data when required.
export interface DataTypeInformationType7 {
    
    $attributes: DataTypeInformationType7Attributes
    
    // Carrier fee code
    subType: string
    
    // Status (automated, manually added, exempted). Default is automated
    status: Array<string>
    
}

export interface DataTypeInformationType7Attributes {
    
}

// This segment is used to identify a user.
export interface UserIdentificationType9 {
    
    $attributes: UserIdentificationType9Attributes
    
    // Originator Identification Details
    originIdentification: Array<OriginatorIdentificationDetailsTypeI13>
    
}

export interface UserIdentificationType9Attributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI13 {
    
    $attributes: OriginatorIdentificationDetailsTypeI13Attributes
    
    // In house identification 1
    inHouseIdentification1: Array<string>
    
}

export interface OriginatorIdentificationDetailsTypeI13Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeInformationType7 {
    
    $attributes: DateAndTimeInformationType7Attributes
    
    // Date and time details
    dateAndTimeDetails: Array<DateAndTimeDetailsType_231262C>
    
}

export interface DateAndTimeInformationType7Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeDetailsType_231262C {
    
    $attributes: DateAndTimeDetailsType_231262CAttributes
    
    // Date
    date: Array<string>
    
    // Time
    time: Array<string>
    
}

export interface DateAndTimeDetailsType_231262CAttributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsType8 {
    
    $attributes: SpecialRequirementsDetailsType8Attributes
    
    // To specify the Service Requirement of the customer
    serviceRequirementsInfo: SpecialRequirementsTypeDetailsType8
    
}

export interface SpecialRequirementsDetailsType8Attributes {
    
}


export interface SpecialRequirementsTypeDetailsType8 {
    
    $attributes: SpecialRequirementsTypeDetailsType8Attributes
    
    // To specify the Service Classification of the Service Requirement.
    serviceClassification: string
    
    // To specify to which marketing carrier the service applies
    serviceMarketingCarrier: Array<string>
    
    // Specify the Service group
    serviceGroup: Array<string>
    
    // Specify the Service Sub-Group
    serviceSubGroup: Array<string>
    
    // Free Text attached to the Service
    serviceFreeText: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsType8Attributes {
    
}

// To specify details related to availability status or cabin configuration for a product.
export interface ProductInformationType_163234S {
    
    $attributes: ProductInformationType_163234SAttributes
    
    // Booking class details
    bookingClassDetails: Array<ProductDetailsType_231316C>
    
}

export interface ProductInformationType_163234SAttributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsType_231316C {
    
    $attributes: ProductDetailsType_231316CAttributes
    
    // Designator
    designator: string
    
}

export interface ProductDetailsType_231316CAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType15 {
    
    $attributes: AttributeType15Attributes
    
    // Criteria details
    attributeDetails: Array<AttributeInformationType5>
    
}

export interface AttributeType15Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationType5 {
    
    $attributes: AttributeInformationType5Attributes
    
    // Attribute type
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface AttributeInformationType5Attributes {
    
}

// To specify the details which qualify a fare
export interface FareQualifierDetailsType10 {
    
    $attributes: FareQualifierDetailsType10Attributes
    
    // Fare categories
    fareCategories: Array<FareCategoryCodesTypeI5>
    
}

export interface FareQualifierDetailsType10Attributes {
    
}

// To designate non-system specific combinations of fare types.
export interface FareCategoryCodesTypeI5 {
    
    $attributes: FareCategoryCodesTypeI5Attributes
    
    // Fare type
    fareType: string
    
}

export interface FareCategoryCodesTypeI5Attributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextType4 {
    
    $attributes: InteractiveFreeTextType4Attributes
    
    // Free text qualification
    freeTextQualification: Array<FreeTextQualificationType5>
    
    // Free text
    freeText: Array<string>
    
}

export interface InteractiveFreeTextType4Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationType5 {
    
    $attributes: FreeTextQualificationType5Attributes
    
    // Text subject qualifier
    textSubjectQualifier: string
    
    // Add code sets in the list
    informationType: Array<string>
    
}

export interface FreeTextQualificationType5Attributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface FareProductDataType {
    
    $attributes: FareProductDataTypeAttributes
    
    // Fare product reference and number of passengers involved
    generalAndIdInfo: SegmentRepetitionControlType
    
    // Passenger references
    specificTravellerDetails: Array<SpecificTravellerTypeI4>
    
    // Passenger type information group
    passengerTypeInfoGroup: Array<PassengerDetailsInfoType>
    
}

export interface FareProductDataTypeAttributes {
    
}

// To indicate the number of segment group repetitions.
export interface SegmentRepetitionControlType {
    
    $attributes: SegmentRepetitionControlTypeAttributes
    
    // Segment control details
    segmentControlDetails: Array<SegmentRepetitionControlDetailsType>
    
}

export interface SegmentRepetitionControlTypeAttributes {
    
}

// Information about the number of selection segments to be processed.
export interface SegmentRepetitionControlDetailsType {
    
    $attributes: SegmentRepetitionControlDetailsTypeAttributes
    
    // Number of pax
    numberOfPAx: Array<number>
    
}

export interface SegmentRepetitionControlDetailsTypeAttributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerTypeI4 {
    
    $attributes: SpecificTravellerTypeI4Attributes
    
    // Traveller details
    travellerDetails: Array<SpecificTravellerDetailsTypeI4>
    
    
    DummyNET: string
    
}

export interface SpecificTravellerTypeI4Attributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerDetailsTypeI4 {
    
    $attributes: SpecificTravellerDetailsTypeI4Attributes
    
    // Reference number
    referenceNumber: Array<string>
    
    // Number of passengers in range
    measurementValue: Array<number>
    
    // Surname
    surname: Array<string>
    
    // First name
    firstName: Array<string>
    
}

export interface SpecificTravellerDetailsTypeI4Attributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface PassengerDetailsInfoType {
    
    $attributes: PassengerDetailsInfoTypeAttributes
    
    // Passenger type information
    fareInfo: FareInformationType5
    
    // Pricing Unit identification information
    pricingUnitIdentInfo: Array<NumberOfUnitsType4>
    
    // Pricing and ticketing significant information for the fare product
    pricingticketingDetails: Array<PricingTicketingDetailsType_163190S>
    
    // Fare calculation total amount and currency ; and conversion details into origin currency
    conversionRate: Array<ConversionRateType_163191S>
    
    // Different levels of amount for the fare product: base amount, equivalent amount, tax amount, total amount
    monetaryInfo: Array<MonetaryInformationType16>
    
    // Tax details information group
    taxDetailsInfoGroup: Array<TaxDetailsInfoType>
    
    // Fare components information group
    fareComponentsInfoGroup: Array<FareComponentsInfoType>
    
    // Proposed service information
    proposedServiceInformation: Array<ProposedServiceInfoType>
    
}

export interface PassengerDetailsInfoTypeAttributes {
    
}

// To specify fare details.
export interface FareInformationType5 {
    
    $attributes: FareInformationType5Attributes
    
    // Value qualifier
    valueQualifier: Array<string>
    
}

export interface FareInformationType5Attributes {
    
}

// To specify the number of units required.
export interface NumberOfUnitsType4 {
    
    $attributes: NumberOfUnitsType4Attributes
    
    // Quantity details
    quantityDetails: Array<NumberOfUnitDetailsType7>
    
}

export interface NumberOfUnitsType4Attributes {
    
}

// Identification of number of units and its purpose.
export interface NumberOfUnitDetailsType7 {
    
    $attributes: NumberOfUnitDetailsType7Attributes
    
    // Number of unit
    numberOfUnit: Array<number>
    
    // Unit qualifier
    unitQualifier: Array<string>
    
}

export interface NumberOfUnitDetailsType7Attributes {
    
}

// To convey pricing and date information related to a ticket.
export interface PricingTicketingDetailsType_163190S {
    
    $attributes: PricingTicketingDetailsType_163190SAttributes
    
    // Contains the options used to select Fares
    priceTicketDetails: Array<PricingTicketingInformationType5>
    
    // Price tariff type
    priceTariffType: Array<string>
    
}

export interface PricingTicketingDetailsType_163190SAttributes {
    
}

// To specify details of a conversion rate related to an amount.
export interface ConversionRateType_163191S {
    
    $attributes: ConversionRateType_163191SAttributes
    
    // Conversion rate details
    conversionRateDetails: Array<ConversionRateDetailsTypeI6>
    
}

export interface ConversionRateType_163191SAttributes {
    
}

// To specify the conversion rate and the monetary amount.
export interface ConversionRateDetailsTypeI6 {
    
    $attributes: ConversionRateDetailsTypeI6Attributes
    
    // Conversion type
    conversionType: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface ConversionRateDetailsTypeI6Attributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface TaxDetailsInfoType {
    
    $attributes: TaxDetailsInfoTypeAttributes
    
    // Tax details list information
    taxDetailsListInfo: TaxDetailsType_163207S
    
    // Tax sub details for ZP and PFC
    elementaryTaxSubDetails: Array<MonetaryInformationType_163167S>
    
}

export interface TaxDetailsInfoTypeAttributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface FareComponentsInfoType {
    
    $attributes: FareComponentsInfoTypeAttributes
    
    // Construction context information
    constructionContextInfo: FareComponentInformationType
    
    // Pricing unit information group
    pricingUnitInfoGroup: Array<PricingUnitDataType>
    
}

export interface FareComponentsInfoTypeAttributes {
    
}

// To specify fare component data.
export interface FareComponentInformationType {
    
    $attributes: FareComponentInformationTypeAttributes
    
    // Fare component details
    fareComponentDetails: Array<FareComponentDetailsType4>
    
    // Ticket document number
    ticketNumber: Array<string>
    
}

export interface FareComponentInformationTypeAttributes {
    
}


export interface FareComponentDetailsType4 {
    
    $attributes: FareComponentDetailsType4Attributes
    
    // Type of data _ fare calc or exchanged residual fare data
    dataType: Array<string>
    
    // Fare component count
    count: Array<number>
    
    // Price quote date
    pricingDate: Array<string>
    
    // Account code
    accountCode: Array<string>
    
    // Input designator
    inputDesignator: Array<string>
    
}

export interface FareComponentDetailsType4Attributes {
    
}


export interface PricingUnitDataType {
    
    $attributes: PricingUnitDataTypeAttributes
    
    // Pricing Unit identification information
    pricingUnitIdentInfo: NumberOfUnitsType4
    
    // Fare component information
    fareComponentInfo: Array<FareComponentInfoType>
    
}

export interface PricingUnitDataTypeAttributes {
    
}


export interface FareComponentInfoType {
    
    $attributes: FareComponentInfoTypeAttributes
    
    // Fare component identification information
    componentIdentInfo: ItemNumberType_163213S
    
    // Sub itinerary information
    subItineraryInfo: Array<SubItineraryInfoType>
    
    // Fare component monetary information
    monetaryInfo: Array<MonetaryInformationType_67627S>
    
    // Fare rules information
    fareComponentFareRulesInfo: Array<FareRulesInformationTypeI2>
    
    // Fare qualifier details
    fareQualifierDetails: Array<FareQualifierDetailsType_163215S>
    
    // Corporate Info
    corporateInfo: Array<CorporateFareInformationType3>
    
    // Matched sequence number
    fareComponentMatchedSeqInfo: Array<ReferenceInfoType22>
    
    // Parameter value information
    fareComponentParameterValue: Array<NumberOfUnitsType_163220S>
    
    // Range Information
    rangeInfo: Array<RangeDetailsType1>
    
    // Rule buster information group
    fareComponentRuleInfoGroup: Array<FareComponentRuleInfoType>
    
    // Product information: RBD
    productInfo: Array<ProductInformationType4>
    
    // Service attributes details
    fareComponentServiceAttributes: Array<AttributeType15>
    
    // Fare calculation currency
    fareComponentConversionRate: Array<ConversionRateType_163222S>
    
    // Fee application
    fareComponentFeeInfo: Array<SpecificDataInformationType7>
    
    // Commercial description
    fareComponentServiceDescInfo: Array<InteractiveFreeTextType4>
    
    // Fare component pricing and ticketing details
    pricingTicketingDetails: PricingTicketingDetailsType_163225S
    
}

export interface FareComponentInfoTypeAttributes {
    
}

// To specify an item number
export interface ItemNumberType_163213S {
    
    $attributes: ItemNumberType_163213SAttributes
    
    // Item number details
    itemNumberDetails: Array<ItemNumberIdentificationType_231296C>
    
}

export interface ItemNumberType_163213SAttributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType_231296C {
    
    $attributes: ItemNumberIdentificationType_231296CAttributes
    
    // Fare component number
    number: Array<string>
    
}

export interface ItemNumberIdentificationType_231296CAttributes {
    
}


export interface SubItineraryInfoType {
    
    $attributes: SubItineraryInfoTypeAttributes
    
    // List of the requested portions
    proposedServicePortionRef: ActionDetailsType2
    
    // Travel product information
    travelProductInfo: Array<TravelProductInformationType_163210S>
    
}

export interface SubItineraryInfoTypeAttributes {
    
}

// To specify the action that should be taken on a selected reference number.
export interface ActionDetailsType2 {
    
    $attributes: ActionDetailsType2Attributes
    
    // Number of items details
    numberOfItemsDetails: Array<ProcessingInformationType2>
    
    // Range of segments
    lastItemsDetails: Array<ReferenceType2>
    
}

export interface ActionDetailsType2Attributes {
    
}

// To identify the action to be taken and the selection criteria.
export interface ProcessingInformationType2 {
    
    $attributes: ProcessingInformationType2Attributes
    
    // Reference qualifier
    referenceQualifier: Array<string>
    
}

export interface ProcessingInformationType2Attributes {
    
}

// To specify which number in a sequence of references and/or the reference number.
export interface ReferenceType2 {
    
    $attributes: ReferenceType2Attributes
    
    // Reference of segment starting range
    firstItemIdentifier: Array<number>
    
    // Reference of segment ending range
    lastItemIdentifier: Array<number>
    
}

export interface ReferenceType2Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationType_163210S {
    
    $attributes: TravelProductInformationType_163210SAttributes
    
    // Flight date
    flightDate: Array<ProductDateTimeType7>
    
    // Board point details
    boardPointDetails: Array<LocationType4>
    
    // Off point details
    offpointDetails: Array<LocationType4>
    
    // Company details
    companyDetails: Array<CompanyIdentificationType_231301C>
    
    // Flight identification
    flightIdentification: Array<ProductIdentificationDetailsType6>
    
    // Flight type details
    flightTypeDetails: Array<ProductTypeDetailsType13>
    
    // Item number
    itemNumber: Array<number>
    
}

export interface TravelProductInformationType_163210SAttributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeType7 {
    
    $attributes: ProductDateTimeType7Attributes
    
    // Departure date
    departureDate: Array<string>
    
    // Departure time
    departureTime: Array<string>
    
    // Arrival date
    arrivalDate: Array<string>
    
    // Arrival time
    arrivalTime: Array<string>
    
    // Date variation
    dateVariation: Array<number>
    
}

export interface ProductDateTimeType7Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationType_231301C {
    
    $attributes: CompanyIdentificationType_231301CAttributes
    
    // Marketing company
    marketingCompany: Array<string>
    
}

export interface CompanyIdentificationType_231301CAttributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsType6 {
    
    $attributes: ProductIdentificationDetailsType6Attributes
    
    // Flight number
    flightNumber: string
    
    // Booking class
    bookingClass: Array<string>
    
    // Operational suffix
    operationalSuffix: Array<string>
    
    // Modifier
    modifier: Array<string>
    
}

export interface ProductIdentificationDetailsType6Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_67627S {
    
    $attributes: MonetaryInformationType_67627SAttributes
    
    // Monetary details
    monetaryDetails: Array<MonetaryInformationDetailsType14>
    
}

export interface MonetaryInformationType_67627SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType14 {
    
    $attributes: MonetaryInformationDetailsType14Attributes
    
    // Type qualifier
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
    // Location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType14Attributes {
    
}

// To specify the tariff, fare supplier, and paragraph number for a fare rule.
export interface FareRulesInformationTypeI2 {
    
    $attributes: FareRulesInformationTypeI2Attributes
    
    // Tariff class id
    tariffClassId: Array<string>
    
    // Rule section id
    ruleSectionId: Array<string>
    
}

export interface FareRulesInformationTypeI2Attributes {
    
}

// To specify the details which qualify a fare
export interface FareQualifierDetailsType_163215S {
    
    $attributes: FareQualifierDetailsType_163215SAttributes
    
    // Fare details
    fareDetails: Array<FareDetailsTypeI6>
    
}

export interface FareQualifierDetailsType_163215SAttributes {
    
}

// To specify the fare type and related information.
export interface FareDetailsTypeI6 {
    
    $attributes: FareDetailsTypeI6Attributes
    
    // Qualifier
    qualifier: Array<string>
    
}

export interface FareDetailsTypeI6Attributes {
    
}

// To specify corporate fare information
export interface CorporateFareInformationType3 {
    
    $attributes: CorporateFareInformationType3Attributes
    
    // Corporate fare identifiers
    corporateFareIdentifiers: CorporateFareIdentifiersType2
    
}

export interface CorporateFareInformationType3Attributes {
    
}


export interface CorporateFareIdentifiersType2 {
    
    $attributes: CorporateFareIdentifiersType2Attributes
    
    // Indicates the type of corporate fares requested
    fareQualifier: Array<string>
    
    // Corporate contract number or name
    identifyNumber: Array<string>
    
}

export interface CorporateFareIdentifiersType2Attributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInfoType22 {
    
    $attributes: ReferenceInfoType22Attributes
    
    // Reference details
    referenceDetails: Array<ReferencingDetailsType23>
    
}

export interface ReferenceInfoType22Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType23 {
    
    $attributes: ReferencingDetailsType23Attributes
    
    // Value
    value: Array<string>
    
}

export interface ReferencingDetailsType23Attributes {
    
}

// To specify the number of units required.
export interface NumberOfUnitsType_163220S {
    
    $attributes: NumberOfUnitsType_163220SAttributes
    
    // Quantity details
    quantityDetails: Array<NumberOfUnitDetailsType_231306C>
    
}

export interface NumberOfUnitsType_163220SAttributes {
    
}

// Identification of number of units and its purpose.
export interface NumberOfUnitDetailsType_231306C {
    
    $attributes: NumberOfUnitDetailsType_231306CAttributes
    
    // Number of unit
    numberOfUnit: Array<number>
    
    // Unit qualifier
    unitQualifier: Array<string>
    
}

export interface NumberOfUnitDetailsType_231306CAttributes {
    
}

// To identify a range.
export interface RangeDetailsType1 {
    
    $attributes: RangeDetailsType1Attributes
    
    // Range qualifier
    rangeQualifier: Array<string>
    
    // Range details
    rangeDetails: Array<RangeType1>
    
}

export interface RangeDetailsType1Attributes {
    
}

// Range minimum and maximum limits.
export interface RangeType1 {
    
    $attributes: RangeType1Attributes
    
    // Data type
    dataType: Array<string>
    
    // Min
    min: Array<number>
    
    // Max
    max: Array<number>
    
}

export interface RangeType1Attributes {
    
}


export interface FareComponentRuleInfoType {
    
    $attributes: FareComponentRuleInfoTypeAttributes
    
    // Information related to the segment
    fareComponentSegmentInfo: TravellerInsuranceInformationType_163226S
    
    // Fare rules information
    fareComponentFareRulesInfo: Array<FareRulesInformationTypeI2>
    
    // Rule number information
    fareComponentRuleNumberInfo: Array<ReferenceInfoType_163228S>
    
}

export interface FareComponentRuleInfoTypeAttributes {
    
}

// To specify a segment of an itinerary and related details.
export interface TravellerInsuranceInformationType_163226S {
    
    $attributes: TravellerInsuranceInformationType_163226SAttributes
    
    // Segment item number
    segmentItemNumber: Array<string>
    
}

export interface TravellerInsuranceInformationType_163226SAttributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInfoType_163228S {
    
    $attributes: ReferenceInfoType_163228SAttributes
    
    // Reference details
    referenceDetails: Array<ReferencingDetailsType_231312C>
    
}

export interface ReferenceInfoType_163228SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_231312C {
    
    $attributes: ReferencingDetailsType_231312CAttributes
    
    // Car/value code, ...
    type: Array<string>
    
    // Value
    value: Array<string>
    
}

export interface ReferencingDetailsType_231312CAttributes {
    
}

// To specify details related to routing status of a product.
export interface ProductInformationType4 {
    
    $attributes: ProductInformationType4Attributes
    
    // Product details qualifier
    productDetailsQualifier: Array<string>
    
    // Booking class details
    bookingClassDetails: Array<ProductDetailsType6>
    
}

export interface ProductInformationType4Attributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsType6 {
    
    $attributes: ProductDetailsType6Attributes
    
    // Reservation booking designator
    designator: string
    
}

export interface ProductDetailsType6Attributes {
    
}

// To specify details of a conversion rate related to an amount.
export interface ConversionRateType_163222S {
    
    $attributes: ConversionRateType_163222SAttributes
    
    // Conversion rate details
    conversionRateDetails: Array<ConversionRateDetailsTypeI_231308C>
    
}

export interface ConversionRateType_163222SAttributes {
    
}

// To specify the conversion rate and the monetary amount.
export interface ConversionRateDetailsTypeI_231308C {
    
    $attributes: ConversionRateDetailsTypeI_231308CAttributes
    
    // Currency
    currency: Array<string>
    
    // Conversion rate
    conversionRate: Array<number>
    
}

export interface ConversionRateDetailsTypeI_231308CAttributes {
    
}

// To convey pricing and date information related to a ticket.
export interface PricingTicketingDetailsType_163225S {
    
    $attributes: PricingTicketingDetailsType_163225SAttributes
    
    // Product date time details
    productDateTimeDetails: Array<ProductDateTimeTypeI16>
    
    // Company details
    companyDetails: Array<CompanyIdentificationTypeI24>
    
    // Company number details
    companyNumberDetails: Array<CompanyIdentificationNumbersTypeI2>
    
}

export interface PricingTicketingDetailsType_163225SAttributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI16 {
    
    $attributes: ProductDateTimeTypeI16Attributes
    
    // Departure date
    departureDate: Array<string>
    
}

export interface ProductDateTimeTypeI16Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI24 {
    
    $attributes: CompanyIdentificationTypeI24Attributes
    
    // Marketing company
    marketingCompany: Array<string>
    
    // Operating company
    operatingCompany: Array<string>
    
    // Other company
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI24Attributes {
    
}

// Number to identify a company and any associated companies.
export interface CompanyIdentificationNumbersTypeI2 {
    
    $attributes: CompanyIdentificationNumbersTypeI2Attributes
    
    // Identifier
    identifier: string
    
    // Other identifier
    otherIdentifier: Array<string>
    
}

export interface CompanyIdentificationNumbersTypeI2Attributes {
    
}


export interface ProposedServiceInfoType {
    
    $attributes: ProposedServiceInfoTypeAttributes
    
    // Service attributes details
    servicePricingAggregation: AttributeType_67628S
    
    // Parameter value information
    serviceParameterValueInfo: Array<NumberOfUnitsType4>
    
    // Date and time aggregation
    dateAndTimeAggregation: Array<DateAndTimeInformationType_67653S>
    
    // Aggregated account code
    corporateInfo: Array<CorporateFareInformationType3>
    
    // List of proposed service details per requested portion
    proposedServiceReqPortionInfo: Array<PortionProposedServiceInfoType>
    
}

export interface ProposedServiceInfoTypeAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_67628S {
    
    $attributes: AttributeType_67628SAttributes
    
    // Criteria Set Type
    attributeQualifier: Array<string>
    
    // Criteria details
    attributeDetails: Array<AttributeInformationType5>
    
}

export interface AttributeType_67628SAttributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeInformationType_67653S {
    
    $attributes: DateAndTimeInformationType_67653SAttributes
    
    // Date and time details
    dateAndTimeDetails: Array<DateAndTimeDetailsType6>
    
}

export interface DateAndTimeInformationType_67653SAttributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeDetailsType6 {
    
    $attributes: DateAndTimeDetailsType6Attributes
    
    // Qualifier
    qualifier: Array<string>
    
    // Date
    date: Array<string>
    
    // Time
    time: Array<string>
    
    // Other qualifier
    otherQualifier: Array<string>
    
    // Other time
    otherTime: Array<string>
    
    // Movement type
    movementType: Array<string>
    
    // Location
    location: Array<string>
    
}

export interface DateAndTimeDetailsType6Attributes {
    
}


export interface PortionProposedServiceInfoType {
    
    $attributes: PortionProposedServiceInfoTypeAttributes
    
    // List of the requested portions
    proposedServicePortionRef: ActionDetailsType2
    
    // List of proposed service details per segments of the requested portion
    proposedServiceDetailsGroup: Array<ProposedServiceDetailsType>
    
}

export interface PortionProposedServiceInfoTypeAttributes {
    
}


export interface ProposedServiceDetailsType {
    
    $attributes: ProposedServiceDetailsTypeAttributes
    
    // Proposed service details
    proposedServiceDetails: SpecialRequirementsDetailsType_163236S
    
    // Proposed service reference information
    proposedServiceRefInformation: Array<ReferenceInfoType_163228S>
    
    // Upgrade to RBD
    proposedServiceProductInfo: Array<ProductInformationType_163234S>
    
    // Upgrade to cabin
    proposedServiceParameters: Array<SeatRequestParametersTypeI3>
    
}

export interface ProposedServiceDetailsTypeAttributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsType_163236S {
    
    $attributes: SpecialRequirementsDetailsType_163236SAttributes
    
    // To specify details of the Service Requirement of the customer
    specialRequirementsDetails: SpecialRequirementsTypeDetailsType_231319C
    
    // To specify the Service Seat Requirement
    specialRequirementsDataDetails: Array<SpecialRequirementsDataDetailsType6>
    
}

export interface SpecialRequirementsDetailsType_163236SAttributes {
    
}


export interface SpecialRequirementsTypeDetailsType_231319C {
    
    $attributes: SpecialRequirementsTypeDetailsType_231319CAttributes
    
    // To specify the Service Classification of the Service Requirement.
    specialRequirementType: string
    
    // To specify the number of items involved
    numberOfInstances: Array<number>
    
    // To specify the first location where the service is applied
    firstGeographicalPoint: Array<string>
    
    // To specify the second location where the service is applied
    secondGeographicalPoint: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsType_231319CAttributes {
    
}

// Special requirements data details
export interface SpecialRequirementsDataDetailsType6 {
    
    $attributes: SpecialRequirementsDataDetailsType6Attributes
    
    // Seat number
    specialRequirementData: Array<string>
    
    // Seat characteristics
    seatCharacteristics: Array<string>
    
}

export interface SpecialRequirementsDataDetailsType6Attributes {
    
}

// To specify the selection criteria for a seat map request.
export interface SeatRequestParametersTypeI3 {
    
    $attributes: SeatRequestParametersTypeI3Attributes
    
    // Generic details
    genericDetails: Array<GenericDetailsTypeI3>
    
}

export interface SeatRequestParametersTypeI3Attributes {
    
}

// To identify the type of seat requested.
export interface GenericDetailsTypeI3 {
    
    $attributes: GenericDetailsTypeI3Attributes
    
    // Compartment designator
    compartmentDesignator: Array<string>
    
}

export interface GenericDetailsTypeI3Attributes {
    
}


export interface ServiceRequestRejectType {
    
    $attributes: ServiceRequestRejectTypeAttributes
    
    // Application error code
    serviceRequestRejectErrorCode: ApplicationErrorInformationTypeI3
    
    // Free text info in case of error
    serviceRequestErrorFreeText: Array<InteractiveFreeTextTypeI10>
    
}

export interface ServiceRequestRejectTypeAttributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationTypeI3 {
    
    $attributes: ApplicationErrorInformationTypeI3Attributes
    
    // Application Error Details
    errorDetails: ApplicationErrorDetailTypeI3
    
}

export interface ApplicationErrorInformationTypeI3Attributes {
    
}

// Code assigned by the recipient of a message to indicate a data validation error condition.
export interface ApplicationErrorDetailTypeI3 {
    
    $attributes: ApplicationErrorDetailTypeI3Attributes
    
    // Error coded
    errorCode: string
    
}

export interface ApplicationErrorDetailTypeI3Attributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextTypeI10 {
    
    $attributes: InteractiveFreeTextTypeI10Attributes
    
    // Contains the Warning Messages related to the entire processing
    freeTextQualification: Array<FreeTextQualificationTypeI10>
    
    // Text associated to the code 9980
    freeText: Array<string>
    
}

export interface InteractiveFreeTextTypeI10Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationTypeI10 {
    
    $attributes: FreeTextQualificationTypeI10Attributes
    
    // Specifies if text is coded or free
    textSubjectQualifier: string
    
    // Warning Message coded
    informationType: Array<string>
    
}

export interface FreeTextQualificationTypeI10Attributes {
    
}


export interface Fare_PricePNRWithLowerFaresType {
    
    $attributes: Fare_PricePNRWithLowerFaresTypeAttributes
    
    
    pricingOptionGroup: Array<pricingOptionGroupType3>
    
}

export interface Fare_PricePNRWithLowerFaresTypeAttributes {
    
}


export interface pricingOptionGroupType3 {
    
    $attributes: pricingOptionGroupType3Attributes
    
    
    pricingOptionKey: PricingOptionKey4
    
    
    optionDetail: Array<AttributeType16>
    
    
    carrierInformation: Array<TransportIdentifierType13>
    
    
    currency: Array<CurrenciesType7>
    
    
    penDisInformation: Array<DiscountAndPenaltyInformationType6>
    
    
    monetaryInformation: Array<MonetaryInformationType17>
    
    
    taxInformation: Array<DutyTaxFeeDetailsType6>
    
    
    dateInformation: Array<StructuredDateTimeInformationType13>
    
    
    frequentFlyerInformation: Array<FrequentTravellerIdentificationCodeType14>
    
    
    formOfPaymentInformation: Array<FormOfPaymentType8>
    
    
    locationInformation: Array<PlaceLocationIdentificationType9>
    
    
    paxSegTstReference: Array<ReferenceInfoType23>
    
}

export interface pricingOptionGroupType3Attributes {
    
}


export interface PricingOptionKey4 {
    
    $attributes: PricingOptionKey4Attributes
    
    
    pricingOptionKey: string
    
}

export interface PricingOptionKey4Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType16 {
    
    $attributes: AttributeType16Attributes
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU12>
    
}

export interface AttributeType16Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU12 {
    
    $attributes: AttributeInformationTypeU12Attributes
    
    // Used for attribute value rather than attributeType
    attributeType: string
    
    
    attributeDescription: Array<string>
    
}

export interface AttributeInformationTypeU12Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType13 {
    
    $attributes: TransportIdentifierType13Attributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI25>
    
}

export interface TransportIdentifierType13Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI25 {
    
    $attributes: CompanyIdentificationTypeI25Attributes
    
    
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI25Attributes {
    
}

// To specify currencies used in the transaction and relevant details for the rate of exchange.
export interface CurrenciesType7 {
    
    $attributes: CurrenciesType7Attributes
    
    
    firstCurrencyDetails: Array<CurrencyDetailsTypeU7>
    
}

export interface CurrenciesType7Attributes {
    
}

// The usage to which a currency relates
export interface CurrencyDetailsTypeU7 {
    
    $attributes: CurrencyDetailsTypeU7Attributes
    
    
    currencyQualifier: string
    
    
    currencyIsoCode: Array<string>
    
}

export interface CurrencyDetailsTypeU7Attributes {
    
}


export interface DiscountAndPenaltyInformationType6 {
    
    $attributes: DiscountAndPenaltyInformationType6Attributes
    
    
    discountPenaltyQualifier: Array<string>
    
    
    discountPenaltyDetails: Array<DiscountPenaltyMonetaryInformationType6>
    
}

export interface DiscountAndPenaltyInformationType6Attributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationType6 {
    
    $attributes: DiscountPenaltyMonetaryInformationType6Attributes
    
    
    function: Array<string>
    
    
    amountType: Array<string>
    
    
    amount: Array<string>
    
    
    rate: Array<string>
    
    
    currency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationType6Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType17 {
    
    $attributes: MonetaryInformationType17Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsType15
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType15>
    
}

export interface MonetaryInformationType17Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType15 {
    
    $attributes: MonetaryInformationDetailsType15Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType15Attributes {
    
}

// To specify relevant duty/tax/fee information.
export interface DutyTaxFeeDetailsType6 {
    
    $attributes: DutyTaxFeeDetailsType6Attributes
    
    
    taxQualifier: string
    
    
    taxType: Array<DutyTaxFeeAccountDetailType3>
    
    
    taxNature: Array<string>
    
    
    taxData: Array<DutyTaxFeeDetailType3>
    
}

export interface DutyTaxFeeDetailsType6Attributes {
    
}


export interface DutyTaxFeeAccountDetailType3 {
    
    $attributes: DutyTaxFeeAccountDetailType3Attributes
    
    
    isoCountry: string
    
}

export interface DutyTaxFeeAccountDetailType3Attributes {
    
}


export interface DutyTaxFeeDetailType3 {
    
    $attributes: DutyTaxFeeDetailType3Attributes
    
    
    taxRate: Array<string>
    
    
    taxValueQualifier: Array<string>
    
}

export interface DutyTaxFeeDetailType3Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType13 {
    
    $attributes: StructuredDateTimeInformationType13Attributes
    
    
    businessSemantic: string
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType16>
    
}

export interface StructuredDateTimeInformationType13Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType16 {
    
    $attributes: StructuredDateTimeType16Attributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
}

export interface StructuredDateTimeType16Attributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType14 {
    
    $attributes: FrequentTravellerIdentificationCodeType14Attributes
    
    // Frequent Traveller Info
    frequentTravellerDetails: Array<FrequentTravellerIdentificationType13>
    
}

export interface FrequentTravellerIdentificationCodeType14Attributes {
    
}


export interface FrequentTravellerIdentificationType13 {
    
    $attributes: FrequentTravellerIdentificationType13Attributes
    
    // Carrier where the FQTV is registered.
    carrier: Array<string>
    
    
    number: Array<string>
    
    // To specify a Tier linked to the FQTV
    tierLevel: Array<string>
    
    // For example : priority code
    priorityCode: Array<string>
    
}

export interface FrequentTravellerIdentificationType13Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentType8 {
    
    $attributes: FormOfPaymentType8Attributes
    
    // Details on the form of payment
    formOfPayment: FormOfPaymentDetailsType8
    
    
    otherFormOfPayment: Array<FormOfPaymentDetailsType8>
    
}

export interface FormOfPaymentType8Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsType8 {
    
    $attributes: FormOfPaymentDetailsType8Attributes
    
    
    type: string
    
    
    amount: Array<number>
    
    
    creditCardNumber: Array<string>
    
}

export interface FormOfPaymentDetailsType8Attributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType9 {
    
    $attributes: PlaceLocationIdentificationType9Attributes
    
    
    locationType: string
    
    
    firstLocationDetails: Array<RelatedLocationOneIdentificationType7>
    
    
    secondLocationDetails: Array<RelatedLocationTwoIdentificationType7>
    
}

export interface PlaceLocationIdentificationType9Attributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationType7 {
    
    $attributes: RelatedLocationOneIdentificationType7Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationOneIdentificationType7Attributes {
    
}

// Identification of second related location by code or name.
export interface RelatedLocationTwoIdentificationType7 {
    
    $attributes: RelatedLocationTwoIdentificationType7Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationTwoIdentificationType7Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType23 {
    
    $attributes: ReferenceInfoType23Attributes
    
    
    referenceDetails: Array<ReferencingDetailsType24>
    
}

export interface ReferenceInfoType23Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType24 {
    
    $attributes: ReferencingDetailsType24Attributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
}

export interface ReferencingDetailsType24Attributes {
    
}


export interface Fare_PricePNRWithLowerFaresReplyType {
    
    $attributes: Fare_PricePNRWithLowerFaresReplyTypeAttributes
    
    
    applicationError: Array<ErrorGroupType11>
    
    // PNR record locator information for this transaction. This PNR record locator is used for tracing purpose.
    pnrLocatorData: Array<ReservationControlInformationTypeI18>
    
    // List of fares returned by Fare Quote server for the current PNR
    fareList: Array<fareListType1>
    
}

export interface Fare_PricePNRWithLowerFaresReplyTypeAttributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType11 {
    
    $attributes: ErrorGroupType11Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType_84497S1
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType16>
    
}

export interface ErrorGroupType11Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType_84497S1 {
    
    $attributes: ApplicationErrorInformationType_84497S1Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType14
    
}

export interface ApplicationErrorInformationType_84497S1Attributes {
    
}


export interface ApplicationErrorDetailType14 {
    
    $attributes: ApplicationErrorDetailType14Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType14Attributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType16 {
    
    $attributes: FreeTextInformationType16Attributes
    
    
    freeTextDetails: Array<FreeTextDetailsType16>
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType16Attributes {
    
}


export interface FreeTextDetailsType16 {
    
    $attributes: FreeTextDetailsType16Attributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
    
    status: Array<string>
    
    
    companyId: Array<string>
    
    
    language: Array<string>
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType16Attributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI18 {
    
    $attributes: ReservationControlInformationTypeI18Attributes
    
    // Reservation control information
    reservationInformation: ReservationControlInformationDetailsTypeI19
    
}

export interface ReservationControlInformationTypeI18Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI19 {
    
    $attributes: ReservationControlInformationDetailsTypeI19Attributes
    
    // Record locator.
    controlNumber: string
    
}

export interface ReservationControlInformationDetailsTypeI19Attributes {
    
}


export interface fareListType1 {
    
    $attributes: fareListType1Attributes
    
    // Pricing information such as pricing rule and sales indicator.
    pricingInformation: PricingTicketingSubsequentTypeI3
    
    // Fare reference number. Ordering information is not relevant here.
    fareReference: ItemReferencesAndVersionsType_94584S1
    
    // Fare indicators
    fareIndicators: Array<FareInformationType6>
    
    // Last date to ticket the fare.
    lastTktDate: Array<StructuredDateTimeInformationType14>
    
    // Validating carrier identification.
    validatingCarrier: Array<TransportIdentifierType_39309S>
    
    // Passenger/segment association of the fare is specified here.
    paxSegReference: ReferenceInformationTypeI10
    
    
    fareDataInformation: Array<MonetaryInformationType_198895S>
    
    // Tax fare data detailed information
    taxInformation: Array<taxInformationType1>
    
    // Banker&#39;s rates are used to convert amounts of the TST (converts base fare to equivalent fare) 1st C661 : 1st bankers&#39; rate which is a percentage (no currency) 2nd C661 : 2nd bankers&#39; rate which is currency+amount.
    bankerRates: Array<ConversionRateTypeI6>
    
    // Passenger information related to the fare
    passengerInformation: Array<passengerInformationType1>
    
    // Origin and destination of the fare. 1st C3225 occurence : origin city. 2nd C3225 occurence : destination city
    originDestination: Array<OriginAndDestinationDetailsTypeI7>
    
    // Segments detail information related to the fare
    segmentInformation: Array<segmentInformationType3>
    
    // Other pricing information such as endorsement, tour name...
    otherPricingInfo: Array<CodedAttributeType14>
    
    // Warning information concerning the fare.
    warningInformation: Array<warningInformationType1>
    
    // Automatic Reissue Information
    automaticReissueInfo: Array<automaticReissueInfoType1>
    
    // Corporate number
    corporateInfo: Array<CorporateFareInformationType4>
    
    // A series of data elements representing data required to collect non-airport/government fees, store the fee data, and track the revenue separate from the ticket revenue without requiring a secondary document be issued.
    feeBreakdown: Array<feeBreakdownType1>
    
    // convey the mileage information
    mileage: Array<AdditionalProductDetailsTypeI11>
    
    // Details at fare component or at bound level.
    fareComponentDetailsGroup: Array<FareComponentDetailsType5>
    
    
    endFareList: DummySegmentTypeI13
    
}

export interface fareListType1Attributes {
    
}

// To specify pricing indicator information.
export interface PricingTicketingSubsequentTypeI3 {
    
    $attributes: PricingTicketingSubsequentTypeI3Attributes
    
    // Information on TST type.
    tstInformation: RateTariffClassInformationTypeI4
    
    // International sales indicator
    salesIndicator: Array<string>
    
    // Fare calculation mode indicator. This indicator specifies the type fare.
    fcmi: string
    
    // Information of original fare used to create TST. The TST is created from Best Fare ( possible or available).
    bestFareType: Array<string>
    
}

export interface PricingTicketingSubsequentTypeI3Attributes {
    
}

// To identify the current and/or original fare basis code.
export interface RateTariffClassInformationTypeI4 {
    
    $attributes: RateTariffClassInformationTypeI4Attributes
    
    // Indicator qualifying the type of TST (basically manual or automatic)
    tstIndicator: string
    
}

export interface RateTariffClassInformationTypeI4Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType_94584S1 {
    
    $attributes: ItemReferencesAndVersionsType_94584S1Attributes
    
    // qualifies the type of the reference used. Code set to define
    referenceType: Array<string>
    
    // Tattoo number
    uniqueReference: Array<number>
    
}

export interface ItemReferencesAndVersionsType_94584S1Attributes {
    
}


export interface FareInformationType6 {
    
    $attributes: FareInformationType6Attributes
    
    
    fareDetails: Array<FareDetailsType7>
    
}

export interface FareInformationType6Attributes {
    
}


export interface FareDetailsType7 {
    
    $attributes: FareDetailsType7Attributes
    
    // fare indicators
    fareCategory: Array<string>
    
}

export interface FareDetailsType7Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType14 {
    
    $attributes: StructuredDateTimeInformationType14Attributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - Impacted period - Departure date - Estimated arrival date and time
    businessSemantic: Array<string>
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType_281151C>
    
}

export interface StructuredDateTimeInformationType14Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_281151C {
    
    $attributes: StructuredDateTimeType_281151CAttributes
    
    // Year number. The format is a little long for short term usage but it can be reduced by implementation if required.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<number>
    
}

export interface StructuredDateTimeType_281151CAttributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType_39309S {
    
    $attributes: TransportIdentifierType_39309SAttributes
    
    // Information related to validating carrier.
    carrierInformation: Array<CompanyIdentificationTypeI_66149C>
    
}

export interface TransportIdentifierType_39309SAttributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI_66149C {
    
    $attributes: CompanyIdentificationTypeI_66149CAttributes
    
    // Carrier code
    carrierCode: Array<string>
    
}

export interface CompanyIdentificationTypeI_66149CAttributes {
    
}

// To provide specific reference identification.
export interface ReferenceInformationTypeI10 {
    
    $attributes: ReferenceInformationTypeI10Attributes
    
    // Passenger/segment/TST/fare reference details
    refDetails: Array<ReferencingDetailsTypeI14>
    
}

export interface ReferenceInformationTypeI10Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI14 {
    
    $attributes: ReferencingDetailsTypeI14Attributes
    
    // Qualifyer of the reference (Pax/Seg/Tst/Fare tattoo)
    refQualifier: Array<string>
    
    // Passenger/segment/TST/fare tattoo reference number
    refNumber: Array<number>
    
}

export interface ReferencingDetailsTypeI14Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_198895S {
    
    $attributes: MonetaryInformationType_198895SAttributes
    
    
    fareDataMainInformation: MonetaryInformationDetailsType_262582C
    
    
    fareDataSupInformation: Array<MonetaryInformationDetailsType_262582C>
    
}

export interface MonetaryInformationType_198895SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_262582C {
    
    $attributes: MonetaryInformationDetailsType_262582CAttributes
    
    
    fareDataQualifier: string
    
    // Amount
    fareAmount: Array<string>
    
    // Currency
    fareCurrency: Array<string>
    
    // location
    fareLocation: Array<string>
    
}

export interface MonetaryInformationDetailsType_262582CAttributes {
    
}


export interface taxInformationType1 {
    
    $attributes: taxInformationType1Attributes
    
    // Tax details
    taxDetails: DutyTaxFeeDetailsTypeU1
    
    // Amount details. If the tax is a passenger facility charge (PFC) the detail of the airports related taxes is given here.
    amountDetails: Array<MonetaryInformationTypeI_39310S>
    
}

export interface taxInformationType1Attributes {
    
}

// To transmit tax data as it should appear in the tax boxes of the ticket.
export interface DutyTaxFeeDetailsTypeU1 {
    
    $attributes: DutyTaxFeeDetailsTypeU1Attributes
    
    // Tax data qualifier
    taxQualifier: string
    
    // Tax type identification
    taxIdentification: DutyTaxFeeTypeDetailsTypeU1
    
    // Type of the tax
    taxType: Array<DutyTaxFeeAccountDetailTypeU1>
    
    // Nature of the tax
    taxNature: Array<string>
    
    // Exempt tax indicator. If an tax is Exempted no amount is provided for this tax.
    taxExempt: Array<string>
    
}

export interface DutyTaxFeeDetailsTypeU1Attributes {
    
}


export interface DutyTaxFeeTypeDetailsTypeU1 {
    
    $attributes: DutyTaxFeeTypeDetailsTypeU1Attributes
    
    // Tax type identifier
    taxIdentifier: string
    
}

export interface DutyTaxFeeTypeDetailsTypeU1Attributes {
    
}


export interface DutyTaxFeeAccountDetailTypeU1 {
    
    $attributes: DutyTaxFeeAccountDetailTypeU1Attributes
    
    // Iso country of the tax
    isoCountry: string
    
}

export interface DutyTaxFeeAccountDetailTypeU1Attributes {
    
}

// To convey monetary amount information.
export interface MonetaryInformationTypeI_39310S {
    
    $attributes: MonetaryInformationTypeI_39310SAttributes
    
    // Main fare data infomation, can b thee base or the total fare information which are mandatory anyway
    fareDataMainInformation: MonetaryInformationDetailsTypeI_66151C
    
    // Supplementary fare data information
    fareDataSupInformation: Array<MonetaryInformationDetailsTypeI_66151C>
    
}

export interface MonetaryInformationTypeI_39310SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI_66151C {
    
    $attributes: MonetaryInformationDetailsTypeI_66151CAttributes
    
    // Qualify the type of fare defined in this composite
    fareDataQualifier: string
    
    // Fare data amount
    fareAmount: Array<string>
    
    // Fare data currency code
    fareCurrency: Array<string>
    
    // Location of the fare data (PFCs specific)
    fareLocation: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI_66151CAttributes {
    
}

// To specify details of conversion rates.
export interface ConversionRateTypeI6 {
    
    $attributes: ConversionRateTypeI6Attributes
    
    // First rate detail.
    firstRateDetail: ConversionRateDetailsTypeI7
    
    // Second rate detail.
    secondRateDetail: Array<ConversionRateDetailsTypeI7>
    
}

export interface ConversionRateTypeI6Attributes {
    
}

// To specify the conversion rate and the monetary amount.
export interface ConversionRateDetailsTypeI7 {
    
    $attributes: ConversionRateDetailsTypeI7Attributes
    
    // Currency of the rate
    currencyCode: Array<string>
    
    // Amount/percentage
    amount: Array<number>
    
}

export interface ConversionRateDetailsTypeI7Attributes {
    
}


export interface passengerInformationType1 {
    
    $attributes: passengerInformationType1Attributes
    
    // Penalty/discount details specified in the request.
    penDisInformation: DiscountAndPenaltyInformationTypeI_94593S
    
    // Reference of passengers that have a type code.
    passengerReference: Array<ReferenceInformationTypeI10>
    
}

export interface passengerInformationType1Attributes {
    
}

// To specify information about discounts and penalties
export interface DiscountAndPenaltyInformationTypeI_94593S {
    
    $attributes: DiscountAndPenaltyInformationTypeI_94593SAttributes
    
    // Qualify the type of information. Penalties are not passenger associated and are pure monetary information. Discount are passenger associated but only discount code is specified.
    infoQualifier: Array<string>
    
    // Used to specify penalty information.
    penDisData: Array<DiscountPenaltyMonetaryInformationTypeI_142216C>
    
}

export interface DiscountAndPenaltyInformationTypeI_94593SAttributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationTypeI_142216C {
    
    $attributes: DiscountPenaltyMonetaryInformationTypeI_142216CAttributes
    
    // Type of penalty.
    penaltyType: Array<string>
    
    // The penalty amount can be described differently: amount/percentage.
    penaltyQualifier: Array<string>
    
    // Amount of the penalty.
    penaltyAmount: Array<number>
    
    // This discount code is defined by the airlines. This cannot be coded as airlines might apply any combination of letters for their discounts.
    discountCode: Array<string>
    
    // Penalty currency code.
    penaltyCurrency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationTypeI_142216CAttributes {
    
}

// To convey the origin and destination of a journey.
export interface OriginAndDestinationDetailsTypeI7 {
    
    $attributes: OriginAndDestinationDetailsTypeI7Attributes
    
    // Code of the city.
    cityCode: Array<string>
    
}

export interface OriginAndDestinationDetailsTypeI7Attributes {
    
}


export interface segmentInformationType3 {
    
    $attributes: segmentInformationType3Attributes
    
    // Connection information.
    connexInformation: ConnectionTypeI3
    
    // Details on open segments added to the price calculation. These open segments exist only in the fare calculated, they have no equivalent in the PNR itinerary. This segment gives also information on booking class for best buy transactions.
    segDetails: Array<TravelProductInformationTypeI_39317S>
    
    // Fare basis information
    fareQualifier: Array<FareQualifierDetailsTypeI5>
    
    
    cabinGroup: Array<cabinGroupType3>
    
    // Validity information for this fare
    validityInformation: Array<StructuredDateTimeInformationType_94578S>
    
    // Baggage allowance information
    bagAllowanceInformation: Array<ExcessBaggageTypeI4>
    
    // Reference of the segment associated to the group.
    segmentReference: Array<ReferenceInformationTypeI10>
    
    // The segment order in the pricing response can be different than the one of the PNR itinerary (segments are reordered at price calculation time). This order inform,ation is conveyed by the sequence number. If this order information is not present then the order is by default the one of the PNR.
    sequenceInformation: Array<ItemReferencesAndVersionsType15>
    
}

export interface segmentInformationType3Attributes {
    
}

// To specify connection designator.
export interface ConnectionTypeI3 {
    
    $attributes: ConnectionTypeI3Attributes
    
    // Connection details
    connecDetails: ConnectionDetailsTypeI3
    
}

export interface ConnectionTypeI3Attributes {
    
}

// To specify the location, product supplier and time for a connection with the next means of transport.
export interface ConnectionDetailsTypeI3 {
    
    $attributes: ConnectionDetailsTypeI3Attributes
    
    // Specify ARNK and surface segments not included in the fare routing.
    routingInformation: Array<string>
    
    // Type of connection for the flight
    connexType: Array<string>
    
}

export interface ConnectionDetailsTypeI3Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI_39317S {
    
    $attributes: TravelProductInformationTypeI_39317SAttributes
    
    // City of departure for this extra segment.
    departureCity: Array<LocationTypeI_66170C>
    
    // City of arrival for this extra segment.
    arrivalCity: Array<LocationTypeI_66170C>
    
    // Airline detail information of the extra segment.
    airlineDetail: Array<CompanyIdentificationTypeI_66149C>
    
    // Segment detail information.
    segmentDetail: Array<ProductIdentificationDetailsTypeI15>
    
    // Ticketing status for this segment. Relevant only in case of reply.
    ticketingStatus: Array<string>
    
}

export interface TravelProductInformationTypeI_39317SAttributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI_66170C {
    
    $attributes: LocationTypeI_66170CAttributes
    
    // Code of the city.
    cityCode: Array<string>
    
}

export interface LocationTypeI_66170CAttributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI15 {
    
    $attributes: ProductIdentificationDetailsTypeI15Attributes
    
    // OPEN or AIR are the two identifications accepted. OPEN means the segment described here is an open segment. AIR means that it is a valid AIR segment.
    identification: string
    
    // to describe the transportation class.
    bookingClass: Array<string>
    
    // Class of service to use in order to price the extra segment.
    classOfService: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI15Attributes {
    
}

// To specify the fare basis information
export interface FareQualifierDetailsTypeI5 {
    
    $attributes: FareQualifierDetailsTypeI5Attributes
    
    // Type of movement for this segment to take into account by Fare Quote to calculate the fare.
    movementType: Array<string>
    
    // Fare basis detail
    fareBasisDetails: Array<AdditionalFareQualifierDetailsTypeI6>
    
    // Discount data for zap off to apply to price calculation.
    zapOffDetails: Array<DiscountPenaltyInformationTypeI3>
    
}

export interface FareQualifierDetailsTypeI5Attributes {
    
}

// To specify the fare basis and ticket designator codes.
export interface AdditionalFareQualifierDetailsTypeI6 {
    
    $attributes: AdditionalFareQualifierDetailsTypeI6Attributes
    
    // Primary code of the fare basis. This is not a codeset but a free flow text field.
    primaryCode: Array<string>
    
    // Fare basis code of the fare basis. This is not a codeset but a free flow text field.
    fareBasisCode: Array<string>
    
    // Ticket designator of the fare basis
    ticketDesignator: Array<string>
    
    // For any query : discount ticket designator to be assigned by Fare Quote server. For any response : priced PTCs
    discTktDesignator: Array<string>
    
}

export interface AdditionalFareQualifierDetailsTypeI6Attributes {
    
}

// To indicate the discounts and penalties by fare type.
export interface DiscountPenaltyInformationTypeI3 {
    
    $attributes: DiscountPenaltyInformationTypeI3Attributes
    
    // Discount off type.
    zapOffType: string
    
    // Discount amount
    zapOffAmount: Array<number>
    
    // Discount percentage.
    zapOffPercentage: Array<number>
    
}

export interface DiscountPenaltyInformationTypeI3Attributes {
    
}


export interface cabinGroupType3 {
    
    $attributes: cabinGroupType3Attributes
    
    // This segment gives the cabin information
    cabinSegment: ProductInformationTypeI7
    
}

export interface cabinGroupType3Attributes {
    
}

// To specify details related to availability status or cabin configuration for a product.
export interface ProductInformationTypeI7 {
    
    $attributes: ProductInformationTypeI7Attributes
    
    
    productDetailsQualifier: Array<string>
    
    
    bookingClassDetails: Array<ProductDetailsTypeI7>
    
}

export interface ProductInformationTypeI7Attributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsTypeI7 {
    
    $attributes: ProductDetailsTypeI7Attributes
    
    
    designator: string
    
    
    availabilityStatus: Array<string>
    
    
    specialService: Array<string>
    
    
    option: Array<string>
    
}

export interface ProductDetailsTypeI7Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_94578S {
    
    $attributes: StructuredDateTimeInformationType_94578SAttributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - Impacted period - Departure date - Estimated arrival date and time
    businessSemantic: Array<string>
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType17>
    
}

export interface StructuredDateTimeInformationType_94578SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType17 {
    
    $attributes: StructuredDateTimeType17Attributes
    
    // Year number. The format is a little long for short term usage but it can be reduced by implementation if required.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: Array<number>
    
    // Day number in the month ( begins to 1 )
    day: Array<number>
    
}

export interface StructuredDateTimeType17Attributes {
    
}

// To specify information concerning baggage allowance details.
export interface ExcessBaggageTypeI4 {
    
    $attributes: ExcessBaggageTypeI4Attributes
    
    // Baggage allowance information details
    bagAllowanceDetails: Array<BaggageDetailsTypeI4>
    
}

export interface ExcessBaggageTypeI4Attributes {
    
}

// To specify the number and weight of baggage.
export interface BaggageDetailsTypeI4 {
    
    $attributes: BaggageDetailsTypeI4Attributes
    
    // Baggage allowance quantity (piece concept)
    baggageQuantity: Array<number>
    
    // Baggage allowance weight
    baggageWeight: Array<number>
    
    // Baggage allowance type (weight/number)
    baggageType: Array<string>
    
    // Measurement unit for weighing baggage allowance
    measureUnit: Array<string>
    
}

export interface BaggageDetailsTypeI4Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType15 {
    
    $attributes: ItemReferencesAndVersionsType15Attributes
    
    // Identification details : order number
    sequenceSection: Array<UniqueIdDescriptionType7>
    
}

export interface ItemReferencesAndVersionsType15Attributes {
    
}


export interface UniqueIdDescriptionType7 {
    
    $attributes: UniqueIdDescriptionType7Attributes
    
    // Number specifying the ordering information of the item described within a group.
    sequenceNumber: Array<number>
    
}

export interface UniqueIdDescriptionType7Attributes {
    
}

// Used to specify pricing options by key/value.
export interface CodedAttributeType14 {
    
    $attributes: CodedAttributeType14Attributes
    
    // provides details for the Attribute
    attributeDetails: Array<CodedAttributeInformationType15>
    
    
    DummyNET: string
    
}

export interface CodedAttributeType14Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType15 {
    
    $attributes: CodedAttributeInformationType15Attributes
    
    // provides the attribute Type
    attributeType: string
    
    // provides a description for the attribute
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType15Attributes {
    
}


export interface warningInformationType1 {
    
    $attributes: warningInformationType1Attributes
    
    // Fare warning information code.
    warningCode: ApplicationErrorInformationType16
    
    // Description in free flow text of the warning concerning the fare.
    warningText: Array<InteractiveFreeTextTypeI_39299S>
    
}

export interface warningInformationType1Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType16 {
    
    $attributes: ApplicationErrorInformationType16Attributes
    
    // Application error details.
    applicationErrorDetail: ApplicationErrorDetailType_66171C
    
}

export interface ApplicationErrorInformationType16Attributes {
    
}


export interface ApplicationErrorDetailType_66171C {
    
    $attributes: ApplicationErrorDetailType_66171CAttributes
    
    // Code identifying the data validation error condition.
    applicationErrorCode: string
    
    // Identification of a code list.
    codeListQualifier: Array<string>
    
    // Code identifying the agency responsible for a code list.
    codeListResponsibleAgency: Array<string>
    
}

export interface ApplicationErrorDetailType_66171CAttributes {
    
}

// To provide error free text information.
export interface InteractiveFreeTextTypeI_39299S {
    
    $attributes: InteractiveFreeTextTypeI_39299SAttributes
    
    // Free flow text describing the error
    errorFreeText: Array<string>
    
}

export interface InteractiveFreeTextTypeI_39299SAttributes {
    
}


export interface automaticReissueInfoType1 {
    
    $attributes: automaticReissueInfoType1Attributes
    
    // This segment contains the original ticket number.
    ticketInfo: TicketNumberTypeI7
    
    // This segment contains the coupon number (in absolute) corresponding to the first coupon for use from the last flawn segment.
    couponInfo: CouponInformationTypeI4
    
    // provide the range for paper reissuance
    paperCouponRange: Array<paperCouponRangeType1>
    
    // Base Fare Information
    baseFareInfo: MonetaryInformationTypeI11
    
    // Discount and penalty group.
    firstDpiGroup: firstDpiGroupType1
    
    // Discount and penalty group.
    secondDpiGroup: secondDpiGroupType1
    
    // this segment conveys specific reissue attributes like Revalidation flag.
    reissueAttributes: Array<CodedAttributeType_39319S>
    
}

export interface automaticReissueInfoType1Attributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberTypeI7 {
    
    $attributes: TicketNumberTypeI7Attributes
    
    // Details on the document
    documentDetails: TicketNumberDetailsTypeI7
    
}

export interface TicketNumberTypeI7Attributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsTypeI7 {
    
    $attributes: TicketNumberDetailsTypeI7Attributes
    
    // Ticket number
    number: string
    
    // ticket type
    type: Array<string>
    
}

export interface TicketNumberDetailsTypeI7Attributes {
    
}

// To identify data specific to a value (flight) coupon.
export interface CouponInformationTypeI4 {
    
    $attributes: CouponInformationTypeI4Attributes
    
    // Details on coupon
    couponDetails: CouponInformationDetailsTypeI4
    
    // Details on coupon
    otherCouponDetails: Array<CouponInformationDetailsTypeI4>
    
}

export interface CouponInformationTypeI4Attributes {
    
}

// To specify the coupon number, status, value, and other related information.
export interface CouponInformationDetailsTypeI4 {
    
    $attributes: CouponInformationDetailsTypeI4Attributes
    
    // Coupon number
    cpnNumber: string
    
}

export interface CouponInformationDetailsTypeI4Attributes {
    
}


export interface paperCouponRangeType1 {
    
    $attributes: paperCouponRangeType1Attributes
    
    // This segment contains the original ticket number.
    ticketInfo: TicketNumberTypeI7
    
    // This segment contains the coupon number (in absolute) corresponding to the first coupon for use from the last flawn segment.
    couponInfo: CouponInformationTypeI4
    
}

export interface paperCouponRangeType1Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI11 {
    
    $attributes: MonetaryInformationTypeI11Attributes
    
    // monetaryDetails
    monetaryDetails: MonetaryInformationDetailsTypeI13
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsTypeI13>
    
}

export interface MonetaryInformationTypeI11Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI13 {
    
    $attributes: MonetaryInformationDetailsTypeI13Attributes
    
    // Type qualifier
    typeQualifier: string
    
    // amount
    amount: string
    
    // currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI13Attributes {
    
}


export interface firstDpiGroupType1 {
    
    $attributes: firstDpiGroupType1Attributes
    
    // Penalty amount in reissue currency
    reIssuePenalty: DiscountAndPenaltyInformationTypeI3
    
    // Reissue Information
    reissueInfo: MonetaryInformationTypeI11
    
    // old tax Information
    oldTaxInfo: MonetaryInformationTypeI11
    
    // Balance reissue Information
    reissueBalanceInfo: MonetaryInformationTypeI11
    
}

export interface firstDpiGroupType1Attributes {
    
}

// To specify information about discounts and penalties
export interface DiscountAndPenaltyInformationTypeI3 {
    
    $attributes: DiscountAndPenaltyInformationTypeI3Attributes
    
    // Used to specify penalty information
    penDisData: Array<DiscountPenaltyMonetaryInformationTypeI3>
    
}

export interface DiscountAndPenaltyInformationTypeI3Attributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationTypeI3 {
    
    $attributes: DiscountPenaltyMonetaryInformationTypeI3Attributes
    
    // The amount Type can be a percentage or an amount
    penaltyQualifier: Array<string>
    
    // specify the value
    penaltyAmount: Array<number>
    
    // penalty currency code
    penaltyCurrency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationTypeI3Attributes {
    
}


export interface secondDpiGroupType1 {
    
    $attributes: secondDpiGroupType1Attributes
    
    // Discount and penalty info.
    penalty: DiscountAndPenaltyInformationTypeI3
    
    // Residual Value Information
    residualValueInfo: MonetaryInformationTypeI11
    
    // old tax Information
    oldTaxInfo: MonetaryInformationTypeI11
    
    // Balance Issue Information
    issueBalanceInfo: MonetaryInformationTypeI11
    
}

export interface secondDpiGroupType1Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType_39319S {
    
    $attributes: CodedAttributeType_39319SAttributes
    
    // provides details for the Attribute
    attributeDetails: Array<CodedAttributeInformationType_66172C>
    
}

export interface CodedAttributeType_39319SAttributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType_66172C {
    
    $attributes: CodedAttributeInformationType_66172CAttributes
    
    // provides the attribute Type
    attributeType: string
    
    // provides a description for the attribute
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType_66172CAttributes {
    
}

// To specify corporate fare information
export interface CorporateFareInformationType4 {
    
    $attributes: CorporateFareInformationType4Attributes
    
    
    corporateFareIdentifiers: Array<CorporateFareIdentifiersTypeI1>
    
}

export interface CorporateFareInformationType4Attributes {
    
}


export interface CorporateFareIdentifiersTypeI1 {
    
    $attributes: CorporateFareIdentifiersTypeI1Attributes
    
    
    fareQualifier: Array<string>
    
    
    corporateID: Array<string>
    
}

export interface CorporateFareIdentifiersTypeI1Attributes {
    
}


export interface feeBreakdownType1 {
    
    $attributes: feeBreakdownType1Attributes
    
    // Nature of the fee (OB, OC)
    feeType: SelectionDetailsTypeI8
    
    // Details for each fee
    feeDetails: Array<feeDetailsType7>
    
}

export interface feeBreakdownType1Attributes {
    
}

// To specify the Carrier Fee type
export interface SelectionDetailsTypeI8 {
    
    $attributes: SelectionDetailsTypeI8Attributes
    
    
    selectionDetails: SelectionDetailsInformationTypeI11
    
}

export interface SelectionDetailsTypeI8Attributes {
    
}

// To specify a selected option and associated information.
export interface SelectionDetailsInformationTypeI11 {
    
    $attributes: SelectionDetailsInformationTypeI11Attributes
    
    
    option: string
    
}

export interface SelectionDetailsInformationTypeI11Attributes {
    
}


export interface feeDetailsType7 {
    
    $attributes: feeDetailsType7Attributes
    
    // Fee information
    feeInfo: SpecificDataInformationTypeI4
    
    // Attributes of this fee (commercial description)
    feeDescription: Array<InteractiveFreeTextTypeI11>
    
    // Fee associated amounts: amount with/without tax, total tax amount
    feeAmounts: Array<MonetaryInformationTypeI_39230S1>
    
    // taxes related to this fee
    feeTaxes: Array<TaxTypeI5>
    
}

export interface feeDetailsType7Attributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationTypeI4 {
    
    $attributes: SpecificDataInformationTypeI4Attributes
    
    // Carrier fee code
    dataTypeInformation: DataTypeInformationTypeI4
    
    // Carrier fee application code (NI, NR, CM, NC)
    dataInformation: Array<DataInformationTypeI4>
    
}

export interface SpecificDataInformationTypeI4Attributes {
    
}

// To identify the type of data to be sent and to qualify the data when required.
export interface DataTypeInformationTypeI4 {
    
    $attributes: DataTypeInformationTypeI4Attributes
    
    // fee subcode
    type: string
    
}

export interface DataTypeInformationTypeI4Attributes {
    
}

// To identify specific data and a quantity related to the data.
export interface DataInformationTypeI4 {
    
    $attributes: DataInformationTypeI4Attributes
    
    // fee attribute
    indicator: Array<string>
    
}

export interface DataInformationTypeI4Attributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextTypeI11 {
    
    $attributes: InteractiveFreeTextTypeI11Attributes
    
    
    freeTextQualification: Array<FreeTextQualificationTypeI11>
    
    
    freeText: string
    
}

export interface InteractiveFreeTextTypeI11Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationTypeI11 {
    
    $attributes: FreeTextQualificationTypeI11Attributes
    
    
    textSubjectQualifier: string
    
}

export interface FreeTextQualificationTypeI11Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI_39230S1 {
    
    $attributes: MonetaryInformationTypeI_39230S1Attributes
    
    // Monetary info
    monetaryDetails: Array<MonetaryInformationDetailsTypeI_63727C1>
    
}

export interface MonetaryInformationTypeI_39230S1Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI_63727C1 {
    
    $attributes: MonetaryInformationDetailsTypeI_63727C1Attributes
    
    // Qualifier
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
    // Location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI_63727C1Attributes {
    
}

// To specify details relating to tax(es).
export interface TaxTypeI5 {
    
    $attributes: TaxTypeI5Attributes
    
    // Tax details
    taxDetails: Array<TaxDetailsTypeI7>
    
    
    DummyNET: string
    
}

export interface TaxTypeI5Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsTypeI7 {
    
    $attributes: TaxDetailsTypeI7Attributes
    
    // Tax Amount
    rate: Array<string>
    
    // ISO code identifying Country
    countryCode: Array<string>
    
    // ISO code identifying currency
    currencyCode: Array<string>
    
    // Tax designator code
    type: Array<string>
    
    // tax designator code.
    secondType: Array<string>
    
}

export interface TaxDetailsTypeI7Attributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsTypeI11 {
    
    $attributes: AdditionalProductDetailsTypeI11Attributes
    
    
    mileageTimeDetails: Array<MileageTimeDetailsTypeI5>
    
}

export interface AdditionalProductDetailsTypeI11Attributes {
    
}

// Information about the distance/duration of a trip.
export interface MileageTimeDetailsTypeI5 {
    
    $attributes: MileageTimeDetailsTypeI5Attributes
    
    // mileage total associated to the TST
    totalMileage: number
    
}

export interface MileageTimeDetailsTypeI5Attributes {
    
}


export interface FareComponentDetailsType5 {
    
    $attributes: FareComponentDetailsType5Attributes
    
    
    fareComponentID: ItemNumberType11
    
    // Market information related to the fare component or to the bound.
    marketFareComponent: Array<TravelProductInformationTypeI13>
    
    // Monetary Information.
    monetaryInformation: Array<MonetaryInformationType_198897S>
    
    // Component Class information
    componentClassInfo: Array<PricingOrTicketingSubsequentType5>
    
    // Fare Qualifier Detail
    fareQualifiersDetail: Array<FareQualifierDetailsType11>
    
    // Details of the fare family used for this fare component
    fareFamilyDetails: Array<FareFamilyType8>
    
    // Carrier owner of the fare family
    fareFamilyOwner: Array<TransportIdentifierType14>
    
    // Used to specify coupons included in the fare component or in the bound.
    couponDetailsGroup: Array<CouponDetailsType4>
    
}

export interface FareComponentDetailsType5Attributes {
    
}

// To specify an item number
export interface ItemNumberType11 {
    
    $attributes: ItemNumberType11Attributes
    
    // Item identification: number of the fare component or of the bound.
    itemNumberDetails: Array<ItemNumberIdentificationType11>
    
}

export interface ItemNumberType11Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType11 {
    
    $attributes: ItemNumberIdentificationType11Attributes
    
    // Item identification: number of the fare component or of the bound.
    number: Array<string>
    
    // Item type: fare component (FC) or bound (BND).
    type: Array<string>
    
}

export interface ItemNumberIdentificationType11Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI13 {
    
    $attributes: TravelProductInformationTypeI13Attributes
    
    
    boardPointDetails: Array<LocationTypeI17>
    
    
    offpointDetails: Array<LocationTypeI17>
    
}

export interface TravelProductInformationTypeI13Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI17 {
    
    $attributes: LocationTypeI17Attributes
    
    
    trueLocationId: Array<string>
    
}

export interface LocationTypeI17Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_198897S {
    
    $attributes: MonetaryInformationType_198897SAttributes
    
    // Monetary information per fare component
    monetaryDetails: MonetaryInformationDetailsType_223822C1
    
    // Other monetary information per fare component
    otherMonetaryDetails: Array<MonetaryInformationDetailsType_223822C1>
    
}

export interface MonetaryInformationType_198897SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_223822C1 {
    
    $attributes: MonetaryInformationDetailsType_223822C1Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsType_223822C1Attributes {
    
}

// To convey additional information related to a ticket
export interface PricingOrTicketingSubsequentType5 {
    
    $attributes: PricingOrTicketingSubsequentType5Attributes
    
    // RATE OR TARIFF CLASS INFORMATION
    fareBasisDetails: Array<RateTariffClassInformationType4>
    
}

export interface PricingOrTicketingSubsequentType5Attributes {
    
}

// To identify the current and/or original fare basis code.
export interface RateTariffClassInformationType4 {
    
    $attributes: RateTariffClassInformationType4Attributes
    
    // Fare Basis Code
    rateTariffClass: Array<string>
    
    // Ticket Designator
    otherRateTariffClass: Array<string>
    
}

export interface RateTariffClassInformationType4Attributes {
    
}


export interface FareQualifierDetailsType11 {
    
    $attributes: FareQualifierDetailsType11Attributes
    
    
    discountDetails: Array<DiscountPenaltyInformationType10>
    
}

export interface FareQualifierDetailsType11Attributes {
    
}


export interface DiscountPenaltyInformationType10 {
    
    $attributes: DiscountPenaltyInformationType10Attributes
    
    
    fareQualifier: Array<string>
    
}

export interface DiscountPenaltyInformationType10Attributes {
    
}

// NEW FARE SEACH
export interface FareFamilyType8 {
    
    $attributes: FareFamilyType8Attributes
    
    // Fare Family Short Name
    fareFamilyname: Array<string>
    
    // HIERARCHICAL ORDER WITHIN FARE FAMILY
    hierarchy: Array<number>
    
    // Indicates Commercial Fare Family Short names
    commercialFamilyDetails: Array<FareFamilyDetailsType8>
    
}

export interface FareFamilyType8Attributes {
    
}

// NEW FARE SEARCH
export interface FareFamilyDetailsType8 {
    
    $attributes: FareFamilyDetailsType8Attributes
    
    // Commercial fare Family Short name
    commercialFamily: string
    
}

export interface FareFamilyDetailsType8Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType14 {
    
    $attributes: TransportIdentifierType14Attributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI26>
    
}

export interface TransportIdentifierType14Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI26 {
    
    $attributes: CompanyIdentificationTypeI26Attributes
    
    // Carrier owner fo the fare family
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI26Attributes {
    
}


export interface CouponDetailsType4 {
    
    $attributes: CouponDetailsType4Attributes
    
    // Tattoo + type of the product identifying the coupon.
    productId: ReferenceInfoType24
    
    // Flight Connection Type
    flightConnectionType: Array<TravelProductInformationType10>
    
    
    couponTaxDetailsGroup: Array<couponTaxDetailsGroupType3>
    
}

export interface CouponDetailsType4Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType24 {
    
    $attributes: ReferenceInfoType24Attributes
    
    
    referenceDetails: ReferencingDetailsType25
    
}

export interface ReferenceInfoType24Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType25 {
    
    $attributes: ReferencingDetailsType25Attributes
    
    
    type: string
    
    
    value: string
    
}

export interface ReferencingDetailsType25Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationType10 {
    
    $attributes: TravelProductInformationType10Attributes
    
    
    boardPointDetails: Array<LocationTypeI17>
    
    
    offpointDetails: Array<LocationTypeI17>
    
    // TST Connection Type
    flightTypeDetails: Array<ProductTypeDetailsType14>
    
}

export interface TravelProductInformationType10Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType14 {
    
    $attributes: ProductTypeDetailsType14Attributes
    
    // TST Connection Type
    flightIndicator: string
    
}

export interface ProductTypeDetailsType14Attributes {
    
}


export interface couponTaxDetailsGroupType3 {
    
    $attributes: couponTaxDetailsGroupType3Attributes
    
    // Trigger for tax functionality
    taxTriggerInfo: DutyTaxFeeDetailsType7
    
    
    taxDetails: Array<TaxType11>
    
    
    monetaryInfo: Array<MonetaryInformationType18>
    
    // Location info
    locationInfo: Array<PlaceLocationIdentificationType10>
    
}

export interface couponTaxDetailsGroupType3Attributes {
    
}

// To specify relevant duty/tax/fee information.
export interface DutyTaxFeeDetailsType7 {
    
    $attributes: DutyTaxFeeDetailsType7Attributes
    
    // Tax qualifier
    taxQualifier: string
    
}

export interface DutyTaxFeeDetailsType7Attributes {
    
}

// To specify details relating to tax(es).
export interface TaxType11 {
    
    $attributes: TaxType11Attributes
    
    
    taxCategory: Array<string>
    
    
    taxDetails: Array<TaxDetailsType9>
    
}

export interface TaxType11Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsType9 {
    
    $attributes: TaxDetailsType9Attributes
    
    
    countryCode: Array<string>
    
    
    type: Array<string>
    
}

export interface TaxDetailsType9Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType18 {
    
    $attributes: MonetaryInformationType18Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsType16
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType16>
    
}

export interface MonetaryInformationType18Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType16 {
    
    $attributes: MonetaryInformationDetailsType16Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType16Attributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType10 {
    
    $attributes: PlaceLocationIdentificationType10Attributes
    
    
    locationType: string
    
    
    locationDescription: Array<LocationIdentificationBatchType4>
    
}

export interface PlaceLocationIdentificationType10Attributes {
    
}

// Identification of a location by code or name
export interface LocationIdentificationBatchType4 {
    
    $attributes: LocationIdentificationBatchType4Attributes
    
    
    code: Array<string>
    
}

export interface LocationIdentificationBatchType4Attributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI13 {
    
    $attributes: DummySegmentTypeI13Attributes
    
}

export interface DummySegmentTypeI13Attributes {
    
}


export interface Fare_PricePNRWithLowestFareType {
    
    $attributes: Fare_PricePNRWithLowestFareTypeAttributes
    
    
    pricingOptionGroup: Array<pricingOptionGroupType4>
    
}

export interface Fare_PricePNRWithLowestFareTypeAttributes {
    
}


export interface pricingOptionGroupType4 {
    
    $attributes: pricingOptionGroupType4Attributes
    
    
    pricingOptionKey: PricingOptionKey5
    
    
    optionDetail: Array<AttributeType17>
    
    
    carrierInformation: Array<TransportIdentifierType15>
    
    
    currency: Array<CurrenciesType8>
    
    
    penDisInformation: Array<DiscountAndPenaltyInformationType7>
    
    
    monetaryInformation: Array<MonetaryInformationType19>
    
    
    taxInformation: Array<DutyTaxFeeDetailsType8>
    
    
    dateInformation: Array<StructuredDateTimeInformationType15>
    
    
    frequentFlyerInformation: Array<FrequentTravellerIdentificationCodeType15>
    
    
    formOfPaymentInformation: Array<FormOfPaymentType9>
    
    
    locationInformation: Array<PlaceLocationIdentificationType11>
    
    
    paxSegTstReference: Array<ReferenceInfoType25>
    
}

export interface pricingOptionGroupType4Attributes {
    
}


export interface PricingOptionKey5 {
    
    $attributes: PricingOptionKey5Attributes
    
    
    pricingOptionKey: string
    
}

export interface PricingOptionKey5Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType17 {
    
    $attributes: AttributeType17Attributes
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU13>
    
}

export interface AttributeType17Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU13 {
    
    $attributes: AttributeInformationTypeU13Attributes
    
    // Used for attribute value rather than attributeType
    attributeType: string
    
    
    attributeDescription: Array<string>
    
}

export interface AttributeInformationTypeU13Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType15 {
    
    $attributes: TransportIdentifierType15Attributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI27>
    
}

export interface TransportIdentifierType15Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI27 {
    
    $attributes: CompanyIdentificationTypeI27Attributes
    
    
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI27Attributes {
    
}

// To specify currencies used in the transaction and relevant details for the rate of exchange.
export interface CurrenciesType8 {
    
    $attributes: CurrenciesType8Attributes
    
    
    firstCurrencyDetails: Array<CurrencyDetailsTypeU8>
    
}

export interface CurrenciesType8Attributes {
    
}

// The usage to which a currency relates
export interface CurrencyDetailsTypeU8 {
    
    $attributes: CurrencyDetailsTypeU8Attributes
    
    
    currencyQualifier: string
    
    
    currencyIsoCode: Array<string>
    
}

export interface CurrencyDetailsTypeU8Attributes {
    
}


export interface DiscountAndPenaltyInformationType7 {
    
    $attributes: DiscountAndPenaltyInformationType7Attributes
    
    
    discountPenaltyQualifier: Array<string>
    
    
    discountPenaltyDetails: Array<DiscountPenaltyMonetaryInformationType7>
    
}

export interface DiscountAndPenaltyInformationType7Attributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationType7 {
    
    $attributes: DiscountPenaltyMonetaryInformationType7Attributes
    
    
    function: Array<string>
    
    
    amountType: Array<string>
    
    
    amount: Array<string>
    
    
    rate: Array<string>
    
    
    currency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationType7Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType19 {
    
    $attributes: MonetaryInformationType19Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsType17
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType17>
    
}

export interface MonetaryInformationType19Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType17 {
    
    $attributes: MonetaryInformationDetailsType17Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType17Attributes {
    
}

// To specify relevant duty/tax/fee information.
export interface DutyTaxFeeDetailsType8 {
    
    $attributes: DutyTaxFeeDetailsType8Attributes
    
    
    taxQualifier: string
    
    
    taxType: Array<DutyTaxFeeAccountDetailType4>
    
    
    taxNature: Array<string>
    
    
    taxData: Array<DutyTaxFeeDetailType4>
    
}

export interface DutyTaxFeeDetailsType8Attributes {
    
}


export interface DutyTaxFeeAccountDetailType4 {
    
    $attributes: DutyTaxFeeAccountDetailType4Attributes
    
    
    isoCountry: string
    
}

export interface DutyTaxFeeAccountDetailType4Attributes {
    
}


export interface DutyTaxFeeDetailType4 {
    
    $attributes: DutyTaxFeeDetailType4Attributes
    
    
    taxRate: Array<string>
    
    
    taxValueQualifier: Array<string>
    
}

export interface DutyTaxFeeDetailType4Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType15 {
    
    $attributes: StructuredDateTimeInformationType15Attributes
    
    
    businessSemantic: string
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType18>
    
}

export interface StructuredDateTimeInformationType15Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType18 {
    
    $attributes: StructuredDateTimeType18Attributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
}

export interface StructuredDateTimeType18Attributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType15 {
    
    $attributes: FrequentTravellerIdentificationCodeType15Attributes
    
    // Frequent Traveller Info
    frequentTravellerDetails: Array<FrequentTravellerIdentificationType14>
    
}

export interface FrequentTravellerIdentificationCodeType15Attributes {
    
}


export interface FrequentTravellerIdentificationType14 {
    
    $attributes: FrequentTravellerIdentificationType14Attributes
    
    // Carrier where the FQTV is registered.
    carrier: Array<string>
    
    
    number: Array<string>
    
    // To specify a Tier linked to the FQTV
    tierLevel: Array<string>
    
    // For example : priority code
    priorityCode: Array<string>
    
}

export interface FrequentTravellerIdentificationType14Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentType9 {
    
    $attributes: FormOfPaymentType9Attributes
    
    // Details on the form of payment
    formOfPayment: FormOfPaymentDetailsType9
    
    
    otherFormOfPayment: Array<FormOfPaymentDetailsType9>
    
}

export interface FormOfPaymentType9Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsType9 {
    
    $attributes: FormOfPaymentDetailsType9Attributes
    
    
    type: string
    
    
    amount: Array<number>
    
    
    creditCardNumber: Array<string>
    
}

export interface FormOfPaymentDetailsType9Attributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType11 {
    
    $attributes: PlaceLocationIdentificationType11Attributes
    
    
    locationType: string
    
    
    firstLocationDetails: Array<RelatedLocationOneIdentificationType8>
    
    
    secondLocationDetails: Array<RelatedLocationTwoIdentificationType8>
    
}

export interface PlaceLocationIdentificationType11Attributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationType8 {
    
    $attributes: RelatedLocationOneIdentificationType8Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationOneIdentificationType8Attributes {
    
}

// Identification of second related location by code or name.
export interface RelatedLocationTwoIdentificationType8 {
    
    $attributes: RelatedLocationTwoIdentificationType8Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationTwoIdentificationType8Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType25 {
    
    $attributes: ReferenceInfoType25Attributes
    
    
    referenceDetails: Array<ReferencingDetailsType26>
    
}

export interface ReferenceInfoType25Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType26 {
    
    $attributes: ReferencingDetailsType26Attributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
}

export interface ReferencingDetailsType26Attributes {
    
}


export interface Fare_PricePNRWithLowestFareReplyType {
    
    $attributes: Fare_PricePNRWithLowestFareReplyTypeAttributes
    
    
    applicationError: Array<ErrorGroupType12>
    
    // PNR record locator information for this transaction. This PNR record locator is used for tracing purpose.
    pnrLocatorData: Array<ReservationControlInformationTypeI19>
    
    // List of fares returned by Fare Quote server for the current PNR
    fareList: Array<fareListType2>
    
}

export interface Fare_PricePNRWithLowestFareReplyTypeAttributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType12 {
    
    $attributes: ErrorGroupType12Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType_84497S2
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType17>
    
}

export interface ErrorGroupType12Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType_84497S2 {
    
    $attributes: ApplicationErrorInformationType_84497S2Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType15
    
}

export interface ApplicationErrorInformationType_84497S2Attributes {
    
}


export interface ApplicationErrorDetailType15 {
    
    $attributes: ApplicationErrorDetailType15Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType15Attributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType17 {
    
    $attributes: FreeTextInformationType17Attributes
    
    
    freeTextDetails: Array<FreeTextDetailsType17>
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType17Attributes {
    
}


export interface FreeTextDetailsType17 {
    
    $attributes: FreeTextDetailsType17Attributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
    
    status: Array<string>
    
    
    companyId: Array<string>
    
    
    language: Array<string>
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType17Attributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI19 {
    
    $attributes: ReservationControlInformationTypeI19Attributes
    
    // Reservation control information
    reservationInformation: ReservationControlInformationDetailsTypeI20
    
}

export interface ReservationControlInformationTypeI19Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI20 {
    
    $attributes: ReservationControlInformationDetailsTypeI20Attributes
    
    // Record locator.
    controlNumber: string
    
}

export interface ReservationControlInformationDetailsTypeI20Attributes {
    
}


export interface fareListType2 {
    
    $attributes: fareListType2Attributes
    
    // Pricing information such as pricing rule and sales indicator.
    pricingInformation: PricingTicketingSubsequentTypeI4
    
    // Fare reference number. Ordering information is not relevant here.
    fareReference: ItemReferencesAndVersionsType_94584S2
    
    // Fare Indicators
    fareIndicators: Array<FareInformationType7>
    
    // Last date to ticket the fare.
    lastTktDate: Array<StructuredDateTimeInformationType16>
    
    // Validating carrier identification.
    validatingCarrier: Array<TransportIdentifierType_39271S>
    
    // Passenger/segment association of the fare is specified here.
    paxSegReference: ReferenceInformationTypeI11
    
    
    fareDataInformation: Array<MonetaryInformationType_198906S>
    
    // Tax fare data detailed information
    taxInformation: Array<taxInformationType2>
    
    // Banker&#39;s rates are used to convert amounts of the TST (converts base fare to equivalent fare) 1st C661 : 1st bankers&#39; rate which is a percentage (no currency) 2nd C661 : 2nd bankers&#39; rate which is currency+amount.
    bankerRates: Array<ConversionRateTypeI7>
    
    // Passenger information related to the fare
    passengerInformation: Array<passengerInformationType2>
    
    // Origin and destination of the fare. 1st C3225 occurence : origin city. 2nd C3225 occurence : destination city
    originDestination: Array<OriginAndDestinationDetailsTypeI8>
    
    // Segments detail information related to the fare
    segmentInformation: Array<segmentInformationType4>
    
    // Other pricing information such as endorsement, tour name...
    otherPricingInfo: Array<CodedAttributeType15>
    
    // Warning information concerning the fare.
    warningInformation: Array<warningInformationType2>
    
    // automati Reissue Information
    automaticReissueInfo: Array<automaticReissueInfoType2>
    
    // Corporate number
    corporateInfo: Array<CorporateFareInformationType5>
    
    // A series of data elements representing data required to collect non-airport/government fees, store the fee data, and track the revenue separate from the ticket revenue without requiring a secondary document be issued.
    feeBreakdown: Array<feeBreakdownType2>
    
    // convey the mileage information
    mileage: Array<AdditionalProductDetailsTypeI12>
    
    // Details at fare component or at bound level.
    fareComponentDetailsGroup: Array<FareComponentDetailsType6>
    
    
    endFareList: DummySegmentTypeI14
    
}

export interface fareListType2Attributes {
    
}

// To specify pricing indicator information.
export interface PricingTicketingSubsequentTypeI4 {
    
    $attributes: PricingTicketingSubsequentTypeI4Attributes
    
    // Information on TST type.
    tstInformation: RateTariffClassInformationTypeI5
    
    // International sales indicator
    salesIndicator: Array<string>
    
    // Fare calculation mode indicator. This indicator specifies the type fare.
    fcmi: string
    
    // Information of original fare used to create TST. The TST is created from Best Fare ( possible or available).
    bestFareType: Array<string>
    
}

export interface PricingTicketingSubsequentTypeI4Attributes {
    
}

// To identify the current and/or original fare basis code.
export interface RateTariffClassInformationTypeI5 {
    
    $attributes: RateTariffClassInformationTypeI5Attributes
    
    // Indicator qualifying the type of TST (basically manual or automatic)
    tstIndicator: string
    
}

export interface RateTariffClassInformationTypeI5Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType_94584S2 {
    
    $attributes: ItemReferencesAndVersionsType_94584S2Attributes
    
    // qualifies the type of the reference used. Code set to define
    referenceType: Array<string>
    
    // Tattoo number
    uniqueReference: Array<number>
    
}

export interface ItemReferencesAndVersionsType_94584S2Attributes {
    
}


export interface FareInformationType7 {
    
    $attributes: FareInformationType7Attributes
    
    
    fareDetails: Array<FareDetailsType8>
    
}

export interface FareInformationType7Attributes {
    
}


export interface FareDetailsType8 {
    
    $attributes: FareDetailsType8Attributes
    
    // fare indicators
    fareCategory: Array<string>
    
}

export interface FareDetailsType8Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType16 {
    
    $attributes: StructuredDateTimeInformationType16Attributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - Impacted period - Departure date - Estimated arrival date and time
    businessSemantic: Array<string>
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType_281152C>
    
}

export interface StructuredDateTimeInformationType16Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_281152C {
    
    $attributes: StructuredDateTimeType_281152CAttributes
    
    // Year number. The format is a little long for short term usage but it can be reduced by implementation if required.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<number>
    
}

export interface StructuredDateTimeType_281152CAttributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType_39271S {
    
    $attributes: TransportIdentifierType_39271SAttributes
    
    // Information related to validating carrier.
    carrierInformation: Array<CompanyIdentificationTypeI_66088C>
    
}

export interface TransportIdentifierType_39271SAttributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI_66088C {
    
    $attributes: CompanyIdentificationTypeI_66088CAttributes
    
    // Carrier code
    carrierCode: Array<string>
    
}

export interface CompanyIdentificationTypeI_66088CAttributes {
    
}

// To provide specific reference identification.
export interface ReferenceInformationTypeI11 {
    
    $attributes: ReferenceInformationTypeI11Attributes
    
    // Passenger/segment/TST/fare reference details
    refDetails: Array<ReferencingDetailsTypeI15>
    
}

export interface ReferenceInformationTypeI11Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI15 {
    
    $attributes: ReferencingDetailsTypeI15Attributes
    
    // Qualifyer of the reference (Pax/Seg/Tst/Fare tattoo)
    refQualifier: Array<string>
    
    // Passenger/segment/TST/fare tattoo reference number
    refNumber: Array<number>
    
}

export interface ReferencingDetailsTypeI15Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_198906S {
    
    $attributes: MonetaryInformationType_198906SAttributes
    
    
    fareDataMainInformation: MonetaryInformationDetailsType_262583C
    
    
    fareDataSupInformation: Array<MonetaryInformationDetailsType_262583C>
    
}

export interface MonetaryInformationType_198906SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_262583C {
    
    $attributes: MonetaryInformationDetailsType_262583CAttributes
    
    
    fareDataQualifier: string
    
    // Amount
    fareAmount: Array<string>
    
    // Currency
    fareCurrency: Array<string>
    
    // location
    fareLocation: Array<string>
    
}

export interface MonetaryInformationDetailsType_262583CAttributes {
    
}


export interface taxInformationType2 {
    
    $attributes: taxInformationType2Attributes
    
    // Tax details
    taxDetails: DutyTaxFeeDetailsTypeU2
    
    // Amount details. If the tax is a passenger facility charge (PFC) the detail of the airports related taxes is given here.
    amountDetails: Array<MonetaryInformationTypeI_39272S>
    
}

export interface taxInformationType2Attributes {
    
}

// To transmit tax data as it should appear in the tax boxes of the ticket.
export interface DutyTaxFeeDetailsTypeU2 {
    
    $attributes: DutyTaxFeeDetailsTypeU2Attributes
    
    // Tax data qualifier
    taxQualifier: string
    
    // Tax type identification
    taxIdentification: DutyTaxFeeTypeDetailsTypeU2
    
    // Type of the tax
    taxType: Array<DutyTaxFeeAccountDetailTypeU2>
    
    // Nature of the tax
    taxNature: Array<string>
    
    // Exempt tax indicator. If an tax is Exempted no amount is provided for this tax.
    taxExempt: Array<string>
    
}

export interface DutyTaxFeeDetailsTypeU2Attributes {
    
}


export interface DutyTaxFeeTypeDetailsTypeU2 {
    
    $attributes: DutyTaxFeeTypeDetailsTypeU2Attributes
    
    // Tax type identifier
    taxIdentifier: string
    
}

export interface DutyTaxFeeTypeDetailsTypeU2Attributes {
    
}


export interface DutyTaxFeeAccountDetailTypeU2 {
    
    $attributes: DutyTaxFeeAccountDetailTypeU2Attributes
    
    // Iso country of the tax
    isoCountry: string
    
}

export interface DutyTaxFeeAccountDetailTypeU2Attributes {
    
}

// To convey monetary amount information.
export interface MonetaryInformationTypeI_39272S {
    
    $attributes: MonetaryInformationTypeI_39272SAttributes
    
    // Main fare data infomation, can b thee base or the total fare information which are mandatory anyway
    fareDataMainInformation: MonetaryInformationDetailsTypeI_66090C
    
    // Supplementary fare data information
    fareDataSupInformation: Array<MonetaryInformationDetailsTypeI_66090C>
    
}

export interface MonetaryInformationTypeI_39272SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI_66090C {
    
    $attributes: MonetaryInformationDetailsTypeI_66090CAttributes
    
    // Qualify the type of fare defined in this composite
    fareDataQualifier: string
    
    // Fare data amount
    fareAmount: Array<string>
    
    // Fare data currency code
    fareCurrency: Array<string>
    
    // Location of the fare data (PFCs specific)
    fareLocation: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI_66090CAttributes {
    
}

// To specify details of conversion rates.
export interface ConversionRateTypeI7 {
    
    $attributes: ConversionRateTypeI7Attributes
    
    // First Rate Detail
    firstRateDetail: ConversionRateDetailsTypeI8
    
    // Second Rate Detail
    secondRateDetail: Array<ConversionRateDetailsTypeI8>
    
}

export interface ConversionRateTypeI7Attributes {
    
}

// To specify the conversion rate and the monetary amount.
export interface ConversionRateDetailsTypeI8 {
    
    $attributes: ConversionRateDetailsTypeI8Attributes
    
    // Currency of the rate
    currencyCode: Array<string>
    
    // Amount/percentage
    amount: Array<number>
    
}

export interface ConversionRateDetailsTypeI8Attributes {
    
}


export interface passengerInformationType2 {
    
    $attributes: passengerInformationType2Attributes
    
    // Penalty/discount details specified in the request.
    penDisInformation: DiscountAndPenaltyInformationTypeI_94593S1
    
    // Reference of passengers that have a type code.
    passengerReference: Array<ReferenceInformationTypeI11>
    
}

export interface passengerInformationType2Attributes {
    
}

// To specify information about discounts and penalties
export interface DiscountAndPenaltyInformationTypeI_94593S1 {
    
    $attributes: DiscountAndPenaltyInformationTypeI_94593S1Attributes
    
    // Qualify the type of information. Penalties are not passenger associated and are pure monetary information. Discount are passenger associated but only discount code is specified.
    infoQualifier: Array<string>
    
    // Used to specify penalty information.
    penDisData: Array<DiscountPenaltyMonetaryInformationTypeI_142216C1>
    
}

export interface DiscountAndPenaltyInformationTypeI_94593S1Attributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationTypeI_142216C1 {
    
    $attributes: DiscountPenaltyMonetaryInformationTypeI_142216C1Attributes
    
    // Type of penalty.
    penaltyType: Array<string>
    
    // The penalty amount can be described differently: amount/percentage.
    penaltyQualifier: Array<string>
    
    // Amount of the penalty.
    penaltyAmount: Array<number>
    
    // This discount code is defined by the airlines. This cannot be coded as airlines might apply any combination of letters for their discounts.
    discountCode: Array<string>
    
    // Penalty currency code.
    penaltyCurrency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationTypeI_142216C1Attributes {
    
}

// To convey the origin and destination of a journey.
export interface OriginAndDestinationDetailsTypeI8 {
    
    $attributes: OriginAndDestinationDetailsTypeI8Attributes
    
    // Code of the city.
    cityCode: Array<string>
    
}

export interface OriginAndDestinationDetailsTypeI8Attributes {
    
}


export interface segmentInformationType4 {
    
    $attributes: segmentInformationType4Attributes
    
    // Connection information.
    connexInformation: ConnectionTypeI4
    
    // Details on open segments added to the price calculation. These open segments exist only in the fare calculated, they have no equivalent in the PNR itinerary. This segment gives also information on booking class for best buy transactions.
    segDetails: Array<TravelProductInformationTypeI_39279S>
    
    // Fare basis information
    fareQualifier: Array<FareQualifierDetailsTypeI6>
    
    
    cabinGroup: Array<cabinGroupType4>
    
    // Validity information for this fare
    validityInformation: Array<StructuredDateTimeInformationType_94578S1>
    
    // Baggage Allowance Information
    bagAllowanceInformation: Array<ExcessBaggageTypeI5>
    
    // Reference of the segment associated to the group.
    segmentReference: Array<ReferenceInformationTypeI11>
    
    // The segment order in the pricing response can be different than the one of the PNR itinerary (segments are reordered at price calculation time). This order inform,ation is conveyed by the sequence number. If this order information is not present then the order is by default the one of the PNR.
    sequenceInformation: Array<ItemReferencesAndVersionsType16>
    
}

export interface segmentInformationType4Attributes {
    
}

// To specify connection designator.
export interface ConnectionTypeI4 {
    
    $attributes: ConnectionTypeI4Attributes
    
    // Connection details
    connecDetails: ConnectionDetailsTypeI4
    
}

export interface ConnectionTypeI4Attributes {
    
}

// To specify the location, product supplier and time for a connection with the next means of transport.
export interface ConnectionDetailsTypeI4 {
    
    $attributes: ConnectionDetailsTypeI4Attributes
    
    // Specify ARNK and surface segments not included in the fare routing.
    routingInformation: Array<string>
    
    // Type of connection for the flight
    connexType: Array<string>
    
}

export interface ConnectionDetailsTypeI4Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI_39279S {
    
    $attributes: TravelProductInformationTypeI_39279SAttributes
    
    // City of departure for this extra segment.
    departureCity: Array<LocationTypeI_66109C>
    
    // City of arrival for this extra segment.
    arrivalCity: Array<LocationTypeI_66109C>
    
    // Airline detail information of the extra segment.
    airlineDetail: Array<CompanyIdentificationTypeI_66088C>
    
    // Segment detail information.
    segmentDetail: Array<ProductIdentificationDetailsTypeI16>
    
    
    flightTypeDetails: Array<ProductTypeDetailsTypeI10>
    
    // Ticketing status for this segment. Relevant only in case of reply.
    ticketingStatus: Array<string>
    
}

export interface TravelProductInformationTypeI_39279SAttributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI_66109C {
    
    $attributes: LocationTypeI_66109CAttributes
    
    // Code of the city.
    cityCode: Array<string>
    
}

export interface LocationTypeI_66109CAttributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI16 {
    
    $attributes: ProductIdentificationDetailsTypeI16Attributes
    
    // OPEN or AIR are the two identifications accepted. OPEN means the segment described here is an open segment. AIR means that it is a valid AIR segment.
    identification: string
    
    // to describe the transportation class.
    bookingClass: Array<string>
    
    // Class of service to use in order to price the extra segment.
    classOfService: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI16Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsTypeI10 {
    
    $attributes: ProductTypeDetailsTypeI10Attributes
    
    // Used for Slice and Dice indicator CR#1614229
    flightIndicator: string
    
    
    flightIndicator2: Array<string>
    
}

export interface ProductTypeDetailsTypeI10Attributes {
    
}

// To specify the fare basis information
export interface FareQualifierDetailsTypeI6 {
    
    $attributes: FareQualifierDetailsTypeI6Attributes
    
    // Type of movement for this segment to take into account by Fare Quote to calculate the fare.
    movementType: Array<string>
    
    // Fare basis detail
    fareBasisDetails: Array<AdditionalFareQualifierDetailsTypeI7>
    
    // Discount data for zap off to apply to price calculation.
    zapOffDetails: Array<DiscountPenaltyInformationTypeI4>
    
}

export interface FareQualifierDetailsTypeI6Attributes {
    
}

// To specify the fare basis and ticket designator codes.
export interface AdditionalFareQualifierDetailsTypeI7 {
    
    $attributes: AdditionalFareQualifierDetailsTypeI7Attributes
    
    // Primary code of the fare basis. This is not a codeset but a free flow text field.
    primaryCode: Array<string>
    
    // Fare basis code of the fare basis. This is not a codeset but a free flow text field.
    fareBasisCode: Array<string>
    
    // Ticket designator of the fare basis
    ticketDesignator: Array<string>
    
    // For any query : discount ticket designator to be assigned by Fare Quote server. For any response : priced PTCs
    discTktDesignator: Array<string>
    
}

export interface AdditionalFareQualifierDetailsTypeI7Attributes {
    
}

// To indicate the discounts and penalties by fare type.
export interface DiscountPenaltyInformationTypeI4 {
    
    $attributes: DiscountPenaltyInformationTypeI4Attributes
    
    // Discount off type.
    zapOffType: string
    
    // Discount amount
    zapOffAmount: Array<number>
    
    // Discount percentage.
    zapOffPercentage: Array<number>
    
}

export interface DiscountPenaltyInformationTypeI4Attributes {
    
}


export interface cabinGroupType4 {
    
    $attributes: cabinGroupType4Attributes
    
    // This segment gives the cabin information
    cabinSegment: ProductInformationTypeI8
    
}

export interface cabinGroupType4Attributes {
    
}

// To specify details related to availability status or cabin configuration for a product.
export interface ProductInformationTypeI8 {
    
    $attributes: ProductInformationTypeI8Attributes
    
    
    productDetailsQualifier: Array<string>
    
    
    bookingClassDetails: Array<ProductDetailsTypeI8>
    
}

export interface ProductInformationTypeI8Attributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsTypeI8 {
    
    $attributes: ProductDetailsTypeI8Attributes
    
    
    designator: string
    
    
    availabilityStatus: Array<string>
    
    
    specialService: Array<string>
    
    
    option: Array<string>
    
}

export interface ProductDetailsTypeI8Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_94578S1 {
    
    $attributes: StructuredDateTimeInformationType_94578S1Attributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - Impacted period - Departure date - Estimated arrival date and time
    businessSemantic: Array<string>
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType19>
    
}

export interface StructuredDateTimeInformationType_94578S1Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType19 {
    
    $attributes: StructuredDateTimeType19Attributes
    
    // Year number. The format is a little long for short term usage but it can be reduced by implementation if required.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: Array<number>
    
    // Day number in the month ( begins to 1 )
    day: Array<number>
    
}

export interface StructuredDateTimeType19Attributes {
    
}

// To specify information concerning baggage allowance details.
export interface ExcessBaggageTypeI5 {
    
    $attributes: ExcessBaggageTypeI5Attributes
    
    // Baggage allowance information details
    bagAllowanceDetails: Array<BaggageDetailsTypeI5>
    
}

export interface ExcessBaggageTypeI5Attributes {
    
}

// To specify the number and weight of baggage.
export interface BaggageDetailsTypeI5 {
    
    $attributes: BaggageDetailsTypeI5Attributes
    
    // Baggage allowance quantity (piece concept)
    baggageQuantity: Array<number>
    
    // Baggage allowance weight
    baggageWeight: Array<number>
    
    // Baggage allowance type (weight/number)
    baggageType: Array<string>
    
    // Measurement unit for weighing baggage allowance
    measureUnit: Array<string>
    
}

export interface BaggageDetailsTypeI5Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType16 {
    
    $attributes: ItemReferencesAndVersionsType16Attributes
    
    // Identification details : order number
    sequenceSection: Array<UniqueIdDescriptionType8>
    
}

export interface ItemReferencesAndVersionsType16Attributes {
    
}


export interface UniqueIdDescriptionType8 {
    
    $attributes: UniqueIdDescriptionType8Attributes
    
    // Number specifying the ordering information of the item described within a group.
    sequenceNumber: Array<number>
    
}

export interface UniqueIdDescriptionType8Attributes {
    
}

// Used to specify pricing options by key/value.
export interface CodedAttributeType15 {
    
    $attributes: CodedAttributeType15Attributes
    
    // provides details for the Attribute
    attributeDetails: Array<CodedAttributeInformationType16>
    
    
    DummyNET: string
    
}

export interface CodedAttributeType15Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType16 {
    
    $attributes: CodedAttributeInformationType16Attributes
    
    // provides the attribute Type
    attributeType: string
    
    // provides a description for the attribute
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType16Attributes {
    
}


export interface warningInformationType2 {
    
    $attributes: warningInformationType2Attributes
    
    // Fare warning information code.
    warningCode: ApplicationErrorInformationType17
    
    // Description in free flow text of the warning concerning the fare.
    warningText: Array<InteractiveFreeTextTypeI_39261S>
    
}

export interface warningInformationType2Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType17 {
    
    $attributes: ApplicationErrorInformationType17Attributes
    
    // Application error details.
    applicationErrorDetail: ApplicationErrorDetailType_66110C
    
}

export interface ApplicationErrorInformationType17Attributes {
    
}


export interface ApplicationErrorDetailType_66110C {
    
    $attributes: ApplicationErrorDetailType_66110CAttributes
    
    // Code identifying the data validation error condition.
    applicationErrorCode: string
    
    // Identification of a code list.
    codeListQualifier: Array<string>
    
    // Code identifying the agency responsible for a code list.
    codeListResponsibleAgency: Array<string>
    
}

export interface ApplicationErrorDetailType_66110CAttributes {
    
}

// To provide error free text information.
export interface InteractiveFreeTextTypeI_39261S {
    
    $attributes: InteractiveFreeTextTypeI_39261SAttributes
    
    // Free flow text describing the error
    errorFreeText: Array<string>
    
}

export interface InteractiveFreeTextTypeI_39261SAttributes {
    
}


export interface automaticReissueInfoType2 {
    
    $attributes: automaticReissueInfoType2Attributes
    
    // This segment contains the original ticket number.
    ticketInfo: TicketNumberTypeI8
    
    // This segment contains the coupon number (in absolute) corresponding to the first coupon for use from the last flawn segment.
    couponInfo: CouponInformationTypeI5
    
    // provide the range for paper reissuance
    paperCouponRange: Array<paperCouponRangeType2>
    
    // Base Fare informations
    baseFareInfo: MonetaryInformationTypeI12
    
    // Discount and penalty group.
    firstDpiGroup: firstDpiGroupType2
    
    // Discount and penalty group.
    secondDpiGroup: secondDpiGroupType2
    
}

export interface automaticReissueInfoType2Attributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberTypeI8 {
    
    $attributes: TicketNumberTypeI8Attributes
    
    // Details on the document
    documentDetails: TicketNumberDetailsTypeI8
    
}

export interface TicketNumberTypeI8Attributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsTypeI8 {
    
    $attributes: TicketNumberDetailsTypeI8Attributes
    
    // Ticket number
    number: string
    
    // ticket type
    type: Array<string>
    
}

export interface TicketNumberDetailsTypeI8Attributes {
    
}

// To identify data specific to a value (flight) coupon.
export interface CouponInformationTypeI5 {
    
    $attributes: CouponInformationTypeI5Attributes
    
    // Details on coupon
    couponDetails: CouponInformationDetailsTypeI5
    
    // Details on coupon
    otherCouponDetails: Array<CouponInformationDetailsTypeI5>
    
}

export interface CouponInformationTypeI5Attributes {
    
}

// To specify the coupon number, status, value, and other related information.
export interface CouponInformationDetailsTypeI5 {
    
    $attributes: CouponInformationDetailsTypeI5Attributes
    
    // Coupon number
    cpnNumber: string
    
}

export interface CouponInformationDetailsTypeI5Attributes {
    
}


export interface paperCouponRangeType2 {
    
    $attributes: paperCouponRangeType2Attributes
    
    // This segment contains the original ticket number.
    ticketInfo: TicketNumberTypeI8
    
    // This segment contains the coupon number (in absolute) corresponding to the first coupon for use from the last flawn segment.
    couponInfo: CouponInformationTypeI5
    
}

export interface paperCouponRangeType2Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI12 {
    
    $attributes: MonetaryInformationTypeI12Attributes
    
    // monetaryDetails
    monetaryDetails: MonetaryInformationDetailsTypeI14
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsTypeI14>
    
}

export interface MonetaryInformationTypeI12Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI14 {
    
    $attributes: MonetaryInformationDetailsTypeI14Attributes
    
    // Type qualifier
    typeQualifier: string
    
    // amount
    amount: string
    
    // currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI14Attributes {
    
}


export interface firstDpiGroupType2 {
    
    $attributes: firstDpiGroupType2Attributes
    
    // Penalty amount in reissue currency
    reIssuePenalty: DiscountAndPenaltyInformationTypeI4
    
    // Reissue informations
    reissueInfo: MonetaryInformationTypeI12
    
    // old tax Informations
    oldTaxInfo: MonetaryInformationTypeI12
    
    // Balance Reissue Information
    reissueBalanceInfo: MonetaryInformationTypeI12
    
}

export interface firstDpiGroupType2Attributes {
    
}

// To specify information about discounts and penalties
export interface DiscountAndPenaltyInformationTypeI4 {
    
    $attributes: DiscountAndPenaltyInformationTypeI4Attributes
    
    // Used to specify penalty information
    penDisData: Array<DiscountPenaltyMonetaryInformationTypeI4>
    
}

export interface DiscountAndPenaltyInformationTypeI4Attributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationTypeI4 {
    
    $attributes: DiscountPenaltyMonetaryInformationTypeI4Attributes
    
    // The amount Type can be a percentage or an amount
    penaltyQualifier: Array<string>
    
    // specify the value
    penaltyAmount: Array<number>
    
    // penalty currency code
    penaltyCurrency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationTypeI4Attributes {
    
}


export interface secondDpiGroupType2 {
    
    $attributes: secondDpiGroupType2Attributes
    
    // Discount and penalty info.
    penalty: DiscountAndPenaltyInformationTypeI4
    
    // Residual Value Information
    residualValueInfo: MonetaryInformationTypeI12
    
    // old tax Informations
    oldTaxInfo: MonetaryInformationTypeI12
    
    // Balance Issue Informations
    issueBalanceInfo: MonetaryInformationTypeI12
    
}

export interface secondDpiGroupType2Attributes {
    
}

// To specify corporate fare information
export interface CorporateFareInformationType5 {
    
    $attributes: CorporateFareInformationType5Attributes
    
    
    corporateFareIdentifiers: Array<CorporateFareIdentifiersTypeI2>
    
}

export interface CorporateFareInformationType5Attributes {
    
}


export interface CorporateFareIdentifiersTypeI2 {
    
    $attributes: CorporateFareIdentifiersTypeI2Attributes
    
    
    fareQualifier: Array<string>
    
    
    corporateID: Array<string>
    
}

export interface CorporateFareIdentifiersTypeI2Attributes {
    
}


export interface feeBreakdownType2 {
    
    $attributes: feeBreakdownType2Attributes
    
    // Nature of the fee (OB, OC, ...)
    feeType: SelectionDetailsTypeI9
    
    // Details for each fee
    feeDetails: Array<feeDetailsType8>
    
}

export interface feeBreakdownType2Attributes {
    
}

// To specify the Carrier Fee type
export interface SelectionDetailsTypeI9 {
    
    $attributes: SelectionDetailsTypeI9Attributes
    
    
    selectionDetails: SelectionDetailsInformationTypeI12
    
}

export interface SelectionDetailsTypeI9Attributes {
    
}

// To specify a selected option and associated information.
export interface SelectionDetailsInformationTypeI12 {
    
    $attributes: SelectionDetailsInformationTypeI12Attributes
    
    
    option: string
    
}

export interface SelectionDetailsInformationTypeI12Attributes {
    
}


export interface feeDetailsType8 {
    
    $attributes: feeDetailsType8Attributes
    
    // Fee information
    feeInfo: SpecificDataInformationTypeI5
    
    // Attributes of this fee (commercial description, ...)
    feeDescription: Array<InteractiveFreeTextTypeI12>
    
    // Fee associated amounts: amount with/without tax, total tax amount
    feeAmounts: Array<MonetaryInformationTypeI_39230S2>
    
    // taxes related to this fee
    feeTaxes: Array<TaxTypeI6>
    
}

export interface feeDetailsType8Attributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationTypeI5 {
    
    $attributes: SpecificDataInformationTypeI5Attributes
    
    // Carrier fee code
    dataTypeInformation: DataTypeInformationTypeI5
    
    // Carrier fee application code (NI, NR, CM, NC)
    dataInformation: Array<DataInformationTypeI5>
    
}

export interface SpecificDataInformationTypeI5Attributes {
    
}

// To identify the type of data to be sent and to qualify the data when required.
export interface DataTypeInformationTypeI5 {
    
    $attributes: DataTypeInformationTypeI5Attributes
    
    // fee subcode
    type: string
    
}

export interface DataTypeInformationTypeI5Attributes {
    
}

// To identify specific data and a quantity related to the data.
export interface DataInformationTypeI5 {
    
    $attributes: DataInformationTypeI5Attributes
    
    // fee attribute
    indicator: Array<string>
    
}

export interface DataInformationTypeI5Attributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextTypeI12 {
    
    $attributes: InteractiveFreeTextTypeI12Attributes
    
    
    freeTextQualification: Array<FreeTextQualificationTypeI12>
    
    
    freeText: string
    
}

export interface InteractiveFreeTextTypeI12Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationTypeI12 {
    
    $attributes: FreeTextQualificationTypeI12Attributes
    
    
    textSubjectQualifier: string
    
}

export interface FreeTextQualificationTypeI12Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI_39230S2 {
    
    $attributes: MonetaryInformationTypeI_39230S2Attributes
    
    // Monetary info
    monetaryDetails: Array<MonetaryInformationDetailsTypeI_63727C2>
    
}

export interface MonetaryInformationTypeI_39230S2Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI_63727C2 {
    
    $attributes: MonetaryInformationDetailsTypeI_63727C2Attributes
    
    // Qualifier
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
    // Location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI_63727C2Attributes {
    
}

// To specify details relating to tax(es).
export interface TaxTypeI6 {
    
    $attributes: TaxTypeI6Attributes
    
    // Tax details
    taxDetails: Array<TaxDetailsTypeI8>
    
    
    DummyNET: string
    
}

export interface TaxTypeI6Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsTypeI8 {
    
    $attributes: TaxDetailsTypeI8Attributes
    
    // Tax Amount
    rate: Array<string>
    
    // ISO code identifying Country
    countryCode: Array<string>
    
    // ISO code identifying currency
    currencyCode: Array<string>
    
    // Tax designator code
    type: Array<string>
    
    // tax designator code.
    secondType: Array<string>
    
}

export interface TaxDetailsTypeI8Attributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsTypeI12 {
    
    $attributes: AdditionalProductDetailsTypeI12Attributes
    
    
    mileageTimeDetails: Array<MileageTimeDetailsTypeI6>
    
}

export interface AdditionalProductDetailsTypeI12Attributes {
    
}

// Information about the distance/duration of a trip.
export interface MileageTimeDetailsTypeI6 {
    
    $attributes: MileageTimeDetailsTypeI6Attributes
    
    // mileage total associated to the TST
    totalMileage: number
    
}

export interface MileageTimeDetailsTypeI6Attributes {
    
}


export interface FareComponentDetailsType6 {
    
    $attributes: FareComponentDetailsType6Attributes
    
    
    fareComponentID: ItemNumberType12
    
    // Market information related to the fare component or to the bound.
    marketFareComponent: Array<TravelProductInformationTypeI14>
    
    // Monetary Information.
    monetaryInformation: Array<MonetaryInformationType_198908S>
    
    // Component Class information
    componentClassInfo: Array<PricingOrTicketingSubsequentType6>
    
    // Fare Qualifier Detail
    fareQualifiersDetail: Array<FareQualifierDetailsType12>
    
    // Details of the fare family used for this fare component
    fareFamilyDetails: Array<FareFamilyType9>
    
    // Carrier owner of the fare family
    fareFamilyOwner: Array<TransportIdentifierType16>
    
    // Used to specify coupons included in the fare component or in the bound.
    couponDetailsGroup: Array<CouponDetailsType5>
    
}

export interface FareComponentDetailsType6Attributes {
    
}

// To specify an item number
export interface ItemNumberType12 {
    
    $attributes: ItemNumberType12Attributes
    
    // Item identification: number of the fare component or of the bound.
    itemNumberDetails: Array<ItemNumberIdentificationType12>
    
}

export interface ItemNumberType12Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType12 {
    
    $attributes: ItemNumberIdentificationType12Attributes
    
    // Item identification: number of the fare component or of the bound.
    number: Array<string>
    
    // Item type: fare component (FC) or bound (BND).
    type: Array<string>
    
}

export interface ItemNumberIdentificationType12Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI14 {
    
    $attributes: TravelProductInformationTypeI14Attributes
    
    
    boardPointDetails: Array<LocationTypeI18>
    
    
    offpointDetails: Array<LocationTypeI18>
    
}

export interface TravelProductInformationTypeI14Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI18 {
    
    $attributes: LocationTypeI18Attributes
    
    
    trueLocationId: Array<string>
    
}

export interface LocationTypeI18Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_198908S {
    
    $attributes: MonetaryInformationType_198908SAttributes
    
    // Monetary information per fare component
    monetaryDetails: MonetaryInformationDetailsType_223822C2
    
    // Other monetary information per fare component
    otherMonetaryDetails: Array<MonetaryInformationDetailsType_223822C2>
    
}

export interface MonetaryInformationType_198908SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_223822C2 {
    
    $attributes: MonetaryInformationDetailsType_223822C2Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsType_223822C2Attributes {
    
}

// To convey additional information related to a ticket
export interface PricingOrTicketingSubsequentType6 {
    
    $attributes: PricingOrTicketingSubsequentType6Attributes
    
    // RATE OR TARIFF CLASS INFORMATION
    fareBasisDetails: Array<RateTariffClassInformationType5>
    
}

export interface PricingOrTicketingSubsequentType6Attributes {
    
}

// To identify the current and/or original fare basis code.
export interface RateTariffClassInformationType5 {
    
    $attributes: RateTariffClassInformationType5Attributes
    
    // Fare Basis Code
    rateTariffClass: Array<string>
    
    // Ticket Designator
    otherRateTariffClass: Array<string>
    
}

export interface RateTariffClassInformationType5Attributes {
    
}


export interface FareQualifierDetailsType12 {
    
    $attributes: FareQualifierDetailsType12Attributes
    
    
    discountDetails: Array<DiscountPenaltyInformationType11>
    
}

export interface FareQualifierDetailsType12Attributes {
    
}


export interface DiscountPenaltyInformationType11 {
    
    $attributes: DiscountPenaltyInformationType11Attributes
    
    
    fareQualifier: Array<string>
    
}

export interface DiscountPenaltyInformationType11Attributes {
    
}

// NEW FARE SEACH
export interface FareFamilyType9 {
    
    $attributes: FareFamilyType9Attributes
    
    // Fare Family Short Name
    fareFamilyname: Array<string>
    
    // HIERARCHICAL ORDER WITHIN FARE FAMILY
    hierarchy: Array<number>
    
    // Indicates Commercial Fare Family Short names
    commercialFamilyDetails: Array<FareFamilyDetailsType9>
    
}

export interface FareFamilyType9Attributes {
    
}

// NEW FARE SEARCH
export interface FareFamilyDetailsType9 {
    
    $attributes: FareFamilyDetailsType9Attributes
    
    // Commercial fare Family Short name
    commercialFamily: string
    
}

export interface FareFamilyDetailsType9Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType16 {
    
    $attributes: TransportIdentifierType16Attributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI28>
    
}

export interface TransportIdentifierType16Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI28 {
    
    $attributes: CompanyIdentificationTypeI28Attributes
    
    // Carrier owner fo the fare family
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI28Attributes {
    
}


export interface CouponDetailsType5 {
    
    $attributes: CouponDetailsType5Attributes
    
    // Tattoo + type of the product identifying the coupon.
    productId: ReferenceInfoType26
    
    // Flight Connection Type
    flightConnectionType: Array<TravelProductInformationType11>
    
    
    couponTaxDetailsGroup: Array<couponTaxDetailsGroupType4>
    
}

export interface CouponDetailsType5Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType26 {
    
    $attributes: ReferenceInfoType26Attributes
    
    
    referenceDetails: ReferencingDetailsType27
    
}

export interface ReferenceInfoType26Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType27 {
    
    $attributes: ReferencingDetailsType27Attributes
    
    
    type: string
    
    
    value: string
    
}

export interface ReferencingDetailsType27Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationType11 {
    
    $attributes: TravelProductInformationType11Attributes
    
    
    boardPointDetails: Array<LocationTypeI18>
    
    
    offpointDetails: Array<LocationTypeI18>
    
    // TST Connection Type
    flightTypeDetails: Array<ProductTypeDetailsType15>
    
}

export interface TravelProductInformationType11Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType15 {
    
    $attributes: ProductTypeDetailsType15Attributes
    
    // TST Connection Type
    flightIndicator: string
    
}

export interface ProductTypeDetailsType15Attributes {
    
}


export interface couponTaxDetailsGroupType4 {
    
    $attributes: couponTaxDetailsGroupType4Attributes
    
    // Trigger for tax functionality
    taxTriggerInfo: DutyTaxFeeDetailsType9
    
    
    taxDetails: Array<TaxType12>
    
    
    monetaryInfo: Array<MonetaryInformationType20>
    
    // Location info
    locationInfo: Array<PlaceLocationIdentificationType12>
    
}

export interface couponTaxDetailsGroupType4Attributes {
    
}

// To specify relevant duty/tax/fee information.
export interface DutyTaxFeeDetailsType9 {
    
    $attributes: DutyTaxFeeDetailsType9Attributes
    
    // Tax qualifier
    taxQualifier: string
    
}

export interface DutyTaxFeeDetailsType9Attributes {
    
}

// To specify details relating to tax(es).
export interface TaxType12 {
    
    $attributes: TaxType12Attributes
    
    
    taxCategory: Array<string>
    
    
    taxDetails: Array<TaxDetailsType10>
    
}

export interface TaxType12Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsType10 {
    
    $attributes: TaxDetailsType10Attributes
    
    
    countryCode: Array<string>
    
    
    type: Array<string>
    
}

export interface TaxDetailsType10Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType20 {
    
    $attributes: MonetaryInformationType20Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsType18
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType18>
    
}

export interface MonetaryInformationType20Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType18 {
    
    $attributes: MonetaryInformationDetailsType18Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType18Attributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType12 {
    
    $attributes: PlaceLocationIdentificationType12Attributes
    
    
    locationType: string
    
    
    locationDescription: Array<LocationIdentificationBatchType5>
    
}

export interface PlaceLocationIdentificationType12Attributes {
    
}

// Identification of a location by code or name
export interface LocationIdentificationBatchType5 {
    
    $attributes: LocationIdentificationBatchType5Attributes
    
    
    code: Array<string>
    
}

export interface LocationIdentificationBatchType5Attributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI14 {
    
    $attributes: DummySegmentTypeI14Attributes
    
}

export interface DummySegmentTypeI14Attributes {
    
}


export interface Service_StandaloneCatalogueType {
    
    $attributes: Service_StandaloneCatalogueTypeAttributes
    
    // passengers list
    passengerInfoGroup: Array<PassengerInfoType>
    
    
    flightInfo: Array<flightInfoType2>
    
    // fee Details InfoGroup
    feeDetailsInfoGroup: Array<ServiceRequestDetailsType>
    
    // Pricing Options Group
    pricingOption: Array<pricingOptionType1>
    
}

export interface Service_StandaloneCatalogueTypeAttributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface PassengerInfoType {
    
    $attributes: PassengerInfoTypeAttributes
    
    // traveller index
    specificTravellerDetails: SpecificTravellerTypeI5
    
    // Passenger Type Code. By default it is ADT (Adult).
    fareInfo: Array<FareInformationType8>
    
    // Usage date/time
    serviceRequestDateAndTimeInfo: Array<DateAndTimeInformationType8>
    
}

export interface PassengerInfoTypeAttributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerTypeI5 {
    
    $attributes: SpecificTravellerTypeI5Attributes
    
    // Traveller details
    travellerDetails: SpecificTravellerDetailsTypeI5
    
}

export interface SpecificTravellerTypeI5Attributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerDetailsTypeI5 {
    
    $attributes: SpecificTravellerDetailsTypeI5Attributes
    
    // Reference number
    referenceNumber: string
    
    // Surname
    surname: Array<string>
    
    // First name
    firstName: Array<string>
    
}

export interface SpecificTravellerDetailsTypeI5Attributes {
    
}

// To specify fare details.
export interface FareInformationType8 {
    
    $attributes: FareInformationType8Attributes
    
    // Passenger Type Code
    valueQualifier: Array<string>
    
}

export interface FareInformationType8Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeInformationType8 {
    
    $attributes: DateAndTimeInformationType8Attributes
    
    // Date and time details
    dateAndTimeDetails: Array<DateAndTimeDetailsType7>
    
}

export interface DateAndTimeInformationType8Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeDetailsType7 {
    
    $attributes: DateAndTimeDetailsType7Attributes
    
    // Qualifier 706 for Birth date
    qualifier: Array<string>
    
    // Date
    date: Array<string>
    
}

export interface DateAndTimeDetailsType7Attributes {
    
}


export interface flightInfoType2 {
    
    $attributes: flightInfoType2Attributes
    
    // Involved flight information
    flightDetails: TravelProductInformationType12
    
    
    travelItineraryInfo: Array<TravelItineraryInformationTypeI2>
    
    // Flight mileage information
    additionalFlightInfo: Array<AdditionalProductDetailsTypeI13>
    
    // Convey codeshare Info
    codeshareInfo: Array<CommercialAgreementsType5>
    
}

export interface flightInfoType2Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationType12 {
    
    $attributes: TravelProductInformationType12Attributes
    
    // Flight date
    flightDate: Array<ProductDateTimeType8>
    
    // Board point details
    boardPointDetails: Array<LocationType5>
    
    // Off point details
    offpointDetails: Array<LocationType5>
    
    // Company details
    companyDetails: Array<CompanyIdentificationType8>
    
    // Flight identification
    flightIdentification: Array<ProductIdentificationDetailsType7>
    
    // Flight type details
    flightTypeDetails: Array<ProductTypeDetailsType_219501C>
    
    // Item number
    itemNumber: number
    
}

export interface TravelProductInformationType12Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeType8 {
    
    $attributes: ProductDateTimeType8Attributes
    
    // Departure date
    departureDate: Array<string>
    
    // Departure time
    departureTime: Array<string>
    
    // Arrival date
    arrivalDate: Array<string>
    
    // Arrival time
    arrivalTime: Array<string>
    
}

export interface ProductDateTimeType8Attributes {
    
}

// To identify a location by code or name.
export interface LocationType5 {
    
    $attributes: LocationType5Attributes
    
    // True location id
    trueLocationId: Array<string>
    
}

export interface LocationType5Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationType8 {
    
    $attributes: CompanyIdentificationType8Attributes
    
    // Marketing company
    marketingCompany: Array<string>
    
    // Operating company
    operatingCompany: Array<string>
    
    // Other company
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationType8Attributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsType7 {
    
    $attributes: ProductIdentificationDetailsType7Attributes
    
    // Flight number
    flightNumber: Array<string>
    
    // Booking class
    bookingClass: Array<string>
    
}

export interface ProductIdentificationDetailsType7Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType_219501C {
    
    $attributes: ProductTypeDetailsType_219501CAttributes
    
    // Booking access identifier
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsType_219501CAttributes {
    
}

// To specify a segment of an itinerary and related details.
export interface TravelItineraryInformationTypeI2 {
    
    $attributes: TravelItineraryInformationTypeI2Attributes
    
    // Cabin designator
    cabinDesignator: Array<string>
    
    // Product type details
    productTypeDetails: Array<ProductTypeDetailsType16>
    
}

export interface TravelItineraryInformationTypeI2Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType16 {
    
    $attributes: ProductTypeDetailsType16Attributes
    
    // Flight indicator
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsType16Attributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsTypeI13 {
    
    $attributes: AdditionalProductDetailsTypeI13Attributes
    
    // Leg details
    legDetails: Array<AdditionalProductTypeI10>
    
}

export interface AdditionalProductDetailsTypeI13Attributes {
    
}

// Additional details describing a specific means of transport.
export interface AdditionalProductTypeI10 {
    
    $attributes: AdditionalProductTypeI10Attributes
    
    // Equipment
    equipment: Array<string>
    
}

export interface AdditionalProductTypeI10Attributes {
    
}

// To specify commercial agreements between two or more companies related to joint, shared, lease operations etc.
export interface CommercialAgreementsType5 {
    
    $attributes: CommercialAgreementsType5Attributes
    
    
    codeshareDetails: Array<CompanyRoleIdentificationType5>
    
    
    otherCodeshareDetails: Array<CompanyRoleIdentificationType5>
    
}

export interface CommercialAgreementsType5Attributes {
    
}

// To indicate commercial agreements related to the service being provided.
export interface CompanyRoleIdentificationType5 {
    
    $attributes: CompanyRoleIdentificationType5Attributes
    
    
    transportStageQualifier: Array<string>
    
    // company identification
    airlineDesignator: Array<string>
    
    // flight number
    flightNumber: Array<string>
    
    // suffix
    operationalSuffix: Array<string>
    
}

export interface CompanyRoleIdentificationType5Attributes {
    
}


export interface ServiceRequestDetailsType {
    
    $attributes: ServiceRequestDetailsTypeAttributes
    
    // identification key
    identifier: PricingOrTicketingSubsequentType7
    
    // Service request reference info
    serviceRequestReferenceInfo: ReferenceInfoType_165903S
    
}

export interface ServiceRequestDetailsTypeAttributes {
    
}

// To convey additional information related to a ticket.
export interface PricingOrTicketingSubsequentType7 {
    
    $attributes: PricingOrTicketingSubsequentType7Attributes
    
    // Item number
    itemNumber: Array<number>
    
    // Price type
    priceType: Array<string>
    
    // RFIC Reason For Issuance Code
    specialCondition: Array<string>
    
    // RFISC Reason For Issuance Sub Code
    otherSpecialCondition: Array<string>
    
    // Additional special condition
    additionalSpecialCondition: Array<string>
    
}

export interface PricingOrTicketingSubsequentType7Attributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInfoType_165903S {
    
    $attributes: ReferenceInfoType_165903SAttributes
    
    // Reference details
    referenceDetails: Array<ReferencingDetailsType_234638C>
    
}

export interface ReferenceInfoType_165903SAttributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_234638C {
    
    $attributes: ReferencingDetailsType_234638CAttributes
    
    // Car/value code, ...
    type: Array<string>
    
    // Value
    value: Array<string>
    
}

export interface ReferencingDetailsType_234638CAttributes {
    
}


export interface pricingOptionType1 {
    
    $attributes: pricingOptionType1Attributes
    
    // the smart name of the option
    pricingOptionKey: PricingOptionKeyType1
    
    // in case the option value takes a free text
    optionDetail: Array<AttributeType18>
    
    // in case the option value takes a carrier code
    carrierInformation: Array<TransportIdentifierType17>
    
    // in case the option value takes a currency code
    currency: Array<CurrenciesType9>
    
    // in case the option value takes a date
    dateInformation: Array<StructuredDateTimeInformationType17>
    
    // in case the option deals with Frequent Flyer Information
    frequentFlyerInformation: Array<FrequentTravellerIdentificationCodeType16>
    
    // in case the option deals with Form Of Payment
    formOfPaymentInformation: Array<FormOfPaymentType10>
    
    // in case the option value takes location code.
    locationInformation: Array<PlaceLocationIdentificationType13>
    
    // in case the option value takes a ticket number.
    ticketInformation: Array<TicketNumberTypeI9>
    
    // to associate the option to a passenger or a segment.
    paxSegTstReference: Array<ReferenceInfoType27>
    
}

export interface pricingOptionType1Attributes {
    
}


export interface PricingOptionKeyType1 {
    
    $attributes: PricingOptionKeyType1Attributes
    
    
    pricingOptionKey: string
    
}

export interface PricingOptionKeyType1Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType18 {
    
    $attributes: AttributeType18Attributes
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU14>
    
}

export interface AttributeType18Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU14 {
    
    $attributes: AttributeInformationTypeU14Attributes
    
    // Used for attribute value rather than attributeType
    attributeType: string
    
    
    attributeDescription: Array<string>
    
}

export interface AttributeInformationTypeU14Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType17 {
    
    $attributes: TransportIdentifierType17Attributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI29>
    
}

export interface TransportIdentifierType17Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI29 {
    
    $attributes: CompanyIdentificationTypeI29Attributes
    
    
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI29Attributes {
    
}

// To specify currencies used in the transaction and relevant details for the rate of exchange.
export interface CurrenciesType9 {
    
    $attributes: CurrenciesType9Attributes
    
    
    firstCurrencyDetails: Array<CurrencyDetailsTypeU9>
    
}

export interface CurrenciesType9Attributes {
    
}

// The usage to which a currency relates
export interface CurrencyDetailsTypeU9 {
    
    $attributes: CurrencyDetailsTypeU9Attributes
    
    
    currencyQualifier: string
    
    
    currencyIsoCode: Array<string>
    
}

export interface CurrencyDetailsTypeU9Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType17 {
    
    $attributes: StructuredDateTimeInformationType17Attributes
    
    
    businessSemantic: string
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType20>
    
}

export interface StructuredDateTimeInformationType17Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType20 {
    
    $attributes: StructuredDateTimeType20Attributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
}

export interface StructuredDateTimeType20Attributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType16 {
    
    $attributes: FrequentTravellerIdentificationCodeType16Attributes
    
    // Frequent Traveller Info
    frequentTravellerDetails: Array<FrequentTravellerIdentificationType15>
    
}

export interface FrequentTravellerIdentificationCodeType16Attributes {
    
}


export interface FrequentTravellerIdentificationType15 {
    
    $attributes: FrequentTravellerIdentificationType15Attributes
    
    // Carrier where the FQTV is registered.
    carrier: Array<string>
    
    
    number: Array<string>
    
    // To specify a Tier linked to the FQTV
    tierLevel: Array<string>
    
    // For example : priority code
    priorityCode: Array<string>
    
}

export interface FrequentTravellerIdentificationType15Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentType10 {
    
    $attributes: FormOfPaymentType10Attributes
    
    // Details on the form of payment
    formOfPayment: FormOfPaymentDetailsType10
    
    
    otherFormOfPayment: Array<FormOfPaymentDetailsType10>
    
}

export interface FormOfPaymentType10Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsType10 {
    
    $attributes: FormOfPaymentDetailsType10Attributes
    
    
    type: string
    
    
    amount: Array<number>
    
    
    creditCardNumber: Array<string>
    
}

export interface FormOfPaymentDetailsType10Attributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType13 {
    
    $attributes: PlaceLocationIdentificationType13Attributes
    
    
    locationType: string
    
    
    firstLocationDetails: Array<RelatedLocationOneIdentificationType9>
    
    
    secondLocationDetails: Array<RelatedLocationTwoIdentificationType9>
    
}

export interface PlaceLocationIdentificationType13Attributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationType9 {
    
    $attributes: RelatedLocationOneIdentificationType9Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationOneIdentificationType9Attributes {
    
}

// Identification of second related location by code or name.
export interface RelatedLocationTwoIdentificationType9 {
    
    $attributes: RelatedLocationTwoIdentificationType9Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationTwoIdentificationType9Attributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberTypeI9 {
    
    $attributes: TicketNumberTypeI9Attributes
    
    
    documentDetails: TicketNumberDetailsTypeI9
    
    
    status: Array<string>
    
}

export interface TicketNumberTypeI9Attributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsTypeI9 {
    
    $attributes: TicketNumberDetailsTypeI9Attributes
    
    
    number: Array<string>
    
    
    type: Array<string>
    
    // number of booklets
    numberOfBooklets: Array<number>
    
    
    dataIndicator: Array<string>
    
    
    requestNotification: Array<string>
    
}

export interface TicketNumberDetailsTypeI9Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType27 {
    
    $attributes: ReferenceInfoType27Attributes
    
    
    referenceDetails: Array<ReferencingDetailsType28>
    
}

export interface ReferenceInfoType27Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType28 {
    
    $attributes: ReferencingDetailsType28Attributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
}

export interface ReferencingDetailsType28Attributes {
    
}


export interface Service_StandaloneCatalogueReplyType {
    
    $attributes: Service_StandaloneCatalogueReplyTypeAttributes
    
    // Error group.
    errorGroup: Array<ErrorGroupType13>
    
    // Sale and ticketing information
    pricingIndicator: Array<PricingTicketingDetailsType6>
    
    
    pricingDate: Array<DateAndTimeInformationType9>
    
    
    passengerGroup: Array<passengerGroupType1>
    
    
    flightInfo: Array<flightInfoType3>
    
    
    portions: Array<portionsType1>
    
    
    ssrInformation: Array<ssrInformationType1>
    
    
    serviceGroup: Array<serviceGroupType1>
    
}

export interface Service_StandaloneCatalogueReplyTypeAttributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType13 {
    
    $attributes: ErrorGroupType13Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType18
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType18>
    
}

export interface ErrorGroupType13Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType18 {
    
    $attributes: ApplicationErrorInformationType18Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType16
    
}

export interface ApplicationErrorInformationType18Attributes {
    
}


export interface ApplicationErrorDetailType16 {
    
    $attributes: ApplicationErrorDetailType16Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType16Attributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType18 {
    
    $attributes: FreeTextInformationType18Attributes
    
    // free text information
    freeTextDetails: FreeTextDetailsType18
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType18Attributes {
    
}


export interface FreeTextDetailsType18 {
    
    $attributes: FreeTextDetailsType18Attributes
    
    // textSubjectQualifier
    textSubjectQualifier: string
    
    // type of information
    informationType: Array<string>
    
    // status
    status: Array<string>
    
    // companyId
    companyId: Array<string>
    
    // language
    language: Array<string>
    
    // source
    source: string
    
    // encoding
    encoding: string
    
}

export interface FreeTextDetailsType18Attributes {
    
}

// To convey pricing and date information related to a ticket.
export interface PricingTicketingDetailsType6 {
    
    $attributes: PricingTicketingDetailsType6Attributes
    
    // Price ticket details
    priceTicketDetails: Array<PricingTicketingInformationType6>
    
    // Selling location details
    sellingLocationDetails: Array<LocationDetailsTypeI7>
    
}

export interface PricingTicketingDetailsType6Attributes {
    
}

// To specify indicators related to pricing and ticketing.
export interface PricingTicketingInformationType6 {
    
    $attributes: PricingTicketingInformationType6Attributes
    
    // Indicators like type of fare, sold/ticketed inside/outside, electronic ticketing restrictions, possible restrictions warning, additional information concerning Last Ticketing date
    indicators: Array<string>
    
}

export interface PricingTicketingInformationType6Attributes {
    
}

// To specify a location and related country.
export interface LocationDetailsTypeI7 {
    
    $attributes: LocationDetailsTypeI7Attributes
    
    // City
    city: Array<string>
    
    // Country
    country: Array<string>
    
}

export interface LocationDetailsTypeI7Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeInformationType9 {
    
    $attributes: DateAndTimeInformationType9Attributes
    
    // Date and time details
    dateAndTimeDetails: Array<DateAndTimeDetailsType8>
    
}

export interface DateAndTimeInformationType9Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeDetailsType8 {
    
    $attributes: DateAndTimeDetailsType8Attributes
    
    // Qualifier
    qualifier: Array<string>
    
    // Date
    date: Array<string>
    
    // Time
    time: Array<string>
    
    // Other qualifier
    otherQualifier: Array<string>
    
    // Other time
    otherTime: Array<string>
    
    // Movement type
    movementType: Array<string>
    
    // Location
    location: Array<string>
    
}

export interface DateAndTimeDetailsType8Attributes {
    
}


export interface passengerGroupType1 {
    
    $attributes: passengerGroupType1Attributes
    
    
    paxReference: ReferenceInformationType7
    
    
    discountCodes: Array<DiscountDataType1>
    
    
    frequentTravellerGroup: Array<frequentTravellerGroupType1>
    
}

export interface passengerGroupType1Attributes {
    
}

// Used to convey the passenger references.
export interface ReferenceInformationType7 {
    
    $attributes: ReferenceInformationType7Attributes
    
    // Used to convey the passenger tatoo or display number.
    passengerReference: ReferencingDetailsTypeI16
    
}

export interface ReferenceInformationType7Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI16 {
    
    $attributes: ReferencingDetailsTypeI16Attributes
    
    // Specifies the type of the passenger
    type: string
    
    // Tattoo or reference number.
    value: string
    
}

export interface ReferencingDetailsTypeI16Attributes {
    
}

// List applicable redemption/upgrade promotions
export interface DiscountDataType1 {
    
    $attributes: DiscountDataType1Attributes
    
    
    discountGroup: Array<DiscountGroupType1>
    
    // Promotion name (free text)
    discountName: Array<string>
    
}

export interface DiscountDataType1Attributes {
    
}


export interface DiscountGroupType1 {
    
    $attributes: DiscountGroupType1Attributes
    
    
    startDate: Array<string>
    
    
    endDate: Array<string>
    
}

export interface DiscountGroupType1Attributes {
    
}


export interface frequentTravellerGroupType1 {
    
    $attributes: frequentTravellerGroupType1Attributes
    
    
    frequentTravellerInfo: FrequentTravellerIdentificationCodeType17
    
    
    balance: Array<MonetaryInformationType21>
    
}

export interface frequentTravellerGroupType1Attributes {
    
}

// To specify frequent traveler information.
export interface FrequentTravellerIdentificationCodeType17 {
    
    $attributes: FrequentTravellerIdentificationCodeType17Attributes
    
    // Frequent traveller identification
    frequentTravellerDetails: FrequentTravellerIdentificationType16
    
}

export interface FrequentTravellerIdentificationCodeType17Attributes {
    
}

// Identification of the frequent traveller number by company code with the capability to reference a specific traveller.
export interface FrequentTravellerIdentificationType16 {
    
    $attributes: FrequentTravellerIdentificationType16Attributes
    
    // Airline code
    carrier: string
    
    // Frequent traveller number
    number: Array<string>
    
    // Tier level
    tierLevel: Array<string>
    
    // Priority code
    priorityCode: Array<string>
    
    // Customer value
    customerValue: Array<number>
    
    // type
    type: Array<string>
    
}

export interface FrequentTravellerIdentificationType16Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType21 {
    
    $attributes: MonetaryInformationType21Attributes
    
    
    monetaryDetails: MonetaryInformationDetailsType19
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsType19>
    
}

export interface MonetaryInformationType21Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType19 {
    
    $attributes: MonetaryInformationDetailsType19Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<number>
    
    // Currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType19Attributes {
    
}


export interface flightInfoType3 {
    
    $attributes: flightInfoType3Attributes
    
    // Involved flight information
    flightDetails: TravelProductInformationType13
    
    
    travelItineraryInfo: Array<TravelItineraryInformationTypeI3>
    
    // Flight mileage information
    additionalFlightInfo: Array<AdditionalProductDetailsTypeI14>
    
    // Convey codeshare Info
    codeshareInfo: Array<CommercialAgreementsType6>
    
}

export interface flightInfoType3Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationType13 {
    
    $attributes: TravelProductInformationType13Attributes
    
    // Flight date
    flightDate: Array<ProductDateTimeType9>
    
    // Board point details
    boardPointDetails: Array<LocationType6>
    
    // Off point details
    offpointDetails: Array<LocationType6>
    
    // Company details
    companyDetails: Array<CompanyIdentificationType9>
    
    // Flight identification
    flightIdentification: Array<ProductIdentificationDetailsType8>
    
    // Flight type details
    flightTypeDetails: Array<ProductTypeDetailsType17>
    
    // Item number
    itemNumber: number
    
}

export interface TravelProductInformationType13Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeType9 {
    
    $attributes: ProductDateTimeType9Attributes
    
    // Departure date
    departureDate: Array<string>
    
    // Departure time
    departureTime: Array<string>
    
    // Arrival date
    arrivalDate: Array<string>
    
    // Arrival time
    arrivalTime: Array<string>
    
}

export interface ProductDateTimeType9Attributes {
    
}

// To identify a location by code or name.
export interface LocationType6 {
    
    $attributes: LocationType6Attributes
    
    // True location id
    trueLocationId: Array<string>
    
}

export interface LocationType6Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationType9 {
    
    $attributes: CompanyIdentificationType9Attributes
    
    // Marketing company
    marketingCompany: Array<string>
    
    // Operating company
    operatingCompany: Array<string>
    
    // Other company
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationType9Attributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsType8 {
    
    $attributes: ProductIdentificationDetailsType8Attributes
    
    // Flight number
    flightNumber: Array<string>
    
    // Booking class
    bookingClass: Array<string>
    
}

export interface ProductIdentificationDetailsType8Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType17 {
    
    $attributes: ProductTypeDetailsType17Attributes
    
    // Booking access identifier
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsType17Attributes {
    
}

// To specify a segment of an itinerary and related details.
export interface TravelItineraryInformationTypeI3 {
    
    $attributes: TravelItineraryInformationTypeI3Attributes
    
    // Cabin designator
    cabinDesignator: Array<string>
    
    // Product type details
    productTypeDetails: Array<ProductTypeDetailsType_254225C1>
    
}

export interface TravelItineraryInformationTypeI3Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType_254225C1 {
    
    $attributes: ProductTypeDetailsType_254225C1Attributes
    
    // Flight indicator
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsType_254225C1Attributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsTypeI14 {
    
    $attributes: AdditionalProductDetailsTypeI14Attributes
    
    // Leg details
    legDetails: Array<AdditionalProductTypeI11>
    
}

export interface AdditionalProductDetailsTypeI14Attributes {
    
}

// Additional details describing a specific means of transport.
export interface AdditionalProductTypeI11 {
    
    $attributes: AdditionalProductTypeI11Attributes
    
    // Equipment
    equipment: Array<string>
    
}

export interface AdditionalProductTypeI11Attributes {
    
}

// To specify commercial agreements between two or more companies related to joint, shared, lease operations etc.
export interface CommercialAgreementsType6 {
    
    $attributes: CommercialAgreementsType6Attributes
    
    
    codeshareDetails: Array<CompanyRoleIdentificationType6>
    
    
    otherCodeshareDetails: Array<CompanyRoleIdentificationType6>
    
}

export interface CommercialAgreementsType6Attributes {
    
}

// To indicate commercial agreements related to the service being provided.
export interface CompanyRoleIdentificationType6 {
    
    $attributes: CompanyRoleIdentificationType6Attributes
    
    
    transportStageQualifier: Array<string>
    
    // company identification
    airlineDesignator: Array<string>
    
    // flight number
    flightNumber: Array<string>
    
    // suffix
    operationalSuffix: Array<string>
    
}

export interface CompanyRoleIdentificationType6Attributes {
    
}


export interface portionsType1 {
    
    $attributes: portionsType1Attributes
    
    // Segment association
    travelPortions: ReferenceInfoType28
    
    
    flightAssociation: Array<RangeDetailsType2>
    
}

export interface portionsType1Attributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInfoType28 {
    
    $attributes: ReferenceInfoType28Attributes
    
    // Reference details
    referenceDetails: Array<ReferencingDetailsType29>
    
    
    DummyNET: string
    
}

export interface ReferenceInfoType28Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType29 {
    
    $attributes: ReferencingDetailsType29Attributes
    
    // Car/value code, ...
    type: Array<string>
    
    // Value
    value: Array<string>
    
}

export interface ReferencingDetailsType29Attributes {
    
}

// Range of elements
export interface RangeDetailsType2 {
    
    $attributes: RangeDetailsType2Attributes
    
    
    rangeQualifier: Array<string>
    
    
    rangeDetails: Array<RangeType2>
    
}

export interface RangeDetailsType2Attributes {
    
}

// Range minimum and maximum limits.
export interface RangeType2 {
    
    $attributes: RangeType2Attributes
    
    // Data type
    dataType: Array<string>
    
    // Min
    min: Array<number>
    
    // Max
    max: Array<number>
    
}

export interface RangeType2Attributes {
    
}


export interface ssrInformationType1 {
    
    $attributes: ssrInformationType1Attributes
    
    // Specify the SSR code, the table type and the service type
    serviceRequest: SpecialRequirementsDetailsType_174527S1
    
    // Second level of errors groups
    errorFunctional: Array<ErrorGroupType13>
    
    // SSR Information Details about Booking Format
    ssrInformationDetails: Array<ssrInformationDetailsType1>
    
}

export interface ssrInformationType1Attributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsType_174527S1 {
    
    $attributes: SpecialRequirementsDetailsType_174527S1Attributes
    
    // To specify the Service Requirement of the customer.
    specialRequirementsInfo: Array<SpecialRequirementsTypeDetailsType9>
    
    // To specify the Seat Number.
    seatDetails: Array<SpecialRequirementsDataDetailsType7>
    
}

export interface SpecialRequirementsDetailsType_174527S1Attributes {
    
}

// SPECIAL REQUIREMENTS TYPE DETAILS
export interface SpecialRequirementsTypeDetailsType9 {
    
    $attributes: SpecialRequirementsTypeDetailsType9Attributes
    
    // To specify the Code of the SSR/OSI/SK.
    ssrCode: Array<string>
    
    // To specify the status of the Service: HK: Confirmed
    actionCode: Array<string>
    
    // To specify, for some SSR, the number of items involved (e.g.: for PETS, BIKE....)
    numberInParty: Array<number>
    
    // To specify to which carrier the service applies.
    airlineCode: Array<string>
    
    // To specify if the service is an: - SSR - OSI - SK
    serviceType: Array<string>
    
    // Processing indicator, coded
    otherServiceType: Array<string>
    
    // Place/location identification
    boardPoint: Array<string>
    
    // Place/location identification
    offPoint: Array<string>
    
    // Free Text attached to the Service.
    serviceFreeText: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsType9Attributes {
    
}

// Special requirements data details
export interface SpecialRequirementsDataDetailsType7 {
    
    $attributes: SpecialRequirementsDataDetailsType7Attributes
    
    // Seat number
    seatNumber: Array<string>
    
    // Mesure unit qualifier
    measureUnitQualifier: Array<string>
    
    // Customer ranking value
    crossRef: Array<string>
    
    // SSR seat characteristic
    seatCharacteristics: Array<string>
    
}

export interface SpecialRequirementsDataDetailsType7Attributes {
    
}


export interface ssrInformationDetailsType1 {
    
    $attributes: ssrInformationDetailsType1Attributes
    
    // Specify the characteristics of the SSR Table such as if the free text is allowed.
    settingsDetails: StatusType10
    
    
    ssrFormattedFreetext: Array<StructureComponentDefinitionType1>
    
}

export interface ssrInformationDetailsType1Attributes {
    
}

// To advise the requester system the status of the reply
export interface StatusType10 {
    
    $attributes: StatusType10Attributes
    
    // STATUS DETAILS
    statusInformation: Array<StatusDetailsType9>
    
}

export interface StatusType10Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType9 {
    
    $attributes: StatusDetailsType9Attributes
    
    // list of status/qualifiers Either His for Historical or Crt for Current
    indicator: Array<string>
    
    
    action: Array<string>
    
    
    type: Array<string>
    
    
    description: Array<string>
    
}

export interface StatusDetailsType9Attributes {
    
}

// To specify a component of a data structure (e.g. an array or table).
export interface StructureComponentDefinitionType1 {
    
    $attributes: StructureComponentDefinitionType1Attributes
    
    // Specifies the type of data structure of the element
    function: string
    
    
    componentId: StructureComponentIdentificationType1
    
    
    status: Array<string>
    
    
    position: Array<PositionIdentificationBatchTypeU1>
    
    
    description: CharacteristicDescriptionType1
    
}

export interface StructureComponentDefinitionType1Attributes {
    
}

// The identification of a structure component.
export interface StructureComponentIdentificationType1 {
    
    $attributes: StructureComponentIdentificationType1Attributes
    
    // Generic value is FMT(formatted text). 4 letter codes are used to identify the keywords inside the formatted text.
    identifier: string
    
}

export interface StructureComponentIdentificationType1Attributes {
    
}

// To identify the position of an object in a structure containing the object.
export interface PositionIdentificationBatchTypeU1 {
    
    $attributes: PositionIdentificationBatchTypeU1Attributes
    
    // Root level is 0. For each next level, this value is increased by one.
    level: Array<string>
    
}

export interface PositionIdentificationBatchTypeU1Attributes {
    
}

// To provide a description of a characteristic.
export interface CharacteristicDescriptionType1 {
    
    $attributes: CharacteristicDescriptionType1Attributes
    
    // Generic value is FFT (formatted freetext). Value KW is used for the keywords.
    identification: string
    
    // The detailed format represented by a regular expression.
    mainDesc: string
    
    // The description of the keyword.
    otherDesc: Array<string>
    
}

export interface CharacteristicDescriptionType1Attributes {
    
}


export interface serviceGroupType1 {
    
    $attributes: serviceGroupType1Attributes
    
    // Unique service ID.
    serviceId: ItemNumberType13
    
    
    passengerAndFlightAssociation: Array<RangeDetailsType2>
    
    // UCI or DID to identify passengers
    uniquePassengerId: Array<ReferenceInfoType28>
    
    // Service association
    serviceAssociation: Array<ItemReferencesAndVersionsType_192370S1>
    
    // RFIC/RFISC
    serviceCodes: PricingOrTicketingSubsequentType8
    
    
    serviceDetailsGroup: Array<serviceDetailsGroupType1>
    
    // Service attributes details
    serviceAttributes: Array<AttributeType19>
    
    // Used to carry SSR indicators.
    ssrIndicatorList: Array<ssrIndicatorListType1>
    
    // Used to carry date and time information related to service recommendation.
    dateGroup: Array<dateGroupType1>
    
    
    mediaContentGroup: Array<mediaContentGroupType1>
    
    // Commercial and/or Pricing description
    serviceDecriptionInfo: Array<InteractiveFreeTextType5>
    
    
    ageAggregation: Array<NumberOfUnitsType5>
    
    // Group used to carry quota information
    quotaGroup: Array<quotaGroupType1>
    
    
    svcLocation: Array<PlaceLocationIdentificationType14>
    
    
    baggageDescriptionGroup: Array<baggageDescriptionGroupType1>
    
    // This group carries all pricing information related to a given service.
    pricingGroup: Array<pricingGroupType1>
    
    // Error group.
    errorGroup: Array<ErrorGroupType13>
    
}

export interface serviceGroupType1Attributes {
    
}

// To specify an item number
export interface ItemNumberType13 {
    
    $attributes: ItemNumberType13Attributes
    
    // Item number details
    itemNumberDetails: Array<ItemNumberIdentificationType13>
    
}

export interface ItemNumberType13Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType13 {
    
    $attributes: ItemNumberIdentificationType13Attributes
    
    // Fare component number
    number: Array<string>
    
    // Type
    type: Array<string>
    
}

export interface ItemNumberIdentificationType13Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType_192370S1 {
    
    $attributes: ItemReferencesAndVersionsType_192370S1Attributes
    
    
    uniqueReference: Array<number>
    
    
    actionCategory: Array<string>
    
    
    idSection: Array<UniqueIdDescriptionType9>
    
}

export interface ItemReferencesAndVersionsType_192370S1Attributes {
    
}


export interface UniqueIdDescriptionType9 {
    
    $attributes: UniqueIdDescriptionType9Attributes
    
    // Qualifier of the service
    referenceQualifier: Array<string>
    
    // ID of the service recommendation
    primeId: Array<string>
    
}

export interface UniqueIdDescriptionType9Attributes {
    
}

// To convey additional information related to a ticket.
export interface PricingOrTicketingSubsequentType8 {
    
    $attributes: PricingOrTicketingSubsequentType8Attributes
    
    
    specialCondition: Array<string>
    
    
    otherSpecialCondition: Array<string>
    
    
    additionalSpecialCondition: Array<string>
    
}

export interface PricingOrTicketingSubsequentType8Attributes {
    
}


export interface serviceDetailsGroupType1 {
    
    $attributes: serviceDetailsGroupType1Attributes
    
    // Service details
    serviceDetails: SpecialRequirementsDetailsType9
    
    
    flightAssociation: Array<RangeDetailsType2>
    
}

export interface serviceDetailsGroupType1Attributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsType9 {
    
    $attributes: SpecialRequirementsDetailsType9Attributes
    
    // To specify the Service Requirement of the customer
    specialRequirementsInfo: SpecialRequirementsTypeDetailsType_245333C1
    
    
    seatDetails: Array<SpecialRequirementsDataDetailsType7>
    
}

export interface SpecialRequirementsDetailsType9Attributes {
    
}


export interface SpecialRequirementsTypeDetailsType_245333C1 {
    
    $attributes: SpecialRequirementsTypeDetailsType_245333C1Attributes
    
    // SSR or SVC code to be used to book the service (ex. XBAG, VGML, SPEQ..)
    ssrCode: Array<string>
    
    // Service Classification code F flight related service M Merchandise A checked allowance B carryon allowance P prepaid baggage C excess baggage
    actionCode: Array<string>
    
    // To specify, for some SSR, the number of items involved at Ticket level (for Ticket Related services only)
    numberInParty: Array<number>
    
    // To specify to which carrier the service is bookable
    airlineCode: Array<string>
    
    // Specify the Service Group (ex. BG for baggage, PT for pets, ML for meals, SP for sport, ecc.)
    serviceType: Array<string>
    
    // Specify the Service Sub-Group
    otherServiceType: Array<string>
    
    // Free Text attached to the Service
    serviceFreeText: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsType_245333C1Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType19 {
    
    $attributes: AttributeType19Attributes
    
    
    criteriaSetType: Array<string>
    
    // Criteria details
    criteriaDetails: Array<AttributeInformationType6>
    
}

export interface AttributeType19Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationType6 {
    
    $attributes: AttributeInformationType6Attributes
    
    // Attribute type
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface AttributeInformationType6Attributes {
    
}


export interface ssrIndicatorListType1 {
    
    $attributes: ssrIndicatorListType1Attributes
    
    // Used to carry attributes from the SSR table.
    serviceAttributes: CodedAttributeType16
    
    // Used for segment association.
    segmentReference: Array<ReferenceInfoType28>
    
}

export interface ssrIndicatorListType1Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType16 {
    
    $attributes: CodedAttributeType16Attributes
    
    
    attributeFunction: Array<string>
    
    
    attributeDetails: Array<CodedAttributeInformationType17>
    
}

export interface CodedAttributeType16Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType17 {
    
    $attributes: CodedAttributeInformationType17Attributes
    
    
    attributeType: string
    
    
    attributeDescription: Array<string>
    
    
    language: Array<string>
    
    
    encoding: Array<string>
    
    
    source: Array<string>
    
}

export interface CodedAttributeInformationType17Attributes {
    
}


export interface dateGroupType1 {
    
    $attributes: dateGroupType1Attributes
    
    // Date information.
    dateInfo: StructuredDateTimeInformationType18
    
    // Used for segment association.
    segmentReference: Array<ReferenceInfoType28>
    
}

export interface dateGroupType1Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType18 {
    
    $attributes: StructuredDateTimeInformationType18Attributes
    
    // Business semantic.
    businessSemantic: Array<string>
    
    // Indicate if the time is expressed in UTC or in local time mode ( Codes U and L ).
    timeMode: Array<string>
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType21>
    
    // Reference : IATA SSIM Appendix F If it is not provided, the time is considered to be given in UTC.
    timeZoneInfo: Array<TimeZoneIinformationType4>
    
}

export interface StructuredDateTimeInformationType18Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType21 {
    
    $attributes: StructuredDateTimeType21Attributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<number>
    
}

export interface StructuredDateTimeType21Attributes {
    
}

// Specify in which time zone, the information is provided
export interface TimeZoneIinformationType4 {
    
    $attributes: TimeZoneIinformationType4Attributes
    
    // ISO country Code See SSIM appendix F
    countryCode: string
    
    // Time zone code. See SSIM appendix F.
    code: Array<number>
    
    // Time zone suffix to complete the time zone code when necessary. See SSIM appendix F.
    suffix: Array<string>
    
}

export interface TimeZoneIinformationType4Attributes {
    
}


export interface mediaContentGroupType1 {
    
    $attributes: mediaContentGroupType1Attributes
    
    // contains the reference of the media
    mediaReference: ItemReferencesAndVersionsType_192375S1
    
    // This segment is used to carry url links to service media content.
    mediaId: Array<CommunicationContactType5>
    
    // Segment association
    segmentReference: Array<ReferenceInfoType28>
    
}

export interface mediaContentGroupType1Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType_192375S1 {
    
    $attributes: ItemReferencesAndVersionsType_192375S1Attributes
    
    
    referenceType: Array<string>
    
    
    uniqueReference: Array<number>
    
    
    actionCategory: Array<string>
    
    
    idSection: Array<UniqueIdDescriptionType_269144C1>
    
}

export interface ItemReferencesAndVersionsType_192375S1Attributes {
    
}


export interface UniqueIdDescriptionType_269144C1 {
    
    $attributes: UniqueIdDescriptionType_269144C1Attributes
    
    // System responsible of the associated version number: - &#34;1ARES&#34; for CS RES system - &#34;DCSLON&#34; for current NGDCS in London -... New values may be added when needed
    systemQualifier: Array<string>
    
    // ID sequence number
    versionNumber: Array<string>
    
    
    referenceQualifier: Array<string>
    
    // ID (DID, IID, SID number or any uniquer identifier)
    primeId: Array<string>
    
    // ID
    secondaryId: Array<string>
    
    // ID Description
    description: Array<string>
    
}

export interface UniqueIdDescriptionType_269144C1Attributes {
    
}

// Describes communication channel
export interface CommunicationContactType5 {
    
    $attributes: CommunicationContactType5Attributes
    
    // Communication channel
    communication: CommunicationContactDetailsType5
    
}

export interface CommunicationContactType5Attributes {
    
}

// Communication identifier such as URL address.
export interface CommunicationContactDetailsType5 {
    
    $attributes: CommunicationContactDetailsType5Attributes
    
    // url
    urlAddress: string
    
    // this type is used to identify the url : BO - Boleto FOP
    urlType: string
    
}

export interface CommunicationContactDetailsType5Attributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextType5 {
    
    $attributes: InteractiveFreeTextType5Attributes
    
    // Free text qualification
    freeTextQualification: Array<FreeTextQualificationType6>
    
    // Free text
    freeText: Array<string>
    
}

export interface InteractiveFreeTextType5Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationType6 {
    
    $attributes: FreeTextQualificationType6Attributes
    
    // Text subject qualifier
    textSubjectQualifier: string
    
    // Add code sets in the list
    informationType: Array<string>
    
}

export interface FreeTextQualificationType6Attributes {
    
}

// To specify the number of units required.
export interface NumberOfUnitsType5 {
    
    $attributes: NumberOfUnitsType5Attributes
    
    // Quantity details
    quantityDetails: Array<NumberOfUnitDetailsType8>
    
}

export interface NumberOfUnitsType5Attributes {
    
}

// Identification of number of units and its purpose.
export interface NumberOfUnitDetailsType8 {
    
    $attributes: NumberOfUnitDetailsType8Attributes
    
    // Number of unit
    numberOfUnit: Array<number>
    
    // Unit qualifier
    unitQualifier: Array<string>
    
}

export interface NumberOfUnitDetailsType8Attributes {
    
}


export interface quotaGroupType1 {
    
    $attributes: quotaGroupType1Attributes
    
    // This segment carries the quota number.
    serviceQuota: SpecialRequirementsQuotaType2
    
    // This segment carries the upgrade booking class.
    bookingClassUpgrade: Array<ProductInformationType5>
    
    // This segment carries upgrade cabin information in case of upgrade recommendation.
    cabinClassFact: Array<CabinClassServicesType1>
    
    // Segment association
    segmentReference: Array<ReferenceInfoType28>
    
}

export interface quotaGroupType1Attributes {
    
}

// To specify special requests or services quota information related to a fligth.
export interface SpecialRequirementsQuotaType2 {
    
    $attributes: SpecialRequirementsQuotaType2Attributes
    
    // This composite enables user to convey quota-related information.
    quotaInfo: QuotaRelatedInformationType3
    
}

export interface SpecialRequirementsQuotaType2Attributes {
    
}

// Used to convey quota information.
export interface QuotaRelatedInformationType3 {
    
    $attributes: QuotaRelatedInformationType3Attributes
    
    // Quantity that is available.
    availability: Array<number>
    
    // Status which should be replied when quota are reached, for example UN.
    quotaReachedReplyStatus: Array<string>
    
}

export interface QuotaRelatedInformationType3Attributes {
    
}

// To specify details related to availability status or cabin configuration for a product.
export interface ProductInformationType5 {
    
    $attributes: ProductInformationType5Attributes
    
    // Details of query : Cabin or Booking Codes
    productDetailsQualifier: Array<string>
    
    // Booking Code Details
    bookingClassDetails: Array<ProductDetailsType7>
    
}

export interface ProductInformationType5Attributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsType7 {
    
    $attributes: ProductDetailsType7Attributes
    
    // Booking code
    designator: string
    
    // Availability status
    availabilityStatus: Array<string>
    
    // Special service
    specialService: Array<string>
    
    // Contains the RBD modifier as Night Class
    option: Array<string>
    
}

export interface ProductDetailsType7Attributes {
    
}

// Convey services for cabin or class
export interface CabinClassServicesType1 {
    
    $attributes: CabinClassServicesType1Attributes
    
    // Type of service used
    serviceType: string
    
    // List of services/features associated to cabin/class
    cabinClassInfo: Array<CabinClassFeaturesType1>
    
}

export interface CabinClassServicesType1Attributes {
    
}

// List of services/features associated to cabin/class
export interface CabinClassFeaturesType1 {
    
    $attributes: CabinClassFeaturesType1Attributes
    
    // Cabin or class level
    level: Array<string>
    
    // Identify the features associated to the class/cabin
    service: string
    
    // Description of the service
    description: Array<string>
    
    // Cabin/Class code designator
    designator: Array<string>
    
}

export interface CabinClassFeaturesType1Attributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType14 {
    
    $attributes: PlaceLocationIdentificationType14Attributes
    
    
    locationType: string
    
    
    locationDescription: Array<LocationIdentificationBatchType6>
    
    
    firstLocationDetails: Array<RelatedLocationOneIdentificationType10>
    
    
    secondLocationDetails: Array<RelatedLocationTwoIdentificationType10>
    
    
    relationType: Array<string>
    
}

export interface PlaceLocationIdentificationType14Attributes {
    
}

// Identification of a location by code or name
export interface LocationIdentificationBatchType6 {
    
    $attributes: LocationIdentificationBatchType6Attributes
    
    
    code: Array<string>
    
    
    qualifier: Array<string>
    
    
    agency: Array<string>
    
    
    name: Array<string>
    
}

export interface LocationIdentificationBatchType6Attributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationType10 {
    
    $attributes: RelatedLocationOneIdentificationType10Attributes
    
    
    code: Array<string>
    
    
    qualifier: Array<string>
    
    
    agency: Array<string>
    
    
    name: Array<string>
    
}

export interface RelatedLocationOneIdentificationType10Attributes {
    
}

// Identification of second related location by code or name.
export interface RelatedLocationTwoIdentificationType10 {
    
    $attributes: RelatedLocationTwoIdentificationType10Attributes
    
    
    code: Array<string>
    
    
    qualifier: Array<string>
    
    
    agency: Array<string>
    
    
    name: Array<string>
    
}

export interface RelatedLocationTwoIdentificationType10Attributes {
    
}


export interface baggageDescriptionGroupType1 {
    
    $attributes: baggageDescriptionGroupType1Attributes
    
    
    baggageData: ExcessBaggageType3
    
    
    range: Array<RangeDetailsType_191709S1>
    
    // Baggage attributes details
    baggageAttributes: Array<AttributeType19>
    
}

export interface baggageDescriptionGroupType1Attributes {
    
}

// To specify information concerning excess baggage charges and the associated baggage details.
export interface ExcessBaggageType3 {
    
    $attributes: ExcessBaggageType3Attributes
    
    
    baggageDetails: Array<BaggageDetailsType4>
    
    
    otherBaggageDetails: Array<BaggageDetailsType4>
    
    
    extraBaggageDetails: Array<BaggageDetailsType4>
    
}

export interface ExcessBaggageType3Attributes {
    
}

// To specify the number and weight of baggage.
export interface BaggageDetailsType4 {
    
    $attributes: BaggageDetailsType4Attributes
    
    // Number of pieces or weight
    freeAllowance: Array<number>
    
    // Measurement
    measurement: Array<number>
    
    // Nature of the free allowance ( Number of pieces or weight)
    quantityCode: Array<string>
    
    // Unit qualifier
    unitQualifier: Array<string>
    
    // Process indicator
    processIndicator: Array<string>
    
}

export interface BaggageDetailsType4Attributes {
    
}

// Range of elements
export interface RangeDetailsType_191709S1 {
    
    $attributes: RangeDetailsType_191709S1Attributes
    
    
    rangeQualifier: Array<string>
    
    
    rangeDetails: Array<RangeType2>
    
}

export interface RangeDetailsType_191709S1Attributes {
    
}


export interface pricingGroupType1 {
    
    $attributes: pricingGroupType1Attributes
    
    // Convey codeshare Info
    codeshareCarrierInfo: CommercialAgreementsType6
    
    
    computedTaxSubDetails: Array<MonetaryInformationType21>
    
    // Passenger association
    passengerReference: Array<ReferenceInfoType28>
    
    // Additional conversion details
    additionalConversionDetails: Array<ConversionRateType4>
    
    
    feeApplication: Array<SpecificDataInformationType8>
    
    // Group used to carry information on fare construction: segments included in the fare calculation.
    couponInfoGroup: Array<couponInfoGroupType1>
    
}

export interface pricingGroupType1Attributes {
    
}

// To specify details of a conversion rate related to an amount.
export interface ConversionRateType4 {
    
    $attributes: ConversionRateType4Attributes
    
    
    conversionRateDetails: ConversionRateDetailsType4
    
    
    otherConvRateDetails: Array<ConversionRateDetailsType4>
    
}

export interface ConversionRateType4Attributes {
    
}

// To specify the conversion rate and the monetary amount.
export interface ConversionRateDetailsType4 {
    
    $attributes: ConversionRateDetailsType4Attributes
    
    
    conversionType: Array<string>
    
    
    currency: Array<string>
    
    
    rateType: Array<string>
    
    
    pricingAmount: Array<number>
    
    
    convertedValueAmount: Array<number>
    
    
    dutyTaxFeeType: Array<string>
    
    
    measurementValue: Array<number>
    
    
    measurementSignificance: Array<string>
    
}

export interface ConversionRateDetailsType4Attributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationType8 {
    
    $attributes: SpecificDataInformationType8Attributes
    
    // Carrier fee description
    dataTypeInformation: DataTypeInformationType8
    
}

export interface SpecificDataInformationType8Attributes {
    
}

// To identify the type of data to be sent and to qualify the data when required.
export interface DataTypeInformationType8 {
    
    $attributes: DataTypeInformationType8Attributes
    
    // Carrier fee code
    subType: string
    
    // Status (automated, manually added, exempted). Default is automated
    status: Array<string>
    
}

export interface DataTypeInformationType8Attributes {
    
}


export interface couponInfoGroupType1 {
    
    $attributes: couponInfoGroupType1Attributes
    
    
    coupon: ItemReferencesAndVersionsType17
    
    
    monetaryInfo: MonetaryInformationType21
    
    // attribute linked to the fare
    fareAttribute: Array<AttributeType19>
    
    // Segment association
    segmentCouponReference: Array<ReferenceInfoType28>
    
    
    taxInfo: Array<taxInfoType1>
    
}

export interface couponInfoGroupType1Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType17 {
    
    $attributes: ItemReferencesAndVersionsType17Attributes
    
    // PQR for Offers or TST
    referenceType: Array<string>
    
    // Pricing record (TST or PQR) Tattoo
    uniqueReference: Array<number>
    
}

export interface ItemReferencesAndVersionsType17Attributes {
    
}


export interface taxInfoType1 {
    
    $attributes: taxInfoType1Attributes
    
    // Computed tax list information at itinerary level
    computedTaxListInfo: TaxType13
    
    // VAT, penalties for the elementary tax
    computedDiscountAndPenaltyInfo: Array<DiscountAndPenaltyInformationType8>
    
    
    computedTaxSubDetails: Array<MonetaryInformationType21>
    
}

export interface taxInfoType1Attributes {
    
}

// To specify details relating to tax(es).
export interface TaxType13 {
    
    $attributes: TaxType13Attributes
    
    // Tax category
    taxCategory: Array<string>
    
    // Tax details
    taxDetails: Array<TaxDetailsType11>
    
}

export interface TaxType13Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsType11 {
    
    $attributes: TaxDetailsType11Attributes
    
    // Amount
    rate: Array<string>
    
    // Country code
    countryCode: Array<string>
    
    // Currency code
    currencyCode: Array<string>
    
    // Type
    type: Array<string>
    
}

export interface TaxDetailsType11Attributes {
    
}

// To specify information about discounts and penalties
export interface DiscountAndPenaltyInformationType8 {
    
    $attributes: DiscountAndPenaltyInformationType8Attributes
    
    // Discount penalty qualifier
    discountPenaltyQualifier: Array<string>
    
    // Discount penalty details
    discountPenaltyDetails: Array<DiscountPenaltyMonetaryInformationType8>
    
}

export interface DiscountAndPenaltyInformationType8Attributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationType8 {
    
    $attributes: DiscountPenaltyMonetaryInformationType8Attributes
    
    // Penalty information
    function: Array<string>
    
    // Amount or percentage indicator
    amountType: Array<string>
    
    // Penalty amount or percentage
    amount: Array<number>
    
    // Rate
    rate: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationType8Attributes {
    
}


export interface Service_StandalonePricingType {
    
    $attributes: Service_StandalonePricingTypeAttributes
    
    // passengers list
    passengerInfoGroup: Array<PassengerInfoType1>
    
    // flight information
    flightInforGroup: Array<flightInforGroupType>
    
    // fee Details InfoGroup
    feeDetailsInfoGroup: Array<ServiceRequestDetailsType1>
    
    // Pricing Options Group
    pricingOption: Array<pricingOptionType2>
    
}

export interface Service_StandalonePricingTypeAttributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface PassengerInfoType1 {
    
    $attributes: PassengerInfoType1Attributes
    
    // traveller index
    specificTravellerDetails: SpecificTravellerTypeI6
    
    // Passenger Type Code. By default it is ADT (Adult).
    fareInfo: Array<FareInformationType9>
    
    // Usage date/time
    serviceRequestDateAndTimeInfo: Array<DateAndTimeInformationType10>
    
}

export interface PassengerInfoType1Attributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerTypeI6 {
    
    $attributes: SpecificTravellerTypeI6Attributes
    
    // Traveller details
    travellerDetails: SpecificTravellerDetailsTypeI6
    
}

export interface SpecificTravellerTypeI6Attributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerDetailsTypeI6 {
    
    $attributes: SpecificTravellerDetailsTypeI6Attributes
    
    // Reference number
    referenceNumber: string
    
}

export interface SpecificTravellerDetailsTypeI6Attributes {
    
}

// To specify fare details.
export interface FareInformationType9 {
    
    $attributes: FareInformationType9Attributes
    
    // Passenger Type Code
    valueQualifier: Array<string>
    
}

export interface FareInformationType9Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeInformationType10 {
    
    $attributes: DateAndTimeInformationType10Attributes
    
    // Date and time details
    dateAndTimeDetails: Array<DateAndTimeDetailsType9>
    
}

export interface DateAndTimeInformationType10Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeDetailsType9 {
    
    $attributes: DateAndTimeDetailsType9Attributes
    
    // Qualifier 706 for Birth date
    qualifier: Array<string>
    
    // Date
    date: Array<string>
    
}

export interface DateAndTimeDetailsType9Attributes {
    
}


export interface flightInforGroupType {
    
    $attributes: flightInforGroupTypeAttributes
    
    // segmentInformation
    segmentInformation: TravelProductInformationTypeI15
    
    // Used for technical stops, even if it is currently deprecated.
    additionnalSegmentDetails: Array<AdditionalProductDetailsTypeI15>
    
    // productInfo
    productInfo: Array<ProductInformationTypeI9>
    
}

export interface flightInforGroupTypeAttributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI15 {
    
    $attributes: TravelProductInformationTypeI15Attributes
    
    
    flightDate: Array<ProductDateTimeTypeI17>
    
    
    boardPointDetails: Array<LocationTypeI19>
    
    
    offpointDetails: Array<LocationTypeI19>
    
    
    companyDetails: Array<CompanyIdentificationTypeI30>
    
    
    flightIdentification: Array<ProductIdentificationDetailsTypeI17>
    
    
    flightTypeDetails: Array<ProductTypeDetailsTypeI11>
    
    
    itemNumber: Array<number>
    
    
    specialSegment: Array<string>
    
    
    marriageDetails: Array<MarriageControlDetailsTypeI6>
    
}

export interface TravelProductInformationTypeI15Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI17 {
    
    $attributes: ProductDateTimeTypeI17Attributes
    
    
    departureDate: Array<string>
    
    
    departureTime: Array<number>
    
    
    arrivalDate: Array<string>
    
    
    arrivalTime: Array<number>
    
    
    dateVariation: Array<number>
    
}

export interface ProductDateTimeTypeI17Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI19 {
    
    $attributes: LocationTypeI19Attributes
    
    
    trueLocationId: Array<string>
    
    
    trueLocation: Array<string>
    
}

export interface LocationTypeI19Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI30 {
    
    $attributes: CompanyIdentificationTypeI30Attributes
    
    
    marketingCompany: Array<string>
    
    
    operatingCompany: Array<string>
    
    
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI30Attributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI17 {
    
    $attributes: ProductIdentificationDetailsTypeI17Attributes
    
    
    flightNumber: string
    
    
    bookingClass: Array<string>
    
    
    operationalSuffix: Array<string>
    
    
    modifier: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI17Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsTypeI11 {
    
    $attributes: ProductTypeDetailsTypeI11Attributes
    
    
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsTypeI11Attributes {
    
}

// To identify details concerning the marriage status of travel product.
export interface MarriageControlDetailsTypeI6 {
    
    $attributes: MarriageControlDetailsTypeI6Attributes
    
    
    relation: Array<string>
    
    
    marriageIdentifier: Array<number>
    
    
    lineNumber: Array<number>
    
    
    otherRelation: Array<string>
    
    
    carrierCode: Array<string>
    
}

export interface MarriageControlDetailsTypeI6Attributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsTypeI15 {
    
    $attributes: AdditionalProductDetailsTypeI15Attributes
    
    // Leg details
    legDetails: Array<AdditionalProductTypeI12>
    
}

export interface AdditionalProductDetailsTypeI15Attributes {
    
}

// Additional details describing a specific means of transport.
export interface AdditionalProductTypeI12 {
    
    $attributes: AdditionalProductTypeI12Attributes
    
    // Equipment
    equipment: Array<string>
    
    // Number of stops
    numberOfStops: Array<number>
    
    // Locations
    locations: Array<string>
    
}

export interface AdditionalProductTypeI12Attributes {
    
}

// To specify details related to availability status or cabin configuration for a product.
export interface ProductInformationTypeI9 {
    
    $attributes: ProductInformationTypeI9Attributes
    
    
    productDetailsQualifier: Array<string>
    
    // bookingClassDetails
    bookingClassDetails: Array<ProductDetailsTypeI9>
    
}

export interface ProductInformationTypeI9Attributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsTypeI9 {
    
    $attributes: ProductDetailsTypeI9Attributes
    
    // designator
    designator: string
    
}

export interface ProductDetailsTypeI9Attributes {
    
}


export interface ServiceRequestDetailsType1 {
    
    $attributes: ServiceRequestDetailsType1Attributes
    
    // identification key
    identifier: PricingOrTicketingSubsequentType9
    
    // service Request Details
    serviceRequestDetails: Array<SpecialRequirementsDetailsType10>
    
    // Usage date/time
    serviceRequestDateAndTimeInfo: Array<DateAndTimeInformationType10>
    
    // Booking, transporting class information
    serviceRequestProductInfo: Array<ProductInformationType6>
    
    // Seat request parameters
    serviceRequestParameters: Array<SeatRequestParametersTypeI4>
    
    // Baggage weight per passenger per segment
    quantitiesInfo: Array<QuantityType3>
    
    // Service request reference info
    serviceRequestReferenceInfo: ReferenceInfoType_165903S1
    
}

export interface ServiceRequestDetailsType1Attributes {
    
}

// To convey additional information related to a ticket.
export interface PricingOrTicketingSubsequentType9 {
    
    $attributes: PricingOrTicketingSubsequentType9Attributes
    
    // Item number
    itemNumber: Array<number>
    
    // Price type
    priceType: Array<string>
    
    // RFIC Reason For Issuance Code
    specialCondition: Array<string>
    
    // RFISC Reason For Issuance Sub Code
    otherSpecialCondition: Array<string>
    
    // Additional special condition
    additionalSpecialCondition: Array<string>
    
}

export interface PricingOrTicketingSubsequentType9Attributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsType10 {
    
    $attributes: SpecialRequirementsDetailsType10Attributes
    
    // To specify the Service Requirement of the customer.
    specialRequirementsInfo: Array<SpecialRequirementsTypeDetailsType10>
    
}

export interface SpecialRequirementsDetailsType10Attributes {
    
}

// SPECIAL REQUIREMENTS TYPE DETAILS
export interface SpecialRequirementsTypeDetailsType10 {
    
    $attributes: SpecialRequirementsTypeDetailsType10Attributes
    
    // To specify the Code of the SSR/OSI/SK.
    ssrCode: Array<string>
    
    // To specify, for some SSR, the number of items involved (e.g.: for PETS, BIKE....)
    numberInParty: Array<number>
    
    // To specify to which carrier the service applies.
    airlineCode: Array<string>
    
    // Place/location identification
    boardPoint: Array<string>
    
    // Place/location identification
    offPoint: Array<string>
    
    // Free Text attached to the Service.
    serviceFreeText: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsType10Attributes {
    
}

// To specify details related to routing status of a product.
export interface ProductInformationType6 {
    
    $attributes: ProductInformationType6Attributes
    
    // value of the Qualifier: INT for International DOM for Domestic EUR for European otherwise CM#10569 INVALID INTERNATIONAL INDICATOR is returned.
    productDetailsQualifier: Array<string>
    
    
    bookingClassDetails: Array<ProductDetailsType8>
    
}

export interface ProductInformationType6Attributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsType8 {
    
    $attributes: ProductDetailsType8Attributes
    
    
    designator: string
    
    
    availabilityStatus: Array<string>
    
    
    specialService: Array<string>
    
    
    option: Array<string>
    
}

export interface ProductDetailsType8Attributes {
    
}

// To specify the selection criteria for a seat map request.
export interface SeatRequestParametersTypeI4 {
    
    $attributes: SeatRequestParametersTypeI4Attributes
    
    // Generic details
    genericDetails: Array<GenericDetailsTypeI4>
    
    // Range of rows details
    rangeOfRowsDetails: Array<RangeOfRowsDetailsTypeI2>
    
    // Processing indicator
    processingIndicator: Array<string>
    
    // Reference number
    referenceNumber: Array<string>
    
    // Description
    description: Array<string>
    
}

export interface SeatRequestParametersTypeI4Attributes {
    
}

// To identify the type of seat requested.
export interface GenericDetailsTypeI4 {
    
    $attributes: GenericDetailsTypeI4Attributes
    
    // Cabin class designator
    cabinClassDesignator: Array<string>
    
    // No smoking indicator
    noSmokingIndicator: Array<string>
    
    // Cabin class
    cabinClass: Array<number>
    
    // Compartment designator
    compartmentDesignator: Array<string>
    
    // Seat characteristic
    seatCharacteristic: Array<string>
    
}

export interface GenericDetailsTypeI4Attributes {
    
}

// To specify row information for a means of transport.
export interface RangeOfRowsDetailsTypeI2 {
    
    $attributes: RangeOfRowsDetailsTypeI2Attributes
    
    // Seat row number
    seatRowNumber: number
    
    // Number of rows
    numberOfRows: Array<number>
    
    // Seat column
    seatColumn: Array<string>
    
}

export interface RangeOfRowsDetailsTypeI2Attributes {
    
}

// To specify a pertinent quantity.
export interface QuantityType3 {
    
    $attributes: QuantityType3Attributes
    
    // Quantity details
    quantityDetails: Array<QuantityDetailsTypeI7>
    
}

export interface QuantityType3Attributes {
    
}

// Quantity information in a transaction, qualified when relevant.
export interface QuantityDetailsTypeI7 {
    
    $attributes: QuantityDetailsTypeI7Attributes
    
    // Qualifier
    qualifier: string
    
    // Value
    value: number
    
    // Unit
    unit: Array<string>
    
}

export interface QuantityDetailsTypeI7Attributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInfoType_165903S1 {
    
    $attributes: ReferenceInfoType_165903S1Attributes
    
    // Reference details
    referenceDetails: Array<ReferencingDetailsType_234638C1>
    
}

export interface ReferenceInfoType_165903S1Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_234638C1 {
    
    $attributes: ReferencingDetailsType_234638C1Attributes
    
    // Car/value code, ...
    type: Array<string>
    
    // Value
    value: Array<string>
    
}

export interface ReferencingDetailsType_234638C1Attributes {
    
}


export interface pricingOptionType2 {
    
    $attributes: pricingOptionType2Attributes
    
    // the smart name of the option
    pricingOptionKey: PricingOptionKey6
    
    // in case the option value takes a free text
    optionDetail: Array<AttributeType20>
    
    // in case the option value takes a carrier code
    carrierInformation: Array<TransportIdentifierType18>
    
    // in case the option value takes a currency code
    currency: Array<CurrenciesType10>
    
    // in case the option value takes a date
    dateInformation: Array<StructuredDateTimeInformationType19>
    
    // in case the option deals with Frequent Flyer Information
    frequentFlyerInformation: Array<FrequentTravellerIdentificationCodeType18>
    
    
    formOfPaymentInformation: Array<FormOfPaymentType11>
    
    // in case the option value takes location code.
    locationInformation: Array<PlaceLocationIdentificationType15>
    
    // in case the option value takes a ticket number.
    ticketInformation: Array<TicketNumberTypeI10>
    
    // to associate the option to a passenger or a segment.
    paxSegTstReference: Array<ReferenceInfoType29>
    
}

export interface pricingOptionType2Attributes {
    
}


export interface PricingOptionKey6 {
    
    $attributes: PricingOptionKey6Attributes
    
    
    pricingOptionKey: string
    
}

export interface PricingOptionKey6Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType20 {
    
    $attributes: AttributeType20Attributes
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU15>
    
}

export interface AttributeType20Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU15 {
    
    $attributes: AttributeInformationTypeU15Attributes
    
    // Used for attribute value rather than attributeType
    attributeType: string
    
    
    attributeDescription: Array<string>
    
}

export interface AttributeInformationTypeU15Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType18 {
    
    $attributes: TransportIdentifierType18Attributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI_217496C>
    
}

export interface TransportIdentifierType18Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI_217496C {
    
    $attributes: CompanyIdentificationTypeI_217496CAttributes
    
    
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI_217496CAttributes {
    
}

// To specify currencies used in the transaction and relevant details for the rate of exchange.
export interface CurrenciesType10 {
    
    $attributes: CurrenciesType10Attributes
    
    
    firstCurrencyDetails: Array<CurrencyDetailsTypeU10>
    
}

export interface CurrenciesType10Attributes {
    
}

// The usage to which a currency relates
export interface CurrencyDetailsTypeU10 {
    
    $attributes: CurrencyDetailsTypeU10Attributes
    
    
    currencyQualifier: string
    
    
    currencyIsoCode: Array<string>
    
}

export interface CurrencyDetailsTypeU10Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType19 {
    
    $attributes: StructuredDateTimeInformationType19Attributes
    
    
    businessSemantic: string
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType22>
    
}

export interface StructuredDateTimeInformationType19Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType22 {
    
    $attributes: StructuredDateTimeType22Attributes
    
    // Year number.
    year: Array<string>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
}

export interface StructuredDateTimeType22Attributes {
    
}

// To specify frequent traveler information
export interface FrequentTravellerIdentificationCodeType18 {
    
    $attributes: FrequentTravellerIdentificationCodeType18Attributes
    
    // Frequent Traveller Info
    frequentTravellerDetails: Array<FrequentTravellerIdentificationType17>
    
}

export interface FrequentTravellerIdentificationCodeType18Attributes {
    
}


export interface FrequentTravellerIdentificationType17 {
    
    $attributes: FrequentTravellerIdentificationType17Attributes
    
    // Carrier where the FQTV is registered.
    carrier: Array<string>
    
    
    number: Array<string>
    
    // To specify a Tier linked to the FQTV
    tierLevel: Array<string>
    
    // For example : priority code
    priorityCode: Array<string>
    
}

export interface FrequentTravellerIdentificationType17Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentType11 {
    
    $attributes: FormOfPaymentType11Attributes
    
    // Details on the form of payment
    formOfPayment: FormOfPaymentDetailsType11
    
    
    otherFormOfPayment: Array<FormOfPaymentDetailsType11>
    
}

export interface FormOfPaymentType11Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsType11 {
    
    $attributes: FormOfPaymentDetailsType11Attributes
    
    
    type: string
    
    // indicates wether the transaction is a credit or debit.
    indicator: Array<string>
    
    
    amount: Array<number>
    
    // provides the code of the vendor/carrier code
    vendorCode: Array<string>
    
    
    creditCardNumber: Array<string>
    
    // expiry date of the credit card
    expiryDate: Array<string>
    
    
    approvalCode: Array<string>
    
    
    sourceOfApproval: Array<string>
    
    
    authorisedAmount: Array<number>
    
    
    addressVerification: Array<string>
    
    
    customerAccount: Array<string>
    
    
    extendedPayment: Array<string>
    
    
    fopFreeText: Array<string>
    
    
    membershipStatus: Array<string>
    
    
    transactionInfo: Array<string>
    
    // stores a pin code attached to the account
    pinCode: Array<string>
    
    // Details pin code type (in case of encrypted pin code)
    pinCodeType: Array<string>
    
}

export interface FormOfPaymentDetailsType11Attributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType15 {
    
    $attributes: PlaceLocationIdentificationType15Attributes
    
    
    locationType: string
    
    
    firstLocationDetails: Array<RelatedLocationOneIdentificationType11>
    
    
    secondLocationDetails: Array<RelatedLocationTwoIdentificationType11>
    
}

export interface PlaceLocationIdentificationType15Attributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationType11 {
    
    $attributes: RelatedLocationOneIdentificationType11Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationOneIdentificationType11Attributes {
    
}

// Identification of second related location by code or name.
export interface RelatedLocationTwoIdentificationType11 {
    
    $attributes: RelatedLocationTwoIdentificationType11Attributes
    
    
    code: Array<string>
    
}

export interface RelatedLocationTwoIdentificationType11Attributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberTypeI10 {
    
    $attributes: TicketNumberTypeI10Attributes
    
    
    documentDetails: TicketNumberDetailsTypeI10
    
    
    status: Array<string>
    
}

export interface TicketNumberTypeI10Attributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsTypeI10 {
    
    $attributes: TicketNumberDetailsTypeI10Attributes
    
    
    number: Array<string>
    
    
    type: Array<string>
    
    // number of booklets
    numberOfBooklets: Array<number>
    
    
    dataIndicator: Array<string>
    
    
    requestNotification: Array<string>
    
}

export interface TicketNumberDetailsTypeI10Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType29 {
    
    $attributes: ReferenceInfoType29Attributes
    
    
    referenceDetails: Array<ReferencingDetailsType30>
    
}

export interface ReferenceInfoType29Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType30 {
    
    $attributes: ReferencingDetailsType30Attributes
    
    
    type: Array<string>
    
    
    value: Array<string>
    
}

export interface ReferencingDetailsType30Attributes {
    
}


export interface Service_StandalonePricingReplyType {
    
    $attributes: Service_StandalonePricingReplyTypeAttributes
    
    
    errorGroup: Array<ErrorGroupType14>
    
    // all fares info group
    allFaresInfoGroup: Array<FaresInfoType1>
    
}

export interface Service_StandalonePricingReplyTypeAttributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType14 {
    
    $attributes: ErrorGroupType14Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType19
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType19>
    
}

export interface ErrorGroupType14Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType19 {
    
    $attributes: ApplicationErrorInformationType19Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType17
    
}

export interface ApplicationErrorInformationType19Attributes {
    
}


export interface ApplicationErrorDetailType17 {
    
    $attributes: ApplicationErrorDetailType17Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType17Attributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType19 {
    
    $attributes: FreeTextInformationType19Attributes
    
    
    freeTextDetails: FreeTextDetailsType19
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType19Attributes {
    
}


export interface FreeTextDetailsType19 {
    
    $attributes: FreeTextDetailsType19Attributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
    
    status: Array<string>
    
    
    companyId: Array<string>
    
    
    language: Array<string>
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType19Attributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface FaresInfoType1 {
    
    $attributes: FaresInfoType1Attributes
    
    // Marker all fares
    markerAllFares: DummySegmentTypeI15
    
    // Type of the response
    responseTypeInfo: Array<StatusType11>
    
    // Response identification information
    responseIdentInfo: Array<ItemNumberType14>
    
    // Currency of travel origin, currency of sale
    involvedCurrenciesInfo: Array<ConversionRateType5>
    
    // Monetary information
    monetaryInfo: Array<MonetaryInformationType22>
    
    // Computed tax information group at itinerary level
    computedTaxInfoGroup: Array<GeneralTaxInfoType1>
    
    // Ticketing information group
    ticketingInfoGroup: Array<TicketingInfoType1>
    
    // Flight information group
    flightInfoGroup: Array<FlightInformationType1>
    
    // Service information details group
    serviceInformationGroup: Array<ServiceInfoType1>
    
    // Fare product information group
    fareProductInfoGroup: Array<FareProductDataType1>
    
    // Error information group at service request level
    serviceRequestRejectGroup: Array<ServiceRequestRejectType1>
    
}

export interface FaresInfoType1Attributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI15 {
    
    $attributes: DummySegmentTypeI15Attributes
    
}

export interface DummySegmentTypeI15Attributes {
    
}

// To identify a status and related information.
export interface StatusType11 {
    
    $attributes: StatusType11Attributes
    
    // Status details
    statusDetails: Array<StatusDetailsType10>
    
}

export interface StatusType11Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsType10 {
    
    $attributes: StatusDetailsType10Attributes
    
    // Indicator
    indicator: Array<string>
    
}

export interface StatusDetailsType10Attributes {
    
}

// To specify an item number
export interface ItemNumberType14 {
    
    $attributes: ItemNumberType14Attributes
    
    // Item number details
    itemNumberDetails: Array<ItemNumberIdentificationType14>
    
}

export interface ItemNumberType14Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType14 {
    
    $attributes: ItemNumberIdentificationType14Attributes
    
    // Fare component number
    number: Array<string>
    
    // Type
    type: Array<string>
    
}

export interface ItemNumberIdentificationType14Attributes {
    
}

// To specify details of a conversion rate related to an amount.
export interface ConversionRateType5 {
    
    $attributes: ConversionRateType5Attributes
    
    // Conversion rate details
    conversionRateDetails: Array<ConversionRateDetailsType5>
    
}

export interface ConversionRateType5Attributes {
    
}

// To specify the conversion rate and the monetary amount.
export interface ConversionRateDetailsType5 {
    
    $attributes: ConversionRateDetailsType5Attributes
    
    // Conversion type
    conversionType: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface ConversionRateDetailsType5Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType22 {
    
    $attributes: MonetaryInformationType22Attributes
    
    // Monetary details
    monetaryDetails: Array<MonetaryInformationDetailsType_231248C1>
    
}

export interface MonetaryInformationType22Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_231248C1 {
    
    $attributes: MonetaryInformationDetailsType_231248C1Attributes
    
    // Type qualifier
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsType_231248C1Attributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface GeneralTaxInfoType1 {
    
    $attributes: GeneralTaxInfoType1Attributes
    
    // Computed tax list information at itinerary level
    computedTaxListInfo: TaxDetailsType_163207S1
    
    // Tax sub details for ZP and PFC
    computedTaxSubDetails: Array<MonetaryInformationType_163167S1>
    
}

export interface GeneralTaxInfoType1Attributes {
    
}

// To specify details relating to tax(es).
export interface TaxDetailsType_163207S1 {
    
    $attributes: TaxDetailsType_163207S1Attributes
    
    // Tax details
    taxDetails: Array<TaxDetailsType12>
    
}

export interface TaxDetailsType_163207S1Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsType12 {
    
    $attributes: TaxDetailsType12Attributes
    
    // Amount
    rate: Array<string>
    
    // Country code
    countryCode: Array<string>
    
    // Currency code
    currencyCode: Array<string>
    
    // Type
    type: Array<string>
    
    // Indicator
    indicator: Array<string>
    
}

export interface TaxDetailsType12Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_163167S1 {
    
    $attributes: MonetaryInformationType_163167S1Attributes
    
    // Monetary details
    monetaryDetails: Array<MonetaryInformationDetailsType_231249C1>
    
    
    DummyNET: string
    
}

export interface MonetaryInformationType_163167S1Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType_231249C1 {
    
    $attributes: MonetaryInformationDetailsType_231249C1Attributes
    
    // Type qualifier
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType_231249C1Attributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface TicketingInfoType1 {
    
    $attributes: TicketingInfoType1Attributes
    
    // Sale and ticketing information
    pricingTicketingDetails: PricingTicketingDetailsType7
    
}

export interface TicketingInfoType1Attributes {
    
}

// To convey pricing and date information related to a ticket.
export interface PricingTicketingDetailsType7 {
    
    $attributes: PricingTicketingDetailsType7Attributes
    
    // Price ticket details
    priceTicketDetails: Array<PricingTicketingInformationType7>
    
    // Selling location details
    sellingLocationDetails: Array<LocationDetailsTypeI8>
    
}

export interface PricingTicketingDetailsType7Attributes {
    
}

// To specify indicators related to pricing and ticketing.
export interface PricingTicketingInformationType7 {
    
    $attributes: PricingTicketingInformationType7Attributes
    
    // Indicators like type of fare, sold/ticketed inside/outside, electronic ticketing restrictions, possible restrictions warning, additional information concerning Last Ticketing date
    indicators: Array<string>
    
}

export interface PricingTicketingInformationType7Attributes {
    
}

// To specify a location and related country.
export interface LocationDetailsTypeI8 {
    
    $attributes: LocationDetailsTypeI8Attributes
    
    // City
    city: Array<string>
    
    // Country
    country: Array<string>
    
}

export interface LocationDetailsTypeI8Attributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface FlightInformationType1 {
    
    $attributes: FlightInformationType1Attributes
    
    // Involved flight information
    involvedFlightInfo: TravelProductInformationType14
    
    // Related product information
    relatedProductInfo: Array<RelatedProductInformationTypeI9>
    
    // Flight mileage information
    additionalFlightInfo: Array<AdditionalProductDetailsTypeI16>
    
    // Itinerary information group
    itineraryInfoGroup: Array<ItineraryInfoType1>
    
}

export interface FlightInformationType1Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationType14 {
    
    $attributes: TravelProductInformationType14Attributes
    
    // Flight date
    flightDate: Array<ProductDateTimeType_231252C1>
    
    // Board point details
    boardPointDetails: Array<LocationType7>
    
    // Off point details
    offpointDetails: Array<LocationType7>
    
    // Company details
    companyDetails: Array<CompanyIdentificationType10>
    
    // Flight identification
    flightIdentification: Array<ProductIdentificationDetailsType_231256C1>
    
    // Flight type details
    flightTypeDetails: Array<ProductTypeDetailsType18>
    
}

export interface TravelProductInformationType14Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeType_231252C1 {
    
    $attributes: ProductDateTimeType_231252C1Attributes
    
    // Departure date
    departureDate: Array<string>
    
    // Departure time
    departureTime: Array<string>
    
    // Arrival date
    arrivalDate: Array<string>
    
    // Arrival time
    arrivalTime: Array<string>
    
}

export interface ProductDateTimeType_231252C1Attributes {
    
}

// To identify a location by code or name.
export interface LocationType7 {
    
    $attributes: LocationType7Attributes
    
    // True location id
    trueLocationId: Array<string>
    
}

export interface LocationType7Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationType10 {
    
    $attributes: CompanyIdentificationType10Attributes
    
    // Marketing company
    marketingCompany: Array<string>
    
    // Operating company
    operatingCompany: Array<string>
    
}

export interface CompanyIdentificationType10Attributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsType_231256C1 {
    
    $attributes: ProductIdentificationDetailsType_231256C1Attributes
    
    // Flight number
    flightNumber: string
    
    // Booking class
    bookingClass: Array<string>
    
}

export interface ProductIdentificationDetailsType_231256C1Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType18 {
    
    $attributes: ProductTypeDetailsType18Attributes
    
    // Booking access identifier
    flightIndicator: Array<string>
    
}

export interface ProductTypeDetailsType18Attributes {
    
}

// To indicate quantity and action required in relation to a product.
export interface RelatedProductInformationTypeI9 {
    
    $attributes: RelatedProductInformationTypeI9Attributes
    
    // Segment identification
    statusCode: Array<string>
    
}

export interface RelatedProductInformationTypeI9Attributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsTypeI16 {
    
    $attributes: AdditionalProductDetailsTypeI16Attributes
    
    // Leg details
    legDetails: Array<AdditionalProductTypeI13>
    
}

export interface AdditionalProductDetailsTypeI16Attributes {
    
}

// Additional details describing a specific means of transport.
export interface AdditionalProductTypeI13 {
    
    $attributes: AdditionalProductTypeI13Attributes
    
    // Equipment
    equipment: Array<string>
    
}

export interface AdditionalProductTypeI13Attributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface ItineraryInfoType1 {
    
    $attributes: ItineraryInfoType1Attributes
    
    // Information related to the flight in the itinerary
    travelItineraryInfo: TravellerInsuranceInformationType2
    
}

export interface ItineraryInfoType1Attributes {
    
}

// To specify a segment of an itinerary and related details.
export interface TravellerInsuranceInformationType2 {
    
    $attributes: TravellerInsuranceInformationType2Attributes
    
    // Segment item number
    segmentItemNumber: Array<string>
    
    // Numeric reference id
    numericReferenceId: Array<number>
    
    // Cabin designator
    cabinDesignator: Array<string>
    
}

export interface TravellerInsuranceInformationType2Attributes {
    
}


export interface ServiceInfoType1 {
    
    $attributes: ServiceInfoType1Attributes
    
    // Nature of the service (OB, OC)
    serviceTypeInfo: SelectionDetailsType7
    
    // Description of the service request
    serviceInformationDetailsGroup: Array<ServiceInfoDetailsType1>
    
}

export interface ServiceInfoType1Attributes {
    
}

// To specify the details for making a selection.
export interface SelectionDetailsType7 {
    
    $attributes: SelectionDetailsType7Attributes
    
    // Carrier fees details
    carrierFeeDetails: SelectionDetailsInformationType6
    
}

export interface SelectionDetailsType7Attributes {
    
}

// To specify a selected option and associated information.
export interface SelectionDetailsInformationType6 {
    
    $attributes: SelectionDetailsInformationType6Attributes
    
    // Carrier fee type
    type: string
    
}

export interface SelectionDetailsInformationType6Attributes {
    
}


export interface ServiceInfoDetailsType1 {
    
    $attributes: ServiceInfoDetailsType1Attributes
    
    // Service information
    serviceInfo: SpecificDataInformationType9
    
    // Owner
    serviceOwner: Array<UserIdentificationType10>
    
    // Version date/hour
    serviceDateAndTimeVersion: Array<DateAndTimeInformationType11>
    
    // Service details
    serviceDetails: Array<SpecialRequirementsDetailsType11>
    
    // Upgrade to RBD
    proposedServiceProductInfo: Array<ProductInformationType_163234S1>
    
    // Service attributes details
    serviceAttributes: Array<AttributeType21>
    
    // Service fare details
    serviceFareDetails: Array<FareQualifierDetailsType13>
    
    // Commercial description
    serviceDescriptionInfo: Array<InteractiveFreeTextType6>
    
}

export interface ServiceInfoDetailsType1Attributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationType9 {
    
    $attributes: SpecificDataInformationType9Attributes
    
    // Carrier fee description
    dataTypeInformation: DataTypeInformationType9
    
}

export interface SpecificDataInformationType9Attributes {
    
}

// To identify the type of data to be sent and to qualify the data when required.
export interface DataTypeInformationType9 {
    
    $attributes: DataTypeInformationType9Attributes
    
    // Carrier fee code
    subType: string
    
    // Status (automated, manually added, exempted). Default is automated
    status: Array<string>
    
}

export interface DataTypeInformationType9Attributes {
    
}

// This segment is used to identify a user.
export interface UserIdentificationType10 {
    
    $attributes: UserIdentificationType10Attributes
    
    // Originator Identification Details
    originIdentification: Array<OriginatorIdentificationDetailsTypeI14>
    
}

export interface UserIdentificationType10Attributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI14 {
    
    $attributes: OriginatorIdentificationDetailsTypeI14Attributes
    
    // In house identification 1
    inHouseIdentification1: Array<string>
    
}

export interface OriginatorIdentificationDetailsTypeI14Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeInformationType11 {
    
    $attributes: DateAndTimeInformationType11Attributes
    
    // Date and time details
    dateAndTimeDetails: Array<DateAndTimeDetailsType_231262C1>
    
}

export interface DateAndTimeInformationType11Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeDetailsType_231262C1 {
    
    $attributes: DateAndTimeDetailsType_231262C1Attributes
    
    // Date
    date: Array<string>
    
    // Time
    time: Array<string>
    
}

export interface DateAndTimeDetailsType_231262C1Attributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsType11 {
    
    $attributes: SpecialRequirementsDetailsType11Attributes
    
    // To specify the Service Requirement of the customer
    serviceRequirementsInfo: SpecialRequirementsTypeDetailsType11
    
}

export interface SpecialRequirementsDetailsType11Attributes {
    
}


export interface SpecialRequirementsTypeDetailsType11 {
    
    $attributes: SpecialRequirementsTypeDetailsType11Attributes
    
    // To specify the Service Classification of the Service Requirement.
    serviceClassification: string
    
    // To specify to which marketing carrier the service applies
    serviceMarketingCarrier: Array<string>
    
    // Specify the Service group
    serviceGroup: Array<string>
    
    // Specify the Service Sub-Group
    serviceSubGroup: Array<string>
    
    // Free Text attached to the Service
    serviceFreeText: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsType11Attributes {
    
}

// To specify details related to availability status or cabin configuration for a product.
export interface ProductInformationType_163234S1 {
    
    $attributes: ProductInformationType_163234S1Attributes
    
    // Booking class details
    bookingClassDetails: Array<ProductDetailsType_231316C1>
    
}

export interface ProductInformationType_163234S1Attributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsType_231316C1 {
    
    $attributes: ProductDetailsType_231316C1Attributes
    
    // Designator
    designator: string
    
}

export interface ProductDetailsType_231316C1Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType21 {
    
    $attributes: AttributeType21Attributes
    
    // Criteria details
    attributeDetails: Array<AttributeInformationType7>
    
}

export interface AttributeType21Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationType7 {
    
    $attributes: AttributeInformationType7Attributes
    
    // Attribute type
    attributeType: string
    
    // Attribute description
    attributeDescription: Array<string>
    
}

export interface AttributeInformationType7Attributes {
    
}

// To specify the details which qualify a fare
export interface FareQualifierDetailsType13 {
    
    $attributes: FareQualifierDetailsType13Attributes
    
    // Fare categories
    fareCategories: Array<FareCategoryCodesTypeI6>
    
}

export interface FareQualifierDetailsType13Attributes {
    
}

// To designate non-system specific combinations of fare types.
export interface FareCategoryCodesTypeI6 {
    
    $attributes: FareCategoryCodesTypeI6Attributes
    
    // Fare type
    fareType: string
    
}

export interface FareCategoryCodesTypeI6Attributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextType6 {
    
    $attributes: InteractiveFreeTextType6Attributes
    
    // Free text qualification
    freeTextQualification: Array<FreeTextQualificationType7>
    
    // Free text
    freeText: Array<string>
    
}

export interface InteractiveFreeTextType6Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationType7 {
    
    $attributes: FreeTextQualificationType7Attributes
    
    // Text subject qualifier
    textSubjectQualifier: string
    
    // Add code sets in the list
    informationType: Array<string>
    
}

export interface FreeTextQualificationType7Attributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface FareProductDataType1 {
    
    $attributes: FareProductDataType1Attributes
    
    // Fare product reference and number of passengers involved
    generalAndIdInfo: SegmentRepetitionControlType1
    
    // Passenger references
    specificTravellerDetails: Array<SpecificTravellerTypeI7>
    
    // Passenger type information group
    passengerTypeInfoGroup: Array<PassengerDetailsInfoType1>
    
}

export interface FareProductDataType1Attributes {
    
}

// To indicate the number of segment group repetitions.
export interface SegmentRepetitionControlType1 {
    
    $attributes: SegmentRepetitionControlType1Attributes
    
    // Segment control details
    segmentControlDetails: Array<SegmentRepetitionControlDetailsType1>
    
}

export interface SegmentRepetitionControlType1Attributes {
    
}

// Information about the number of selection segments to be processed.
export interface SegmentRepetitionControlDetailsType1 {
    
    $attributes: SegmentRepetitionControlDetailsType1Attributes
    
    // Number of pax
    numberOfPAx: Array<number>
    
}

export interface SegmentRepetitionControlDetailsType1Attributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerTypeI7 {
    
    $attributes: SpecificTravellerTypeI7Attributes
    
    // Traveller details
    travellerDetails: Array<SpecificTravellerDetailsTypeI7>
    
    
    DummyNET: string
    
}

export interface SpecificTravellerTypeI7Attributes {
    
}

// To specify additional details about a particular traveller.
export interface SpecificTravellerDetailsTypeI7 {
    
    $attributes: SpecificTravellerDetailsTypeI7Attributes
    
    // Reference number
    referenceNumber: Array<string>
    
    // Number of passengers in range
    measurementValue: Array<number>
    
    // Surname
    surname: Array<string>
    
    // First name
    firstName: Array<string>
    
}

export interface SpecificTravellerDetailsTypeI7Attributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface PassengerDetailsInfoType1 {
    
    $attributes: PassengerDetailsInfoType1Attributes
    
    // Passenger type information
    fareInfo: FareInformationType10
    
    // Pricing Unit identification information
    pricingUnitIdentInfo: Array<NumberOfUnitsType6>
    
    // Pricing and ticketing significant information for the fare product
    pricingticketingDetails: Array<PricingTicketingDetailsType_163190S1>
    
    // Fare calculation total amount and currency ; and conversion details into origin currency
    conversionRate: Array<ConversionRateType_163191S1>
    
    // Different levels of amount for the fare product: base amount, equivalent amount, tax amount, total amount
    monetaryInfo: Array<MonetaryInformationType22>
    
    // Tax details information group
    taxDetailsInfoGroup: Array<TaxDetailsInfoType1>
    
    // Fare components information group
    fareComponentsInfoGroup: Array<FareComponentsInfoType1>
    
    // Proposed service information
    proposedServiceInformation: Array<ProposedServiceInfoType1>
    
}

export interface PassengerDetailsInfoType1Attributes {
    
}

// To specify fare details.
export interface FareInformationType10 {
    
    $attributes: FareInformationType10Attributes
    
    // Value qualifier
    valueQualifier: Array<string>
    
}

export interface FareInformationType10Attributes {
    
}

// To specify the number of units required.
export interface NumberOfUnitsType6 {
    
    $attributes: NumberOfUnitsType6Attributes
    
    // Quantity details
    quantityDetails: Array<NumberOfUnitDetailsType9>
    
}

export interface NumberOfUnitsType6Attributes {
    
}

// Identification of number of units and its purpose.
export interface NumberOfUnitDetailsType9 {
    
    $attributes: NumberOfUnitDetailsType9Attributes
    
    // Number of unit
    numberOfUnit: Array<number>
    
    // Unit qualifier
    unitQualifier: Array<string>
    
}

export interface NumberOfUnitDetailsType9Attributes {
    
}

// To convey pricing and date information related to a ticket.
export interface PricingTicketingDetailsType_163190S1 {
    
    $attributes: PricingTicketingDetailsType_163190S1Attributes
    
    // Contains the options used to select Fares
    priceTicketDetails: Array<PricingTicketingInformationType7>
    
    // Price tariff type
    priceTariffType: Array<string>
    
}

export interface PricingTicketingDetailsType_163190S1Attributes {
    
}

// To specify details of a conversion rate related to an amount.
export interface ConversionRateType_163191S1 {
    
    $attributes: ConversionRateType_163191S1Attributes
    
    // Conversion rate details
    conversionRateDetails: Array<ConversionRateDetailsTypeI9>
    
}

export interface ConversionRateType_163191S1Attributes {
    
}

// To specify the conversion rate and the monetary amount.
export interface ConversionRateDetailsTypeI9 {
    
    $attributes: ConversionRateDetailsTypeI9Attributes
    
    // Conversion type
    conversionType: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface ConversionRateDetailsTypeI9Attributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface TaxDetailsInfoType1 {
    
    $attributes: TaxDetailsInfoType1Attributes
    
    // Tax details list information
    taxDetailsListInfo: TaxDetailsType_163207S1
    
    // Tax sub details for ZP and PFC
    elementaryTaxSubDetails: Array<MonetaryInformationType_163167S1>
    
}

export interface TaxDetailsInfoType1Attributes {
    
}

// Created by importexport 02/10/2002 16:43
export interface FareComponentsInfoType1 {
    
    $attributes: FareComponentsInfoType1Attributes
    
    // Construction context information
    constructionContextInfo: FareComponentInformationType1
    
    // Pricing unit information group
    pricingUnitInfoGroup: Array<PricingUnitDataType1>
    
}

export interface FareComponentsInfoType1Attributes {
    
}

// To specify fare component data.
export interface FareComponentInformationType1 {
    
    $attributes: FareComponentInformationType1Attributes
    
    // Fare component details
    fareComponentDetails: Array<FareComponentDetailsType7>
    
    // Ticket document number
    ticketNumber: Array<string>
    
}

export interface FareComponentInformationType1Attributes {
    
}


export interface FareComponentDetailsType7 {
    
    $attributes: FareComponentDetailsType7Attributes
    
    // Type of data _ fare calc or exchanged residual fare data
    dataType: Array<string>
    
    // Fare component count
    count: Array<number>
    
    // Price quote date
    pricingDate: Array<string>
    
    // Account code
    accountCode: Array<string>
    
    // Input designator
    inputDesignator: Array<string>
    
}

export interface FareComponentDetailsType7Attributes {
    
}


export interface PricingUnitDataType1 {
    
    $attributes: PricingUnitDataType1Attributes
    
    // Pricing Unit identification information
    pricingUnitIdentInfo: NumberOfUnitsType6
    
    // Fare component information
    fareComponentInfo: Array<FareComponentInfoType1>
    
}

export interface PricingUnitDataType1Attributes {
    
}


export interface FareComponentInfoType1 {
    
    $attributes: FareComponentInfoType1Attributes
    
    // Fare component identification information
    componentIdentInfo: ItemNumberType_163213S1
    
    // Sub itinerary information
    subItineraryInfo: Array<SubItineraryInfoType1>
    
    // Fare component monetary information
    monetaryInfo: Array<MonetaryInformationType_67627S1>
    
    // Fare rules information
    fareComponentFareRulesInfo: Array<FareRulesInformationTypeI3>
    
    // Fare qualifier details
    fareQualifierDetails: Array<FareQualifierDetailsType_163215S1>
    
    // Corporate Info
    corporateInfo: Array<CorporateFareInformationType6>
    
    // Matched sequence number
    fareComponentMatchedSeqInfo: Array<ReferenceInfoType30>
    
    // Parameter value information
    fareComponentParameterValue: Array<NumberOfUnitsType_163220S1>
    
    // Range Information
    rangeInfo: Array<RangeDetailsType3>
    
    // Rule buster information group
    fareComponentRuleInfoGroup: Array<FareComponentRuleInfoType1>
    
    // Product information: RBD
    productInfo: Array<ProductInformationType7>
    
    // Service attributes details
    fareComponentServiceAttributes: Array<AttributeType21>
    
    // Fare calculation currency
    fareComponentConversionRate: Array<ConversionRateType_163222S1>
    
    // Fee application
    fareComponentFeeInfo: Array<SpecificDataInformationType9>
    
    // Commercial description
    fareComponentServiceDescInfo: Array<InteractiveFreeTextType6>
    
    // Fare component pricing and ticketing details
    pricingTicketingDetails: PricingTicketingDetailsType_163225S1
    
}

export interface FareComponentInfoType1Attributes {
    
}

// To specify an item number
export interface ItemNumberType_163213S1 {
    
    $attributes: ItemNumberType_163213S1Attributes
    
    // Item number details
    itemNumberDetails: Array<ItemNumberIdentificationType_231296C1>
    
}

export interface ItemNumberType_163213S1Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType_231296C1 {
    
    $attributes: ItemNumberIdentificationType_231296C1Attributes
    
    // Fare component number
    number: Array<string>
    
}

export interface ItemNumberIdentificationType_231296C1Attributes {
    
}


export interface SubItineraryInfoType1 {
    
    $attributes: SubItineraryInfoType1Attributes
    
    // List of the requested portions
    proposedServicePortionRef: ActionDetailsType3
    
    // Travel product information
    travelProductInfo: Array<TravelProductInformationType_163210S1>
    
}

export interface SubItineraryInfoType1Attributes {
    
}

// To specify the action that should be taken on a selected reference number.
export interface ActionDetailsType3 {
    
    $attributes: ActionDetailsType3Attributes
    
    // Number of items details
    numberOfItemsDetails: Array<ProcessingInformationType3>
    
    // Range of segments
    lastItemsDetails: Array<ReferenceType3>
    
}

export interface ActionDetailsType3Attributes {
    
}

// To identify the action to be taken and the selection criteria.
export interface ProcessingInformationType3 {
    
    $attributes: ProcessingInformationType3Attributes
    
    // Reference qualifier
    referenceQualifier: Array<string>
    
}

export interface ProcessingInformationType3Attributes {
    
}

// To specify which number in a sequence of references and/or the reference number.
export interface ReferenceType3 {
    
    $attributes: ReferenceType3Attributes
    
    // Reference of segment starting range
    firstItemIdentifier: Array<number>
    
    // Reference of segment ending range
    lastItemIdentifier: Array<number>
    
}

export interface ReferenceType3Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationType_163210S1 {
    
    $attributes: TravelProductInformationType_163210S1Attributes
    
    // Flight date
    flightDate: Array<ProductDateTimeType10>
    
    // Board point details
    boardPointDetails: Array<LocationType7>
    
    // Off point details
    offpointDetails: Array<LocationType7>
    
    // Company details
    companyDetails: Array<CompanyIdentificationType_231301C1>
    
    // Flight identification
    flightIdentification: Array<ProductIdentificationDetailsType9>
    
    // Flight type details
    flightTypeDetails: Array<ProductTypeDetailsType18>
    
    // Item number
    itemNumber: Array<number>
    
}

export interface TravelProductInformationType_163210S1Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeType10 {
    
    $attributes: ProductDateTimeType10Attributes
    
    // Departure date
    departureDate: Array<string>
    
    // Departure time
    departureTime: Array<string>
    
    // Arrival date
    arrivalDate: Array<string>
    
    // Arrival time
    arrivalTime: Array<string>
    
    // Date variation
    dateVariation: Array<number>
    
}

export interface ProductDateTimeType10Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationType_231301C1 {
    
    $attributes: CompanyIdentificationType_231301C1Attributes
    
    // Marketing company
    marketingCompany: Array<string>
    
}

export interface CompanyIdentificationType_231301C1Attributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsType9 {
    
    $attributes: ProductIdentificationDetailsType9Attributes
    
    // Flight number
    flightNumber: string
    
    // Booking class
    bookingClass: Array<string>
    
    // Operational suffix
    operationalSuffix: Array<string>
    
    // Modifier
    modifier: Array<string>
    
}

export interface ProductIdentificationDetailsType9Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType_67627S1 {
    
    $attributes: MonetaryInformationType_67627S1Attributes
    
    // Monetary details
    monetaryDetails: Array<MonetaryInformationDetailsType20>
    
}

export interface MonetaryInformationType_67627S1Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType20 {
    
    $attributes: MonetaryInformationDetailsType20Attributes
    
    // Type qualifier
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
    // Location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsType20Attributes {
    
}

// To specify the tariff, fare supplier, and paragraph number for a fare rule.
export interface FareRulesInformationTypeI3 {
    
    $attributes: FareRulesInformationTypeI3Attributes
    
    // Tariff class id
    tariffClassId: Array<string>
    
    // Rule section id
    ruleSectionId: Array<string>
    
}

export interface FareRulesInformationTypeI3Attributes {
    
}

// To specify the details which qualify a fare
export interface FareQualifierDetailsType_163215S1 {
    
    $attributes: FareQualifierDetailsType_163215S1Attributes
    
    // Fare details
    fareDetails: Array<FareDetailsTypeI7>
    
}

export interface FareQualifierDetailsType_163215S1Attributes {
    
}

// To specify the fare type and related information.
export interface FareDetailsTypeI7 {
    
    $attributes: FareDetailsTypeI7Attributes
    
    // Qualifier
    qualifier: Array<string>
    
}

export interface FareDetailsTypeI7Attributes {
    
}

// To specify corporate fare information
export interface CorporateFareInformationType6 {
    
    $attributes: CorporateFareInformationType6Attributes
    
    // Corporate fare identifiers
    corporateFareIdentifiers: CorporateFareIdentifiersType3
    
}

export interface CorporateFareInformationType6Attributes {
    
}


export interface CorporateFareIdentifiersType3 {
    
    $attributes: CorporateFareIdentifiersType3Attributes
    
    // Indicates the type of corporate fares requested
    fareQualifier: Array<string>
    
    // Corporate contract number or name
    identifyNumber: Array<string>
    
}

export interface CorporateFareIdentifiersType3Attributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInfoType30 {
    
    $attributes: ReferenceInfoType30Attributes
    
    // Reference details
    referenceDetails: Array<ReferencingDetailsType31>
    
}

export interface ReferenceInfoType30Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType31 {
    
    $attributes: ReferencingDetailsType31Attributes
    
    // Value
    value: Array<string>
    
}

export interface ReferencingDetailsType31Attributes {
    
}

// To specify the number of units required.
export interface NumberOfUnitsType_163220S1 {
    
    $attributes: NumberOfUnitsType_163220S1Attributes
    
    // Quantity details
    quantityDetails: Array<NumberOfUnitDetailsType_231306C1>
    
}

export interface NumberOfUnitsType_163220S1Attributes {
    
}

// Identification of number of units and its purpose.
export interface NumberOfUnitDetailsType_231306C1 {
    
    $attributes: NumberOfUnitDetailsType_231306C1Attributes
    
    // Number of unit
    numberOfUnit: Array<number>
    
    // Unit qualifier
    unitQualifier: Array<string>
    
}

export interface NumberOfUnitDetailsType_231306C1Attributes {
    
}

// To identify a range.
export interface RangeDetailsType3 {
    
    $attributes: RangeDetailsType3Attributes
    
    // Range qualifier
    rangeQualifier: Array<string>
    
    // Range details
    rangeDetails: Array<RangeType3>
    
}

export interface RangeDetailsType3Attributes {
    
}

// Range minimum and maximum limits.
export interface RangeType3 {
    
    $attributes: RangeType3Attributes
    
    // Data type
    dataType: Array<string>
    
    // Min
    min: Array<number>
    
    // Max
    max: Array<number>
    
}

export interface RangeType3Attributes {
    
}


export interface FareComponentRuleInfoType1 {
    
    $attributes: FareComponentRuleInfoType1Attributes
    
    // Information related to the segment
    fareComponentSegmentInfo: TravellerInsuranceInformationType_163226S1
    
    // Fare rules information
    fareComponentFareRulesInfo: Array<FareRulesInformationTypeI3>
    
    // Rule number information
    fareComponentRuleNumberInfo: Array<ReferenceInfoType_163228S1>
    
}

export interface FareComponentRuleInfoType1Attributes {
    
}

// To specify a segment of an itinerary and related details.
export interface TravellerInsuranceInformationType_163226S1 {
    
    $attributes: TravellerInsuranceInformationType_163226S1Attributes
    
    // Segment item number
    segmentItemNumber: Array<string>
    
}

export interface TravellerInsuranceInformationType_163226S1Attributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInfoType_163228S1 {
    
    $attributes: ReferenceInfoType_163228S1Attributes
    
    // Reference details
    referenceDetails: Array<ReferencingDetailsType_231312C1>
    
}

export interface ReferenceInfoType_163228S1Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType_231312C1 {
    
    $attributes: ReferencingDetailsType_231312C1Attributes
    
    // Car/value code, ...
    type: Array<string>
    
    // Value
    value: Array<string>
    
}

export interface ReferencingDetailsType_231312C1Attributes {
    
}

// To specify details related to routing status of a product.
export interface ProductInformationType7 {
    
    $attributes: ProductInformationType7Attributes
    
    // Product details qualifier
    productDetailsQualifier: Array<string>
    
    // Booking class details
    bookingClassDetails: Array<ProductDetailsType9>
    
}

export interface ProductInformationType7Attributes {
    
}

// To specify availability and additional services for a product class.
export interface ProductDetailsType9 {
    
    $attributes: ProductDetailsType9Attributes
    
    // Reservation booking designator
    designator: string
    
}

export interface ProductDetailsType9Attributes {
    
}

// To specify details of a conversion rate related to an amount.
export interface ConversionRateType_163222S1 {
    
    $attributes: ConversionRateType_163222S1Attributes
    
    // Conversion rate details
    conversionRateDetails: Array<ConversionRateDetailsTypeI_231308C1>
    
}

export interface ConversionRateType_163222S1Attributes {
    
}

// To specify the conversion rate and the monetary amount.
export interface ConversionRateDetailsTypeI_231308C1 {
    
    $attributes: ConversionRateDetailsTypeI_231308C1Attributes
    
    // Currency
    currency: Array<string>
    
    // Conversion rate
    conversionRate: Array<number>
    
}

export interface ConversionRateDetailsTypeI_231308C1Attributes {
    
}

// To convey pricing and date information related to a ticket.
export interface PricingTicketingDetailsType_163225S1 {
    
    $attributes: PricingTicketingDetailsType_163225S1Attributes
    
    // Product date time details
    productDateTimeDetails: Array<ProductDateTimeTypeI18>
    
    // Company details
    companyDetails: Array<CompanyIdentificationTypeI31>
    
    // Company number details
    companyNumberDetails: Array<CompanyIdentificationNumbersTypeI3>
    
}

export interface PricingTicketingDetailsType_163225S1Attributes {
    
}

// To specify the dates and times associated with a product.
export interface ProductDateTimeTypeI18 {
    
    $attributes: ProductDateTimeTypeI18Attributes
    
    // Departure date
    departureDate: Array<string>
    
}

export interface ProductDateTimeTypeI18Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI31 {
    
    $attributes: CompanyIdentificationTypeI31Attributes
    
    // Marketing company
    marketingCompany: Array<string>
    
    // Operating company
    operatingCompany: Array<string>
    
    // Other company
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI31Attributes {
    
}

// Number to identify a company and any associated companies.
export interface CompanyIdentificationNumbersTypeI3 {
    
    $attributes: CompanyIdentificationNumbersTypeI3Attributes
    
    // Identifier
    identifier: string
    
    // Other identifier
    otherIdentifier: Array<string>
    
}

export interface CompanyIdentificationNumbersTypeI3Attributes {
    
}


export interface ProposedServiceInfoType1 {
    
    $attributes: ProposedServiceInfoType1Attributes
    
    // Service attributes details
    servicePricingAggregation: AttributeType_67628S1
    
    // Parameter value information
    serviceParameterValueInfo: Array<NumberOfUnitsType6>
    
    // Date and time aggregation
    dateAndTimeAggregation: Array<DateAndTimeInformationType_67653S1>
    
    // Aggregated account code
    corporateInfo: Array<CorporateFareInformationType6>
    
    // List of proposed service details per requested portion
    proposedServiceReqPortionInfo: Array<PortionProposedServiceInfoType1>
    
}

export interface ProposedServiceInfoType1Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_67628S1 {
    
    $attributes: AttributeType_67628S1Attributes
    
    // Criteria Set Type
    attributeQualifier: Array<string>
    
    // Criteria details
    attributeDetails: Array<AttributeInformationType7>
    
}

export interface AttributeType_67628S1Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeInformationType_67653S1 {
    
    $attributes: DateAndTimeInformationType_67653S1Attributes
    
    // Date and time details
    dateAndTimeDetails: Array<DateAndTimeDetailsType10>
    
}

export interface DateAndTimeInformationType_67653S1Attributes {
    
}

// To provide date and time details relative to flight movements.
export interface DateAndTimeDetailsType10 {
    
    $attributes: DateAndTimeDetailsType10Attributes
    
    // Qualifier
    qualifier: Array<string>
    
    // Date
    date: Array<string>
    
    // Time
    time: Array<string>
    
    // Other qualifier
    otherQualifier: Array<string>
    
    // Other time
    otherTime: Array<string>
    
    // Movement type
    movementType: Array<string>
    
    // Location
    location: Array<string>
    
}

export interface DateAndTimeDetailsType10Attributes {
    
}


export interface PortionProposedServiceInfoType1 {
    
    $attributes: PortionProposedServiceInfoType1Attributes
    
    // List of the requested portions
    proposedServicePortionRef: ActionDetailsType3
    
    // List of proposed service details per segments of the requested portion
    proposedServiceDetailsGroup: Array<ProposedServiceDetailsType1>
    
}

export interface PortionProposedServiceInfoType1Attributes {
    
}


export interface ProposedServiceDetailsType1 {
    
    $attributes: ProposedServiceDetailsType1Attributes
    
    // Proposed service details
    proposedServiceDetails: SpecialRequirementsDetailsType_163236S1
    
    // Proposed service reference information
    proposedServiceRefInformation: Array<ReferenceInfoType_163228S1>
    
    // Upgrade to RBD
    proposedServiceProductInfo: Array<ProductInformationType_163234S1>
    
    // Upgrade to cabin
    proposedServiceParameters: Array<SeatRequestParametersTypeI5>
    
}

export interface ProposedServiceDetailsType1Attributes {
    
}

// To specify special requests or service s information relating to a traveller
export interface SpecialRequirementsDetailsType_163236S1 {
    
    $attributes: SpecialRequirementsDetailsType_163236S1Attributes
    
    // To specify details of the Service Requirement of the customer
    specialRequirementsDetails: SpecialRequirementsTypeDetailsType_231319C1
    
    // To specify the Service Seat Requirement
    specialRequirementsDataDetails: Array<SpecialRequirementsDataDetailsType8>
    
}

export interface SpecialRequirementsDetailsType_163236S1Attributes {
    
}


export interface SpecialRequirementsTypeDetailsType_231319C1 {
    
    $attributes: SpecialRequirementsTypeDetailsType_231319C1Attributes
    
    // To specify the Service Classification of the Service Requirement.
    specialRequirementType: string
    
    // To specify the number of items involved
    numberOfInstances: Array<number>
    
    // To specify the first location where the service is applied
    firstGeographicalPoint: Array<string>
    
    // To specify the second location where the service is applied
    secondGeographicalPoint: Array<string>
    
}

export interface SpecialRequirementsTypeDetailsType_231319C1Attributes {
    
}

// Special requirements data details
export interface SpecialRequirementsDataDetailsType8 {
    
    $attributes: SpecialRequirementsDataDetailsType8Attributes
    
    // Seat number
    specialRequirementData: Array<string>
    
    // Seat characteristics
    seatCharacteristics: Array<string>
    
}

export interface SpecialRequirementsDataDetailsType8Attributes {
    
}

// To specify the selection criteria for a seat map request.
export interface SeatRequestParametersTypeI5 {
    
    $attributes: SeatRequestParametersTypeI5Attributes
    
    // Generic details
    genericDetails: Array<GenericDetailsTypeI5>
    
}

export interface SeatRequestParametersTypeI5Attributes {
    
}

// To identify the type of seat requested.
export interface GenericDetailsTypeI5 {
    
    $attributes: GenericDetailsTypeI5Attributes
    
    // Compartment designator
    compartmentDesignator: Array<string>
    
}

export interface GenericDetailsTypeI5Attributes {
    
}


export interface ServiceRequestRejectType1 {
    
    $attributes: ServiceRequestRejectType1Attributes
    
    // Application error code
    serviceRequestRejectErrorCode: ApplicationErrorInformationTypeI4
    
    // Free text info in case of error
    serviceRequestErrorFreeText: Array<InteractiveFreeTextTypeI13>
    
}

export interface ServiceRequestRejectType1Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationTypeI4 {
    
    $attributes: ApplicationErrorInformationTypeI4Attributes
    
    // Application Error Details
    errorDetails: ApplicationErrorDetailTypeI4
    
}

export interface ApplicationErrorInformationTypeI4Attributes {
    
}

// Code assigned by the recipient of a message to indicate a data validation error condition.
export interface ApplicationErrorDetailTypeI4 {
    
    $attributes: ApplicationErrorDetailTypeI4Attributes
    
    // Error coded
    errorCode: string
    
}

export interface ApplicationErrorDetailTypeI4Attributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextTypeI13 {
    
    $attributes: InteractiveFreeTextTypeI13Attributes
    
    // Contains the Warning Messages related to the entire processing
    freeTextQualification: Array<FreeTextQualificationTypeI13>
    
    // Text associated to the code 9980
    freeText: Array<string>
    
}

export interface InteractiveFreeTextTypeI13Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationTypeI13 {
    
    $attributes: FreeTextQualificationTypeI13Attributes
    
    // Specifies if text is coded or free
    textSubjectQualifier: string
    
    // Warning Message coded
    informationType: Array<string>
    
}

export interface FreeTextQualificationTypeI13Attributes {
    
}


export interface Ticket_DisplayTSMPType {
    
    $attributes: Ticket_DisplayTSMPTypeAttributes
    
    // Tattoo of the TSM-P to display.
    tattooOfTSM: ItemReferencesAndVersionsType18
    
}

export interface Ticket_DisplayTSMPTypeAttributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType18 {
    
    $attributes: ItemReferencesAndVersionsType18Attributes
    
    // The value of the reference
    uniqueReference: string
    
}

export interface ItemReferencesAndVersionsType18Attributes {
    
}


export interface Ticket_DisplayTSMPReplyType {
    
    $attributes: Ticket_DisplayTSMPReplyTypeAttributes
    
    // Error or warning returned by the application.
    errorWarningGroup: Array<ErrorGroupType15>
    
    // TSM-P full image
    detailsOfTSM: Array<TSMPdataType>
    
}

export interface Ticket_DisplayTSMPReplyTypeAttributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType15 {
    
    $attributes: ErrorGroupType15Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType20
    
    // The description of warning or error.
    errorWarningDescription: Array<FreeTextInformationType20>
    
}

export interface ErrorGroupType15Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType20 {
    
    $attributes: ApplicationErrorInformationType20Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType18
    
}

export interface ApplicationErrorInformationType20Attributes {
    
}


export interface ApplicationErrorDetailType18 {
    
    $attributes: ApplicationErrorDetailType18Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType18Attributes {
    
}

// This segment is used to convey the free text
export interface FreeTextInformationType20 {
    
    $attributes: FreeTextInformationType20Attributes
    
    // Details about the free text.
    freeTextDetails: FreeTextDetailsType20
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType20Attributes {
    
}


export interface FreeTextDetailsType20 {
    
    $attributes: FreeTextDetailsType20Attributes
    
    // Qualifier of the free text
    textSubjectQualifier: string
    
    // Whenever possible the language in which the free text is written.
    language: Array<string>
    
    // Source: - M (for Manual) if the free text comes from GUI or live agent entry, - S (default value) if the free text comes from another system
    source: string
    
    // Encoding: - 1 for ASCII 7 bit (no national characters)
    encoding: string
    
}

export interface FreeTextDetailsType20Attributes {
    
}

// TSM-P full content
export interface TSMPdataType {
    
    $attributes: TSMPdataTypeAttributes
    
    // Tattoo of the passenger to which the TSM-P is linked.
    passengerTattoo: ReferenceInformationType8
    
    // Tattoo of the TSM-P.
    tattooOfTSM: ItemReferencesAndVersionsType19
    
    // Validating carrier code.
    validatingCarrier: Array<TransportIdentifierTypeI>
    
    // Tattoos of fare elements of this TSM-P (FO, FM, FT, FP, FE, FD, FZ and FZ2)
    fareTattoos: Array<ReferenceInformationTypeI12>
    
    // Name of the passenger
    passengerName: TravellerInformationTypeI6
    
    // Reason For Issuance Codes (RFIC) and their descriptions: - electronic RFIC [qualifier=E] - Paper MCO RFIC [qualifier=P] - IATA RFIC (for eMCO) [qualifier=I]
    rfics: Array<AttributeType22>
    
    // - TSM-P type (key=TSMP): standalone (S) or associated (A) - Fare Calculation Pricing indicator (FCP) - Fare Calculation Reporting indicator (FCR) - International indicator (key=INT, values=D/I/E/F/B/M)
    tsmTypeAndIndicators: Array<CodedAttributeType17>
    
    // - Change flag (CHF) - TSM issued indicator (ISD) - Confidential indicator (CNF) - Issuance Required (IRQ)
    tsmFlags: Array<StatusTypeI4>
    
    // - Base fare + issue identifier (F/R/I/Y/U/W) - Net fare (H) - Total amount (T) - Equivalent amount (E) - Refundable amount (N) - Exchange value fare (X)
    monetaryInformation: Array<MonetaryInformationTypeI13>
    
    // The bank exchange rate
    bankExchangeRate: Array<ConversionRateTypeI8>
    
    // Details of taxes: - old/new/refundable (O/X/R) taxes indicator - currency - tax amount - iso tax code - nature tax code We can have 198 taxes maximum: - 99 old and new - + 99 refundable
    taxInformation: Array<TaxTypeI7>
    
    // - Fare Calculation (FCL) - Document remarks (RMK) - Reason for waiving (RFW) - Accounting Data (ACD)
    freeTextData: Array<FreeTextInformationType20>
    
    // Details of the creator of the TSM-P: - office id (in 1st 9902 data element) - agent sign (in 9904 data element)
    creatorDetails: UserIdentificationType11
    
    // TSM-P creation date (TSM)
    creationDate: StructuredDateTimeInformationType20
    
    
    location: Array<PlaceLocationIdentificationType16>
    
    // Coupons of the TSM-P
    couponsDetails: Array<couponsDetailsType>
    
}

export interface TSMPdataTypeAttributes {
    
}

// Used to convey the passenger references.
export interface ReferenceInformationType8 {
    
    $attributes: ReferenceInformationType8Attributes
    
    // Used to convey the passenger tatoo or display number.
    passengerReference: ReferencingDetailsTypeI17
    
}

export interface ReferenceInformationType8Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI17 {
    
    $attributes: ReferencingDetailsTypeI17Attributes
    
    // Qualifier of the tattoo
    type: string
    
    // Tattoo
    value: string
    
}

export interface ReferencingDetailsTypeI17Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType19 {
    
    $attributes: ItemReferencesAndVersionsType19Attributes
    
    // The value of the reference
    uniqueReference: string
    
}

export interface ItemReferencesAndVersionsType19Attributes {
    
}

// To specify transport service(s) or to specify transport service(s) which is/are to be updated or cancelled.
export interface TransportIdentifierTypeI {
    
    $attributes: TransportIdentifierTypeIAttributes
    
    // Details of the airline
    companyIdentification: CompanyIdentificationTypeI32
    
}

export interface TransportIdentifierTypeIAttributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI32 {
    
    $attributes: CompanyIdentificationTypeI32Attributes
    
    // Airline code
    otherCompany: string
    
}

export interface CompanyIdentificationTypeI32Attributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInformationTypeI12 {
    
    $attributes: ReferenceInformationTypeI12Attributes
    
    // Details of the reference
    referenceDetails: ReferencingDetailsTypeI17
    
}

export interface ReferenceInformationTypeI12Attributes {
    
}

// To specify a traveler(s) and personal details relating to the traveler(s).
export interface TravellerInformationTypeI6 {
    
    $attributes: TravellerInformationTypeI6Attributes
    
    // Details of the passenger
    paxDetails: TravellerSurnameInformationTypeI7
    
    // Details of the passenger
    otherPaxDetails: Array<TravellerDetailsTypeI9>
    
}

export interface TravellerInformationTypeI6Attributes {
    
}

// Identification of the surname of a traveller, the type of traveller, number of travellers per surname and the action to be taken.
export interface TravellerSurnameInformationTypeI7 {
    
    $attributes: TravellerSurnameInformationTypeI7Attributes
    
    // Surname of the passenger
    surname: string
    
    // Type of the passenger
    type: Array<string>
    
}

export interface TravellerSurnameInformationTypeI7Attributes {
    
}

// To identify the given/first name and the title of a traveller and the traveller type.
export interface TravellerDetailsTypeI9 {
    
    $attributes: TravellerDetailsTypeI9Attributes
    
    // Given name of the passenger
    givenName: Array<string>
    
    // Title of the passenger
    title: Array<string>
    
}

export interface TravellerDetailsTypeI9Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType22 {
    
    $attributes: AttributeType22Attributes
    
    // Qualifier identifying the RFIC
    criteriaSetType: string
    
    // Details for the message criteria (name, value).
    criteriaDetails: AttributeInformationTypeU16
    
}

export interface AttributeType22Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU16 {
    
    $attributes: AttributeInformationTypeU16Attributes
    
    // The Reason For Issuance Code or Subcode (RFIC/RFISC).
    attributeType: string
    
    // The RFIC or RFISC description.
    attributeDescription: string
    
}

export interface AttributeInformationTypeU16Attributes {
    
}

// Used to have tag value without code list for tag
export interface CodedAttributeType17 {
    
    $attributes: CodedAttributeType17Attributes
    
    // provides details for the Attribute
    attributeDetails: CodedAttributeInformationType18
    
}

export interface CodedAttributeType17Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType18 {
    
    $attributes: CodedAttributeInformationType18Attributes
    
    // provides the attribute Type
    attributeType: string
    
    // provides a description for the attribute
    attributeDescription: string
    
}

export interface CodedAttributeInformationType18Attributes {
    
}

// To identify a status and related information.
export interface StatusTypeI4 {
    
    $attributes: StatusTypeI4Attributes
    
    // Details of the indicator
    statusDetails: StatusDetailsTypeI6
    
}

export interface StatusTypeI4Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI6 {
    
    $attributes: StatusDetailsTypeI6Attributes
    
    // Qualifier of the indicator.
    indicator: string
    
    // Value of the indicator.
    action: string
    
}

export interface StatusDetailsTypeI6Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI13 {
    
    $attributes: MonetaryInformationTypeI13Attributes
    
    // Details of the monetaty amount
    monetaryDetails: MonetaryInformationDetailsTypeI15
    
}

export interface MonetaryInformationTypeI13Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI15 {
    
    $attributes: MonetaryInformationDetailsTypeI15Attributes
    
    // Qualifier of the amount.
    typeQualifier: string
    
    // Amount
    amount: string
    
    // Currency of the amount
    currency: string
    
}

export interface MonetaryInformationDetailsTypeI15Attributes {
    
}

// To specify details of a conversion rate related to an amount.
export interface ConversionRateTypeI8 {
    
    $attributes: ConversionRateTypeI8Attributes
    
    // The bank exchange rate
    conversionRateDetails: ConversionRateDetailsTypeI10
    
}

export interface ConversionRateTypeI8Attributes {
    
}

// To specify the conversion rate and the monetary amount.
export interface ConversionRateDetailsTypeI10 {
    
    $attributes: ConversionRateDetailsTypeI10Attributes
    
    // The bank exchange rate
    pricingAmount: Array<number>
    
}

export interface ConversionRateDetailsTypeI10Attributes {
    
}

// To specify details relating to tax(es).
export interface TaxTypeI7 {
    
    $attributes: TaxTypeI7Attributes
    
    // Tax category to distinct old from new taxes
    taxCategory: string
    
    // Details of tax
    taxDetails: TaxDetailsTypeI9
    
}

export interface TaxTypeI7Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsTypeI9 {
    
    $attributes: TaxDetailsTypeI9Attributes
    
    // Tax amount
    rate: string
    
    // ISO tax code
    countryCode: string
    
    // Currency code
    currencyCode: string
    
    // Nature tax code
    type: Array<string>
    
}

export interface TaxDetailsTypeI9Attributes {
    
}

// This segment is used to identify a user.
export interface UserIdentificationType11 {
    
    $attributes: UserIdentificationType11Attributes
    
    // Originator Identification Details
    originIdentification: OriginatorIdentificationDetailsTypeI15
    
    // Used to specify which kind of info is given in DE 9900.
    originatorTypeCode: Array<string>
    
    // Authority code of the requester If Sign Id : (Area Code)+(Numeric Sine)+(Agent Initials)+(Duty Code) ex : B0001XVSU).
    originator: Array<string>
    
}

export interface UserIdentificationType11Attributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI15 {
    
    $attributes: OriginatorIdentificationDetailsTypeI15Attributes
    
    // ATA/IATA Id number or pseudo IATA number or ERSP.
    originatorId: Array<number>
    
    // First In-House Identifier. Office/Agency code assigned by the reservation system. Office Id in AMAdeus.
    inHouseIdentification1: Array<string>
    
    // Second In-House Identifier.
    inHouseIdentification2: Array<string>
    
    // Third in-house identifier
    inHouseIdentification3: Array<string>
    
}

export interface OriginatorIdentificationDetailsTypeI15Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType20 {
    
    $attributes: StructuredDateTimeInformationType20Attributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - Impacted period - Departure date - Estimated arrival date and time
    businessSemantic: string
    
    // Convey date and/or time.
    dateTime: StructuredDateTimeType23
    
}

export interface StructuredDateTimeInformationType20Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType23 {
    
    $attributes: StructuredDateTimeType23Attributes
    
    // Year number.
    year: string
    
    // Month number in the year ( begins to 1 )
    month: string
    
    // Day number in the month ( begins to 1 )
    day: string
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
    // Seconds between 0 and 59
    seconds: Array<number>
    
    // Milliseconds between 0 and 999.
    milliseconds: Array<number>
    
}

export interface StructuredDateTimeType23Attributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationType16 {
    
    $attributes: PlaceLocationIdentificationType16Attributes
    
    
    locationType: string
    
    
    locationDescription: LocationIdentificationBatchType7
    
}

export interface PlaceLocationIdentificationType16Attributes {
    
}

// Identification of a location by code or name
export interface LocationIdentificationBatchType7 {
    
    $attributes: LocationIdentificationBatchType7Attributes
    
    
    code: string
    
}

export interface LocationIdentificationBatchType7Attributes {
    
}


export interface couponsDetailsType {
    
    $attributes: couponsDetailsTypeAttributes
    
    // Tattoo of the service identifying the coupon.
    productTattoo: ReferenceInformationTypeI12
    
    // The Reason For Issuance Subcode (RFISC) and its description
    rfisc: Array<AttributeType22>
    
    // Fee owner
    feeOwner: Array<TransportIdentifierTypeI>
    
    // To remove ambiguity between TRAs
    ambiDummy: DummySegmentTypeI16
    
    // In Connection With document/coupon number
    icw: Array<InConnectionWithType1>
    
    // Value of the coupon
    couponValue: Array<MonetaryInformationTypeI13>
    
    // - Consumed at issuance indicator (CMI) - Non-refundable indicator (NRF) - Non-exchangeable indicator (NEX) - Non-interlineable indicator (NIL)
    couponFlags: Array<StatusTypeI4>
    
    // - Present To (PRT) - Present At (PRA) - Service remarks (RMK)
    presentToAtAndRemarks: Array<FreeTextInformationType20>
    
    // - Not Valid Before date (NVB) - Not Valid After date (NVA)
    validityDates: Array<StructuredDateTimeInformationType20>
    
    // Excess Baggage data
    baggageInformation: Array<ExcessBaggageTypeI6>
    
}

export interface couponsDetailsTypeAttributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI16 {
    
    $attributes: DummySegmentTypeI16Attributes
    
}

export interface DummySegmentTypeI16Attributes {
    
}

// In Connection With
export interface InConnectionWithType1 {
    
    $attributes: InConnectionWithType1Attributes
    
    // Carrier field of ICW
    carrier: TransportIdentifierType19
    
    // Mandatory doc serial number and optional ticket type for ICW
    identification: TicketNumberTypeI11
    
    // List of coupons for ICW
    couponList: Array<CouponInformationTypeI6>
    
}

export interface InConnectionWithType1Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType19 {
    
    $attributes: TransportIdentifierType19Attributes
    
    // Carrier identification
    companyIdentification: CompanyIdentificationTypeI_100319C
    
}

export interface TransportIdentifierType19Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI_100319C {
    
    $attributes: CompanyIdentificationTypeI_100319CAttributes
    
    // Carrier code: the numerical one
    marketingCompany: string
    
}

export interface CompanyIdentificationTypeI_100319CAttributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberTypeI11 {
    
    $attributes: TicketNumberTypeI11Attributes
    
    // Document details
    documentDetails: TicketNumberDetailsTypeI11
    
}

export interface TicketNumberTypeI11Attributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsTypeI11 {
    
    $attributes: TicketNumberDetailsTypeI11Attributes
    
    // Document serial number
    number: string
    
    // Coupon type: E - electronic coupon P - paper coupon
    type: Array<string>
    
}

export interface TicketNumberDetailsTypeI11Attributes {
    
}

// To identify data specific to a value (flight) coupon.
export interface CouponInformationTypeI6 {
    
    $attributes: CouponInformationTypeI6Attributes
    
    // Coupon details
    couponDetails: CouponInformationDetailsTypeI6
    
}

export interface CouponInformationTypeI6Attributes {
    
}

// To specify the coupon number, status, value, and other related information.
export interface CouponInformationDetailsTypeI6 {
    
    $attributes: CouponInformationDetailsTypeI6Attributes
    
    // Coupon number
    cpnNumber: string
    
}

export interface CouponInformationDetailsTypeI6Attributes {
    
}

// To specify information concerning excess baggage charges and the associated baggage details.
export interface ExcessBaggageTypeI6 {
    
    $attributes: ExcessBaggageTypeI6Attributes
    
    // Excess baggage charge
    excessBaggageDetails: Array<ExcessBaggageDetailsTypeI3>
    
    // Excess baggage quantity
    baggageDetails: Array<BaggageDetailsTypeI6>
    
}

export interface ExcessBaggageTypeI6Attributes {
    
}

// To specify details concerning a traveller&#39;s excess baggage.
export interface ExcessBaggageDetailsTypeI3 {
    
    $attributes: ExcessBaggageDetailsTypeI3Attributes
    
    // Currency
    currency: Array<string>
    
    // Amount
    amount: Array<number>
    
}

export interface ExcessBaggageDetailsTypeI3Attributes {
    
}

// To specify the number and weight of baggage.
export interface BaggageDetailsTypeI6 {
    
    $attributes: BaggageDetailsTypeI6Attributes
    
    // Total number of units.
    freeAllowance: Array<number>
    
    // Code to qualify unit as pieces or seats.
    quantityCode: Array<string>
    
    // Code to qualify unit as pounds or kilos.
    unitQualifier: Array<string>
    
}

export interface BaggageDetailsTypeI6Attributes {
    
}


export interface Ticket_DisplayTSTType {
    
    $attributes: Ticket_DisplayTSTTypeAttributes
    
    // It can be: - &#39;ALL&#39; - all TSTs are displayed; - &#39;SEL&#39; - only the information corresponding to the TST/passenger selection is displayed.
    displayMode: CodedAttributeType18
    
    // PNR record locator information for this transaction. This PNR record locator is used for tracing purpose, no internal retrieve.
    pnrLocatorData: Array<ReservationControlInformationTypeI20>
    
    // Scrolling information.
    scrollingInformation: Array<ActionDetailsTypeI3>
    
    // Used to get TST information for selected TST references. As we can have 10 TST per Pax, 99 passenger per PNR, and a TST split with the Infant , the max number of TST is 1980.
    tstReference: Array<ItemReferencesAndVersionsType20>
    
    // Passenger/segment references information about TST(s) to retrieve. - Passenger reference specified : all the TSTs concerning this passenger reference are returned. - Passenger/segment reference : only the TST having this passenger/segment association is returned.
    psaInformation: Array<ReferenceInformationTypeI13>
    
}

export interface Ticket_DisplayTSTTypeAttributes {
    
}

// Used to specify the selection of the TSTs to be displayed/deleted.
export interface CodedAttributeType18 {
    
    $attributes: CodedAttributeType18Attributes
    
    // provides details for the Attribute
    attributeDetails: CodedAttributeInformationType19
    
}

export interface CodedAttributeType18Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType19 {
    
    $attributes: CodedAttributeInformationType19Attributes
    
    // provides the attribute Type
    attributeType: string
    
}

export interface CodedAttributeInformationType19Attributes {
    
}

// To specify a reference to a reservation.
export interface ReservationControlInformationTypeI20 {
    
    $attributes: ReservationControlInformationTypeI20Attributes
    
    // Reservation control information
    reservationInformation: ReservationControlInformationDetailsTypeI21
    
}

export interface ReservationControlInformationTypeI20Attributes {
    
}

// To specify the information required to identify a reservation.
export interface ReservationControlInformationDetailsTypeI21 {
    
    $attributes: ReservationControlInformationDetailsTypeI21Attributes
    
    // Record locator.
    controlNumber: string
    
}

export interface ReservationControlInformationDetailsTypeI21Attributes {
    
}

// To specify the action that should be taken on a selected reference number.
export interface ActionDetailsTypeI3 {
    
    $attributes: ActionDetailsTypeI3Attributes
    
    // Information on next list of TSTs to return.
    nextListInformation: Array<ReferenceTypeI2>
    
}

export interface ActionDetailsTypeI3Attributes {
    
}

// To specify which number in a sequence of references and/or the reference number.
export interface ReferenceTypeI2 {
    
    $attributes: ReferenceTypeI2Attributes
    
    // In case of query specifies the number of TSTs to get in reply. In case of response specifies the number of TSTs remaining.
    remainingInformation: Array<number>
    
    // In case of first query specifies the value of this field in the last reply. In case of other queries specifies the last reference returned in the previous list. In case of reply specifies the last TST reference of the list. In case of last reply the value of this field set in the first query is sent.
    remainingReference: Array<string>
    
}

export interface ReferenceTypeI2Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType20 {
    
    $attributes: ItemReferencesAndVersionsType20Attributes
    
    // qualifies the type of the reference used. Code set to define
    referenceType: Array<string>
    
    // Tattoo number (It is in fact the Tst Display Number)
    uniqueReference: Array<number>
    
    // Gives the TST ID number
    iDDescription: Array<UniqueIdDescriptionType10>
    
}

export interface ItemReferencesAndVersionsType20Attributes {
    
}


export interface UniqueIdDescriptionType10 {
    
    $attributes: UniqueIdDescriptionType10Attributes
    
    // The TST Id Number : The Id number allows to determine a TST in the single manner.
    iDSequenceNumber: number
    
}

export interface UniqueIdDescriptionType10Attributes {
    
}

// To provide specific reference identification.
export interface ReferenceInformationTypeI13 {
    
    $attributes: ReferenceInformationTypeI13Attributes
    
    // Passenger/segment/TST reference details
    refDetails: Array<ReferencingDetailsTypeI18>
    
}

export interface ReferenceInformationTypeI13Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI18 {
    
    $attributes: ReferencingDetailsTypeI18Attributes
    
    // Qualifyer of the reference (Pax/Seg/Tst)
    refQualifier: Array<string>
    
    // Passenger/segment/TST reference number
    refNumber: Array<number>
    
}

export interface ReferencingDetailsTypeI18Attributes {
    
}


export interface Ticket_DisplayTSTReplyType {
    
    $attributes: Ticket_DisplayTSTReplyTypeAttributes
    
    // Scrolling information used for long messages. C673.1050 represents the number of TSTs remaining. 0 means that there is no more TST. C673.1154 represents the last TST reference in the list retrieved. For the last reply value in C673.1154 of the first query is placed.
    scrollingInformation: Array<ActionDetailsTypeI4>
    
    
    errorGroup: Array<ErrorGroupType16>
    
    // The response may have several TSTs imbedded. Each TST is detailed within this list. Maximum number of TSTs is : maximum number of passenger in a PNR (99) mulitplied by 2 (each passenger can have an infant) multiplied by maximum number of TSTs for one passenger (10). It has been limited to 10 for message size constraint.
    fareList: Array<fareListType3>
    
}

export interface Ticket_DisplayTSTReplyTypeAttributes {
    
}

// To specify the action that should be taken on a selected reference number.
export interface ActionDetailsTypeI4 {
    
    $attributes: ActionDetailsTypeI4Attributes
    
    // Information on next list of TSTs to return.
    nextListInformation: ReferenceTypeI3
    
}

export interface ActionDetailsTypeI4Attributes {
    
}

// To specify which number in a sequence of references and/or the reference number.
export interface ReferenceTypeI3 {
    
    $attributes: ReferenceTypeI3Attributes
    
    // In case of query specifies the number of TSTs to get in reply. In case of response specifies the number of TSTs remaining.
    remainingInformation: Array<number>
    
    // In case of first query specifies the value of this field in the last reply. In case of other queries specifies the last reference returned in the previous list. In case of reply specifies the last TST reference of the list. In case of last reply the value of this field set in the first query is sent.
    remainingReference: Array<string>
    
}

export interface ReferenceTypeI3Attributes {
    
}

// Conveys a potential error.
export interface ErrorGroupType16 {
    
    $attributes: ErrorGroupType16Attributes
    
    // The details of error/warning code.
    errorOrWarningCodeDetails: ApplicationErrorInformationType21
    
    // The desciption of warning or error.
    errorWarningDescription: Array<FreeTextInformationType21>
    
}

export interface ErrorGroupType16Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType21 {
    
    $attributes: ApplicationErrorInformationType21Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType_216820C
    
}

export interface ApplicationErrorInformationType21Attributes {
    
}


export interface ApplicationErrorDetailType_216820C {
    
    $attributes: ApplicationErrorDetailType_216820CAttributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType_216820CAttributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType21 {
    
    $attributes: FreeTextInformationType21Attributes
    
    
    freeTextDetails: FreeTextDetailsType21
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType21Attributes {
    
}


export interface FreeTextDetailsType21 {
    
    $attributes: FreeTextDetailsType21Attributes
    
    
    textSubjectQualifier: string
    
    
    informationType: Array<string>
    
    
    status: Array<string>
    
    
    companyId: Array<string>
    
    
    language: Array<string>
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType21Attributes {
    
}


export interface fareListType3 {
    
    $attributes: fareListType3Attributes
    
    // Information on TST creation method such as pricing rules and sales indicator.
    pricingInformation: PricingTicketingSubsequentTypeI5
    
    // TST reference number. Ordering information is not relevant here.
    fareReference: ItemReferencesAndVersionsType_144071S
    
    // Fare Indicators
    fareIndicators: Array<FareInformationType11>
    
    // - Last date to ticket the fare - Creation date - Last modification date
    lastTktDate: Array<StructuredDateTimeInformationType_193776S>
    
    // Validating carrier identification.
    validatingCarrier: Array<TransportIdentifierType20>
    
    // Passenger/segment association of the TST.
    paxSegReference: ReferenceInformationTypeI14
    
    // Specify all fare data information (base fare, equivalent fare...)
    fareDataInformation: Array<MonetaryInformationTypeI_185763S>
    
    // reason for agent override
    reasonCode: Array<reasonCodeType>
    
    // Tax fare data detailed information : We can have up to 60 taxes for New/Old taxes and 60 refundable taxes.
    taxInformation: Array<taxInformationType3>
    
    // Banker&#39;s rates are used to convert amounts of the TST (base/equivalent).
    bankerRates: Array<ConversionRateTypeI9>
    
    // Passenger information related to the fare. We can have 99 passenger per PNR.
    passengerInformation: Array<passengerInformationType3>
    
    // Origin and destination of the fare. 1st C3225 occurence : origin city. 2nd C3225 occurence : destination city
    originDestination: Array<OriginAndDestinationDetailsTypeI9>
    
    // Segments detail information related to the fare. This information is specific per segment. 96 segments as in TTSTRR message 3.1.1.
    segmentInformation: Array<segmentInformationType5>
    
    // Other fare information : - fare calculation - payment restrictions. - mileage breakdown freeflow
    otherPricingInfo: Array<CodedAttributeType19>
    
    // TST status information such as TST confidentiality.
    statusInformation: Array<StatusTypeI5>
    
    // Details about the office where the TST has been created, updated and priced.
    officeDetails: Array<UserIdentificationType12>
    
    // Warning information concerning the fare.
    warningInformation: Array<warningInformationType3>
    
    // Automatic Reissue Information
    automaticReissueInfo: Array<automaticReissueInfoType3>
    
    // group to convey carrier fees data
    carrierFeesGroup: Array<carrierFeesGroupType>
    
    // contextual form of payment
    contextualFop: Array<FormOfPaymentTypeI7>
    
    // convey the mileage information
    mileage: Array<AdditionalProductDetailsTypeI17>
    
    // fare Component Details Group
    fareComponentDetailsGroup: Array<fareComponentDetailsGroupType>
    
    
    endFareList: DummySegmentTypeI17
    
}

export interface fareListType3Attributes {
    
}

// To specify pricing indicator information.
export interface PricingTicketingSubsequentTypeI5 {
    
    $attributes: PricingTicketingSubsequentTypeI5Attributes
    
    // Information on TST type.
    tstInformation: RateTariffClassInformationTypeI6
    
    // Fare calculation mode indicator. This indicator specifies the type fare.
    fcmi: string
    
    // This is the FCMI value which is reported: - 0 -) automated pricing - 1 -) manual pricing - 2 -) automated pricing with modification on baggage allowance or TFC (Tax Fee Charge)
    reportedFcmi: Array<number>
    
}

export interface PricingTicketingSubsequentTypeI5Attributes {
    
}

// To identify the current and/or original fare basis code.
export interface RateTariffClassInformationTypeI6 {
    
    $attributes: RateTariffClassInformationTypeI6Attributes
    
    // Indicator qualifying the type of TST (basically manual or automatic)
    tstIndicator: string
    
}

export interface RateTariffClassInformationTypeI6Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType_144071S {
    
    $attributes: ItemReferencesAndVersionsType_144071SAttributes
    
    // qualifies the type of the reference used. Code set to define
    referenceType: Array<string>
    
    // Tattoo number (It is in fact the Tst Display Number)
    uniqueReference: Array<number>
    
    // Gives the TST ID number
    iDDescription: Array<UniqueIdDescriptionType_208242C>
    
}

export interface ItemReferencesAndVersionsType_144071SAttributes {
    
}


export interface UniqueIdDescriptionType_208242C {
    
    $attributes: UniqueIdDescriptionType_208242CAttributes
    
    // The TST Id Number : The Id number allows to determine a TST in the single manner.
    iDSequenceNumber: number
    
    // ID qualifier
    iDQualifier: Array<string>
    
}

export interface UniqueIdDescriptionType_208242CAttributes {
    
}


export interface FareInformationType11 {
    
    $attributes: FareInformationType11Attributes
    
    
    fareDetails: Array<FareDetailsType9>
    
}

export interface FareInformationType11Attributes {
    
}


export interface FareDetailsType9 {
    
    $attributes: FareDetailsType9Attributes
    
    
    fareCategory: Array<string>
    
}

export interface FareDetailsType9Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType_193776S {
    
    $attributes: StructuredDateTimeInformationType_193776SAttributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - Impacted period - Departure date - Estimated arrival date and time
    businessSemantic: string
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType_270736C>
    
}

export interface StructuredDateTimeInformationType_193776SAttributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType_270736C {
    
    $attributes: StructuredDateTimeType_270736CAttributes
    
    // Year number. The format is a little long for short term usage but it can be reduced by implementation if required.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
    // Hour between 0 and 23
    hour: Array<string>
    
    // Minutes between 0 and 59
    minutes: Array<string>
    
}

export interface StructuredDateTimeType_270736CAttributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType20 {
    
    $attributes: TransportIdentifierType20Attributes
    
    // Information related to validating carrier.
    carrierInformation: CompanyIdentificationTypeI_27095C
    
}

export interface TransportIdentifierType20Attributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI_27095C {
    
    $attributes: CompanyIdentificationTypeI_27095CAttributes
    
    // Carrier code
    carrierCode: string
    
}

export interface CompanyIdentificationTypeI_27095CAttributes {
    
}

// To provide specific reference identification.
export interface ReferenceInformationTypeI14 {
    
    $attributes: ReferenceInformationTypeI14Attributes
    
    // Passenger/segment/TST reference details
    refDetails: Array<ReferencingDetailsTypeI19>
    
}

export interface ReferenceInformationTypeI14Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI19 {
    
    $attributes: ReferencingDetailsTypeI19Attributes
    
    // Qualifyer of the reference (Pax/Seg/Tst)
    refQualifier: Array<string>
    
    // Passenger/segment/TST reference number
    refNumber: Array<number>
    
}

export interface ReferencingDetailsTypeI19Attributes {
    
}

// To convey monetary amount information.
export interface MonetaryInformationTypeI_185763S {
    
    $attributes: MonetaryInformationTypeI_185763SAttributes
    
    // Main fare data infomation, can b thee base or the total fare information which are mandatory anyway
    fareDataMainInformation: MonetaryInformationDetailsTypeI_260502C
    
    // Supplementary fare data information
    fareDataSupInformation: Array<MonetaryInformationDetailsTypeI_260502C>
    
}

export interface MonetaryInformationTypeI_185763SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI_260502C {
    
    $attributes: MonetaryInformationDetailsTypeI_260502CAttributes
    
    // Qualify the type of fare defined in this composite
    fareDataQualifier: string
    
    // Fare data amount
    fareAmount: Array<string>
    
    // Fare data currency code
    fareCurrency: Array<string>
    
    // Location of the fare data (PFCs specific)
    fareLocation: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI_260502CAttributes {
    
}


export interface reasonCodeType {
    
    $attributes: reasonCodeTypeAttributes
    
    // This segment track the updated attribute, the reason for the update and a conditional comment.
    reasonCodes: AttributeType_21097S
    
    // reason for override: OTHER SODA RULE 85 INTERNET DING ADVERTISED FARE NOT LOADED US TAX ADJUSTMENT CUSTOMER CONVENIENCE EXTRA SEAT LOYALTY HONOR PROTECT FARE TWO HOUR RULE NAME MISMATCH NAME CHANGE DECEASED
    reasonCodeComment: Array<FreeTextInformationType_185885S>
    
}

export interface reasonCodeTypeAttributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType_21097S {
    
    $attributes: AttributeType_21097SAttributes
    
    // Details for the message criteria (name, value).
    criteriaDetails: AttributeInformationTypeU_37514C
    
}

export interface AttributeType_21097SAttributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU_37514C {
    
    $attributes: AttributeInformationTypeU_37514CAttributes
    
    // Field updated by airline agent
    fieldUpdated: string
    
}

export interface AttributeInformationTypeU_37514CAttributes {
    
}

// Used to convey the free text and associated language, encoding.
export interface FreeTextInformationType_185885S {
    
    $attributes: FreeTextInformationType_185885SAttributes
    
    
    freeTextDetails: FreeTextDetailsType_260638C
    
    // Free text and message sequence numbers of the remarks.
    freeText: Array<string>
    
}

export interface FreeTextInformationType_185885SAttributes {
    
}


export interface FreeTextDetailsType_260638C {
    
    $attributes: FreeTextDetailsType_260638CAttributes
    
    
    textSubjectQualifier: string
    
    
    source: string
    
    
    encoding: string
    
}

export interface FreeTextDetailsType_260638CAttributes {
    
}


export interface taxInformationType3 {
    
    $attributes: taxInformationType3Attributes
    
    // Tax details
    taxDetails: DutyTaxFeeDetailsTypeU3
    
    // Amount details. If the tax is a passenger facility charge (PFC) the detail of the airports related taxes is given here.
    amountDetails: Array<MonetaryInformationTypeI14>
    
}

export interface taxInformationType3Attributes {
    
}

// To transmit tax data as it should appear in the tax boxes of the ticket.
export interface DutyTaxFeeDetailsTypeU3 {
    
    $attributes: DutyTaxFeeDetailsTypeU3Attributes
    
    // Tax data qualifier
    taxQualifier: string
    
    // Tax type identification
    taxIdentification: DutyTaxFeeTypeDetailsTypeU3
    
    // Type of the tax
    taxType: Array<DutyTaxFeeAccountDetailTypeU3>
    
    // Nature of the tax
    taxNature: Array<string>
    
    // Exempt tax indicator. If an tax is Exempted no amount is provided for this tax.
    taxExempt: Array<string>
    
}

export interface DutyTaxFeeDetailsTypeU3Attributes {
    
}


export interface DutyTaxFeeTypeDetailsTypeU3 {
    
    $attributes: DutyTaxFeeTypeDetailsTypeU3Attributes
    
    // Tax type identifier
    taxIdentifier: string
    
}

export interface DutyTaxFeeTypeDetailsTypeU3Attributes {
    
}


export interface DutyTaxFeeAccountDetailTypeU3 {
    
    $attributes: DutyTaxFeeAccountDetailTypeU3Attributes
    
    // Iso country of the tax
    isoCountry: string
    
}

export interface DutyTaxFeeAccountDetailTypeU3Attributes {
    
}

// To convey monetary amount information.
export interface MonetaryInformationTypeI14 {
    
    $attributes: MonetaryInformationTypeI14Attributes
    
    // Main fare data infomation, can b thee base or the total fare information which are mandatory anyway
    fareDataMainInformation: MonetaryInformationDetailsTypeI_260502C
    
    // Supplementary fare data information
    fareDataSupInformation: Array<MonetaryInformationDetailsTypeI_260502C>
    
}

export interface MonetaryInformationTypeI14Attributes {
    
}

// To specify details of conversion rates.
export interface ConversionRateTypeI9 {
    
    $attributes: ConversionRateTypeI9Attributes
    
    // First rate detail.
    firstRateDetail: ConversionRateDetailsTypeI11
    
    // Second rate detail.
    secondRateDetail: Array<ConversionRateDetailsTypeI11>
    
}

export interface ConversionRateTypeI9Attributes {
    
}

// To specify the conversion rate and the monetary amount.
export interface ConversionRateDetailsTypeI11 {
    
    $attributes: ConversionRateDetailsTypeI11Attributes
    
    // Currency of the rate
    currencyCode: Array<string>
    
    // Amount/percentage
    amount: Array<number>
    
}

export interface ConversionRateDetailsTypeI11Attributes {
    
}


export interface passengerInformationType3 {
    
    $attributes: passengerInformationType3Attributes
    
    // Penalty details specified in the request.
    penDisInformation: DiscountAndPenaltyInformationTypeI5
    
    // Reference of passengers that have a type code.
    passengerReference: Array<ReferenceInformationTypeI14>
    
}

export interface passengerInformationType3Attributes {
    
}

// To specify information about discounts and penalties
export interface DiscountAndPenaltyInformationTypeI5 {
    
    $attributes: DiscountAndPenaltyInformationTypeI5Attributes
    
    // Qualify the type of information. Penalties are not passenger associated and are pure monetary information. Discount are passenger associated but only discount code is specified.
    infoQualifier: Array<string>
    
    // Used to specify penalty information.
    penDisData: Array<DiscountPenaltyMonetaryInformationTypeI5>
    
}

export interface DiscountAndPenaltyInformationTypeI5Attributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationTypeI5 {
    
    $attributes: DiscountPenaltyMonetaryInformationTypeI5Attributes
    
    // Type of penalty.
    penaltyType: Array<string>
    
    // The penalty amount can be described differently: amount/percentage.
    penaltyQualifier: Array<string>
    
    // Amount of the penalty.
    penaltyAmount: Array<number>
    
    // This discount code is defined by the airlines. This cannot be coded as airlines might apply any combination of letters for their discounts.
    discountCode: Array<string>
    
    // Penalty currency code.
    penaltyCurrency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationTypeI5Attributes {
    
}

// To convey the origin and destination of a journey.
export interface OriginAndDestinationDetailsTypeI9 {
    
    $attributes: OriginAndDestinationDetailsTypeI9Attributes
    
    // Code of the city.
    cityCode: Array<string>
    
}

export interface OriginAndDestinationDetailsTypeI9Attributes {
    
}


export interface segmentInformationType5 {
    
    $attributes: segmentInformationType5Attributes
    
    // Connection information.
    connexInformation: ConnectionTypeI5
    
    // Details on open segments added to the price calculation. These open segments exist only in the fare calculated, they have no equivalent in the PNR itinerary. This segment gives also information on booking class for best buy transactions.
    segDetails: Array<TravelProductInformationTypeI_15391S>
    
    // Fare basis information
    fareQualifier: Array<FareQualifierDetailsTypeI7>
    
    // Validity information for the fare
    validityInformation: Array<StructuredDateTimeInformationType21>
    
    // baggage allowance information
    bagAllowanceInformation: Array<ExcessBaggageTypeI7>
    
    // Reference of the segment associated to the group.
    segmentReference: Array<ReferenceInformationTypeI14>
    
    // The segment order in the pricing response can be different than the one of the PNR itinerary (segments are reordered at price calculation time). This order information is conveyed by the sequence number. If this order information is not present then the order is by default the one of the PNR.
    sequenceInformation: Array<ItemReferencesAndVersionsType21>
    
}

export interface segmentInformationType5Attributes {
    
}

// To specify connection designator.
export interface ConnectionTypeI5 {
    
    $attributes: ConnectionTypeI5Attributes
    
    // Connection details
    connecDetails: ConnectionDetailsTypeI5
    
}

export interface ConnectionTypeI5Attributes {
    
}

// To specify the location, product supplier and time for a connection with the next means of transport.
export interface ConnectionDetailsTypeI5 {
    
    $attributes: ConnectionDetailsTypeI5Attributes
    
    // Specify ARNK and surface segments not included in the fare routing.
    routingInformation: Array<string>
    
    // Type of connection for the flight
    connexType: Array<string>
    
}

export interface ConnectionDetailsTypeI5Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI_15391S {
    
    $attributes: TravelProductInformationTypeI_15391SAttributes
    
    // departure city code
    departureCity: Array<LocationTypeI_27121C>
    
    // arrival city code
    arrivalCity: Array<LocationTypeI_27121C>
    
    // Airline detail information of the extra segment.
    airlineDetail: Array<CompanyIdentificationTypeI_27116C>
    
    // Segment detail information.
    segmentDetail: Array<ProductIdentificationDetailsTypeI18>
    
    // Ticketing status for this segment. Relevant only in case of reply.
    ticketingStatus: Array<string>
    
}

export interface TravelProductInformationTypeI_15391SAttributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI_27121C {
    
    $attributes: LocationTypeI_27121CAttributes
    
    // Code of the city.
    cityCode: Array<string>
    
}

export interface LocationTypeI_27121CAttributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI_27116C {
    
    $attributes: CompanyIdentificationTypeI_27116CAttributes
    
    // Code of the airline.
    carrierCode: Array<string>
    
}

export interface CompanyIdentificationTypeI_27116CAttributes {
    
}

// Code, number or name to identify a specific product or service.
export interface ProductIdentificationDetailsTypeI18 {
    
    $attributes: ProductIdentificationDetailsTypeI18Attributes
    
    // OPEN or AIR are the two identifications accepted. OPEN means the segment described here is an open segment. AIR means that it is a valid AIR segment.
    identification: string
    
    // Class of service to use in order to price the extra segment.
    classOfService: Array<string>
    
}

export interface ProductIdentificationDetailsTypeI18Attributes {
    
}

// To specify the fare basis information
export interface FareQualifierDetailsTypeI7 {
    
    $attributes: FareQualifierDetailsTypeI7Attributes
    
    // Type of movement for this segment to take into account by Fare Quote to calculate the fare.
    movementType: Array<string>
    
    // It is possible to add some more information related to the fare.
    fareDetails: Array<FareDetailsTypeI8>
    
    // Fare basis detail
    fareBasisDetails: Array<AdditionalFareQualifierDetailsTypeI8>
    
    // Discount data for zap off to apply to price calculation.
    zapOffDetails: Array<DiscountPenaltyInformationTypeI5>
    
}

export interface FareQualifierDetailsTypeI7Attributes {
    
}

// To specify the fare type and related information.
export interface FareDetailsTypeI8 {
    
    $attributes: FareDetailsTypeI8Attributes
    
    
    qualifier: Array<string>
    
}

export interface FareDetailsTypeI8Attributes {
    
}

// To specify the fare basis and ticket designator codes.
export interface AdditionalFareQualifierDetailsTypeI8 {
    
    $attributes: AdditionalFareQualifierDetailsTypeI8Attributes
    
    // Primary code of the fare basis. This is not a codeset but a free flow text field.
    primaryCode: Array<string>
    
    // Fare basis code of the fare basis. This is not a codeset but a free flow text field.
    fareBasisCode: Array<string>
    
    // Ticket designator of the fare basis
    ticketDesignator: Array<string>
    
    // For any query : discount ticket designator to be assigned by Fare Quote server. For any response : priced PTCs
    discTktDesignator: Array<string>
    
}

export interface AdditionalFareQualifierDetailsTypeI8Attributes {
    
}

// To indicate the discounts and penalties by fare type.
export interface DiscountPenaltyInformationTypeI5 {
    
    $attributes: DiscountPenaltyInformationTypeI5Attributes
    
    // Discount off type.
    zapOffType: string
    
    // Discount amount
    zapOffAmount: Array<number>
    
    // Discount percentage.
    zapOffPercentage: Array<number>
    
}

export interface DiscountPenaltyInformationTypeI5Attributes {
    
}

// This segment is designed to convey date/time in a structured way.
export interface StructuredDateTimeInformationType21 {
    
    $attributes: StructuredDateTimeInformationType21Attributes
    
    // This data element can be used to provide the semantic of the information provided. Examples : - Impacted period - Departure date - Estimated arrival date and time
    businessSemantic: Array<string>
    
    // Convey date and/or time.
    dateTime: Array<StructuredDateTimeType24>
    
}

export interface StructuredDateTimeInformationType21Attributes {
    
}

// Store date and time in a structured way
export interface StructuredDateTimeType24 {
    
    $attributes: StructuredDateTimeType24Attributes
    
    // Year number. The format is a little long for short term usage but it can be reduced by implementation if required.
    year: Array<number>
    
    // Month number in the year ( begins to 1 )
    month: Array<string>
    
    // Day number in the month ( begins to 1 )
    day: Array<string>
    
}

export interface StructuredDateTimeType24Attributes {
    
}

// To specify information concerning baggage allowance details.
export interface ExcessBaggageTypeI7 {
    
    $attributes: ExcessBaggageTypeI7Attributes
    
    // Baggage allowance information details
    bagAllowanceDetails: BaggageDetailsTypeI7
    
}

export interface ExcessBaggageTypeI7Attributes {
    
}

// To specify the number and weight of baggage.
export interface BaggageDetailsTypeI7 {
    
    $attributes: BaggageDetailsTypeI7Attributes
    
    // Baggage allowance quantity (piece concept)
    baggageQuantity: Array<number>
    
    // Baggage allowance weight
    baggageWeight: Array<number>
    
    // Baggage allowance type (weight/number)
    baggageType: Array<string>
    
    // Measurement unit for weighing baggage allowance
    measureUnit: Array<string>
    
}

export interface BaggageDetailsTypeI7Attributes {
    
}

// Exchange and link unique identifiers
export interface ItemReferencesAndVersionsType21 {
    
    $attributes: ItemReferencesAndVersionsType21Attributes
    
    // Identification details : order number
    sequenceSection: Array<UniqueIdDescriptionType11>
    
}

export interface ItemReferencesAndVersionsType21Attributes {
    
}


export interface UniqueIdDescriptionType11 {
    
    $attributes: UniqueIdDescriptionType11Attributes
    
    // Number specifying the ordering information of the item described within a group.
    sequenceNumber: Array<number>
    
}

export interface UniqueIdDescriptionType11Attributes {
    
}

// Used to specify pricing options by key/value.
export interface CodedAttributeType19 {
    
    $attributes: CodedAttributeType19Attributes
    
    // provides details for the Attribute fare calculation or payment restriction or mileage breakdown freeflow.
    attributeDetails: Array<CodedAttributeInformationType20>
    
    
    DummyNET: string
    
}

export interface CodedAttributeType19Attributes {
    
}

// Convey coded key and corresponding value
export interface CodedAttributeInformationType20 {
    
    $attributes: CodedAttributeInformationType20Attributes
    
    // provides the attribute Type
    attributeType: string
    
    // provides a description for the attribute
    attributeDescription: Array<string>
    
}

export interface CodedAttributeInformationType20Attributes {
    
}

// To identify a status and related information.
export interface StatusTypeI5 {
    
    $attributes: StatusTypeI5Attributes
    
    // Detail on the status of the TST.
    firstStatusDetails: StatusDetailsTypeI7
    
    // Other details on the status of the TST.
    otherStatusDetails: Array<StatusDetailsTypeI7>
    
}

export interface StatusTypeI5Attributes {
    
}

// To specify a status, the action to be taken, and an additional qualification of the status.
export interface StatusDetailsTypeI7 {
    
    $attributes: StatusDetailsTypeI7Attributes
    
    // Information on TST.
    tstFlag: string
    
}

export interface StatusDetailsTypeI7Attributes {
    
}

// This segment is used to identify a user.
export interface UserIdentificationType12 {
    
    $attributes: UserIdentificationType12Attributes
    
    // Originator Identification Details
    originIdentification: OriginatorIdentificationDetailsTypeI16
    
    // Used to specify which kind of info is given in DE 9900.
    originatorTypeCode: Array<string>
    
}

export interface UserIdentificationType12Attributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI16 {
    
    $attributes: OriginatorIdentificationDetailsTypeI16Attributes
    
    // Agent Sign In
    inHouseIdentification1: Array<string>
    
    // Tst office ID : It&#39;s the TST creation office ID.
    inHouseIdentification2: Array<string>
    
}

export interface OriginatorIdentificationDetailsTypeI16Attributes {
    
}


export interface warningInformationType3 {
    
    $attributes: warningInformationType3Attributes
    
    // Fare warning information code.
    warningCode: ApplicationErrorInformationType_6594S
    
    // Description in free flow text of the warning concerning the fare.
    warningText: Array<InteractiveFreeTextTypeI_6759S1>
    
}

export interface warningInformationType3Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType_6594S {
    
    $attributes: ApplicationErrorInformationType_6594SAttributes
    
    // Application error details.
    applicationErrorDetail: ApplicationErrorDetailType19
    
}

export interface ApplicationErrorInformationType_6594SAttributes {
    
}


export interface ApplicationErrorDetailType19 {
    
    $attributes: ApplicationErrorDetailType19Attributes
    
    // Code identifying the data validation error condition.
    applicationErrorCode: string
    
    // Identification of a code list.
    codeListQualifier: Array<string>
    
    // Code identifying the agency responsible for a code list.
    codeListResponsibleAgency: Array<string>
    
}

export interface ApplicationErrorDetailType19Attributes {
    
}

// To provide error free text information.
export interface InteractiveFreeTextTypeI_6759S1 {
    
    $attributes: InteractiveFreeTextTypeI_6759S1Attributes
    
    // Free flow text describing the error
    errorFreeText: Array<string>
    
}

export interface InteractiveFreeTextTypeI_6759S1Attributes {
    
}


export interface automaticReissueInfoType3 {
    
    $attributes: automaticReissueInfoType3Attributes
    
    // This segment contains the original ticket number.
    ticketInfo: TicketNumberTypeI12
    
    // This segment contains the coupon number (in absolute) corresponding to the first coupon for use from the last flawn segment.
    couponInfo: CouponInformationTypeI7
    
    // provide the range for paper reissuance
    paperCouponRange: Array<paperCouponRangeType3>
    
    // Base Fare information
    baseFareInfo: MonetaryInformationTypeI_132703S
    
    // Discount and penalty group.
    firstDpiGroup: firstDpiGroupType3
    
    // Discount and penalty group.
    secondDpiGroup: secondDpiGroupType3
    
}

export interface automaticReissueInfoType3Attributes {
    
}

// To convey information related to a specific ticket.
export interface TicketNumberTypeI12 {
    
    $attributes: TicketNumberTypeI12Attributes
    
    // Details on the document
    documentDetails: TicketNumberDetailsTypeI12
    
}

export interface TicketNumberTypeI12Attributes {
    
}

// To specify a ticket number, type of ticket, and related information.
export interface TicketNumberDetailsTypeI12 {
    
    $attributes: TicketNumberDetailsTypeI12Attributes
    
    // Ticket number
    number: string
    
    // ticket type
    type: Array<string>
    
}

export interface TicketNumberDetailsTypeI12Attributes {
    
}

// To identify data specific to a value (flight) coupon.
export interface CouponInformationTypeI7 {
    
    $attributes: CouponInformationTypeI7Attributes
    
    // Details on coupon
    couponDetails: CouponInformationDetailsTypeI7
    
    // Details on coupon
    otherCouponDetails: Array<CouponInformationDetailsTypeI7>
    
}

export interface CouponInformationTypeI7Attributes {
    
}

// To specify the coupon number, status, value, and other related information.
export interface CouponInformationDetailsTypeI7 {
    
    $attributes: CouponInformationDetailsTypeI7Attributes
    
    // Coupon number
    cpnNumber: string
    
}

export interface CouponInformationDetailsTypeI7Attributes {
    
}


export interface paperCouponRangeType3 {
    
    $attributes: paperCouponRangeType3Attributes
    
    // This segment contains the original ticket number.
    ticketInfo: TicketNumberTypeI12
    
    // This segment contains the coupon number (in absolute) corresponding to the first coupon for use from the last flawn segment.
    couponInfo: CouponInformationTypeI7
    
}

export interface paperCouponRangeType3Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI_132703S {
    
    $attributes: MonetaryInformationTypeI_132703SAttributes
    
    // monetaryDetails
    monetaryDetails: MonetaryInformationDetailsTypeI16
    
    
    otherMonetaryDetails: Array<MonetaryInformationDetailsTypeI16>
    
}

export interface MonetaryInformationTypeI_132703SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI16 {
    
    $attributes: MonetaryInformationDetailsTypeI16Attributes
    
    // Type qualifier
    typeQualifier: string
    
    // amount
    amount: string
    
    // currency
    currency: Array<string>
    
    // location
    location: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI16Attributes {
    
}


export interface firstDpiGroupType3 {
    
    $attributes: firstDpiGroupType3Attributes
    
    // penalty and no show fee information
    penalty: DiscountAndPenaltyInformationType9
    
    // Reissue Information
    reissueInfo: MonetaryInformationTypeI_133223S
    
    // Old Tax Information
    oldTaxInfo: MonetaryInformationTypeI_133223S
    
    // Balance Reissue Information
    reissueBalanceInfo: MonetaryInformationTypeI_132703S
    
}

export interface firstDpiGroupType3Attributes {
    
}


export interface DiscountAndPenaltyInformationType9 {
    
    $attributes: DiscountAndPenaltyInformationType9Attributes
    
    
    discountPenaltyDetails: Array<DiscountPenaltyMonetaryInformationType9>
    
}

export interface DiscountAndPenaltyInformationType9Attributes {
    
}

// To specify the type of discount and penalty information, the monetary amount, and associated information.
export interface DiscountPenaltyMonetaryInformationType9 {
    
    $attributes: DiscountPenaltyMonetaryInformationType9Attributes
    
    
    function: Array<string>
    
    
    amountType: Array<string>
    
    
    amount: Array<string>
    
    
    currency: Array<string>
    
}

export interface DiscountPenaltyMonetaryInformationType9Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI_133223S {
    
    $attributes: MonetaryInformationTypeI_133223SAttributes
    
    // monetary details
    monetaryDetails: MonetaryInformationDetailsTypeI16
    
    // otherMonetaryDetails
    otherMonetaryDetails: Array<MonetaryInformationDetailsTypeI16>
    
}

export interface MonetaryInformationTypeI_133223SAttributes {
    
}


export interface secondDpiGroupType3 {
    
    $attributes: secondDpiGroupType3Attributes
    
    // Penalty and no show fee information
    penalty: DiscountAndPenaltyInformationType9
    
    // Residual Value Information
    residualValueInfo: MonetaryInformationTypeI_133223S
    
    // Old Tax Information
    oldTaxInfo: MonetaryInformationTypeI_133223S
    
    // Balance Issue Information
    issueBalanceInfo: MonetaryInformationTypeI_132703S
    
}

export interface secondDpiGroupType3Attributes {
    
}


export interface carrierFeesGroupType {
    
    $attributes: carrierFeesGroupTypeAttributes
    
    // Airline Ticketing Fees : OB
    carrierFeeType: SelectionDetailsTypeI10
    
    // group containing one particular fee information
    carrierFeeInfo: Array<carrierFeeInfoType>
    
}

export interface carrierFeesGroupTypeAttributes {
    
}

// To specify the Carrier Fee type
export interface SelectionDetailsTypeI10 {
    
    $attributes: SelectionDetailsTypeI10Attributes
    
    
    selectionDetails: SelectionDetailsInformationTypeI13
    
}

export interface SelectionDetailsTypeI10Attributes {
    
}

// To specify a selected option and associated information.
export interface SelectionDetailsInformationTypeI13 {
    
    $attributes: SelectionDetailsInformationTypeI13Attributes
    
    
    option: string
    
}

export interface SelectionDetailsInformationTypeI13Attributes {
    
}


export interface carrierFeeInfoType {
    
    $attributes: carrierFeeInfoTypeAttributes
    
    // contains the Carrier Fee subcode and the properties of the carrier fee:
    carrierFeeSubcode: SpecificDataInformationTypeI6
    
    // convey the commercial name of the fee
    commercialName: InteractiveFreeTextTypeI14
    
    // amount of the fee, taxes included
    feeAmount: MonetaryInformationTypeI_133222S
    
    // tax on the fee
    feeTax: Array<TaxTypeI8>
    
}

export interface carrierFeeInfoTypeAttributes {
    
}

// To specify miscellaneous data by first identifying the type of data to be sent and then the actual data.
export interface SpecificDataInformationTypeI6 {
    
    $attributes: SpecificDataInformationTypeI6Attributes
    
    // Carrier fee code
    dataTypeInformation: DataTypeInformationTypeI6
    
    // Carrier fee application code (NI, NR, CM, NC)
    dataInformation: Array<DataInformationTypeI6>
    
}

export interface SpecificDataInformationTypeI6Attributes {
    
}

// To identify the type of data to be sent and to qualify the data when required.
export interface DataTypeInformationTypeI6 {
    
    $attributes: DataTypeInformationTypeI6Attributes
    
    // fee subcode
    type: string
    
}

export interface DataTypeInformationTypeI6Attributes {
    
}

// To identify specific data and a quantity related to the data.
export interface DataInformationTypeI6 {
    
    $attributes: DataInformationTypeI6Attributes
    
    // fee attribute
    indicator: Array<string>
    
}

export interface DataInformationTypeI6Attributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextTypeI14 {
    
    $attributes: InteractiveFreeTextTypeI14Attributes
    
    
    freeTextQualification: Array<FreeTextQualificationTypeI14>
    
    // commercial name of the fee suncode. 10 an
    freeText: string
    
}

export interface InteractiveFreeTextTypeI14Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationTypeI14 {
    
    $attributes: FreeTextQualificationTypeI14Attributes
    
    
    textSubjectQualifier: string
    
}

export interface FreeTextQualificationTypeI14Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationTypeI_133222S {
    
    $attributes: MonetaryInformationTypeI_133222SAttributes
    
    // MON used for a single fee
    monetaryDetails: MonetaryInformationDetailsTypeI_193322C
    
}

export interface MonetaryInformationTypeI_133222SAttributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsTypeI_193322C {
    
    $attributes: MonetaryInformationDetailsTypeI_193322CAttributes
    
    // qualifier
    typeQualifier: string
    
    // In case of exempted Fee, this data element does not contain an amount but a text: EXEMPTED.
    amount: string
    
    // currency of the fee amount
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsTypeI_193322CAttributes {
    
}

// To specify details relating to tax(es).
export interface TaxTypeI8 {
    
    $attributes: TaxTypeI8Attributes
    
    // type of tax
    taxCategory: Array<string>
    
    
    feeTaxDetails: Array<TaxDetailsTypeI10>
    
}

export interface TaxTypeI8Attributes {
    
}

// To specify a rate, type of tax, and currency code.
export interface TaxDetailsTypeI10 {
    
    $attributes: TaxDetailsTypeI10Attributes
    
    
    rate: string
    
    
    currencyCode: Array<string>
    
    // Details applicable to the tax applied to the Carrier Fee. TX = Tax applies to fee
    type: Array<string>
    
}

export interface TaxDetailsTypeI10Attributes {
    
}

// To convey details describing the form of payment.
export interface FormOfPaymentTypeI7 {
    
    $attributes: FormOfPaymentTypeI7Attributes
    
    // FORM OF PAYMENT DETAILS
    formOfPayment: Array<FormOfPaymentDetailsTypeI7>
    
}

export interface FormOfPaymentTypeI7Attributes {
    
}

// To specify the form of payment type, amounts, approval codes, and other related information.
export interface FormOfPaymentDetailsTypeI7 {
    
    $attributes: FormOfPaymentDetailsTypeI7Attributes
    
    // Type of Form Of Payment (Credit card, cash, check...).
    type: Array<string>
    
    // amount to be charged on this form
    chargedAmount: Array<number>
    
    // It is mandatory if the Form of Payment at pricing was a credit card with a bin number. It may only occur for Credit Card Types. It is composed of the first 6 bin numbers of the credit card. Wildcards are not possible.
    creditCardNumber: Array<string>
    
}

export interface FormOfPaymentDetailsTypeI7Attributes {
    
}

// To convey additional information concerning an airline flight.
export interface AdditionalProductDetailsTypeI17 {
    
    $attributes: AdditionalProductDetailsTypeI17Attributes
    
    
    mileageTimeDetails: MileageTimeDetailsTypeI7
    
}

export interface AdditionalProductDetailsTypeI17Attributes {
    
}

// Information about the distance/duration of a trip.
export interface MileageTimeDetailsTypeI7 {
    
    $attributes: MileageTimeDetailsTypeI7Attributes
    
    // mileage total associated to the TST
    totalMileage: number
    
}

export interface MileageTimeDetailsTypeI7Attributes {
    
}


export interface fareComponentDetailsGroupType {
    
    $attributes: fareComponentDetailsGroupTypeAttributes
    
    // fare Component identification
    fareComponentID: ItemNumberType15
    
    // Market information related to fare component
    marketFareComponent: Array<TravelProductInformationTypeI16>
    
    // Monetary Information
    monetaryInformation: Array<MonetaryInformationType23>
    
    // Component Class information
    componentClassInfo: Array<PricingOrTicketingSubsequentType10>
    
    // Fare Qualifier Detail
    fareQualifiersDetail: Array<FareQualifierDetailsType14>
    
    // Details of the fare family used for this fare component
    fareFamilyDetails: Array<FareFamilyType10>
    
    // Carrier owner of the fare family
    fareFamilyOwner: Array<TransportIdentifierType_156498S>
    
    // The only service attributes details avaliable is SEA seasonality
    fareComponentServiceAttributes: Array<AttributeType23>
    
    // coupon Details Group
    couponDetailsGroup: Array<couponDetailsGroupType1>
    
}

export interface fareComponentDetailsGroupTypeAttributes {
    
}

// To specify an item number
export interface ItemNumberType15 {
    
    $attributes: ItemNumberType15Attributes
    
    
    itemNumberDetails: Array<ItemNumberIdentificationType15>
    
}

export interface ItemNumberType15Attributes {
    
}

// Goods identification for a specified source
export interface ItemNumberIdentificationType15 {
    
    $attributes: ItemNumberIdentificationType15Attributes
    
    
    number: Array<string>
    
    
    type: Array<string>
    
}

export interface ItemNumberIdentificationType15Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationTypeI16 {
    
    $attributes: TravelProductInformationTypeI16Attributes
    
    
    boardPointDetails: Array<LocationTypeI20>
    
    
    offpointDetails: Array<LocationTypeI20>
    
}

export interface TravelProductInformationTypeI16Attributes {
    
}

// To identify a location by code or name.
export interface LocationTypeI20 {
    
    $attributes: LocationTypeI20Attributes
    
    
    trueLocationId: Array<string>
    
}

export interface LocationTypeI20Attributes {
    
}

// To convey monetary amounts, rates and percentages.
export interface MonetaryInformationType23 {
    
    $attributes: MonetaryInformationType23Attributes
    
    // Monetary information per fare component
    monetaryDetails: MonetaryInformationDetailsType21
    
    // Other monetary information per fare component
    otherMonetaryDetails: Array<MonetaryInformationDetailsType21>
    
}

export interface MonetaryInformationType23Attributes {
    
}

// To specify the type of monetary amount, the amount, and the currency code.
export interface MonetaryInformationDetailsType21 {
    
    $attributes: MonetaryInformationDetailsType21Attributes
    
    
    typeQualifier: string
    
    // Amount
    amount: Array<string>
    
    // Currency
    currency: Array<string>
    
}

export interface MonetaryInformationDetailsType21Attributes {
    
}

// To convey additional information related to a ticket
export interface PricingOrTicketingSubsequentType10 {
    
    $attributes: PricingOrTicketingSubsequentType10Attributes
    
    // RATE OR TARIFF CLASS INFORMATION
    fareBasisDetails: Array<RateTariffClassInformationType6>
    
}

export interface PricingOrTicketingSubsequentType10Attributes {
    
}

// To identify the current and/or original fare basis code.
export interface RateTariffClassInformationType6 {
    
    $attributes: RateTariffClassInformationType6Attributes
    
    // Fare Basis Code
    rateTariffClass: Array<string>
    
    // Ticket Designator
    otherRateTariffClass: Array<string>
    
}

export interface RateTariffClassInformationType6Attributes {
    
}


export interface FareQualifierDetailsType14 {
    
    $attributes: FareQualifierDetailsType14Attributes
    
    
    discountDetails: Array<DiscountPenaltyInformationType12>
    
}

export interface FareQualifierDetailsType14Attributes {
    
}


export interface DiscountPenaltyInformationType12 {
    
    $attributes: DiscountPenaltyInformationType12Attributes
    
    
    fareQualifier: Array<string>
    
}

export interface DiscountPenaltyInformationType12Attributes {
    
}

// NEW FARE SEACH
export interface FareFamilyType10 {
    
    $attributes: FareFamilyType10Attributes
    
    // Fare Family Short Name
    fareFamilyname: Array<string>
    
    // HIERARCHICAL ORDER WITHIN FARE FAMILY
    hierarchy: Array<number>
    
    // Indicates Commercial Fare Family Short names
    commercialFamilyDetails: Array<FareFamilyDetailsType10>
    
}

export interface FareFamilyType10Attributes {
    
}

// NEW FARE SEARCH
export interface FareFamilyDetailsType10 {
    
    $attributes: FareFamilyDetailsType10Attributes
    
    // Commercial fare Family Short name
    commercialFamily: string
    
}

export interface FareFamilyDetailsType10Attributes {
    
}

// To specify the transport service(s) which is /are to be updated or cancelled
export interface TransportIdentifierType_156498S {
    
    $attributes: TransportIdentifierType_156498SAttributes
    
    
    companyIdentification: Array<CompanyIdentificationTypeI33>
    
}

export interface TransportIdentifierType_156498SAttributes {
    
}

// Code or name to identify a company and any associated companies.
export interface CompanyIdentificationTypeI33 {
    
    $attributes: CompanyIdentificationTypeI33Attributes
    
    // Carrier owner fo the fare family
    otherCompany: Array<string>
    
}

export interface CompanyIdentificationTypeI33Attributes {
    
}

// Used to have tag value without code list for tag
export interface AttributeType23 {
    
    $attributes: AttributeType23Attributes
    
    // Details for the message criteria (name, value).
    criteriaDetails: Array<AttributeInformationTypeU17>
    
}

export interface AttributeType23Attributes {
    
}

// To identify the type of attribute and the attribute
export interface AttributeInformationTypeU17 {
    
    $attributes: AttributeInformationTypeU17Attributes
    
    // codeset: Seasonality
    attributeType: string
    
    // The only value is: SEA Seasonality
    attributeDescription: Array<string>
    
}

export interface AttributeInformationTypeU17Attributes {
    
}


export interface couponDetailsGroupType1 {
    
    $attributes: couponDetailsGroupType1Attributes
    
    // Tattoo + type of the product identifying the coupon.
    productId: ReferenceInfoType31
    
    // Flight Connection Type
    flightConnectionType: Array<TravelProductInformationType15>
    
}

export interface couponDetailsGroupType1Attributes {
    
}

// To provide specific Hotel reference identification.
export interface ReferenceInfoType31 {
    
    $attributes: ReferenceInfoType31Attributes
    
    
    referenceDetails: ReferencingDetailsType32
    
}

export interface ReferenceInfoType31Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsType32 {
    
    $attributes: ReferencingDetailsType32Attributes
    
    
    type: string
    
    
    value: string
    
}

export interface ReferencingDetailsType32Attributes {
    
}

// To specify details related to a product.
export interface TravelProductInformationType15 {
    
    $attributes: TravelProductInformationType15Attributes
    
    
    boardPointDetails: Array<LocationTypeI20>
    
    
    offpointDetails: Array<LocationTypeI20>
    
    // TST Connection Type
    flightTypeDetails: Array<ProductTypeDetailsType19>
    
}

export interface TravelProductInformationType15Attributes {
    
}

// To specify additional characteristics of a product or service.
export interface ProductTypeDetailsType19 {
    
    $attributes: ProductTypeDetailsType19Attributes
    
    // TST Connection Type
    flightIndicator: string
    
}

export interface ProductTypeDetailsType19Attributes {
    
}

// To serve the purpose of a mandatory segment at the beginning of a group and to avoid segment collision.
export interface DummySegmentTypeI17 {
    
    $attributes: DummySegmentTypeI17Attributes
    
}

export interface DummySegmentTypeI17Attributes {
    
}


export interface Security_AuthenticateType {
    
    $attributes: Security_AuthenticateTypeAttributes
    
    // It contains conversation properties between the SI and the JFE.
    conversationClt: Array<ConversationIDType>
    
    // This segment is dedicated to specify a user identifier. The first one for the main logon and the second one to the delegate user if any. Either a SignId or a UserId can be used, depending on DE 9972 value (Z for Sign Id, U for User Id). The value itself is specified in DE 9904.
    userIdentifier: Array<UserIdentificationType13>
    
    // This segment can be used to specify an AMADEUS Duty Code for the TPF sign in. DUT must be specified in the qualifier.
    dutyCode: Array<ReferenceInformationTypeI15>
    
    // This segment is used to specify the system which is used by the user. The workstation Id (DE 3148) can be specified to determine the location in terms of office of the request (if no workstation Id, the source office must be specified in the first UID segment). Moreover, if a User Id is used instead of a Sign Id, the organization must be specified in DE 9906. WorkstationId is actually the Atid
    systemDetails: Array<SystemDetailsInfoType5>
    
    // These segments contain the password information. Two segments can be used in case of a New password is required.
    passwordInfo: Array<BinaryDataType3>
    
    // Full Location of the workstation
    fullLocation: Array<fullLocationType>
    
    // Conatins Baleb and INdex of application. ex: JFE 1
    applicationId: Array<ApplicationType4>
    
}

export interface Security_AuthenticateTypeAttributes {
    
}

// This segment stores all conversation porperties in the core of the message
export interface ConversationIDType {
    
    $attributes: ConversationIDTypeAttributes
    
    // Sender identification
    senderIdentification: string
    
    // Recipient identification
    recipientIdentification: string
    
    // Sender&#39;s interchange control reference
    senderInterchangeControlReference: string
    
    // Recipient&#39;s interchange control reference
    recipientInterchangeControlReference: string
    
}

export interface ConversationIDTypeAttributes {
    
}

// This segment is used to identify a user.
export interface UserIdentificationType13 {
    
    $attributes: UserIdentificationType13Attributes
    
    // To specify the source office the workstation belongs to. Not used in the second repetition of the segment (if any, it will not be taken into account). Used when no workstation Id is specified in SYS segment.
    originIdentification: Array<OriginatorIdentificationDetailsTypeI17>
    
    // Used to specify which kind of info is given in DE 9900.
    originatorTypeCode: string
    
    // Authority code of the requester If Sign Id : (Numeric Sine)+(Agent Initials) ex : 0001XV). If user Id : Logon User Id.
    originator: string
    
}

export interface UserIdentificationType13Attributes {
    
}

// To identify the originator of the travel request.
export interface OriginatorIdentificationDetailsTypeI17 {
    
    $attributes: OriginatorIdentificationDetailsTypeI17Attributes
    
    // AMADEUS Office Id the workstation belongs to. Must be empty if a workstation Id is specified in the SYS segment.
    sourceOffice: string
    
}

export interface OriginatorIdentificationDetailsTypeI17Attributes {
    
}

// To provide specific reference identification for a traveller.
export interface ReferenceInformationTypeI15 {
    
    $attributes: ReferenceInformationTypeI15Attributes
    
    // This composite duty code information. For Duty code info, DUT must be specified in the Qualifier.
    dutyCodeDetails: ReferencingDetailsTypeI20
    
}

export interface ReferenceInformationTypeI15Attributes {
    
}

// To provide reference identification.
export interface ReferencingDetailsTypeI20 {
    
    $attributes: ReferencingDetailsTypeI20Attributes
    
    // Code determining if the data is a tree identifier, a category identifier or a parent category identifier.
    referenceQualifier: string
    
    // Data value.
    referenceIdentifier: string
    
}

export interface ReferencingDetailsTypeI20Attributes {
    
}

// Used to specify a system
export interface SystemDetailsInfoType5 {
    
    $attributes: SystemDetailsInfoType5Attributes
    
    // This field contains a workstation Identifier. It is used to retrieve the physical origin of the request (mainly for printing purposes) .
    workstationId: Array<string>
    
    // Used to specify an organization when User Id logon is used.
    organizationDetails: Array<SystemDetailsTypeI5>
    
    // Explain what type of workstation ID is stored in data element 3148
    idQualifier: Array<string>
    
}

export interface SystemDetailsInfoType5Attributes {
    
}

// To identify by code or name and location the system that originates or delivers the message for a third party.
export interface SystemDetailsTypeI5 {
    
    $attributes: SystemDetailsTypeI5Attributes
    
    // This DE is used to specify an organization Id such as BA, 1A or QF.
    organizationId: string
    
}

export interface SystemDetailsTypeI5Attributes {
    
}

// to carry binary data within an Edifact segment
export interface BinaryDataType3 {
    
    $attributes: BinaryDataType3Attributes
    
    // Length of the data element 114Z. The unit is given in number of binary characters (bytes).
    dataLength: number
    
    // type of the data. When E is specified, this means that the password is not crypted. When B specified, this means that the password is crypted.
    dataType: string
    
    // used to store binary data
    binaryData: string
    
}

export interface BinaryDataType3Attributes {
    
}


export interface fullLocationType {
    
    $attributes: fullLocationTypeAttributes
    
    // Stores the location of the workstation.
    workstationPos: PlaceLocationIdentificationTypeU1
    
    // Contains terminal and facility or worstation id.
    locationInfo: Array<TerminalLocationType>
    
}

export interface fullLocationTypeAttributes {
    
}

// To identify a place or a location and/or related locations.
export interface PlaceLocationIdentificationTypeU1 {
    
    $attributes: PlaceLocationIdentificationTypeU1Attributes
    
    // Type of location
    locationType: string
    
    // Description of the location
    locationDescription: Array<LocationIdentificationBatchTypeU1>
    
    // Details on the location
    firstLocationDetails: Array<RelatedLocationOneIdentificationTypeU1>
    
}

export interface PlaceLocationIdentificationTypeU1Attributes {
    
}

// Identification of a location by code or name
export interface LocationIdentificationBatchTypeU1 {
    
    $attributes: LocationIdentificationBatchTypeU1Attributes
    
    // Airport(139) or City (227) code
    code: Array<string>
    
    // Discriminator between airport or city.
    qualifier: Array<string>
    
}

export interface LocationIdentificationBatchTypeU1Attributes {
    
}

// Identification the first related location by code or name.
export interface RelatedLocationOneIdentificationTypeU1 {
    
    $attributes: RelatedLocationOneIdentificationTypeU1Attributes
    
    // Terminal (180) or Building(300) code
    code: Array<string>
    
    // Discriminator between airport or city.
    qualifier: Array<string>
    
}

export interface RelatedLocationOneIdentificationTypeU1Attributes {
    
}

// To convey informations about functional and physical locations in a terminal
export interface TerminalLocationType {
    
    $attributes: TerminalLocationTypeAttributes
    
    // To convey information related to a specific Facility.
    facilityDetails: FacilityInformationType
    
}

export interface TerminalLocationTypeAttributes {
    
}


export interface FacilityInformationType {
    
    $attributes: FacilityInformationTypeAttributes
    
    // Type of the Facility, coded. E.g.: - Check-In Desk - Gate... The codeset is not yet defined.
    type: string
    
    // Unique Reference to a Facility of a given Type in a terminal. This can be several kind of values. E.g.: - 25 (means Gate 25 when associated Facility Type= Gate, or Check-in Desk 25 when associated Facility Type= Check-In Desk) - BAEXC: means Ba-Executive Club Lounge when associated to
    identifier: Array<string>
    
}

export interface FacilityInformationTypeAttributes {
    
}

// This segment is used to specify details on an application
export interface ApplicationType4 {
    
    $attributes: ApplicationType4Attributes
    
    // Identification of the application.
    applicationDetails: ApplicationIdentificationType3
    
}

export interface ApplicationType4Attributes {
    
}

// Used to specify application details
export interface ApplicationIdentificationType3 {
    
    $attributes: ApplicationIdentificationType3Attributes
    
    // Application Label. Exemple : NGD. Label is the first part of the ApplicationId. Label is considered as an Internal Id, as it is the key of the application.
    internalId: string
    
    // Application Index. Index is part of the ApplicationId.
    seqNumber: Array<string>
    
}

export interface ApplicationIdentificationType3Attributes {
    
}


export interface Security_AuthenticateReplyType {
    
    $attributes: Security_AuthenticateReplyTypeAttributes
    
    // Group dedicated to application error details. Only present if process fails.
    errorSection: Array<errorSectionType>
    
    // This segment is only used if process is OK. In that case P is specified.
    processStatus: Array<ResponseAnalysisDetailsType3>
    
    // This segment is used to specify organization details associated with the user.
    organizationInfo: Array<OrganizationType>
    
    // Identifier of a group of conversation, shared by sevreal mono-signed conversations.
    conversationGrp: Array<BusinessProcessIdType>
    
}

export interface Security_AuthenticateReplyTypeAttributes {
    
}


export interface errorSectionType {
    
    $attributes: errorSectionTypeAttributes
    
    // Application Error
    applicationError: ApplicationErrorInformationType22
    
    // Supplementary Info on the Error.
    interactiveFreeText: Array<InteractiveFreeTextTypeI15>
    
}

export interface errorSectionTypeAttributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType22 {
    
    $attributes: ApplicationErrorInformationType22Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType20
    
}

export interface ApplicationErrorInformationType22Attributes {
    
}


export interface ApplicationErrorDetailType20 {
    
    $attributes: ApplicationErrorDetailType20Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType20Attributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextTypeI15 {
    
    $attributes: InteractiveFreeTextTypeI15Attributes
    
    // Free Text Qualifier
    freeTextQualif: Array<FreeTextQualificationTypeI15>
    
    // Free Text
    freeText: Array<string>
    
}

export interface InteractiveFreeTextTypeI15Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationTypeI15 {
    
    $attributes: FreeTextQualificationTypeI15Attributes
    
    // Subject
    subject: string
    
    // Info Type
    infoType: Array<string>
    
    // Language
    language: Array<string>
    
}

export interface FreeTextQualificationTypeI15Attributes {
    
}

// To specify the type of query and the processing status associated with this response.
export interface ResponseAnalysisDetailsType3 {
    
    $attributes: ResponseAnalysisDetailsType3Attributes
    
    // P must be specified when status of the process is OK.
    statusCode: string
    
}

export interface ResponseAnalysisDetailsType3Attributes {
    
}

// This Segment is used to specify Organization Details
export interface OrganizationType {
    
    $attributes: OrganizationTypeAttributes
    
    // This composite is used to specify an organization details
    organizationDetails: OrganizationIdentificationType
    
}

export interface OrganizationTypeAttributes {
    
}


export interface OrganizationIdentificationType {
    
    $attributes: OrganizationIdentificationTypeAttributes
    
    // Organization label (Company Id).
    label: string
    
}

export interface OrganizationIdentificationTypeAttributes {
    
}

// To convey a process ID
export interface BusinessProcessIdType {
    
    $attributes: BusinessProcessIdTypeAttributes
    
    // A unique reference to identify the process/business
    processIdentifier: string
    
}

export interface BusinessProcessIdTypeAttributes {
    
}


export interface Security_SignOutType {
    
    $attributes: Security_SignOutTypeAttributes
    
    // It contains conversation properties between the SI and the JFE.
    conversationClt: Array<ConversationIDType1>
    
}

export interface Security_SignOutTypeAttributes {
    
}

// This segment stores all conversation porperties in the core of the message
export interface ConversationIDType1 {
    
    $attributes: ConversationIDType1Attributes
    
    // Sender identification
    senderIdentification: string
    
    // Recipient identification
    recipientIdentification: string
    
    // Sender&#39;s interchange control reference
    senderInterchangeControlReference: string
    
    // Recipient&#39;s interchange control reference
    recipientInterchangeControlReference: string
    
}

export interface ConversationIDType1Attributes {
    
}


export interface Security_SignOutReplyType {
    
    $attributes: Security_SignOutReplyTypeAttributes
    
    // Group dedicated to application error details. Only present if process fails.
    errorSection: Array<errorSectionType1>
    
    // This segment is only used if process is OK. In that case P is specified.
    processStatus: Array<ResponseAnalysisDetailsType4>
    
}

export interface Security_SignOutReplyTypeAttributes {
    
}


export interface errorSectionType1 {
    
    $attributes: errorSectionType1Attributes
    
    // Application Error
    applicationError: ApplicationErrorInformationType23
    
    // Supplementary Info on the Error.
    interactiveFreeText: Array<InteractiveFreeTextTypeI16>
    
}

export interface errorSectionType1Attributes {
    
}

// To identify the type of application error within a message.
export interface ApplicationErrorInformationType23 {
    
    $attributes: ApplicationErrorInformationType23Attributes
    
    // Application error details.
    errorDetails: ApplicationErrorDetailType21
    
}

export interface ApplicationErrorInformationType23Attributes {
    
}


export interface ApplicationErrorDetailType21 {
    
    $attributes: ApplicationErrorDetailType21Attributes
    
    // Code identifying the data validation error condition.
    errorCode: string
    
    // Identification of a code list.
    errorCategory: Array<string>
    
    // Code identifying the agency responsible for a code list.
    errorCodeOwner: Array<string>
    
}

export interface ApplicationErrorDetailType21Attributes {
    
}

// To provide free text information.
export interface InteractiveFreeTextTypeI16 {
    
    $attributes: InteractiveFreeTextTypeI16Attributes
    
    // Free Text Qualifier
    freeTextQualification: Array<FreeTextQualificationTypeI16>
    
    // Free Text
    freeText: Array<string>
    
}

export interface InteractiveFreeTextTypeI16Attributes {
    
}

// To specify the type, purpose, and language of free text and whether any action is required.
export interface FreeTextQualificationTypeI16 {
    
    $attributes: FreeTextQualificationTypeI16Attributes
    
    // Subject
    textSubjectQualifier: string
    
    // Info Type
    informationType: Array<string>
    
    // Language
    language: Array<string>
    
}

export interface FreeTextQualificationTypeI16Attributes {
    
}

// To specify the type of query and the processing status associated with this response.
export interface ResponseAnalysisDetailsType4 {
    
    $attributes: ResponseAnalysisDetailsType4Attributes
    
    // P must be specified when status of the process is OK.
    statusCode: string
    
}

export interface ResponseAnalysisDetailsType4Attributes {
    
}


export interface Air_MultiAvailabilityOperationRequestOperationHeaders {
    
    $attributes: Air_MultiAvailabilityOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Air_MultiAvailabilityOperationRequestOperationHeadersAttributes {
    
}


export interface Air_MultiAvailabilityOperationRequest {
    
    $attributes: Air_MultiAvailabilityOperationRequestAttributes
    
    
    Body: Air_MultiAvailabilityType
    
    
    Headers: Air_MultiAvailabilityOperationRequestOperationHeaders
    
}

export interface Air_MultiAvailabilityOperationRequestAttributes {
    
}


export interface Air_MultiAvailabilityOperationResponseOperationHeaders {
    
    $attributes: Air_MultiAvailabilityOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Air_MultiAvailabilityOperationResponseOperationHeadersAttributes {
    
}


export interface Air_MultiAvailabilityOperationResponse {
    
    $attributes: Air_MultiAvailabilityOperationResponseAttributes
    
    
    Body: Air_MultiAvailabilityReplyType
    
    
    Headers: Air_MultiAvailabilityOperationResponseOperationHeaders
    
}

export interface Air_MultiAvailabilityOperationResponseAttributes {
    
}


export interface Air_RetrieveSeatMapOperationRequestOperationHeaders {
    
    $attributes: Air_RetrieveSeatMapOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Air_RetrieveSeatMapOperationRequestOperationHeadersAttributes {
    
}


export interface Air_RetrieveSeatMapOperationRequest {
    
    $attributes: Air_RetrieveSeatMapOperationRequestAttributes
    
    
    Body: Air_RetrieveSeatMapType
    
    
    Headers: Air_RetrieveSeatMapOperationRequestOperationHeaders
    
}

export interface Air_RetrieveSeatMapOperationRequestAttributes {
    
}


export interface Air_RetrieveSeatMapOperationResponseOperationHeaders {
    
    $attributes: Air_RetrieveSeatMapOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Air_RetrieveSeatMapOperationResponseOperationHeadersAttributes {
    
}


export interface Air_RetrieveSeatMapOperationResponse {
    
    $attributes: Air_RetrieveSeatMapOperationResponseAttributes
    
    
    Body: Air_RetrieveSeatMapReplyType
    
    
    Headers: Air_RetrieveSeatMapOperationResponseOperationHeaders
    
}

export interface Air_RetrieveSeatMapOperationResponseAttributes {
    
}


export interface Air_SellFromRecommendationOperationRequestOperationHeaders {
    
    $attributes: Air_SellFromRecommendationOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Air_SellFromRecommendationOperationRequestOperationHeadersAttributes {
    
}


export interface Air_SellFromRecommendationOperationRequest {
    
    $attributes: Air_SellFromRecommendationOperationRequestAttributes
    
    
    Body: Air_SellFromRecommendationType
    
    
    Headers: Air_SellFromRecommendationOperationRequestOperationHeaders
    
}

export interface Air_SellFromRecommendationOperationRequestAttributes {
    
}


export interface Air_SellFromRecommendationOperationResponseOperationHeaders {
    
    $attributes: Air_SellFromRecommendationOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Air_SellFromRecommendationOperationResponseOperationHeadersAttributes {
    
}


export interface Air_SellFromRecommendationOperationResponse {
    
    $attributes: Air_SellFromRecommendationOperationResponseAttributes
    
    
    Body: Air_SellFromRecommendationReplyType
    
    
    Headers: Air_SellFromRecommendationOperationResponseOperationHeaders
    
}

export interface Air_SellFromRecommendationOperationResponseAttributes {
    
}


export interface Command_CrypticOperationRequestOperationHeaders {
    
    $attributes: Command_CrypticOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Command_CrypticOperationRequestOperationHeadersAttributes {
    
}


export interface Command_CrypticOperationRequest {
    
    $attributes: Command_CrypticOperationRequestAttributes
    
    
    Body: Command_CrypticType
    
    
    Headers: Command_CrypticOperationRequestOperationHeaders
    
}

export interface Command_CrypticOperationRequestAttributes {
    
}


export interface Command_CrypticOperationResponseOperationHeaders {
    
    $attributes: Command_CrypticOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Command_CrypticOperationResponseOperationHeadersAttributes {
    
}


export interface Command_CrypticOperationResponse {
    
    $attributes: Command_CrypticOperationResponseAttributes
    
    
    Body: Command_CrypticReplyType
    
    
    Headers: Command_CrypticOperationResponseOperationHeaders
    
}

export interface Command_CrypticOperationResponseAttributes {
    
}


export interface FOP_CreateFormOfPaymentOperationRequestOperationHeaders {
    
    $attributes: FOP_CreateFormOfPaymentOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface FOP_CreateFormOfPaymentOperationRequestOperationHeadersAttributes {
    
}


export interface FOP_CreateFormOfPaymentOperationRequest {
    
    $attributes: FOP_CreateFormOfPaymentOperationRequestAttributes
    
    
    Body: FOP_CreateFormOfPaymentType
    
    
    Headers: FOP_CreateFormOfPaymentOperationRequestOperationHeaders
    
}

export interface FOP_CreateFormOfPaymentOperationRequestAttributes {
    
}


export interface FOP_CreateFormOfPaymentOperationResponseOperationHeaders {
    
    $attributes: FOP_CreateFormOfPaymentOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface FOP_CreateFormOfPaymentOperationResponseOperationHeadersAttributes {
    
}


export interface FOP_CreateFormOfPaymentOperationResponse {
    
    $attributes: FOP_CreateFormOfPaymentOperationResponseAttributes
    
    
    Body: FOP_CreateFormOfPaymentReplyType
    
    
    Headers: FOP_CreateFormOfPaymentOperationResponseOperationHeaders
    
}

export interface FOP_CreateFormOfPaymentOperationResponseAttributes {
    
}


export interface Fare_CheckRulesOperationRequestOperationHeaders {
    
    $attributes: Fare_CheckRulesOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Fare_CheckRulesOperationRequestOperationHeadersAttributes {
    
}


export interface Fare_CheckRulesOperationRequest {
    
    $attributes: Fare_CheckRulesOperationRequestAttributes
    
    
    Body: Fare_CheckRulesType
    
    
    Headers: Fare_CheckRulesOperationRequestOperationHeaders
    
}

export interface Fare_CheckRulesOperationRequestAttributes {
    
}


export interface Fare_CheckRulesOperationResponseOperationHeaders {
    
    $attributes: Fare_CheckRulesOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Fare_CheckRulesOperationResponseOperationHeadersAttributes {
    
}


export interface Fare_CheckRulesOperationResponse {
    
    $attributes: Fare_CheckRulesOperationResponseAttributes
    
    
    Body: Fare_CheckRulesReplyType
    
    
    Headers: Fare_CheckRulesOperationResponseOperationHeaders
    
}

export interface Fare_CheckRulesOperationResponseAttributes {
    
}


export interface Fare_GetFareFamilyDescriptionOperationRequestOperationHeaders {
    
    $attributes: Fare_GetFareFamilyDescriptionOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Fare_GetFareFamilyDescriptionOperationRequestOperationHeadersAttributes {
    
}


export interface Fare_GetFareFamilyDescriptionOperationRequest {
    
    $attributes: Fare_GetFareFamilyDescriptionOperationRequestAttributes
    
    
    Body: Fare_GetFareFamilyDescriptionType
    
    
    Headers: Fare_GetFareFamilyDescriptionOperationRequestOperationHeaders
    
}

export interface Fare_GetFareFamilyDescriptionOperationRequestAttributes {
    
}


export interface Fare_GetFareFamilyDescriptionOperationResponseOperationHeaders {
    
    $attributes: Fare_GetFareFamilyDescriptionOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Fare_GetFareFamilyDescriptionOperationResponseOperationHeadersAttributes {
    
}


export interface Fare_GetFareFamilyDescriptionOperationResponse {
    
    $attributes: Fare_GetFareFamilyDescriptionOperationResponseAttributes
    
    
    Body: Fare_GetFareFamilyDescriptionReplyType
    
    
    Headers: Fare_GetFareFamilyDescriptionOperationResponseOperationHeaders
    
}

export interface Fare_GetFareFamilyDescriptionOperationResponseAttributes {
    
}


export interface Fare_InformativeBestPricingWithoutPNROperationRequestOperationHeaders {
    
    $attributes: Fare_InformativeBestPricingWithoutPNROperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Fare_InformativeBestPricingWithoutPNROperationRequestOperationHeadersAttributes {
    
}


export interface Fare_InformativeBestPricingWithoutPNROperationRequest {
    
    $attributes: Fare_InformativeBestPricingWithoutPNROperationRequestAttributes
    
    
    Body: Fare_InformativeBestPricingWithoutPNRType
    
    
    Headers: Fare_InformativeBestPricingWithoutPNROperationRequestOperationHeaders
    
}

export interface Fare_InformativeBestPricingWithoutPNROperationRequestAttributes {
    
}


export interface Fare_InformativeBestPricingWithoutPNROperationResponseOperationHeaders {
    
    $attributes: Fare_InformativeBestPricingWithoutPNROperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Fare_InformativeBestPricingWithoutPNROperationResponseOperationHeadersAttributes {
    
}


export interface Fare_InformativeBestPricingWithoutPNROperationResponse {
    
    $attributes: Fare_InformativeBestPricingWithoutPNROperationResponseAttributes
    
    
    Body: Fare_InformativeBestPricingWithoutPNRReplyType
    
    
    Headers: Fare_InformativeBestPricingWithoutPNROperationResponseOperationHeaders
    
}

export interface Fare_InformativeBestPricingWithoutPNROperationResponseAttributes {
    
}


export interface Fare_InformativePricingWithoutPNROperationRequestOperationHeaders {
    
    $attributes: Fare_InformativePricingWithoutPNROperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Fare_InformativePricingWithoutPNROperationRequestOperationHeadersAttributes {
    
}


export interface Fare_InformativePricingWithoutPNROperationRequest {
    
    $attributes: Fare_InformativePricingWithoutPNROperationRequestAttributes
    
    
    Body: Fare_InformativePricingWithoutPNRType
    
    
    Headers: Fare_InformativePricingWithoutPNROperationRequestOperationHeaders
    
}

export interface Fare_InformativePricingWithoutPNROperationRequestAttributes {
    
}


export interface Fare_InformativePricingWithoutPNROperationResponseOperationHeaders {
    
    $attributes: Fare_InformativePricingWithoutPNROperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Fare_InformativePricingWithoutPNROperationResponseOperationHeadersAttributes {
    
}


export interface Fare_InformativePricingWithoutPNROperationResponse {
    
    $attributes: Fare_InformativePricingWithoutPNROperationResponseAttributes
    
    
    Body: Fare_InformativePricingWithoutPNRReplyType
    
    
    Headers: Fare_InformativePricingWithoutPNROperationResponseOperationHeaders
    
}

export interface Fare_InformativePricingWithoutPNROperationResponseAttributes {
    
}


export interface Fare_MasterPricerCalendarOperationRequestOperationHeaders {
    
    $attributes: Fare_MasterPricerCalendarOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Fare_MasterPricerCalendarOperationRequestOperationHeadersAttributes {
    
}


export interface Fare_MasterPricerCalendarOperationRequest {
    
    $attributes: Fare_MasterPricerCalendarOperationRequestAttributes
    
    
    Body: Fare_MasterPricerCalendarType
    
    
    Headers: Fare_MasterPricerCalendarOperationRequestOperationHeaders
    
}

export interface Fare_MasterPricerCalendarOperationRequestAttributes {
    
}


export interface Fare_MasterPricerCalendarOperationResponseOperationHeaders {
    
    $attributes: Fare_MasterPricerCalendarOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Fare_MasterPricerCalendarOperationResponseOperationHeadersAttributes {
    
}


export interface Fare_MasterPricerCalendarOperationResponse {
    
    $attributes: Fare_MasterPricerCalendarOperationResponseAttributes
    
    
    Body: Fare_MasterPricerCalendarReplyType
    
    
    Headers: Fare_MasterPricerCalendarOperationResponseOperationHeaders
    
}

export interface Fare_MasterPricerCalendarOperationResponseAttributes {
    
}


export interface Fare_MasterPricerTravelBoardSearchOperationRequestOperationHeaders {
    
    $attributes: Fare_MasterPricerTravelBoardSearchOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Fare_MasterPricerTravelBoardSearchOperationRequestOperationHeadersAttributes {
    
}


export interface Fare_MasterPricerTravelBoardSearchOperationRequest {
    
    $attributes: Fare_MasterPricerTravelBoardSearchOperationRequestAttributes
    
    
    Body: Fare_MasterPricerTravelBoardSearchType
    
    
    Headers: Fare_MasterPricerTravelBoardSearchOperationRequestOperationHeaders
    
}

export interface Fare_MasterPricerTravelBoardSearchOperationRequestAttributes {
    
}


export interface Fare_MasterPricerTravelBoardSearchOperationResponseOperationHeaders {
    
    $attributes: Fare_MasterPricerTravelBoardSearchOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Fare_MasterPricerTravelBoardSearchOperationResponseOperationHeadersAttributes {
    
}


export interface Fare_MasterPricerTravelBoardSearchOperationResponse {
    
    $attributes: Fare_MasterPricerTravelBoardSearchOperationResponseAttributes
    
    
    Body: Fare_MasterPricerTravelBoardSearchReplyType
    
    
    Headers: Fare_MasterPricerTravelBoardSearchOperationResponseOperationHeaders
    
}

export interface Fare_MasterPricerTravelBoardSearchOperationResponseAttributes {
    
}


export interface Fare_PricePNRWithBookingClassOperationRequestOperationHeaders {
    
    $attributes: Fare_PricePNRWithBookingClassOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Fare_PricePNRWithBookingClassOperationRequestOperationHeadersAttributes {
    
}


export interface Fare_PricePNRWithBookingClassOperationRequest {
    
    $attributes: Fare_PricePNRWithBookingClassOperationRequestAttributes
    
    
    Body: Fare_PricePNRWithBookingClassType
    
    
    Headers: Fare_PricePNRWithBookingClassOperationRequestOperationHeaders
    
}

export interface Fare_PricePNRWithBookingClassOperationRequestAttributes {
    
}


export interface Fare_PricePNRWithBookingClassOperationResponseOperationHeaders {
    
    $attributes: Fare_PricePNRWithBookingClassOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Fare_PricePNRWithBookingClassOperationResponseOperationHeadersAttributes {
    
}


export interface Fare_PricePNRWithBookingClassOperationResponse {
    
    $attributes: Fare_PricePNRWithBookingClassOperationResponseAttributes
    
    
    Body: Fare_PricePNRWithBookingClassReplyType
    
    
    Headers: Fare_PricePNRWithBookingClassOperationResponseOperationHeaders
    
}

export interface Fare_PricePNRWithBookingClassOperationResponseAttributes {
    
}


export interface Fare_PricePNRWithLowerFaresOperationRequestOperationHeaders {
    
    $attributes: Fare_PricePNRWithLowerFaresOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Fare_PricePNRWithLowerFaresOperationRequestOperationHeadersAttributes {
    
}


export interface Fare_PricePNRWithLowerFaresOperationRequest {
    
    $attributes: Fare_PricePNRWithLowerFaresOperationRequestAttributes
    
    
    Body: Fare_PricePNRWithLowerFaresType
    
    
    Headers: Fare_PricePNRWithLowerFaresOperationRequestOperationHeaders
    
}

export interface Fare_PricePNRWithLowerFaresOperationRequestAttributes {
    
}


export interface Fare_PricePNRWithLowerFaresOperationResponseOperationHeaders {
    
    $attributes: Fare_PricePNRWithLowerFaresOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Fare_PricePNRWithLowerFaresOperationResponseOperationHeadersAttributes {
    
}


export interface Fare_PricePNRWithLowerFaresOperationResponse {
    
    $attributes: Fare_PricePNRWithLowerFaresOperationResponseAttributes
    
    
    Body: Fare_PricePNRWithLowerFaresReplyType
    
    
    Headers: Fare_PricePNRWithLowerFaresOperationResponseOperationHeaders
    
}

export interface Fare_PricePNRWithLowerFaresOperationResponseAttributes {
    
}


export interface Fare_PricePNRWithLowestFareOperationRequestOperationHeaders {
    
    $attributes: Fare_PricePNRWithLowestFareOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Fare_PricePNRWithLowestFareOperationRequestOperationHeadersAttributes {
    
}


export interface Fare_PricePNRWithLowestFareOperationRequest {
    
    $attributes: Fare_PricePNRWithLowestFareOperationRequestAttributes
    
    
    Body: Fare_PricePNRWithLowestFareType
    
    
    Headers: Fare_PricePNRWithLowestFareOperationRequestOperationHeaders
    
}

export interface Fare_PricePNRWithLowestFareOperationRequestAttributes {
    
}


export interface Fare_PricePNRWithLowestFareOperationResponseOperationHeaders {
    
    $attributes: Fare_PricePNRWithLowestFareOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Fare_PricePNRWithLowestFareOperationResponseOperationHeadersAttributes {
    
}


export interface Fare_PricePNRWithLowestFareOperationResponse {
    
    $attributes: Fare_PricePNRWithLowestFareOperationResponseAttributes
    
    
    Body: Fare_PricePNRWithLowestFareReplyType
    
    
    Headers: Fare_PricePNRWithLowestFareOperationResponseOperationHeaders
    
}

export interface Fare_PricePNRWithLowestFareOperationResponseAttributes {
    
}


export interface Hotel_CompleteReservationDetailsOperationRequestOperationHeaders {
    
    $attributes: Hotel_CompleteReservationDetailsOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Hotel_CompleteReservationDetailsOperationRequestOperationHeadersAttributes {
    
}


export interface Hotel_CompleteReservationDetailsOperationRequest {
    
    $attributes: Hotel_CompleteReservationDetailsOperationRequestAttributes
    
    
    Body: Hotel_CompleteReservationDetailsType
    
    
    Headers: Hotel_CompleteReservationDetailsOperationRequestOperationHeaders
    
}

export interface Hotel_CompleteReservationDetailsOperationRequestAttributes {
    
}


export interface Hotel_CompleteReservationDetailsOperationResponseOperationHeaders {
    
    $attributes: Hotel_CompleteReservationDetailsOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Hotel_CompleteReservationDetailsOperationResponseOperationHeadersAttributes {
    
}


export interface Hotel_CompleteReservationDetailsOperationResponse {
    
    $attributes: Hotel_CompleteReservationDetailsOperationResponseAttributes
    
    
    Body: Hotel_CompleteReservationDetailsReplyType
    
    
    Headers: Hotel_CompleteReservationDetailsOperationResponseOperationHeaders
    
}

export interface Hotel_CompleteReservationDetailsOperationResponseAttributes {
    
}


export interface Hotel_SellOperationRequestOperationHeaders {
    
    $attributes: Hotel_SellOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Hotel_SellOperationRequestOperationHeadersAttributes {
    
}


export interface Hotel_SellOperationRequest {
    
    $attributes: Hotel_SellOperationRequestAttributes
    
    
    Body: Hotel_SellType
    
    
    Headers: Hotel_SellOperationRequestOperationHeaders
    
}

export interface Hotel_SellOperationRequestAttributes {
    
}


export interface Hotel_SellOperationResponseOperationHeaders {
    
    $attributes: Hotel_SellOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Hotel_SellOperationResponseOperationHeadersAttributes {
    
}


export interface Hotel_SellOperationResponse {
    
    $attributes: Hotel_SellOperationResponseAttributes
    
    
    Body: Hotel_SellReplyType
    
    
    Headers: Hotel_SellOperationResponseOperationHeaders
    
}

export interface Hotel_SellOperationResponseAttributes {
    
}


export interface PNR_AddMultiElementsOperationRequestOperationHeaders {
    
    $attributes: PNR_AddMultiElementsOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface PNR_AddMultiElementsOperationRequestOperationHeadersAttributes {
    
}


export interface PNR_AddMultiElementsOperationRequest {
    
    $attributes: PNR_AddMultiElementsOperationRequestAttributes
    
    
    Body: PNR_AddMultiElementsType
    
    
    Headers: PNR_AddMultiElementsOperationRequestOperationHeaders
    
}

export interface PNR_AddMultiElementsOperationRequestAttributes {
    
}


export interface PNR_AddMultiElementsOperationResponseOperationHeaders {
    
    $attributes: PNR_AddMultiElementsOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface PNR_AddMultiElementsOperationResponseOperationHeadersAttributes {
    
}


export interface PNR_AddMultiElementsOperationResponse {
    
    $attributes: PNR_AddMultiElementsOperationResponseAttributes
    
    
    Body: PNR_ReplyType
    
    
    Headers: PNR_AddMultiElementsOperationResponseOperationHeaders
    
}

export interface PNR_AddMultiElementsOperationResponseAttributes {
    
}


export interface PNR_CancelOperationRequestOperationHeaders {
    
    $attributes: PNR_CancelOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface PNR_CancelOperationRequestOperationHeadersAttributes {
    
}


export interface PNR_CancelOperationRequest {
    
    $attributes: PNR_CancelOperationRequestAttributes
    
    
    Body: PNR_CancelType
    
    
    Headers: PNR_CancelOperationRequestOperationHeaders
    
}

export interface PNR_CancelOperationRequestAttributes {
    
}


export interface PNR_CancelOperationResponseOperationHeaders {
    
    $attributes: PNR_CancelOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface PNR_CancelOperationResponseOperationHeadersAttributes {
    
}


export interface PNR_CancelOperationResponse {
    
    $attributes: PNR_CancelOperationResponseAttributes
    
    
    Body: PNR_ReplyType
    
    
    Headers: PNR_CancelOperationResponseOperationHeaders
    
}

export interface PNR_CancelOperationResponseAttributes {
    
}


export interface PNR_RetrieveOperationRequestOperationHeaders {
    
    $attributes: PNR_RetrieveOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface PNR_RetrieveOperationRequestOperationHeadersAttributes {
    
}


export interface PNR_RetrieveOperationRequest {
    
    $attributes: PNR_RetrieveOperationRequestAttributes
    
    
    Body: PNR_RetrieveType
    
    
    Headers: PNR_RetrieveOperationRequestOperationHeaders
    
}

export interface PNR_RetrieveOperationRequestAttributes {
    
}


export interface PNR_RetrieveOperationResponseOperationHeaders {
    
    $attributes: PNR_RetrieveOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface PNR_RetrieveOperationResponseOperationHeadersAttributes {
    
}


export interface PNR_RetrieveOperationResponse {
    
    $attributes: PNR_RetrieveOperationResponseAttributes
    
    
    Body: PNR_ReplyType
    
    
    Headers: PNR_RetrieveOperationResponseOperationHeaders
    
}

export interface PNR_RetrieveOperationResponseAttributes {
    
}


export interface PNR_Retrieve2OperationRequestOperationHeaders {
    
    $attributes: PNR_Retrieve2OperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface PNR_Retrieve2OperationRequestOperationHeadersAttributes {
    
}


export interface PNR_Retrieve2OperationRequest {
    
    $attributes: PNR_Retrieve2OperationRequestAttributes
    
    
    Body: PNR_RetrieveType
    
    
    Headers: PNR_Retrieve2OperationRequestOperationHeaders
    
}

export interface PNR_Retrieve2OperationRequestAttributes {
    
}


export interface PNR_Retrieve2OperationResponseOperationHeaders {
    
    $attributes: PNR_Retrieve2OperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface PNR_Retrieve2OperationResponseOperationHeadersAttributes {
    
}


export interface PNR_Retrieve2OperationResponse {
    
    $attributes: PNR_Retrieve2OperationResponseAttributes
    
    
    Body: PNR_ListType
    
    
    Headers: PNR_Retrieve2OperationResponseOperationHeaders
    
}

export interface PNR_Retrieve2OperationResponseAttributes {
    
}


export interface PNR_TransferOwnershipOperationRequestOperationHeaders {
    
    $attributes: PNR_TransferOwnershipOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface PNR_TransferOwnershipOperationRequestOperationHeadersAttributes {
    
}


export interface PNR_TransferOwnershipOperationRequest {
    
    $attributes: PNR_TransferOwnershipOperationRequestAttributes
    
    
    Body: PNR_TransferOwnershipType
    
    
    Headers: PNR_TransferOwnershipOperationRequestOperationHeaders
    
}

export interface PNR_TransferOwnershipOperationRequestAttributes {
    
}


export interface PNR_TransferOwnershipOperationResponseOperationHeaders {
    
    $attributes: PNR_TransferOwnershipOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface PNR_TransferOwnershipOperationResponseOperationHeadersAttributes {
    
}


export interface PNR_TransferOwnershipOperationResponse {
    
    $attributes: PNR_TransferOwnershipOperationResponseAttributes
    
    
    Body: PNR_TransferOwnershipReplyType
    
    
    Headers: PNR_TransferOwnershipOperationResponseOperationHeaders
    
}

export interface PNR_TransferOwnershipOperationResponseAttributes {
    
}


export interface Queue_PlacePNROperationRequestOperationHeaders {
    
    $attributes: Queue_PlacePNROperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Queue_PlacePNROperationRequestOperationHeadersAttributes {
    
}


export interface Queue_PlacePNROperationRequest {
    
    $attributes: Queue_PlacePNROperationRequestAttributes
    
    
    Body: Queue_PlacePNRType
    
    
    Headers: Queue_PlacePNROperationRequestOperationHeaders
    
}

export interface Queue_PlacePNROperationRequestAttributes {
    
}


export interface Queue_PlacePNROperationResponseOperationHeaders {
    
    $attributes: Queue_PlacePNROperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Queue_PlacePNROperationResponseOperationHeadersAttributes {
    
}


export interface Queue_PlacePNROperationResponse {
    
    $attributes: Queue_PlacePNROperationResponseAttributes
    
    
    Body: Queue_PlacePNRReplyType
    
    
    Headers: Queue_PlacePNROperationResponseOperationHeaders
    
}

export interface Queue_PlacePNROperationResponseAttributes {
    
}


export interface Security_AuthenticateOperationRequestOperationHeaders {
    
    $attributes: Security_AuthenticateOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Security_AuthenticateOperationRequestOperationHeadersAttributes {
    
}


export interface Security_AuthenticateOperationRequest {
    
    $attributes: Security_AuthenticateOperationRequestAttributes
    
    
    Body: Security_AuthenticateType
    
    
    Headers: Security_AuthenticateOperationRequestOperationHeaders
    
}

export interface Security_AuthenticateOperationRequestAttributes {
    
}


export interface Security_AuthenticateOperationResponseOperationHeaders {
    
    $attributes: Security_AuthenticateOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Security_AuthenticateOperationResponseOperationHeadersAttributes {
    
}


export interface Security_AuthenticateOperationResponse {
    
    $attributes: Security_AuthenticateOperationResponseAttributes
    
    
    Body: Security_AuthenticateReplyType
    
    
    Headers: Security_AuthenticateOperationResponseOperationHeaders
    
}

export interface Security_AuthenticateOperationResponseAttributes {
    
}


export interface Security_SignOutOperationRequestOperationHeaders {
    
    $attributes: Security_SignOutOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Security_SignOutOperationRequestOperationHeadersAttributes {
    
}


export interface Security_SignOutOperationRequest {
    
    $attributes: Security_SignOutOperationRequestAttributes
    
    
    Body: Security_SignOutType
    
    
    Headers: Security_SignOutOperationRequestOperationHeaders
    
}

export interface Security_SignOutOperationRequestAttributes {
    
}


export interface Security_SignOutOperationResponseOperationHeaders {
    
    $attributes: Security_SignOutOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Security_SignOutOperationResponseOperationHeadersAttributes {
    
}


export interface Security_SignOutOperationResponse {
    
    $attributes: Security_SignOutOperationResponseAttributes
    
    
    Body: Security_SignOutReplyType
    
    
    Headers: Security_SignOutOperationResponseOperationHeaders
    
}

export interface Security_SignOutOperationResponseAttributes {
    
}


export interface Service_IntegratedCatalogueOperationRequestOperationHeaders {
    
    $attributes: Service_IntegratedCatalogueOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Service_IntegratedCatalogueOperationRequestOperationHeadersAttributes {
    
}


export interface Service_IntegratedCatalogueOperationRequest {
    
    $attributes: Service_IntegratedCatalogueOperationRequestAttributes
    
    
    Body: Service_IntegratedCatalogueType
    
    
    Headers: Service_IntegratedCatalogueOperationRequestOperationHeaders
    
}

export interface Service_IntegratedCatalogueOperationRequestAttributes {
    
}


export interface Service_IntegratedCatalogueOperationResponseOperationHeaders {
    
    $attributes: Service_IntegratedCatalogueOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Service_IntegratedCatalogueOperationResponseOperationHeadersAttributes {
    
}


export interface Service_IntegratedCatalogueOperationResponse {
    
    $attributes: Service_IntegratedCatalogueOperationResponseAttributes
    
    
    Body: Service_IntegratedCatalogueReplyType
    
    
    Headers: Service_IntegratedCatalogueOperationResponseOperationHeaders
    
}

export interface Service_IntegratedCatalogueOperationResponseAttributes {
    
}


export interface Service_IntegratedPricingOperationRequestOperationHeaders {
    
    $attributes: Service_IntegratedPricingOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Service_IntegratedPricingOperationRequestOperationHeadersAttributes {
    
}


export interface Service_IntegratedPricingOperationRequest {
    
    $attributes: Service_IntegratedPricingOperationRequestAttributes
    
    
    Body: Service_IntegratedPricingType
    
    
    Headers: Service_IntegratedPricingOperationRequestOperationHeaders
    
}

export interface Service_IntegratedPricingOperationRequestAttributes {
    
}


export interface Service_IntegratedPricingOperationResponseOperationHeaders {
    
    $attributes: Service_IntegratedPricingOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Service_IntegratedPricingOperationResponseOperationHeadersAttributes {
    
}


export interface Service_IntegratedPricingOperationResponse {
    
    $attributes: Service_IntegratedPricingOperationResponseAttributes
    
    
    Body: Service_IntegratedPricingReplyType
    
    
    Headers: Service_IntegratedPricingOperationResponseOperationHeaders
    
}

export interface Service_IntegratedPricingOperationResponseAttributes {
    
}


export interface Service_StandaloneCatalogueOperationRequestOperationHeaders {
    
    $attributes: Service_StandaloneCatalogueOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Service_StandaloneCatalogueOperationRequestOperationHeadersAttributes {
    
}


export interface Service_StandaloneCatalogueOperationRequest {
    
    $attributes: Service_StandaloneCatalogueOperationRequestAttributes
    
    
    Body: Service_StandaloneCatalogueType
    
    
    Headers: Service_StandaloneCatalogueOperationRequestOperationHeaders
    
}

export interface Service_StandaloneCatalogueOperationRequestAttributes {
    
}


export interface Service_StandaloneCatalogueOperationResponseOperationHeaders {
    
    $attributes: Service_StandaloneCatalogueOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Service_StandaloneCatalogueOperationResponseOperationHeadersAttributes {
    
}


export interface Service_StandaloneCatalogueOperationResponse {
    
    $attributes: Service_StandaloneCatalogueOperationResponseAttributes
    
    
    Body: Service_StandaloneCatalogueReplyType
    
    
    Headers: Service_StandaloneCatalogueOperationResponseOperationHeaders
    
}

export interface Service_StandaloneCatalogueOperationResponseAttributes {
    
}


export interface Service_StandalonePricingOperationRequestOperationHeaders {
    
    $attributes: Service_StandalonePricingOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Service_StandalonePricingOperationRequestOperationHeadersAttributes {
    
}


export interface Service_StandalonePricingOperationRequest {
    
    $attributes: Service_StandalonePricingOperationRequestAttributes
    
    
    Body: Service_StandalonePricingType
    
    
    Headers: Service_StandalonePricingOperationRequestOperationHeaders
    
}

export interface Service_StandalonePricingOperationRequestAttributes {
    
}


export interface Service_StandalonePricingOperationResponseOperationHeaders {
    
    $attributes: Service_StandalonePricingOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Service_StandalonePricingOperationResponseOperationHeadersAttributes {
    
}


export interface Service_StandalonePricingOperationResponse {
    
    $attributes: Service_StandalonePricingOperationResponseAttributes
    
    
    Body: Service_StandalonePricingReplyType
    
    
    Headers: Service_StandalonePricingOperationResponseOperationHeaders
    
}

export interface Service_StandalonePricingOperationResponseAttributes {
    
}


export interface Ticket_CreateTSMFromPricingOperationRequestOperationHeaders {
    
    $attributes: Ticket_CreateTSMFromPricingOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Ticket_CreateTSMFromPricingOperationRequestOperationHeadersAttributes {
    
}


export interface Ticket_CreateTSMFromPricingOperationRequest {
    
    $attributes: Ticket_CreateTSMFromPricingOperationRequestAttributes
    
    
    Body: Ticket_CreateTSMFromPricingType
    
    
    Headers: Ticket_CreateTSMFromPricingOperationRequestOperationHeaders
    
}

export interface Ticket_CreateTSMFromPricingOperationRequestAttributes {
    
}


export interface Ticket_CreateTSMFromPricingOperationResponseOperationHeaders {
    
    $attributes: Ticket_CreateTSMFromPricingOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Ticket_CreateTSMFromPricingOperationResponseOperationHeadersAttributes {
    
}


export interface Ticket_CreateTSMFromPricingOperationResponse {
    
    $attributes: Ticket_CreateTSMFromPricingOperationResponseAttributes
    
    
    Body: Ticket_CreateTSMFromPricingReplyType
    
    
    Headers: Ticket_CreateTSMFromPricingOperationResponseOperationHeaders
    
}

export interface Ticket_CreateTSMFromPricingOperationResponseAttributes {
    
}


export interface Ticket_CreateTSTFromPricingOperationRequestOperationHeaders {
    
    $attributes: Ticket_CreateTSTFromPricingOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Ticket_CreateTSTFromPricingOperationRequestOperationHeadersAttributes {
    
}


export interface Ticket_CreateTSTFromPricingOperationRequest {
    
    $attributes: Ticket_CreateTSTFromPricingOperationRequestAttributes
    
    
    Body: Ticket_CreateTSTFromPricingType
    
    
    Headers: Ticket_CreateTSTFromPricingOperationRequestOperationHeaders
    
}

export interface Ticket_CreateTSTFromPricingOperationRequestAttributes {
    
}


export interface Ticket_CreateTSTFromPricingOperationResponseOperationHeaders {
    
    $attributes: Ticket_CreateTSTFromPricingOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Ticket_CreateTSTFromPricingOperationResponseOperationHeadersAttributes {
    
}


export interface Ticket_CreateTSTFromPricingOperationResponse {
    
    $attributes: Ticket_CreateTSTFromPricingOperationResponseAttributes
    
    
    Body: Ticket_CreateTSTFromPricingReplyType
    
    
    Headers: Ticket_CreateTSTFromPricingOperationResponseOperationHeaders
    
}

export interface Ticket_CreateTSTFromPricingOperationResponseAttributes {
    
}


export interface Ticket_DisplayTSMPOperationRequestOperationHeaders {
    
    $attributes: Ticket_DisplayTSMPOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Ticket_DisplayTSMPOperationRequestOperationHeadersAttributes {
    
}


export interface Ticket_DisplayTSMPOperationRequest {
    
    $attributes: Ticket_DisplayTSMPOperationRequestAttributes
    
    
    Body: Ticket_DisplayTSMPType
    
    
    Headers: Ticket_DisplayTSMPOperationRequestOperationHeaders
    
}

export interface Ticket_DisplayTSMPOperationRequestAttributes {
    
}


export interface Ticket_DisplayTSMPOperationResponseOperationHeaders {
    
    $attributes: Ticket_DisplayTSMPOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Ticket_DisplayTSMPOperationResponseOperationHeadersAttributes {
    
}


export interface Ticket_DisplayTSMPOperationResponse {
    
    $attributes: Ticket_DisplayTSMPOperationResponseAttributes
    
    
    Body: Ticket_DisplayTSMPReplyType
    
    
    Headers: Ticket_DisplayTSMPOperationResponseOperationHeaders
    
}

export interface Ticket_DisplayTSMPOperationResponseAttributes {
    
}


export interface Ticket_DisplayTSTOperationRequestOperationHeaders {
    
    $attributes: Ticket_DisplayTSTOperationRequestOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
    
    AMA_SecurityHostedUser: AMA_SecurityHostedUserType
    
}

export interface Ticket_DisplayTSTOperationRequestOperationHeadersAttributes {
    
}


export interface Ticket_DisplayTSTOperationRequest {
    
    $attributes: Ticket_DisplayTSTOperationRequestAttributes
    
    
    Body: Ticket_DisplayTSTType
    
    
    Headers: Ticket_DisplayTSTOperationRequestOperationHeaders
    
}

export interface Ticket_DisplayTSTOperationRequestAttributes {
    
}


export interface Ticket_DisplayTSTOperationResponseOperationHeaders {
    
    $attributes: Ticket_DisplayTSTOperationResponseOperationHeadersAttributes
    
    
    Session: SessionType
    
    
    TransactionFlowLink: TransactionFlowLinkType
    
}

export interface Ticket_DisplayTSTOperationResponseOperationHeadersAttributes {
    
}


export interface Ticket_DisplayTSTOperationResponse {
    
    $attributes: Ticket_DisplayTSTOperationResponseAttributes
    
    
    Body: Ticket_DisplayTSTReplyType
    
    
    Headers: Ticket_DisplayTSTOperationResponseOperationHeaders
    
}

export interface Ticket_DisplayTSTOperationResponseAttributes {
    
}
