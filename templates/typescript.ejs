import * as soap from "soap";

export class <%= service.name %> {
    private wsdlUrl: string

    constructor(wsdlUrl: string) {
        this.wsdlUrl = wsdlUrl;
    }
    <% service.contract.operations.forEach((o) => { %>
    public <%= o.name %>(request: <%= o.input %>): Promise<<%= o.output %>> {
        return new Promise<<%= o.output%>>((resolve, reject) => {
            soap.createClient(this.wsdlUrl, {}, (error, client: any) => {
                if(request.Headers) {
                    client.addSoapHeader(request.Headers, null, null);
                }
                client["<%=o.name%>"](request.Body, (error, result, raw, soapHeaders) => {
                    if(error) {
                        reject(error);
                        return;
                    }
                    let response = { Headers: soapHeaders, Body: result };
                    resolve(response as <%= o.output %>);
                });
            });
        });
    }<% }) %>
}
<% service.types.forEach((t) => { %>
<%= t.documentation ? '// ' + t.documentation : '' %>
export interface <%= t.globalName %><%= t.extends ? ' extends ' + t.extends : ''%> {
    
    $attributes: <%= t.globalName + 'Attributes' %>
    <% t.properties.filter((p)=>{return !p.attribute}).forEach((p) => { %>
    <%= p.documentation ? '// ' + p.documentation : '' %>
    <%= p.name %>: <%- p.array ? `Array<${p.type}>` : p.type %>
    <% }) %>
}

export interface <%= t.globalName + 'Attributes' %><%= t.extends ? ' extends ' + t.extends + 'Attributes' : ''%> {
    <% t.properties.filter((p)=>{return p.attribute}).forEach((p) => { %>
    <%= p.documentation ? '// ' + p.documentation : '' %>
    <%= p.name %>: <%= p.type %>
    <% }) %>
}
<% }); %>